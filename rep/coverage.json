{
  "instrumentation": "node-jscoverage",
  "sloc": 5581,
  "hits": 1897,
  "misses": 3684,
  "coverage": 33.990324314638954,
  "files": [
    {
      "filename": "feedhenry.js",
      "coverage": 81.81818181818183,
      "hits": 63,
      "misses": 14,
      "sloc": 77,
      "source": {
        "1": {
          "source": "var constants = require(\"./modules/constants\");",
          "coverage": 1
        },
        "2": {
          "source": "var events = require(\"./modules/events\");",
          "coverage": 1
        },
        "3": {
          "source": "var logger = require(\"./modules/logger\");",
          "coverage": 1
        },
        "4": {
          "source": "var ajax = require(\"./modules/ajax\");",
          "coverage": 1
        },
        "5": {
          "source": "var events = require(\"./modules/events\");",
          "coverage": 1
        },
        "6": {
          "source": "var cloud = require(\"./modules/waitForCloud\");",
          "coverage": 1
        },
        "7": {
          "source": "var api_act = require(\"./modules/api_act\");",
          "coverage": 1
        },
        "8": {
          "source": "var api_auth = require(\"./modules/api_auth\");",
          "coverage": 1
        },
        "9": {
          "source": "var api_sec = require(\"./modules/api_sec\");",
          "coverage": 1
        },
        "10": {
          "source": "var api_hash = require(\"./modules/api_hash\");",
          "coverage": 1
        },
        "11": {
          "source": "var api_sync = require(\"./modules/sync-cli\");",
          "coverage": 1
        },
        "12": {
          "source": "var api_mbaas = require(\"./modules/api_mbaas\");",
          "coverage": 1
        },
        "13": {
          "source": "var api_cloud = require(\"./modules/api_cloud\");",
          "coverage": 1
        },
        "14": {
          "source": "var api_forms = require(\"./modules/api_forms\");",
          "coverage": 1
        },
        "15": {
          "source": "var fhparams = require(\"./modules/fhparams\");",
          "coverage": 1
        },
        "16": {
          "source": "var appProps = require(\"./modules/appProps\");",
          "coverage": 1
        },
        "17": {
          "source": "var device = require(\"./modules/device\");",
          "coverage": 1
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "var defaultFail = function(msg, error) {",
          "coverage": 1
        },
        "20": {
          "source": "    logger.error(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "21": {
          "source": "};",
          "coverage": ""
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "var addListener = function(type, listener) {",
          "coverage": 1
        },
        "24": {
          "source": "    events.addListener(type, listener);",
          "coverage": 5
        },
        "25": {
          "source": "    if (type === constants.INIT_EVENT) {",
          "coverage": 5
        },
        "26": {
          "source": "        //for fhinit event, need to check the status of cloud and may need to fire the listener immediately.",
          "coverage": ""
        },
        "27": {
          "source": "        if (cloud.isReady()) {",
          "coverage": 4
        },
        "28": {
          "source": "            listener(null, {",
          "coverage": 4
        },
        "29": {
          "source": "                host: cloud.getCloudHostUrl()",
          "coverage": ""
        },
        "30": {
          "source": "            });",
          "coverage": ""
        },
        "31": {
          "source": "        } else if (cloud.getInitError()) {",
          "coverage": 0
        },
        "32": {
          "source": "            listener(cloud.getInitError());",
          "coverage": 0
        },
        "33": {
          "source": "        }",
          "coverage": ""
        },
        "34": {
          "source": "    }",
          "coverage": ""
        },
        "35": {
          "source": "};",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "var once = function(type, listener) {",
          "coverage": 1
        },
        "38": {
          "source": "    if (type === constants.INIT_EVENT &amp;&amp; cloud.isReady()) {",
          "coverage": 0
        },
        "39": {
          "source": "        listener(null, {",
          "coverage": 0
        },
        "40": {
          "source": "            host: cloud.getCloudHostUrl()",
          "coverage": ""
        },
        "41": {
          "source": "        });",
          "coverage": ""
        },
        "42": {
          "source": "    } else if (type === constants.INIT_EVENT &amp;&amp; cloud.getInitError()) {",
          "coverage": 0
        },
        "43": {
          "source": "        listener(cloud.getInitError());",
          "coverage": 0
        },
        "44": {
          "source": "    } else {",
          "coverage": ""
        },
        "45": {
          "source": "        events.once(type, listener);",
          "coverage": 0
        },
        "46": {
          "source": "    }",
          "coverage": ""
        },
        "47": {
          "source": "};",
          "coverage": ""
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "//Legacy shim. Init hapens based on fhconfig.json or, for v2, global var called fh_app_props which is injected as part of the index.html wrapper",
          "coverage": ""
        },
        "50": {
          "source": "var init = function(opts, success, fail) {",
          "coverage": 1
        },
        "51": {
          "source": "    logger.warn(\"$fh.init will be deprecated soon\");",
          "coverage": 1
        },
        "52": {
          "source": "    cloud.ready(function(err, host) {",
          "coverage": 1
        },
        "53": {
          "source": "        if (err) {",
          "coverage": 1
        },
        "54": {
          "source": "            if (typeof fail === \"function\") {",
          "coverage": 0
        },
        "55": {
          "source": "                return fail(err);",
          "coverage": 0
        },
        "56": {
          "source": "            }",
          "coverage": ""
        },
        "57": {
          "source": "        } else {",
          "coverage": ""
        },
        "58": {
          "source": "            if (typeof success === \"function\") {",
          "coverage": 1
        },
        "59": {
          "source": "                success(host.host);",
          "coverage": 1
        },
        "60": {
          "source": "            }",
          "coverage": ""
        },
        "61": {
          "source": "        }",
          "coverage": ""
        },
        "62": {
          "source": "    });",
          "coverage": ""
        },
        "63": {
          "source": "};",
          "coverage": ""
        },
        "64": {
          "source": "",
          "coverage": ""
        },
        "65": {
          "source": "var fh = window.$fh || {};",
          "coverage": 1
        },
        "66": {
          "source": "fh.init = init;",
          "coverage": 1
        },
        "67": {
          "source": "fh.act = api_act;",
          "coverage": 1
        },
        "68": {
          "source": "fh.auth = api_auth;",
          "coverage": 1
        },
        "69": {
          "source": "fh.cloud = api_cloud;",
          "coverage": 1
        },
        "70": {
          "source": "fh.forms = api_forms;",
          "coverage": 1
        },
        "71": {
          "source": "fh.sec = api_sec;",
          "coverage": 1
        },
        "72": {
          "source": "fh.hash = api_hash;",
          "coverage": 1
        },
        "73": {
          "source": "fh.sync = api_sync;",
          "coverage": 1
        },
        "74": {
          "source": "fh.ajax = fh.__ajax = ajax;",
          "coverage": 1
        },
        "75": {
          "source": "fh.mbaas = api_mbaas;",
          "coverage": 1
        },
        "76": {
          "source": "fh._getDeviceId = device.getDeviceId;",
          "coverage": 1
        },
        "77": {
          "source": "fh.fh_timeout = 60000; //keep backward compatible",
          "coverage": 1
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "fh.getCloudURL = function() {",
          "coverage": 1
        },
        "80": {
          "source": "    return cloud.getCloudHostUrl();",
          "coverage": 3
        },
        "81": {
          "source": "};",
          "coverage": ""
        },
        "82": {
          "source": "",
          "coverage": ""
        },
        "83": {
          "source": "fh.getFHParams = function() {",
          "coverage": 1
        },
        "84": {
          "source": "    return fhparams.buildFHParams();",
          "coverage": 0
        },
        "85": {
          "source": "};",
          "coverage": ""
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "//events",
          "coverage": ""
        },
        "88": {
          "source": "fh.addListener = addListener;",
          "coverage": 1
        },
        "89": {
          "source": "fh.on = addListener;",
          "coverage": 1
        },
        "90": {
          "source": "fh.once = once;",
          "coverage": 1
        },
        "91": {
          "source": "var methods = [\"removeListener\", \"removeAllListeners\", \"setMaxListeners\", \"listeners\", \"emit\"];",
          "coverage": 1
        },
        "92": {
          "source": "for (var i = 0; i &lt; methods.length; i++) {",
          "coverage": 1
        },
        "93": {
          "source": "    fh[methods[i]] = events[methods[i]];",
          "coverage": 5
        },
        "94": {
          "source": "}",
          "coverage": ""
        },
        "95": {
          "source": "",
          "coverage": ""
        },
        "96": {
          "source": "//keep backward compatibility",
          "coverage": ""
        },
        "97": {
          "source": "fh.on(constants.INIT_EVENT, function(err, host) {",
          "coverage": 1
        },
        "98": {
          "source": "    if (err) {",
          "coverage": 8
        },
        "99": {
          "source": "        fh.cloud_props = {};",
          "coverage": 0
        },
        "100": {
          "source": "        fh.app_props = {};",
          "coverage": 0
        },
        "101": {
          "source": "    } else {",
          "coverage": ""
        },
        "102": {
          "source": "        fh.cloud_props = {",
          "coverage": 8
        },
        "103": {
          "source": "            hosts: {",
          "coverage": ""
        },
        "104": {
          "source": "                url: host.host",
          "coverage": ""
        },
        "105": {
          "source": "            }",
          "coverage": ""
        },
        "106": {
          "source": "        };",
          "coverage": ""
        },
        "107": {
          "source": "        fh.app_props = appProps.getAppProps();",
          "coverage": 8
        },
        "108": {
          "source": "    }",
          "coverage": ""
        },
        "109": {
          "source": "});",
          "coverage": ""
        },
        "110": {
          "source": "",
          "coverage": ""
        },
        "111": {
          "source": "//keep backward compatibility",
          "coverage": ""
        },
        "112": {
          "source": "fh.on(constants.INTERNAL_CONFIG_LOADED_EVENT, function(err, host) {",
          "coverage": 1
        },
        "113": {
          "source": "    if (err) {",
          "coverage": 7
        },
        "114": {
          "source": "        fh.app_props = {};",
          "coverage": 0
        },
        "115": {
          "source": "    } else {",
          "coverage": ""
        },
        "116": {
          "source": "        fh.app_props = appProps.getAppProps();",
          "coverage": 7
        },
        "117": {
          "source": "    }",
          "coverage": ""
        },
        "118": {
          "source": "",
          "coverage": ""
        },
        "119": {
          "source": "    // Emit config loaded event - appprops set at this point",
          "coverage": ""
        },
        "120": {
          "source": "    // V2 legacy SDK uses this to know when to fire $fh.ready (i.e. appprops is now set)",
          "coverage": ""
        },
        "121": {
          "source": "    events.emit(constants.CONFIG_LOADED_EVENT, null);",
          "coverage": 7
        },
        "122": {
          "source": "});",
          "coverage": ""
        },
        "123": {
          "source": "",
          "coverage": ""
        },
        "124": {
          "source": "//for test",
          "coverage": ""
        },
        "125": {
          "source": "fh.reset = cloud.reset;",
          "coverage": 1
        },
        "126": {
          "source": "//we should really stop polluting global name space. Ideally we should ask browserify to use \"$fh\" when umd-fy the module. However, \"$\" is not allowed as the standard module name.",
          "coverage": ""
        },
        "127": {
          "source": "//So, we assign $fh to the window name space directly here. (otherwise, we have to fork the grunt browserify plugin, then fork browerify and the dependent umd module, really not worthing the effort).",
          "coverage": ""
        },
        "128": {
          "source": "window.$fh = fh;",
          "coverage": 1
        },
        "129": {
          "source": "module.exports = fh;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/XDomainRequestWrapper.js",
      "coverage": 17.94871794871795,
      "hits": 7,
      "misses": 32,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var XDomainRequestWrapper = function(xdr){",
          "coverage": 2
        },
        "2": {
          "source": "  this.xdr = xdr;",
          "coverage": 0
        },
        "3": {
          "source": "  this.isWrapper = true;",
          "coverage": 0
        },
        "4": {
          "source": "  this.readyState = 0;",
          "coverage": 0
        },
        "5": {
          "source": "  this.onreadystatechange = null;",
          "coverage": 0
        },
        "6": {
          "source": "  this.status = 0;",
          "coverage": 0
        },
        "7": {
          "source": "  this.statusText = \"\";",
          "coverage": 0
        },
        "8": {
          "source": "  this.responseText = \"\";",
          "coverage": 0
        },
        "9": {
          "source": "  var self = this;",
          "coverage": 0
        },
        "10": {
          "source": "  this.xdr.onload = function(){",
          "coverage": 0
        },
        "11": {
          "source": "      self.readyState = 4;",
          "coverage": 0
        },
        "12": {
          "source": "      self.status = 200;",
          "coverage": 0
        },
        "13": {
          "source": "      self.statusText = \"\";",
          "coverage": 0
        },
        "14": {
          "source": "      self.responseText = self.xdr.responseText;",
          "coverage": 0
        },
        "15": {
          "source": "      if(self.onreadystatechange){",
          "coverage": 0
        },
        "16": {
          "source": "          self.onreadystatechange();",
          "coverage": 0
        },
        "17": {
          "source": "      }",
          "coverage": ""
        },
        "18": {
          "source": "  };",
          "coverage": ""
        },
        "19": {
          "source": "  this.xdr.onerror = function(){",
          "coverage": 0
        },
        "20": {
          "source": "      if(self.onerror){",
          "coverage": 0
        },
        "21": {
          "source": "          self.onerror();",
          "coverage": 0
        },
        "22": {
          "source": "      }",
          "coverage": ""
        },
        "23": {
          "source": "      self.readyState = 4;",
          "coverage": 0
        },
        "24": {
          "source": "      self.status = 0;",
          "coverage": 0
        },
        "25": {
          "source": "      self.statusText = \"\";",
          "coverage": 0
        },
        "26": {
          "source": "      if(self.onreadystatechange){",
          "coverage": 0
        },
        "27": {
          "source": "          self.onreadystatechange();",
          "coverage": 0
        },
        "28": {
          "source": "      }",
          "coverage": ""
        },
        "29": {
          "source": "  };",
          "coverage": ""
        },
        "30": {
          "source": "  this.xdr.ontimeout = function(){",
          "coverage": 0
        },
        "31": {
          "source": "      self.readyState = 4;",
          "coverage": 0
        },
        "32": {
          "source": "      self.status = 408;",
          "coverage": 0
        },
        "33": {
          "source": "      self.statusText = \"timeout\";",
          "coverage": 0
        },
        "34": {
          "source": "      if(self.onreadystatechange){",
          "coverage": 0
        },
        "35": {
          "source": "          self.onreadystatechange();",
          "coverage": 0
        },
        "36": {
          "source": "      }",
          "coverage": ""
        },
        "37": {
          "source": "  };",
          "coverage": ""
        },
        "38": {
          "source": "};",
          "coverage": ""
        },
        "39": {
          "source": "",
          "coverage": ""
        },
        "40": {
          "source": "XDomainRequestWrapper.prototype.open = function(method, url, asyn){",
          "coverage": 2
        },
        "41": {
          "source": "  this.xdr.open(method, url);",
          "coverage": 0
        },
        "42": {
          "source": "};",
          "coverage": ""
        },
        "43": {
          "source": "",
          "coverage": ""
        },
        "44": {
          "source": "XDomainRequestWrapper.prototype.send = function(data){",
          "coverage": 2
        },
        "45": {
          "source": "  this.xdr.send(data);",
          "coverage": 0
        },
        "46": {
          "source": "};",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "XDomainRequestWrapper.prototype.abort = function(){",
          "coverage": 2
        },
        "49": {
          "source": "  this.xdr.abort();",
          "coverage": 0
        },
        "50": {
          "source": "};",
          "coverage": ""
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "XDomainRequestWrapper.prototype.setRequestHeader = function(n, v){",
          "coverage": 2
        },
        "53": {
          "source": "  //not supported by xdr",
          "coverage": ""
        },
        "54": {
          "source": "  //Good doc on limitations of XDomainRequest http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx",
          "coverage": ""
        },
        "55": {
          "source": "  //XDomainRequest doesn't allow setting custom request headers. But it is the only available option to do CORS requests in IE8 &amp; 9. In IE10, they finally start to use standard XMLHttpRequest.",
          "coverage": ""
        },
        "56": {
          "source": "  //To support FH auth tokens in IE8&amp;9, we have to find a different way of doing it.",
          "coverage": ""
        },
        "57": {
          "source": "};",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "XDomainRequestWrapper.prototype.getResponseHeader = function(n){",
          "coverage": 2
        },
        "60": {
          "source": "  //not supported by xdr",
          "coverage": ""
        },
        "61": {
          "source": "};",
          "coverage": ""
        },
        "62": {
          "source": "",
          "coverage": ""
        },
        "63": {
          "source": "module.exports = XDomainRequestWrapper;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/ajax.js",
      "coverage": 72.91666666666666,
      "hits": 140,
      "misses": 52,
      "sloc": 192,
      "source": {
        "1": {
          "source": "//a shameless copy from https://github.com/ForbesLindesay/ajax/blob/master/index.js.",
          "coverage": ""
        },
        "2": {
          "source": "//it has the same methods and config options as jQuery/zeptojs but very light weight. see http://api.jquery.com/jQuery.ajax/",
          "coverage": ""
        },
        "3": {
          "source": "//a few small changes are made for supporting IE 8 and other features:",
          "coverage": ""
        },
        "4": {
          "source": "//1. use getXhr function to replace the default XMLHttpRequest implementation for supporting IE8",
          "coverage": ""
        },
        "5": {
          "source": "//2. Integrate with events emitter. So to subscribe ajax events, you can do $fh.on(\"ajaxStart\", handler). See http://api.jquery.com/Ajax_Events/ for full list of events",
          "coverage": ""
        },
        "6": {
          "source": "//3. allow passing xhr factory method through options: e.g. $fh.ajax({xhr: function(){/*own implementation of xhr*/}});",
          "coverage": ""
        },
        "7": {
          "source": "//4. Use fh_timeout value as the default timeout",
          "coverage": ""
        },
        "8": {
          "source": "//5. an extra option called \"tryJSONP\" to allow try the same call with JSONP if normal CORS failed - should only be used internally",
          "coverage": ""
        },
        "9": {
          "source": "//6. for jsonp, allow to specify the callback query param name using the \"jsonp\" option",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "var eventsHandler = require(\"./events\");",
          "coverage": 2
        },
        "12": {
          "source": "var XDomainRequestWrapper = require(\"./XDomainRequestWrapper\");",
          "coverage": 2
        },
        "13": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "var type",
          "coverage": 2
        },
        "16": {
          "source": "try {",
          "coverage": 2
        },
        "17": {
          "source": "  type = require('type-of')",
          "coverage": 2
        },
        "18": {
          "source": "} catch (ex) {",
          "coverage": ""
        },
        "19": {
          "source": "  //hide from browserify",
          "coverage": ""
        },
        "20": {
          "source": "  var r = require",
          "coverage": 0
        },
        "21": {
          "source": "  type = r('type')",
          "coverage": 0
        },
        "22": {
          "source": "}",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "var jsonpID = 0,",
          "coverage": 2
        },
        "25": {
          "source": "  document = window.document,",
          "coverage": ""
        },
        "26": {
          "source": "  key,",
          "coverage": ""
        },
        "27": {
          "source": "  name,",
          "coverage": ""
        },
        "28": {
          "source": "  rscript = /&lt;script\\b[^&lt;]*(?:(?!&lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi,",
          "coverage": ""
        },
        "29": {
          "source": "  scriptTypeRE = /^(?:text|application)\\/javascript/i,",
          "coverage": ""
        },
        "30": {
          "source": "  xmlTypeRE = /^(?:text|application)\\/xml/i,",
          "coverage": ""
        },
        "31": {
          "source": "  jsonType = 'application/json',",
          "coverage": ""
        },
        "32": {
          "source": "  htmlType = 'text/html',",
          "coverage": ""
        },
        "33": {
          "source": "  blankRE = /^\\s*$/;",
          "coverage": ""
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "var ajax = module.exports = function (options) {",
          "coverage": 2
        },
        "36": {
          "source": "  var settings = extend({}, options || {})",
          "coverage": 54
        },
        "37": {
          "source": "  //keep backward compatibility",
          "coverage": ""
        },
        "38": {
          "source": "  if(window &amp;&amp; window.$fh &amp;&amp; typeof window.$fh.fh_timeout === \"number\"){",
          "coverage": 54
        },
        "39": {
          "source": "    ajax.settings.timeout = window.$fh.fh_timeout;",
          "coverage": 54
        },
        "40": {
          "source": "  }",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "  for (key in ajax.settings)",
          "coverage": 54
        },
        "43": {
          "source": "    if (settings[key] === undefined) settings[key] = ajax.settings[key]",
          "coverage": 996
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "  ajaxStart(settings)",
          "coverage": 54
        },
        "46": {
          "source": "",
          "coverage": ""
        },
        "47": {
          "source": "  if (!settings.crossDomain) {",
          "coverage": 54
        },
        "48": {
          "source": "    settings.crossDomain = /^([\\w-]+:)?\\/\\/([^\\/]+)/.test(settings.url) &amp;&amp; (RegExp.$1 != window.location.protocol || RegExp.$2 != window.location.host)",
          "coverage": 50
        },
        "49": {
          "source": "  } ",
          "coverage": ""
        },
        "50": {
          "source": "",
          "coverage": ""
        },
        "51": {
          "source": "  var dataType = settings.dataType,",
          "coverage": 54
        },
        "52": {
          "source": "    hasPlaceholder = /=\\?/.test(settings.url)",
          "coverage": ""
        },
        "53": {
          "source": "    if (dataType == 'jsonp' || hasPlaceholder) {",
          "coverage": 54
        },
        "54": {
          "source": "      if (!hasPlaceholder) {",
          "coverage": 4
        },
        "55": {
          "source": "        settings.url = appendQuery(settings.url, (settings.jsonp? settings.jsonp: '_callback') + '=?');",
          "coverage": 4
        },
        "56": {
          "source": "      }",
          "coverage": ""
        },
        "57": {
          "source": "      return ajax.JSONP(settings)",
          "coverage": 4
        },
        "58": {
          "source": "    }",
          "coverage": ""
        },
        "59": {
          "source": "",
          "coverage": ""
        },
        "60": {
          "source": "  if (!settings.url) settings.url = window.location.toString()",
          "coverage": 50
        },
        "61": {
          "source": "  serializeData(settings)",
          "coverage": 50
        },
        "62": {
          "source": "",
          "coverage": ""
        },
        "63": {
          "source": "  var mime = settings.accepts[dataType],",
          "coverage": 50
        },
        "64": {
          "source": "    baseHeaders = {},",
          "coverage": ""
        },
        "65": {
          "source": "    protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,",
          "coverage": ""
        },
        "66": {
          "source": "    xhr = settings.xhr(settings.crossDomain),",
          "coverage": ""
        },
        "67": {
          "source": "    abortTimeout = null;",
          "coverage": ""
        },
        "68": {
          "source": "",
          "coverage": ""
        },
        "69": {
          "source": "  if (!settings.crossDomain) baseHeaders['X-Requested-With'] = 'XMLHttpRequest'",
          "coverage": 53
        },
        "70": {
          "source": "  if (mime) {",
          "coverage": 50
        },
        "71": {
          "source": "    baseHeaders['Accept'] = mime",
          "coverage": 50
        },
        "72": {
          "source": "    if (mime.indexOf(',') &gt; -1) mime = mime.split(',', 2)[0]",
          "coverage": 50
        },
        "73": {
          "source": "    xhr.overrideMimeType &amp;&amp; xhr.overrideMimeType(mime)",
          "coverage": 50
        },
        "74": {
          "source": "  }",
          "coverage": ""
        },
        "75": {
          "source": "  if (settings.contentType || (settings.data &amp;&amp; !settings.formdata &amp;&amp; settings.type.toUpperCase() != 'GET'))",
          "coverage": 50
        },
        "76": {
          "source": "    baseHeaders['Content-Type'] = (settings.contentType || 'application/x-www-form-urlencoded')",
          "coverage": 48
        },
        "77": {
          "source": "  settings.headers = extend(baseHeaders, settings.headers || {})",
          "coverage": 50
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "  if (typeof Titanium !== 'undefined') {",
          "coverage": 50
        },
        "80": {
          "source": "    xhr.onerror  = function(){",
          "coverage": 0
        },
        "81": {
          "source": "      if (!abortTimeout){",
          "coverage": 0
        },
        "82": {
          "source": "        return;",
          "coverage": 0
        },
        "83": {
          "source": "      }",
          "coverage": ""
        },
        "84": {
          "source": "      clearTimeout(abortTimeout);",
          "coverage": 0
        },
        "85": {
          "source": "      ajaxError(null, 'error', xhr, settings);",
          "coverage": 0
        },
        "86": {
          "source": "    };",
          "coverage": ""
        },
        "87": {
          "source": "  }",
          "coverage": ""
        },
        "88": {
          "source": "",
          "coverage": ""
        },
        "89": {
          "source": "  xhr.onreadystatechange = function () {",
          "coverage": 50
        },
        "90": {
          "source": "",
          "coverage": ""
        },
        "91": {
          "source": "    if (xhr.readyState == 4) {",
          "coverage": 789
        },
        "92": {
          "source": "      clearTimeout(abortTimeout)",
          "coverage": 50
        },
        "93": {
          "source": "      abortTimeout = undefined;",
          "coverage": 50
        },
        "94": {
          "source": "      var result, error = false",
          "coverage": 50
        },
        "95": {
          "source": "      if(settings.tryJSONP){",
          "coverage": 50
        },
        "96": {
          "source": "        //check if the request has fail. In some cases, we may want to try jsonp as well. Again, FH only...",
          "coverage": ""
        },
        "97": {
          "source": "        if(xhr.status === 0 &amp;&amp; settings.crossDomain &amp;&amp; !xhr.isTimeout &amp;&amp;  protocol != 'file:'){",
          "coverage": 10
        },
        "98": {
          "source": "          logger.debug(\"retry ajax call with jsonp\")",
          "coverage": 4
        },
        "99": {
          "source": "          settings.type = \"GET\";",
          "coverage": 4
        },
        "100": {
          "source": "          settings.dataType = \"jsonp\";",
          "coverage": 4
        },
        "101": {
          "source": "          settings.data = \"_jsonpdata=\" + settings.data;",
          "coverage": 4
        },
        "102": {
          "source": "          return ajax(settings);",
          "coverage": 4
        },
        "103": {
          "source": "        }",
          "coverage": ""
        },
        "104": {
          "source": "      }",
          "coverage": ""
        },
        "105": {
          "source": "      if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304 || (xhr.status == 0 &amp;&amp; protocol == 'file:')) {",
          "coverage": 46
        },
        "106": {
          "source": "        dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'))",
          "coverage": 33
        },
        "107": {
          "source": "        result = xhr.responseText",
          "coverage": 33
        },
        "108": {
          "source": "        logger.debug(\"ajax response :: status = \" + xhr.status + \" :: body = \" + result)",
          "coverage": 33
        },
        "109": {
          "source": "",
          "coverage": ""
        },
        "110": {
          "source": "        try {",
          "coverage": 33
        },
        "111": {
          "source": "          if (dataType == 'script')(1, eval)(result)",
          "coverage": 33
        },
        "112": {
          "source": "          else if (dataType == 'xml') result = xhr.responseXML",
          "coverage": 33
        },
        "113": {
          "source": "          else if (dataType == 'json') result = blankRE.test(result) ? null : JSON.parse(result)",
          "coverage": 66
        },
        "114": {
          "source": "        } catch (e) {",
          "coverage": ""
        },
        "115": {
          "source": "          error = e",
          "coverage": 0
        },
        "116": {
          "source": "        }",
          "coverage": ""
        },
        "117": {
          "source": "",
          "coverage": ""
        },
        "118": {
          "source": "        if (error) {",
          "coverage": 33
        },
        "119": {
          "source": "          logger.debug(\"ajax error\", error);",
          "coverage": 0
        },
        "120": {
          "source": "          ajaxError(error, 'parsererror', xhr, settings)",
          "coverage": 0
        },
        "121": {
          "source": "        }",
          "coverage": ""
        },
        "122": {
          "source": "        else ajaxSuccess(result, xhr, settings)",
          "coverage": 33
        },
        "123": {
          "source": "      } else {",
          "coverage": ""
        },
        "124": {
          "source": "        ajaxError(null, 'error', xhr, settings)",
          "coverage": 13
        },
        "125": {
          "source": "      }",
          "coverage": ""
        },
        "126": {
          "source": "    }",
          "coverage": ""
        },
        "127": {
          "source": "  }",
          "coverage": ""
        },
        "128": {
          "source": "",
          "coverage": ""
        },
        "129": {
          "source": "  var async = 'async' in settings ? settings.async : true",
          "coverage": 50
        },
        "130": {
          "source": "  logger.debug(\"ajax call settings\", settings)",
          "coverage": 50
        },
        "131": {
          "source": "  xhr.open(settings.type, settings.url, async)",
          "coverage": 50
        },
        "132": {
          "source": "",
          "coverage": ""
        },
        "133": {
          "source": "  for (name in settings.headers) xhr.setRequestHeader(name, settings.headers[name])",
          "coverage": 151
        },
        "134": {
          "source": "",
          "coverage": ""
        },
        "135": {
          "source": "  if (ajaxBeforeSend(xhr, settings) === false) {",
          "coverage": 50
        },
        "136": {
          "source": "    logger.debug(\"ajax call is aborted due to ajaxBeforeSend\")",
          "coverage": 0
        },
        "137": {
          "source": "    xhr.abort()",
          "coverage": 0
        },
        "138": {
          "source": "    return false",
          "coverage": 0
        },
        "139": {
          "source": "  }",
          "coverage": ""
        },
        "140": {
          "source": "",
          "coverage": ""
        },
        "141": {
          "source": "  if (settings.timeout &gt; 0) abortTimeout = setTimeout(function () {",
          "coverage": 100
        },
        "142": {
          "source": "    logger.debug(\"ajax call timed out\")",
          "coverage": 0
        },
        "143": {
          "source": "    xhr.onreadystatechange = empty",
          "coverage": 0
        },
        "144": {
          "source": "    xhr.abort()",
          "coverage": 0
        },
        "145": {
          "source": "    xhr.isTimeout = true",
          "coverage": 0
        },
        "146": {
          "source": "    ajaxError(null, 'timeout', xhr, settings)",
          "coverage": 0
        },
        "147": {
          "source": "  }, settings.timeout)",
          "coverage": ""
        },
        "148": {
          "source": "",
          "coverage": ""
        },
        "149": {
          "source": "  // avoid sending empty string (#319)",
          "coverage": ""
        },
        "150": {
          "source": "  xhr.send(settings.data ? settings.data : null)",
          "coverage": 50
        },
        "151": {
          "source": "  return xhr",
          "coverage": 50
        },
        "152": {
          "source": "}",
          "coverage": ""
        },
        "153": {
          "source": "",
          "coverage": ""
        },
        "154": {
          "source": "",
          "coverage": ""
        },
        "155": {
          "source": "// trigger a custom event and return true",
          "coverage": ""
        },
        "156": {
          "source": "function triggerAndReturn(context, eventName, data) {",
          "coverage": 2
        },
        "157": {
          "source": "  eventsHandler.emit(eventName, data);",
          "coverage": 159
        },
        "158": {
          "source": "  return true;",
          "coverage": 159
        },
        "159": {
          "source": "}",
          "coverage": ""
        },
        "160": {
          "source": "",
          "coverage": ""
        },
        "161": {
          "source": "// trigger an Ajax \"global\" event",
          "coverage": ""
        },
        "162": {
          "source": "function triggerGlobal(settings, context, eventName, data) {",
          "coverage": 2
        },
        "163": {
          "source": "  if (settings.global) return triggerAndReturn(context || document, eventName, data)",
          "coverage": 318
        },
        "164": {
          "source": "}",
          "coverage": ""
        },
        "165": {
          "source": "",
          "coverage": ""
        },
        "166": {
          "source": "// Number of active Ajax requests",
          "coverage": ""
        },
        "167": {
          "source": "ajax.active = 0",
          "coverage": 2
        },
        "168": {
          "source": "",
          "coverage": ""
        },
        "169": {
          "source": "function ajaxStart(settings) {",
          "coverage": 2
        },
        "170": {
          "source": "  if (settings.global &amp;&amp; ajax.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')",
          "coverage": 61
        },
        "171": {
          "source": "}",
          "coverage": ""
        },
        "172": {
          "source": "",
          "coverage": ""
        },
        "173": {
          "source": "function ajaxStop(settings) {",
          "coverage": 2
        },
        "174": {
          "source": "  if (settings.global &amp;&amp; !(--ajax.active)) triggerGlobal(settings, null, 'ajaxStop')",
          "coverage": 56
        },
        "175": {
          "source": "}",
          "coverage": ""
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "// triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable",
          "coverage": ""
        },
        "178": {
          "source": "function ajaxBeforeSend(xhr, settings) {",
          "coverage": 2
        },
        "179": {
          "source": "  var context = settings.context",
          "coverage": 50
        },
        "180": {
          "source": "  if (settings.beforeSend.call(context, xhr, settings) === false)",
          "coverage": 50
        },
        "181": {
          "source": "    return false",
          "coverage": 0
        },
        "182": {
          "source": "",
          "coverage": ""
        },
        "183": {
          "source": "  triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])",
          "coverage": 50
        },
        "184": {
          "source": "}",
          "coverage": ""
        },
        "185": {
          "source": "",
          "coverage": ""
        },
        "186": {
          "source": "function ajaxSuccess(data, xhr, settings) {",
          "coverage": 2
        },
        "187": {
          "source": "  var context = settings.context,",
          "coverage": 33
        },
        "188": {
          "source": "    status = 'success'",
          "coverage": ""
        },
        "189": {
          "source": "  settings.success.call(context, data, status, xhr)",
          "coverage": 33
        },
        "190": {
          "source": "  triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])",
          "coverage": 33
        },
        "191": {
          "source": "  ajaxComplete(status, xhr, settings)",
          "coverage": 33
        },
        "192": {
          "source": "}",
          "coverage": ""
        },
        "193": {
          "source": "// type: \"timeout\", \"error\", \"abort\", \"parsererror\"",
          "coverage": ""
        },
        "194": {
          "source": "function ajaxError(error, type, xhr, settings) {",
          "coverage": 2
        },
        "195": {
          "source": "  var context = settings.context",
          "coverage": 13
        },
        "196": {
          "source": "  settings.error.call(context, xhr, type, error)",
          "coverage": 13
        },
        "197": {
          "source": "  triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error])",
          "coverage": 13
        },
        "198": {
          "source": "  ajaxComplete(type, xhr, settings)",
          "coverage": 13
        },
        "199": {
          "source": "}",
          "coverage": ""
        },
        "200": {
          "source": "// status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"",
          "coverage": ""
        },
        "201": {
          "source": "function ajaxComplete(status, xhr, settings) {",
          "coverage": 2
        },
        "202": {
          "source": "  var context = settings.context",
          "coverage": 50
        },
        "203": {
          "source": "  settings.complete.call(context, xhr, status)",
          "coverage": 50
        },
        "204": {
          "source": "  triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])",
          "coverage": 50
        },
        "205": {
          "source": "  ajaxStop(settings)",
          "coverage": 50
        },
        "206": {
          "source": "}",
          "coverage": ""
        },
        "207": {
          "source": "",
          "coverage": ""
        },
        "208": {
          "source": "// Empty function, used as default callback",
          "coverage": ""
        },
        "209": {
          "source": "function empty() {}",
          "coverage": 2
        },
        "210": {
          "source": "",
          "coverage": ""
        },
        "211": {
          "source": "ajax.JSONP = function (options) {",
          "coverage": 2
        },
        "212": {
          "source": "  if (!('type' in options)) return ajax(options)",
          "coverage": 4
        },
        "213": {
          "source": "",
          "coverage": ""
        },
        "214": {
          "source": "  var callbackName = 'jsonp' + (++jsonpID),",
          "coverage": 4
        },
        "215": {
          "source": "    script = document.createElement('script'),",
          "coverage": ""
        },
        "216": {
          "source": "    abort = function () {",
          "coverage": ""
        },
        "217": {
          "source": "      //todo: remove script",
          "coverage": ""
        },
        "218": {
          "source": "      //$(script).remove()",
          "coverage": ""
        },
        "219": {
          "source": "      if (callbackName in window) window[callbackName] = empty",
          "coverage": 8
        },
        "220": {
          "source": "      ajaxComplete('abort', xhr, options)",
          "coverage": 4
        },
        "221": {
          "source": "    },",
          "coverage": ""
        },
        "222": {
          "source": "    xhr = {",
          "coverage": ""
        },
        "223": {
          "source": "      abort: abort",
          "coverage": ""
        },
        "224": {
          "source": "    }, abortTimeout,",
          "coverage": ""
        },
        "225": {
          "source": "    head = document.getElementsByTagName(\"head\")[0] || document.documentElement",
          "coverage": ""
        },
        "226": {
          "source": "",
          "coverage": ""
        },
        "227": {
          "source": "  if (options.error) script.onerror = function () {",
          "coverage": 8
        },
        "228": {
          "source": "    xhr.abort()",
          "coverage": 4
        },
        "229": {
          "source": "    options.error()",
          "coverage": 4
        },
        "230": {
          "source": "  }",
          "coverage": ""
        },
        "231": {
          "source": "",
          "coverage": ""
        },
        "232": {
          "source": "  window[callbackName] = function (data) {",
          "coverage": 4
        },
        "233": {
          "source": "    clearTimeout(abortTimeout)",
          "coverage": 0
        },
        "234": {
          "source": "    abortTimeout = undefined;",
          "coverage": 0
        },
        "235": {
          "source": "    //todo: remove script",
          "coverage": ""
        },
        "236": {
          "source": "    //$(script).remove()",
          "coverage": ""
        },
        "237": {
          "source": "    delete window[callbackName]",
          "coverage": 0
        },
        "238": {
          "source": "    ajaxSuccess(data, xhr, options)",
          "coverage": 0
        },
        "239": {
          "source": "  }",
          "coverage": ""
        },
        "240": {
          "source": "",
          "coverage": ""
        },
        "241": {
          "source": "  serializeData(options)",
          "coverage": 4
        },
        "242": {
          "source": "  script.src = options.url.replace(/=\\?/, '=' + callbackName)",
          "coverage": 4
        },
        "243": {
          "source": "",
          "coverage": ""
        },
        "244": {
          "source": "  // Use insertBefore instead of appendChild to circumvent an IE6 bug.",
          "coverage": ""
        },
        "245": {
          "source": "  // This arises when a base node is used (see jQuery bugs #2709 and #4378).",
          "coverage": ""
        },
        "246": {
          "source": "  head.insertBefore(script, head.firstChild);",
          "coverage": 4
        },
        "247": {
          "source": "",
          "coverage": ""
        },
        "248": {
          "source": "  if (options.timeout &gt; 0) abortTimeout = setTimeout(function () {",
          "coverage": 8
        },
        "249": {
          "source": "    xhr.abort()",
          "coverage": 0
        },
        "250": {
          "source": "    ajaxComplete('timeout', xhr, options)",
          "coverage": 0
        },
        "251": {
          "source": "  }, options.timeout)",
          "coverage": ""
        },
        "252": {
          "source": "",
          "coverage": ""
        },
        "253": {
          "source": "  return xhr",
          "coverage": 4
        },
        "254": {
          "source": "}",
          "coverage": ""
        },
        "255": {
          "source": "",
          "coverage": ""
        },
        "256": {
          "source": "function isIE(){",
          "coverage": 2
        },
        "257": {
          "source": "  var ie = false;",
          "coverage": 50
        },
        "258": {
          "source": "  if(navigator.userAgent &amp;&amp; navigator.userAgent.indexOf(\"MSIE\") &gt;=0 ){",
          "coverage": 50
        },
        "259": {
          "source": "    ie = true;",
          "coverage": 0
        },
        "260": {
          "source": "  }",
          "coverage": ""
        },
        "261": {
          "source": "  return ie;",
          "coverage": 50
        },
        "262": {
          "source": "}",
          "coverage": ""
        },
        "263": {
          "source": "",
          "coverage": ""
        },
        "264": {
          "source": "function getXhr(crossDomain){",
          "coverage": 2
        },
        "265": {
          "source": "  var xhr = null;",
          "coverage": 50
        },
        "266": {
          "source": "  //always use XMLHttpRequest if available",
          "coverage": ""
        },
        "267": {
          "source": "  if(window.XMLHttpRequest){",
          "coverage": 50
        },
        "268": {
          "source": "    xhr = new XMLHttpRequest();",
          "coverage": 50
        },
        "269": {
          "source": "  }",
          "coverage": ""
        },
        "270": {
          "source": "  //for IE8 only. Need to make sure it's not used when running inside Cordova.",
          "coverage": ""
        },
        "271": {
          "source": "  if(isIE() &amp;&amp; (crossDomain === true) &amp;&amp; typeof window.XDomainRequest !== \"undefined\" &amp;&amp; typeof window.cordova === \"undefined\"){",
          "coverage": 50
        },
        "272": {
          "source": "    xhr = new XDomainRequestWrapper(new XDomainRequest());",
          "coverage": 0
        },
        "273": {
          "source": "  }",
          "coverage": ""
        },
        "274": {
          "source": "  // For Titanium SDK",
          "coverage": ""
        },
        "275": {
          "source": "  if (typeof Titanium !== 'undefined'){",
          "coverage": 50
        },
        "276": {
          "source": "    var parms = {};",
          "coverage": 0
        },
        "277": {
          "source": "    if(ajax.settings &amp;&amp; ajax.settings.timeout){",
          "coverage": 0
        },
        "278": {
          "source": "      params.timeout = ajax.settings.timeout;",
          "coverage": 0
        },
        "279": {
          "source": "    }",
          "coverage": ""
        },
        "280": {
          "source": "    xhr = Titanium.Network.createHTTPClient(params);",
          "coverage": 0
        },
        "281": {
          "source": "  }",
          "coverage": ""
        },
        "282": {
          "source": "",
          "coverage": ""
        },
        "283": {
          "source": "  return xhr;",
          "coverage": 50
        },
        "284": {
          "source": "}",
          "coverage": ""
        },
        "285": {
          "source": "",
          "coverage": ""
        },
        "286": {
          "source": "ajax.settings = {",
          "coverage": 2
        },
        "287": {
          "source": "  // Default type of request",
          "coverage": ""
        },
        "288": {
          "source": "  type: 'GET',",
          "coverage": ""
        },
        "289": {
          "source": "  // Callback that is executed before request",
          "coverage": ""
        },
        "290": {
          "source": "  beforeSend: empty,",
          "coverage": ""
        },
        "291": {
          "source": "  // Callback that is executed if the request succeeds",
          "coverage": ""
        },
        "292": {
          "source": "  success: empty,",
          "coverage": ""
        },
        "293": {
          "source": "  // Callback that is executed the the server drops error",
          "coverage": ""
        },
        "294": {
          "source": "  error: empty,",
          "coverage": ""
        },
        "295": {
          "source": "  // Callback that is executed on request complete (both: error and success)",
          "coverage": ""
        },
        "296": {
          "source": "  complete: empty,",
          "coverage": ""
        },
        "297": {
          "source": "  // The context for the callbacks",
          "coverage": ""
        },
        "298": {
          "source": "  context: null,",
          "coverage": ""
        },
        "299": {
          "source": "  // Whether to trigger \"global\" Ajax events",
          "coverage": ""
        },
        "300": {
          "source": "  global: true,",
          "coverage": ""
        },
        "301": {
          "source": "  // Transport",
          "coverage": ""
        },
        "302": {
          "source": "  xhr: getXhr,",
          "coverage": ""
        },
        "303": {
          "source": "  // MIME types mapping",
          "coverage": ""
        },
        "304": {
          "source": "  accepts: {",
          "coverage": ""
        },
        "305": {
          "source": "    script: 'text/javascript, application/javascript',",
          "coverage": ""
        },
        "306": {
          "source": "    json: jsonType,",
          "coverage": ""
        },
        "307": {
          "source": "    xml: 'application/xml, text/xml',",
          "coverage": ""
        },
        "308": {
          "source": "    html: htmlType,",
          "coverage": ""
        },
        "309": {
          "source": "    text: 'text/plain'",
          "coverage": ""
        },
        "310": {
          "source": "  },",
          "coverage": ""
        },
        "311": {
          "source": "  // Whether the request is to another domain",
          "coverage": ""
        },
        "312": {
          "source": "  crossDomain: false",
          "coverage": ""
        },
        "313": {
          "source": "}",
          "coverage": ""
        },
        "314": {
          "source": "",
          "coverage": ""
        },
        "315": {
          "source": "function mimeToDataType(mime) {",
          "coverage": 2
        },
        "316": {
          "source": "  return mime &amp;&amp; (mime == htmlType ? 'html' :",
          "coverage": 0
        },
        "317": {
          "source": "    mime == jsonType ? 'json' :",
          "coverage": ""
        },
        "318": {
          "source": "    scriptTypeRE.test(mime) ? 'script' :",
          "coverage": ""
        },
        "319": {
          "source": "    xmlTypeRE.test(mime) &amp;&amp; 'xml') || 'text'",
          "coverage": ""
        },
        "320": {
          "source": "}",
          "coverage": ""
        },
        "321": {
          "source": "",
          "coverage": ""
        },
        "322": {
          "source": "function appendQuery(url, query) {",
          "coverage": 2
        },
        "323": {
          "source": "  return (url + '&amp;' + query).replace(/[&amp;?]{1,2}/, '?')",
          "coverage": 8
        },
        "324": {
          "source": "}",
          "coverage": ""
        },
        "325": {
          "source": "",
          "coverage": ""
        },
        "326": {
          "source": "// serialize payload and append it to the URL for GET requests",
          "coverage": ""
        },
        "327": {
          "source": "function serializeData(options) {",
          "coverage": 2
        },
        "328": {
          "source": "  if (type(options.data) === 'object') {",
          "coverage": 54
        },
        "329": {
          "source": "    if(typeof options.data.append === \"function\"){",
          "coverage": 0
        },
        "330": {
          "source": "      //we are dealing with FormData, do not serialize",
          "coverage": ""
        },
        "331": {
          "source": "      options.formdata = true;",
          "coverage": 0
        },
        "332": {
          "source": "    } else {",
          "coverage": ""
        },
        "333": {
          "source": "      options.data = param(options.data)",
          "coverage": 0
        },
        "334": {
          "source": "    }",
          "coverage": ""
        },
        "335": {
          "source": "  }",
          "coverage": ""
        },
        "336": {
          "source": "  if (options.data &amp;&amp; (!options.type || options.type.toUpperCase() == 'GET'))",
          "coverage": 54
        },
        "337": {
          "source": "    options.url = appendQuery(options.url, options.data)",
          "coverage": 4
        },
        "338": {
          "source": "}",
          "coverage": ""
        },
        "339": {
          "source": "",
          "coverage": ""
        },
        "340": {
          "source": "ajax.get = function (url, success) {",
          "coverage": 2
        },
        "341": {
          "source": "  return ajax({",
          "coverage": 0
        },
        "342": {
          "source": "    url: url,",
          "coverage": ""
        },
        "343": {
          "source": "    success: success",
          "coverage": ""
        },
        "344": {
          "source": "  })",
          "coverage": ""
        },
        "345": {
          "source": "}",
          "coverage": ""
        },
        "346": {
          "source": "",
          "coverage": ""
        },
        "347": {
          "source": "ajax.post = function (url, data, success, dataType) {",
          "coverage": 2
        },
        "348": {
          "source": "  if (type(data) === 'function') dataType = dataType || success, success = data, data = null",
          "coverage": 0
        },
        "349": {
          "source": "  return ajax({",
          "coverage": 0
        },
        "350": {
          "source": "    type: 'POST',",
          "coverage": ""
        },
        "351": {
          "source": "    url: url,",
          "coverage": ""
        },
        "352": {
          "source": "    data: data,",
          "coverage": ""
        },
        "353": {
          "source": "    success: success,",
          "coverage": ""
        },
        "354": {
          "source": "    dataType: dataType",
          "coverage": ""
        },
        "355": {
          "source": "  })",
          "coverage": ""
        },
        "356": {
          "source": "}",
          "coverage": ""
        },
        "357": {
          "source": "",
          "coverage": ""
        },
        "358": {
          "source": "ajax.getJSON = function (url, success) {",
          "coverage": 2
        },
        "359": {
          "source": "  return ajax({",
          "coverage": 0
        },
        "360": {
          "source": "    url: url,",
          "coverage": ""
        },
        "361": {
          "source": "    success: success,",
          "coverage": ""
        },
        "362": {
          "source": "    dataType: 'json'",
          "coverage": ""
        },
        "363": {
          "source": "  })",
          "coverage": ""
        },
        "364": {
          "source": "}",
          "coverage": ""
        },
        "365": {
          "source": "",
          "coverage": ""
        },
        "366": {
          "source": "var escape = encodeURIComponent;",
          "coverage": 2
        },
        "367": {
          "source": "",
          "coverage": ""
        },
        "368": {
          "source": "function serialize(params, obj, traditional, scope) {",
          "coverage": 2
        },
        "369": {
          "source": "  var array = type(obj) === 'array';",
          "coverage": 0
        },
        "370": {
          "source": "  for (var key in obj) {",
          "coverage": 0
        },
        "371": {
          "source": "    var value = obj[key];",
          "coverage": 0
        },
        "372": {
          "source": "",
          "coverage": ""
        },
        "373": {
          "source": "    if (scope) key = traditional ? scope : scope + '[' + (array ? '' : key) + ']'",
          "coverage": 0
        },
        "374": {
          "source": "    // handle data in serializeArray() format",
          "coverage": ""
        },
        "375": {
          "source": "    if (!scope &amp;&amp; array) params.add(value.name, value.value)",
          "coverage": 0
        },
        "376": {
          "source": "    // recurse into nested objects",
          "coverage": ""
        },
        "377": {
          "source": "    else if (traditional ? (type(value) === 'array') : (type(value) === 'object'))",
          "coverage": 0
        },
        "378": {
          "source": "      serialize(params, value, traditional, key)",
          "coverage": 0
        },
        "379": {
          "source": "    else params.add(key, value)",
          "coverage": 0
        },
        "380": {
          "source": "  }",
          "coverage": ""
        },
        "381": {
          "source": "}",
          "coverage": ""
        },
        "382": {
          "source": "",
          "coverage": ""
        },
        "383": {
          "source": "function param(obj, traditional) {",
          "coverage": 2
        },
        "384": {
          "source": "  var params = []",
          "coverage": 0
        },
        "385": {
          "source": "  params.add = function (k, v) {",
          "coverage": 0
        },
        "386": {
          "source": "    this.push(escape(k) + '=' + escape(v))",
          "coverage": 0
        },
        "387": {
          "source": "  }",
          "coverage": ""
        },
        "388": {
          "source": "  serialize(params, obj, traditional)",
          "coverage": 0
        },
        "389": {
          "source": "  return params.join('&amp;').replace('%20', '+')",
          "coverage": 0
        },
        "390": {
          "source": "}",
          "coverage": ""
        },
        "391": {
          "source": "",
          "coverage": ""
        },
        "392": {
          "source": "function extend(target) {",
          "coverage": 2
        },
        "393": {
          "source": "  var slice = Array.prototype.slice;",
          "coverage": 104
        },
        "394": {
          "source": "  slice.call(arguments, 1).forEach(function (source) {",
          "coverage": 104
        },
        "395": {
          "source": "    for (key in source)",
          "coverage": 104
        },
        "396": {
          "source": "      if (source[key] !== undefined)",
          "coverage": 474
        },
        "397": {
          "source": "        target[key] = source[key]",
          "coverage": 426
        },
        "398": {
          "source": "  })",
          "coverage": ""
        },
        "399": {
          "source": "  return target",
          "coverage": 104
        },
        "400": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_act.js",
      "coverage": 88.46153846153845,
      "hits": 23,
      "misses": 3,
      "sloc": 26,
      "source": {
        "1": {
          "source": "var logger =require(\"./logger\");",
          "coverage": 2
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 2
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 2
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 2
        },
        "7": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function doActCall(opts, success, fail){",
          "coverage": 2
        },
        "10": {
          "source": "  var cloud_host = cloud.getCloudHost();",
          "coverage": 8
        },
        "11": {
          "source": "  var url = cloud_host.getActUrl(opts.act);",
          "coverage": 8
        },
        "12": {
          "source": "  var params = opts.req || {};",
          "coverage": 8
        },
        "13": {
          "source": "  params = fhparams.addFHParams(params);",
          "coverage": 8
        },
        "14": {
          "source": "  return ajax({",
          "coverage": 8
        },
        "15": {
          "source": "    \"url\": url,",
          "coverage": ""
        },
        "16": {
          "source": "    \"tryJSONP\": true,",
          "coverage": ""
        },
        "17": {
          "source": "    \"type\": \"POST\",",
          "coverage": ""
        },
        "18": {
          "source": "    \"dataType\": \"json\",",
          "coverage": ""
        },
        "19": {
          "source": "    \"data\": JSON.stringify(params),",
          "coverage": ""
        },
        "20": {
          "source": "    \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "21": {
          "source": "    \"timeout\": opts.timeout || appProps.timeout,",
          "coverage": ""
        },
        "22": {
          "source": "    \"success\": success,",
          "coverage": ""
        },
        "23": {
          "source": "    \"error\": function(req, statusText, error){",
          "coverage": ""
        },
        "24": {
          "source": "      return handleError(fail, req, statusText, error);",
          "coverage": 6
        },
        "25": {
          "source": "    }",
          "coverage": ""
        },
        "26": {
          "source": "  })",
          "coverage": ""
        },
        "27": {
          "source": "}",
          "coverage": ""
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "module.exports = function(opts, success, fail){",
          "coverage": 2
        },
        "30": {
          "source": "  logger.debug(\"act is called\");",
          "coverage": 9
        },
        "31": {
          "source": "  if(!fail){",
          "coverage": 9
        },
        "32": {
          "source": "    fail = function(msg, error){",
          "coverage": 0
        },
        "33": {
          "source": "      logger.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "34": {
          "source": "    };",
          "coverage": ""
        },
        "35": {
          "source": "  }",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "  if(!opts.act){",
          "coverage": 9
        },
        "38": {
          "source": "    return fail('act_no_action', {});",
          "coverage": 1
        },
        "39": {
          "source": "  }",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "  cloud.ready(function(err, cloudHost){",
          "coverage": 8
        },
        "42": {
          "source": "    logger.debug(\"Calling fhact now\");",
          "coverage": 8
        },
        "43": {
          "source": "    if(err){",
          "coverage": 8
        },
        "44": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "45": {
          "source": "    } else {",
          "coverage": ""
        },
        "46": {
          "source": "      doActCall(opts, success, fail);",
          "coverage": 8
        },
        "47": {
          "source": "    }",
          "coverage": ""
        },
        "48": {
          "source": "  })",
          "coverage": ""
        },
        "49": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_auth.js",
      "coverage": 78.04878048780488,
      "hits": 32,
      "misses": 9,
      "sloc": 41,
      "source": {
        "1": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 1
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 1
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 1
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 1
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 1
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 1
        },
        "7": {
          "source": "var device = require(\"./device\");",
          "coverage": 1
        },
        "8": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 1
        },
        "9": {
          "source": "var checkAuth = require(\"./checkAuth\");",
          "coverage": 1
        },
        "10": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 1
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "module.exports = function(opts, success, fail) {",
          "coverage": 1
        },
        "13": {
          "source": "  if (!fail) {",
          "coverage": 2
        },
        "14": {
          "source": "    fail = function(msg, error) {",
          "coverage": 0
        },
        "15": {
          "source": "      logger.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "16": {
          "source": "    };",
          "coverage": ""
        },
        "17": {
          "source": "  }",
          "coverage": ""
        },
        "18": {
          "source": "  if (!opts.policyId) {",
          "coverage": 2
        },
        "19": {
          "source": "    return fail('auth_no_policyId', {});",
          "coverage": 1
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "  if (!opts.clientToken) {",
          "coverage": 1
        },
        "22": {
          "source": "    return fail('auth_no_clientToken', {});",
          "coverage": 0
        },
        "23": {
          "source": "  }",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "  cloud.ready(function(err, data) {",
          "coverage": 1
        },
        "26": {
          "source": "    if (err) {",
          "coverage": 1
        },
        "27": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "28": {
          "source": "    } else {",
          "coverage": ""
        },
        "29": {
          "source": "      var req = {};",
          "coverage": 1
        },
        "30": {
          "source": "      req.policyId = opts.policyId;",
          "coverage": 1
        },
        "31": {
          "source": "      req.clientToken = opts.clientToken;",
          "coverage": 1
        },
        "32": {
          "source": "      if (opts.endRedirectUrl) {",
          "coverage": 1
        },
        "33": {
          "source": "        req.endRedirectUrl = opts.endRedirectUrl;",
          "coverage": 0
        },
        "34": {
          "source": "        if (opts.authCallback) {",
          "coverage": 0
        },
        "35": {
          "source": "          req.endRedirectUrl += (/\\?/.test(req.endRedirectUrl) ? \"&amp;\" : \"?\") + \"_fhAuthCallback=\" + opts.authCallback;",
          "coverage": 0
        },
        "36": {
          "source": "        }",
          "coverage": ""
        },
        "37": {
          "source": "      }",
          "coverage": ""
        },
        "38": {
          "source": "      req.params = {};",
          "coverage": 1
        },
        "39": {
          "source": "      if (opts.params) {",
          "coverage": 1
        },
        "40": {
          "source": "        req.params = opts.params;",
          "coverage": 0
        },
        "41": {
          "source": "      }",
          "coverage": ""
        },
        "42": {
          "source": "      var endurl = opts.endRedirectUrl || \"status=complete\";",
          "coverage": 1
        },
        "43": {
          "source": "      req.device = device.getDeviceId();",
          "coverage": 1
        },
        "44": {
          "source": "      var app_props = appProps.getAppProps();",
          "coverage": 1
        },
        "45": {
          "source": "      var path = app_props.host + constants.boxprefix + \"admin/authpolicy/auth\";",
          "coverage": 1
        },
        "46": {
          "source": "",
          "coverage": ""
        },
        "47": {
          "source": "      if (app_props.local) {",
          "coverage": 1
        },
        "48": {
          "source": "        path = constants.boxprefix + \"admin/authpolicy/auth\";",
          "coverage": 1
        },
        "49": {
          "source": "      }",
          "coverage": ""
        },
        "50": {
          "source": "",
          "coverage": ""
        },
        "51": {
          "source": "      req = fhparams.addFHParams(req);",
          "coverage": 1
        },
        "52": {
          "source": "",
          "coverage": ""
        },
        "53": {
          "source": "      ajax({",
          "coverage": 1
        },
        "54": {
          "source": "        \"url\": path,",
          "coverage": ""
        },
        "55": {
          "source": "        \"type\": \"POST\",",
          "coverage": ""
        },
        "56": {
          "source": "        \"tryJSONP\": true,",
          "coverage": ""
        },
        "57": {
          "source": "        \"data\": JSON.stringify(req),",
          "coverage": ""
        },
        "58": {
          "source": "        \"dataType\": \"json\",",
          "coverage": ""
        },
        "59": {
          "source": "        \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "60": {
          "source": "        \"timeout\": opts.timeout || app_props.timeout,",
          "coverage": ""
        },
        "61": {
          "source": "        success: function(res) {",
          "coverage": ""
        },
        "62": {
          "source": "          checkAuth.handleAuthResponse(endurl, res, success, fail);",
          "coverage": 1
        },
        "63": {
          "source": "        },",
          "coverage": ""
        },
        "64": {
          "source": "        error: function(req, statusText, error) {",
          "coverage": ""
        },
        "65": {
          "source": "          handleError(fail, req, statusText, error);",
          "coverage": 0
        },
        "66": {
          "source": "        }",
          "coverage": ""
        },
        "67": {
          "source": "      });",
          "coverage": ""
        },
        "68": {
          "source": "    }",
          "coverage": ""
        },
        "69": {
          "source": "  });",
          "coverage": ""
        },
        "70": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_cloud.js",
      "coverage": 87.5,
      "hits": 21,
      "misses": 3,
      "sloc": 24,
      "source": {
        "1": {
          "source": "var logger =require(\"./logger\");",
          "coverage": 2
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 2
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 2
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 2
        },
        "7": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function doCloudCall(opts, success, fail){",
          "coverage": 2
        },
        "10": {
          "source": "  var cloud_host = cloud.getCloudHost();",
          "coverage": 38
        },
        "11": {
          "source": "  var url = cloud_host.getCloudUrl(opts.path);",
          "coverage": 38
        },
        "12": {
          "source": "  var params = opts.data || {};",
          "coverage": 38
        },
        "13": {
          "source": "  params = fhparams.addFHParams(params);",
          "coverage": 38
        },
        "14": {
          "source": "  return ajax({",
          "coverage": 38
        },
        "15": {
          "source": "    \"url\": url,",
          "coverage": ""
        },
        "16": {
          "source": "    \"type\": opts.method || \"POST\",",
          "coverage": ""
        },
        "17": {
          "source": "    \"dataType\": opts.dataType || \"json\",",
          "coverage": ""
        },
        "18": {
          "source": "    \"data\": JSON.stringify(params),",
          "coverage": ""
        },
        "19": {
          "source": "    \"contentType\": opts.contentType || \"application/json\",",
          "coverage": ""
        },
        "20": {
          "source": "    \"timeout\": opts.timeout || appProps.timeout,",
          "coverage": ""
        },
        "21": {
          "source": "    \"success\": success,",
          "coverage": ""
        },
        "22": {
          "source": "    \"error\": function(req, statusText, error){",
          "coverage": ""
        },
        "23": {
          "source": "      return handleError(fail, req, statusText, error);",
          "coverage": 10
        },
        "24": {
          "source": "    }",
          "coverage": ""
        },
        "25": {
          "source": "  })",
          "coverage": ""
        },
        "26": {
          "source": "}",
          "coverage": ""
        },
        "27": {
          "source": "",
          "coverage": ""
        },
        "28": {
          "source": "module.exports = function(opts, success, fail){",
          "coverage": 2
        },
        "29": {
          "source": "  logger.debug(\"cloud is called\");",
          "coverage": 38
        },
        "30": {
          "source": "  if(!fail){",
          "coverage": 38
        },
        "31": {
          "source": "    fail = function(msg, error){",
          "coverage": 0
        },
        "32": {
          "source": "      logger.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "33": {
          "source": "    };",
          "coverage": ""
        },
        "34": {
          "source": "  }",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "  cloud.ready(function(err, cloudHost){",
          "coverage": 38
        },
        "37": {
          "source": "    logger.debug(\"Calling fhact now\");",
          "coverage": 38
        },
        "38": {
          "source": "    if(err){",
          "coverage": 38
        },
        "39": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "40": {
          "source": "    } else {",
          "coverage": ""
        },
        "41": {
          "source": "      doCloudCall(opts, success, fail);",
          "coverage": 38
        },
        "42": {
          "source": "    }",
          "coverage": ""
        },
        "43": {
          "source": "  })",
          "coverage": ""
        },
        "44": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_forms.js",
      "coverage": 11.949685534591195,
      "hits": 19,
      "misses": 140,
      "sloc": 159,
      "source": {
        "1": {
          "source": "var formConfig = require(\"./forms/config\");",
          "coverage": 1
        },
        "2": {
          "source": "var forms = require(\"./forms/forms\");",
          "coverage": 1
        },
        "3": {
          "source": "var Form = require(\"./forms/form\");",
          "coverage": 1
        },
        "4": {
          "source": "var theme = require(\"./forms/theme\");",
          "coverage": 1
        },
        "5": {
          "source": "var submissions = require(\"./forms/submissions\");",
          "coverage": 1
        },
        "6": {
          "source": "var submission = require(\"./forms/submission\");",
          "coverage": 1
        },
        "7": {
          "source": "var log = require(\"./forms/log\");",
          "coverage": 1
        },
        "8": {
          "source": "var init = require(\"./forms/init\");",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "var _submissions = null;",
          "coverage": 1
        },
        "11": {
          "source": "var waitOnSubmission = {};",
          "coverage": 1
        },
        "12": {
          "source": "var defaultFunction = function(err) {",
          "coverage": 1
        },
        "13": {
          "source": "    err = err ? err : \"\";",
          "coverage": 0
        },
        "14": {
          "source": "    log.w(\"Default Function Called \" + err);",
          "coverage": 0
        },
        "15": {
          "source": "};",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "/**",
          "coverage": ""
        },
        "18": {
          "source": " * Get and set config values. Can only set a config value if you are an config_admin_user",
          "coverage": ""
        },
        "19": {
          "source": " */",
          "coverage": ""
        },
        "20": {
          "source": "var configInterface = {",
          "coverage": 1
        },
        "21": {
          "source": "    editAllowed: function() {",
          "coverage": ""
        },
        "22": {
          "source": "        var defaultConfigValues = formConfig.get(\"defaultConfigValues\", {});",
          "coverage": 0
        },
        "23": {
          "source": "        return defaultConfigValues[\"config_admin_user\"] === true;",
          "coverage": 0
        },
        "24": {
          "source": "    },",
          "coverage": ""
        },
        "25": {
          "source": "    \"get\": function(key) {",
          "coverage": ""
        },
        "26": {
          "source": "        var self = this;",
          "coverage": 0
        },
        "27": {
          "source": "        if (key) {",
          "coverage": 0
        },
        "28": {
          "source": "            var userConfigValues = formConfig.get(\"userConfigValues\", {});",
          "coverage": 0
        },
        "29": {
          "source": "            var defaultConfigValues = formConfig.get(\"defaultConfigValues\", {});",
          "coverage": 0
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "            if (userConfigValues[key]) {",
          "coverage": 0
        },
        "33": {
          "source": "                return userConfigValues[key];",
          "coverage": 0
        },
        "34": {
          "source": "            } else {",
          "coverage": ""
        },
        "35": {
          "source": "                return defaultConfigValues[key];",
          "coverage": 0
        },
        "36": {
          "source": "            }",
          "coverage": ""
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "        }",
          "coverage": ""
        },
        "39": {
          "source": "    },",
          "coverage": ""
        },
        "40": {
          "source": "    \"getDeviceId\": function() {",
          "coverage": ""
        },
        "41": {
          "source": "        return formConfig.get(\"deviceId\", \"Not Set\");",
          "coverage": 0
        },
        "42": {
          "source": "    },",
          "coverage": ""
        },
        "43": {
          "source": "    \"set\": function(key, val) {",
          "coverage": ""
        },
        "44": {
          "source": "        var self = this;",
          "coverage": 0
        },
        "45": {
          "source": "        if (typeof(key) !== \"string\" || typeof(val) === \"undefined\" || val === null) {",
          "coverage": 0
        },
        "46": {
          "source": "            return;",
          "coverage": 0
        },
        "47": {
          "source": "        }",
          "coverage": ""
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "        if (self.editAllowed() || key === \"max_sent_saved\") {",
          "coverage": 0
        },
        "50": {
          "source": "            var userConfig = formConfig.get(\"userConfigValues\", {});",
          "coverage": 0
        },
        "51": {
          "source": "            userConfig[key] = val;",
          "coverage": 0
        },
        "52": {
          "source": "            formConfig.set(\"userConfigValues\", userConfig);",
          "coverage": 0
        },
        "53": {
          "source": "        }",
          "coverage": ""
        },
        "54": {
          "source": "",
          "coverage": ""
        },
        "55": {
          "source": "    },",
          "coverage": ""
        },
        "56": {
          "source": "    \"getConfig\": function() {",
          "coverage": ""
        },
        "57": {
          "source": "        var self = this;",
          "coverage": 0
        },
        "58": {
          "source": "        var defaultValues = formConfig.get(\"defaultConfigValues\", {});",
          "coverage": 0
        },
        "59": {
          "source": "        var userConfigValues = formConfig.get(\"userConfigValues\", {});",
          "coverage": 0
        },
        "60": {
          "source": "        var returnObj = {};",
          "coverage": 0
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "        if (self.editAllowed()) {",
          "coverage": 0
        },
        "63": {
          "source": "            for (var defKey in defaultValues) {",
          "coverage": 0
        },
        "64": {
          "source": "                if (userConfigValues[defKey]) {",
          "coverage": 0
        },
        "65": {
          "source": "                    returnObj[defKey] = userConfigValues[defKey];",
          "coverage": 0
        },
        "66": {
          "source": "                } else {",
          "coverage": ""
        },
        "67": {
          "source": "                    returnObj[defKey] = defaultValues[defKey];",
          "coverage": 0
        },
        "68": {
          "source": "                }",
          "coverage": ""
        },
        "69": {
          "source": "            }",
          "coverage": ""
        },
        "70": {
          "source": "            return returnObj;",
          "coverage": 0
        },
        "71": {
          "source": "        } else {",
          "coverage": ""
        },
        "72": {
          "source": "            return defaultValues;",
          "coverage": 0
        },
        "73": {
          "source": "        }",
          "coverage": ""
        },
        "74": {
          "source": "    },",
          "coverage": ""
        },
        "75": {
          "source": "    \"saveConfig\": function(cb) {",
          "coverage": ""
        },
        "76": {
          "source": "        var self = this;",
          "coverage": 0
        },
        "77": {
          "source": "        formConfig.saveLocal(function(err, configModel) {",
          "coverage": 0
        },
        "78": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "79": {
          "source": "                log.e(\"Error saving a form config: \", err);",
          "coverage": 0
        },
        "80": {
          "source": "            } else {",
          "coverage": ""
        },
        "81": {
          "source": "                log.l(\"Form config saved sucessfully.\");",
          "coverage": 0
        },
        "82": {
          "source": "            }",
          "coverage": ""
        },
        "83": {
          "source": "",
          "coverage": ""
        },
        "84": {
          "source": "            if (typeof(cb) === 'function') {",
          "coverage": 0
        },
        "85": {
          "source": "                cb();",
          "coverage": 0
        },
        "86": {
          "source": "            }",
          "coverage": ""
        },
        "87": {
          "source": "        });",
          "coverage": ""
        },
        "88": {
          "source": "    },",
          "coverage": ""
        },
        "89": {
          "source": "    \"offline\": function() {",
          "coverage": ""
        },
        "90": {
          "source": "        formConfig.setOffline();",
          "coverage": 0
        },
        "91": {
          "source": "    },",
          "coverage": ""
        },
        "92": {
          "source": "    \"online\": function() {",
          "coverage": ""
        },
        "93": {
          "source": "        formConfig.setOnline();",
          "coverage": 0
        },
        "94": {
          "source": "    },",
          "coverage": ""
        },
        "95": {
          "source": "    \"mbaasOnline\": function(cb) {",
          "coverage": ""
        },
        "96": {
          "source": "        if (typeof(cb) === \"function\") {",
          "coverage": 0
        },
        "97": {
          "source": "            formConfig.on('online', cb);",
          "coverage": 0
        },
        "98": {
          "source": "        }",
          "coverage": ""
        },
        "99": {
          "source": "    },",
          "coverage": ""
        },
        "100": {
          "source": "    \"mbaasOffline\": function(cb) {",
          "coverage": ""
        },
        "101": {
          "source": "        if (typeof(cb) === \"function\") {",
          "coverage": 0
        },
        "102": {
          "source": "            formConfig.on('offline', cb);",
          "coverage": 0
        },
        "103": {
          "source": "        }",
          "coverage": ""
        },
        "104": {
          "source": "    },",
          "coverage": ""
        },
        "105": {
          "source": "    \"isOnline\": function() {",
          "coverage": ""
        },
        "106": {
          "source": "        return formConfig.isOnline();",
          "coverage": 0
        },
        "107": {
          "source": "    },",
          "coverage": ""
        },
        "108": {
          "source": "    \"isStudioMode\": function() {",
          "coverage": ""
        },
        "109": {
          "source": "        return formConfig.isStudioMode();",
          "coverage": 0
        },
        "110": {
          "source": "    },",
          "coverage": ""
        },
        "111": {
          "source": "    refresh: function(cb) {",
          "coverage": ""
        },
        "112": {
          "source": "        formConfig.refresh(true, cb);",
          "coverage": 0
        },
        "113": {
          "source": "    }",
          "coverage": ""
        },
        "114": {
          "source": "};",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "",
          "coverage": ""
        },
        "117": {
          "source": "/**",
          "coverage": ""
        },
        "118": {
          "source": " * Retrieve forms model. It contains forms list. check forms model usage",
          "coverage": ""
        },
        "119": {
          "source": " * @param  {[type]}   params {fromRemote:boolean}",
          "coverage": ""
        },
        "120": {
          "source": " * @param  {Function} cb    (err, formsModel)",
          "coverage": ""
        },
        "121": {
          "source": " * @return {[type]}          [description]",
          "coverage": ""
        },
        "122": {
          "source": " */",
          "coverage": ""
        },
        "123": {
          "source": "var getForms = function(params, cb) {",
          "coverage": 1
        },
        "124": {
          "source": "    if (typeof(params) === 'function') {",
          "coverage": 0
        },
        "125": {
          "source": "        cb = params;",
          "coverage": 0
        },
        "126": {
          "source": "        params = {};",
          "coverage": 0
        },
        "127": {
          "source": "    }",
          "coverage": ""
        },
        "128": {
          "source": "",
          "coverage": ""
        },
        "129": {
          "source": "    params = params ? params : {};",
          "coverage": 0
        },
        "130": {
          "source": "    cb = cb ? cb : defaultFunction;",
          "coverage": 0
        },
        "131": {
          "source": "    var fromRemote = params.fromRemote;",
          "coverage": 0
        },
        "132": {
          "source": "    if (fromRemote === undefined) {",
          "coverage": 0
        },
        "133": {
          "source": "        fromRemote = false;",
          "coverage": 0
        },
        "134": {
          "source": "    }",
          "coverage": ""
        },
        "135": {
          "source": "    forms.refresh(fromRemote, cb);",
          "coverage": 0
        },
        "136": {
          "source": "};",
          "coverage": ""
        },
        "137": {
          "source": "/**",
          "coverage": ""
        },
        "138": {
          "source": " * Retrieve form model with specified form id.",
          "coverage": ""
        },
        "139": {
          "source": " * @param  {[type]}   params {formId: string, fromRemote:boolean}",
          "coverage": ""
        },
        "140": {
          "source": " * @param  {Function} cb     (err, formModel)",
          "coverage": ""
        },
        "141": {
          "source": " * @return {[type]}          [description]",
          "coverage": ""
        },
        "142": {
          "source": " */",
          "coverage": ""
        },
        "143": {
          "source": "var getForm = function(params, cb) {",
          "coverage": 1
        },
        "144": {
          "source": "    if (typeof(params) === 'function') {",
          "coverage": 0
        },
        "145": {
          "source": "        cb = params;",
          "coverage": 0
        },
        "146": {
          "source": "        params = {};",
          "coverage": 0
        },
        "147": {
          "source": "    }",
          "coverage": ""
        },
        "148": {
          "source": "",
          "coverage": ""
        },
        "149": {
          "source": "    params = params ? params : {};",
          "coverage": 0
        },
        "150": {
          "source": "    cb = cb ? cb : defaultFunction;",
          "coverage": 0
        },
        "151": {
          "source": "    Form(params, cb);",
          "coverage": 0
        },
        "152": {
          "source": "};",
          "coverage": ""
        },
        "153": {
          "source": "",
          "coverage": ""
        },
        "154": {
          "source": "/**",
          "coverage": ""
        },
        "155": {
          "source": " * Find a theme definition for this app.",
          "coverage": ""
        },
        "156": {
          "source": " * @param params {fromRemote:boolean(false)}",
          "coverage": ""
        },
        "157": {
          "source": " * @param {Function} cb {err, themeData} . themeData = {\"json\" : {&lt;theme json definition&gt;}, \"css\" : \"css\" : \"&lt;css style definition for this app&gt;\"}",
          "coverage": ""
        },
        "158": {
          "source": " */",
          "coverage": ""
        },
        "159": {
          "source": "var getTheme = function(params, cb) {",
          "coverage": 1
        },
        "160": {
          "source": "    if (typeof(params) === 'function') {",
          "coverage": 0
        },
        "161": {
          "source": "        cb = params;",
          "coverage": 0
        },
        "162": {
          "source": "        params = {};",
          "coverage": 0
        },
        "163": {
          "source": "    }",
          "coverage": ""
        },
        "164": {
          "source": "",
          "coverage": ""
        },
        "165": {
          "source": "    params = params ? params : {};",
          "coverage": 0
        },
        "166": {
          "source": "    cb = cb ? cb : defaultFunction;",
          "coverage": 0
        },
        "167": {
          "source": "    if (!params.fromRemote) {",
          "coverage": 0
        },
        "168": {
          "source": "        params.fromRemote = false;",
          "coverage": 0
        },
        "169": {
          "source": "    }",
          "coverage": ""
        },
        "170": {
          "source": "    theme.refresh(params.fromRemote, function(err, updatedTheme) {",
          "coverage": 0
        },
        "171": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "172": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "173": {
          "source": "        }",
          "coverage": ""
        },
        "174": {
          "source": "        if (updatedTheme === null) {",
          "coverage": 0
        },
        "175": {
          "source": "            return cb(new Error('No theme defined for this app'));",
          "coverage": 0
        },
        "176": {
          "source": "        }",
          "coverage": ""
        },
        "177": {
          "source": "        if (params.css === true) {",
          "coverage": 0
        },
        "178": {
          "source": "            return cb(null, theme.getCSS());",
          "coverage": 0
        },
        "179": {
          "source": "        } else {",
          "coverage": ""
        },
        "180": {
          "source": "            return cb(null, theme);",
          "coverage": 0
        },
        "181": {
          "source": "        }",
          "coverage": ""
        },
        "182": {
          "source": "    });",
          "coverage": ""
        },
        "183": {
          "source": "};",
          "coverage": ""
        },
        "184": {
          "source": "",
          "coverage": ""
        },
        "185": {
          "source": "/**",
          "coverage": ""
        },
        "186": {
          "source": " * Get submissions that are submitted. I.e. submitted and complete.",
          "coverage": ""
        },
        "187": {
          "source": " * @param params {}",
          "coverage": ""
        },
        "188": {
          "source": " * @param {Function} cb     (err, submittedArray)",
          "coverage": ""
        },
        "189": {
          "source": " */",
          "coverage": ""
        },
        "190": {
          "source": "var getSubmissions = function(params, cb) {",
          "coverage": 1
        },
        "191": {
          "source": "    if (typeof(params) === 'function') {",
          "coverage": 0
        },
        "192": {
          "source": "        cb = params;",
          "coverage": 0
        },
        "193": {
          "source": "        params = {};",
          "coverage": 0
        },
        "194": {
          "source": "    }",
          "coverage": ""
        },
        "195": {
          "source": "",
          "coverage": ""
        },
        "196": {
          "source": "    params = params ? params : {};",
          "coverage": 0
        },
        "197": {
          "source": "    cb = cb ? cb : defaultFunction;",
          "coverage": 0
        },
        "198": {
          "source": "",
          "coverage": ""
        },
        "199": {
          "source": "    //Getting submissions that have been completed.",
          "coverage": ""
        },
        "200": {
          "source": "    submissions.loadLocal(function(err) {",
          "coverage": 0
        },
        "201": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "202": {
          "source": "            log.e(err);",
          "coverage": 0
        },
        "203": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "204": {
          "source": "        } else {",
          "coverage": ""
        },
        "205": {
          "source": "            cb(null, _submissions);",
          "coverage": 0
        },
        "206": {
          "source": "        }",
          "coverage": ""
        },
        "207": {
          "source": "    });",
          "coverage": ""
        },
        "208": {
          "source": "};",
          "coverage": ""
        },
        "209": {
          "source": "",
          "coverage": ""
        },
        "210": {
          "source": "var submitForm = function(submission, cb) {",
          "coverage": 1
        },
        "211": {
          "source": "    if (submission) {",
          "coverage": 0
        },
        "212": {
          "source": "        submission.submit(function(err) {",
          "coverage": 0
        },
        "213": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "214": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "215": {
          "source": "            }",
          "coverage": ""
        },
        "216": {
          "source": "",
          "coverage": ""
        },
        "217": {
          "source": "            //Submission finished and validated. Now upload the form",
          "coverage": ""
        },
        "218": {
          "source": "            submission.upload(cb);",
          "coverage": 0
        },
        "219": {
          "source": "        });",
          "coverage": ""
        },
        "220": {
          "source": "    } else {",
          "coverage": ""
        },
        "221": {
          "source": "        return cb('Invalid submission object.');",
          "coverage": 0
        },
        "222": {
          "source": "    }",
          "coverage": ""
        },
        "223": {
          "source": "};",
          "coverage": ""
        },
        "224": {
          "source": "",
          "coverage": ""
        },
        "225": {
          "source": "/*",
          "coverage": ""
        },
        "226": {
          "source": " * Function for downloading a submission stored on the remote server.",
          "coverage": ""
        },
        "227": {
          "source": " *",
          "coverage": ""
        },
        "228": {
          "source": " * @param params {}",
          "coverage": ""
        },
        "229": {
          "source": " * @param {function} cb (err, downloadTask)",
          "coverage": ""
        },
        "230": {
          "source": " * */",
          "coverage": ""
        },
        "231": {
          "source": "var downloadSubmission = function(params, cb) {",
          "coverage": 1
        },
        "232": {
          "source": "    params = params ? params : {};",
          "coverage": 0
        },
        "233": {
          "source": "    //cb = cb ? cb : defaultFunction;",
          "coverage": ""
        },
        "234": {
          "source": "    var submissionToDownload = null;",
          "coverage": 0
        },
        "235": {
          "source": "",
          "coverage": ""
        },
        "236": {
          "source": "    if (typeof(cb) !== 'function') {",
          "coverage": 0
        },
        "237": {
          "source": "        return null;",
          "coverage": 0
        },
        "238": {
          "source": "    }",
          "coverage": ""
        },
        "239": {
          "source": "",
          "coverage": ""
        },
        "240": {
          "source": "    function finishSubmissionDownload(err) {",
          "coverage": 0
        },
        "241": {
          "source": "        err = typeof(err) === \"string\" &amp;&amp; err.length === 24 ? null : err;",
          "coverage": 0
        },
        "242": {
          "source": "        log.d(\"finishSubmissionDownload \", err, submissionToDownload);",
          "coverage": 0
        },
        "243": {
          "source": "        var subCBId = submissionToDownload.getRemoteSubmissionId();",
          "coverage": 0
        },
        "244": {
          "source": "        var subsCbsWatiting = waitOnSubmission[subCBId];",
          "coverage": 0
        },
        "245": {
          "source": "        if (subsCbsWatiting) {",
          "coverage": 0
        },
        "246": {
          "source": "            var subCB = subsCbsWatiting.pop();",
          "coverage": 0
        },
        "247": {
          "source": "            while (typeof(subCB) === 'function') {",
          "coverage": 0
        },
        "248": {
          "source": "                subCB(err, submissionToDownload);",
          "coverage": 0
        },
        "249": {
          "source": "                subCB = subsCbsWatiting.pop();",
          "coverage": 0
        },
        "250": {
          "source": "            }",
          "coverage": ""
        },
        "251": {
          "source": "",
          "coverage": ""
        },
        "252": {
          "source": "            if (submissionToDownload.clearEvents) {",
          "coverage": 0
        },
        "253": {
          "source": "                submissionToDownload.clearEvents();",
          "coverage": 0
        },
        "254": {
          "source": "            }",
          "coverage": ""
        },
        "255": {
          "source": "        } else {",
          "coverage": ""
        },
        "256": {
          "source": "            submissionToDownload.clearEvents();",
          "coverage": 0
        },
        "257": {
          "source": "            return cb(err, submissionToDownload);",
          "coverage": 0
        },
        "258": {
          "source": "        }",
          "coverage": ""
        },
        "259": {
          "source": "    }",
          "coverage": ""
        },
        "260": {
          "source": "",
          "coverage": ""
        },
        "261": {
          "source": "    log.d(\"downloadSubmission called\", params);",
          "coverage": 0
        },
        "262": {
          "source": "",
          "coverage": ""
        },
        "263": {
          "source": "    if (params.submissionId) {",
          "coverage": 0
        },
        "264": {
          "source": "        log.d(\"downloadSubmission SubmissionId exists\" + params.submissionId);",
          "coverage": 0
        },
        "265": {
          "source": "        var submissionAlreadySaved = submissions.findMetaByRemoteId(params.submissionId);",
          "coverage": 0
        },
        "266": {
          "source": "",
          "coverage": ""
        },
        "267": {
          "source": "        if (submissionAlreadySaved === null) {",
          "coverage": 0
        },
        "268": {
          "source": "",
          "coverage": ""
        },
        "269": {
          "source": "            log.d(\"downloadSubmission submission does not exist, downloading\", params);",
          "coverage": 0
        },
        "270": {
          "source": "            submissionToDownload = new submission.newInstance(null, {",
          "coverage": 0
        },
        "271": {
          "source": "                submissionId: params.submissionId",
          "coverage": ""
        },
        "272": {
          "source": "            });",
          "coverage": ""
        },
        "273": {
          "source": "",
          "coverage": ""
        },
        "274": {
          "source": "            submissionToDownload.on('error', finishSubmissionDownload);",
          "coverage": 0
        },
        "275": {
          "source": "",
          "coverage": ""
        },
        "276": {
          "source": "            submissionToDownload.on('downloaded', finishSubmissionDownload);",
          "coverage": 0
        },
        "277": {
          "source": "",
          "coverage": ""
        },
        "278": {
          "source": "            if (typeof(params.updateFunction) === 'function') {",
          "coverage": 0
        },
        "279": {
          "source": "                submissionToDownload.on('progress', params.updateFunction);",
          "coverage": 0
        },
        "280": {
          "source": "            }",
          "coverage": ""
        },
        "281": {
          "source": "",
          "coverage": ""
        },
        "282": {
          "source": "",
          "coverage": ""
        },
        "283": {
          "source": "            if (typeof(cb) === \"function\") {",
          "coverage": 0
        },
        "284": {
          "source": "                if (waitOnSubmission[params.submissionId]) {",
          "coverage": 0
        },
        "285": {
          "source": "                    waitOnSubmission[params.submissionId].push(cb);",
          "coverage": 0
        },
        "286": {
          "source": "                } else {",
          "coverage": ""
        },
        "287": {
          "source": "                    waitOnSubmission[params.submissionId] = [];",
          "coverage": 0
        },
        "288": {
          "source": "                    waitOnSubmission[params.submissionId].push(cb);",
          "coverage": 0
        },
        "289": {
          "source": "                }",
          "coverage": ""
        },
        "290": {
          "source": "            }",
          "coverage": ""
        },
        "291": {
          "source": "",
          "coverage": ""
        },
        "292": {
          "source": "            submissionToDownload.download(function(err) {",
          "coverage": 0
        },
        "293": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "294": {
          "source": "                    log.e(\"Error queueing submission for download \" + err);",
          "coverage": 0
        },
        "295": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "296": {
          "source": "                }",
          "coverage": ""
        },
        "297": {
          "source": "            });",
          "coverage": ""
        },
        "298": {
          "source": "        } else {",
          "coverage": ""
        },
        "299": {
          "source": "            log.d(\"downloadSubmission submission exists\", params);",
          "coverage": 0
        },
        "300": {
          "source": "",
          "coverage": ""
        },
        "301": {
          "source": "            //Submission was created, but not finished downloading",
          "coverage": ""
        },
        "302": {
          "source": "            if (submissionAlreadySaved.status !== \"downloaded\" &amp;&amp; submissionAlreadySaved.status !== \"submitted\") {",
          "coverage": 0
        },
        "303": {
          "source": "                if (typeof(cb) === \"function\") {",
          "coverage": 0
        },
        "304": {
          "source": "                    if (waitOnSubmission[params.submissionId]) {",
          "coverage": 0
        },
        "305": {
          "source": "                        waitOnSubmission[params.submissionId].push(cb);",
          "coverage": 0
        },
        "306": {
          "source": "                    } else {",
          "coverage": ""
        },
        "307": {
          "source": "                        waitOnSubmission[params.submissionId] = [];",
          "coverage": 0
        },
        "308": {
          "source": "                        waitOnSubmission[params.submissionId].push(cb);",
          "coverage": 0
        },
        "309": {
          "source": "                    }",
          "coverage": ""
        },
        "310": {
          "source": "                }",
          "coverage": ""
        },
        "311": {
          "source": "            } else {",
          "coverage": ""
        },
        "312": {
          "source": "                submissions.getSubmissionByMeta(submissionAlreadySaved, cb);",
          "coverage": 0
        },
        "313": {
          "source": "            }",
          "coverage": ""
        },
        "314": {
          "source": "",
          "coverage": ""
        },
        "315": {
          "source": "        }",
          "coverage": ""
        },
        "316": {
          "source": "    } else {",
          "coverage": ""
        },
        "317": {
          "source": "        log.e(\"No submissionId passed to download a submission\");",
          "coverage": 0
        },
        "318": {
          "source": "        return cb(\"No submissionId passed to download a submission\");",
          "coverage": 0
        },
        "319": {
          "source": "    }",
          "coverage": ""
        },
        "320": {
          "source": "};",
          "coverage": ""
        },
        "321": {
          "source": "",
          "coverage": ""
        },
        "322": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "323": {
          "source": "    getForms: getForms,",
          "coverage": ""
        },
        "324": {
          "source": "    getForm: getForm,",
          "coverage": ""
        },
        "325": {
          "source": "    getTheme: getTheme,",
          "coverage": ""
        },
        "326": {
          "source": "    getSubmissions: getSubmissions,",
          "coverage": ""
        },
        "327": {
          "source": "    downloadSubmission: downloadSubmission,",
          "coverage": ""
        },
        "328": {
          "source": "    submitForm: submitForm,",
          "coverage": ""
        },
        "329": {
          "source": "    config: configInterface,",
          "coverage": ""
        },
        "330": {
          "source": "    log: log,",
          "coverage": ""
        },
        "331": {
          "source": "    init: init",
          "coverage": ""
        },
        "332": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_hash.js",
      "coverage": 87.5,
      "hits": 7,
      "misses": 1,
      "sloc": 8,
      "source": {
        "1": {
          "source": "var hashImpl = require(\"./security/hash\");",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "module.exports = function(p, s, f){",
          "coverage": 2
        },
        "4": {
          "source": "  var params = {};",
          "coverage": 4
        },
        "5": {
          "source": "  if(typeof p.algorithm === \"undefined\"){",
          "coverage": 4
        },
        "6": {
          "source": "    p.algorithm = \"MD5\";",
          "coverage": 0
        },
        "7": {
          "source": "  }",
          "coverage": ""
        },
        "8": {
          "source": "  params.act = \"hash\";",
          "coverage": 4
        },
        "9": {
          "source": "  params.params = p;",
          "coverage": 4
        },
        "10": {
          "source": "  hashImpl(params, s, f);",
          "coverage": 4
        },
        "11": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_mbaas.js",
      "coverage": 83.33333333333334,
      "hits": 20,
      "misses": 4,
      "sloc": 24,
      "source": {
        "1": {
          "source": "var logger =require(\"./logger\");",
          "coverage": 1
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 1
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 1
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 1
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 1
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 1
        },
        "7": {
          "source": "var consts = require(\"./constants\");",
          "coverage": 1
        },
        "8": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "module.exports = function(opts, success, fail){",
          "coverage": 1
        },
        "11": {
          "source": "  logger.debug(\"mbaas is called.\");",
          "coverage": 1
        },
        "12": {
          "source": "  if(!fail){",
          "coverage": 1
        },
        "13": {
          "source": "    fail = function(msg, error){",
          "coverage": 0
        },
        "14": {
          "source": "      console.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "15": {
          "source": "    };",
          "coverage": ""
        },
        "16": {
          "source": "  }",
          "coverage": ""
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "  var mbaas = opts.service;",
          "coverage": 1
        },
        "19": {
          "source": "  var params = opts.params;",
          "coverage": 1
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "  cloud.ready(function(err, cloudHost){",
          "coverage": 1
        },
        "22": {
          "source": "    logger.debug(\"Calling mbaas now\");",
          "coverage": 1
        },
        "23": {
          "source": "    if(err){",
          "coverage": 1
        },
        "24": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "25": {
          "source": "    } else {",
          "coverage": ""
        },
        "26": {
          "source": "      var cloud_host = cloud.getCloudHost();",
          "coverage": 1
        },
        "27": {
          "source": "      var url = cloud_host.getMBAASUrl(mbaas);",
          "coverage": 1
        },
        "28": {
          "source": "      params = fhparams.addFHParams(params);",
          "coverage": 1
        },
        "29": {
          "source": "      return ajax({",
          "coverage": 1
        },
        "30": {
          "source": "        \"url\": url,",
          "coverage": ""
        },
        "31": {
          "source": "        \"tryJSONP\": true,",
          "coverage": ""
        },
        "32": {
          "source": "        \"type\": \"POST\",",
          "coverage": ""
        },
        "33": {
          "source": "        \"dataType\": \"json\",",
          "coverage": ""
        },
        "34": {
          "source": "        \"data\": JSON.stringify(params),",
          "coverage": ""
        },
        "35": {
          "source": "        \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "36": {
          "source": "        \"timeout\": opts.timeout || appProps.timeout,",
          "coverage": ""
        },
        "37": {
          "source": "        \"success\": success,",
          "coverage": ""
        },
        "38": {
          "source": "        \"error\": function(req, statusText, error){",
          "coverage": ""
        },
        "39": {
          "source": "          return handleError(fail, req, statusText, error);",
          "coverage": 0
        },
        "40": {
          "source": "        }",
          "coverage": ""
        },
        "41": {
          "source": "      });",
          "coverage": ""
        },
        "42": {
          "source": "    }",
          "coverage": ""
        },
        "43": {
          "source": "  });",
          "coverage": ""
        },
        "44": {
          "source": "} ",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_sec.js",
      "coverage": 67.74193548387096,
      "hits": 21,
      "misses": 10,
      "sloc": 31,
      "source": {
        "1": {
          "source": "var keygen = require(\"./security/aes-keygen\");",
          "coverage": 1
        },
        "2": {
          "source": "var aes = require(\"./security/aes-node\");",
          "coverage": 1
        },
        "3": {
          "source": "var rsa = require(\"./security/rsa-node\");",
          "coverage": 1
        },
        "4": {
          "source": "var hash = require(\"./security/hash\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "module.exports = function(p, s, f){",
          "coverage": 1
        },
        "7": {
          "source": "  if (!p.act) {",
          "coverage": 4
        },
        "8": {
          "source": "    f('bad_act', {}, p);",
          "coverage": 0
        },
        "9": {
          "source": "    return;",
          "coverage": 0
        },
        "10": {
          "source": "  }",
          "coverage": ""
        },
        "11": {
          "source": "  if (!p.params) {",
          "coverage": 4
        },
        "12": {
          "source": "    f('no_params', {}, p);",
          "coverage": 0
        },
        "13": {
          "source": "    return;",
          "coverage": 0
        },
        "14": {
          "source": "  }",
          "coverage": ""
        },
        "15": {
          "source": "  if (!p.params.algorithm) {",
          "coverage": 4
        },
        "16": {
          "source": "    f('no_params_algorithm', {}, p);",
          "coverage": 0
        },
        "17": {
          "source": "    return;",
          "coverage": 0
        },
        "18": {
          "source": "  }",
          "coverage": ""
        },
        "19": {
          "source": "  p.params.algorithm = p.params.algorithm.toLowerCase();",
          "coverage": 4
        },
        "20": {
          "source": "  if(p.act === \"hash\"){",
          "coverage": 4
        },
        "21": {
          "source": "    return hash(p, s, f);",
          "coverage": 0
        },
        "22": {
          "source": "  } else if(p.act === \"encrypt\"){",
          "coverage": 4
        },
        "23": {
          "source": "    if(p.params.algorithm === \"aes\"){",
          "coverage": 2
        },
        "24": {
          "source": "      return aes.encrypt(p, s, f);",
          "coverage": 1
        },
        "25": {
          "source": "    } else if(p.params.algorithm === \"rsa\"){",
          "coverage": 1
        },
        "26": {
          "source": "      return rsa.encrypt(p, s, f);",
          "coverage": 1
        },
        "27": {
          "source": "    } else {",
          "coverage": ""
        },
        "28": {
          "source": "      return f('encrypt_bad_algorithm:' + p.params.algorithm, {}, p);",
          "coverage": 0
        },
        "29": {
          "source": "    }",
          "coverage": ""
        },
        "30": {
          "source": "  } else if(p.act === \"decrypt\"){",
          "coverage": 2
        },
        "31": {
          "source": "    if(p.params.algorithm === \"aes\"){",
          "coverage": 1
        },
        "32": {
          "source": "      return aes.decrypt(p, s, f);",
          "coverage": 1
        },
        "33": {
          "source": "    } else {",
          "coverage": ""
        },
        "34": {
          "source": "      return f('decrypt_bad_algorithm:' + p.params.algorithm, {}, p);",
          "coverage": 0
        },
        "35": {
          "source": "    }",
          "coverage": ""
        },
        "36": {
          "source": "  } else if(p.act === \"keygen\"){",
          "coverage": 1
        },
        "37": {
          "source": "    if(p.params.algorithm === \"aes\"){",
          "coverage": 1
        },
        "38": {
          "source": "      return keygen(p, s, f);",
          "coverage": 1
        },
        "39": {
          "source": "    } else {",
          "coverage": ""
        },
        "40": {
          "source": "      return f('keygen_bad_algorithm:' + p.params.algorithm, {}, p);",
          "coverage": 0
        },
        "41": {
          "source": "    }",
          "coverage": ""
        },
        "42": {
          "source": "  }",
          "coverage": ""
        },
        "43": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/appProps.js",
      "coverage": 58.97435897435898,
      "hits": 23,
      "misses": 16,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var consts = require(\"./constants\");",
          "coverage": 2
        },
        "2": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "3": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "4": {
          "source": "var qs = require(\"./queryMap\");",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "var app_props = null;",
          "coverage": 2
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "var load = function(cb) {",
          "coverage": 2
        },
        "9": {
          "source": "  var doc_url = document.location.href;",
          "coverage": 9
        },
        "10": {
          "source": "  var url_params = qs(doc_url);",
          "coverage": 9
        },
        "11": {
          "source": "  var local = (typeof url_params.url !== 'undefined');",
          "coverage": 9
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "  // For local environments, no init needed",
          "coverage": ""
        },
        "14": {
          "source": "  if (local) {",
          "coverage": 9
        },
        "15": {
          "source": "    app_props = {};",
          "coverage": 9
        },
        "16": {
          "source": "    app_props.local = true;",
          "coverage": 9
        },
        "17": {
          "source": "    app_props.host = url_params.url.replace(/#.*?$/g, '');",
          "coverage": 9
        },
        "18": {
          "source": "    app_props.appid = \"000000000000000000000000\";",
          "coverage": 9
        },
        "19": {
          "source": "    app_props.appkey = \"0000000000000000000000000000000000000000\";",
          "coverage": 9
        },
        "20": {
          "source": "    app_props.projectid = \"000000000000000000000000\";",
          "coverage": 9
        },
        "21": {
          "source": "    app_props.connectiontag = \"0.0.1\";",
          "coverage": 9
        },
        "22": {
          "source": "    app_props.loglevel = url_params.loglevel;",
          "coverage": 9
        },
        "23": {
          "source": "    return cb(null, app_props);",
          "coverage": 9
        },
        "24": {
          "source": "  }",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "  var config_url = url_params.fhconfig || consts.config_js;",
          "coverage": 0
        },
        "27": {
          "source": "  ajax({",
          "coverage": 0
        },
        "28": {
          "source": "    url: config_url,",
          "coverage": ""
        },
        "29": {
          "source": "    dataType: \"json\",",
          "coverage": ""
        },
        "30": {
          "source": "    success: function(data) {",
          "coverage": ""
        },
        "31": {
          "source": "      logger.debug(\"fhconfig = \" + JSON.stringify(data));",
          "coverage": 0
        },
        "32": {
          "source": "      //when load the config file on device, because file:// protocol is used, it will never call fail call back. The success callback will be called but the data value will be null.",
          "coverage": ""
        },
        "33": {
          "source": "      if (null == data) {",
          "coverage": 0
        },
        "34": {
          "source": "        //fh v2 only",
          "coverage": ""
        },
        "35": {
          "source": "        if(window.fh_app_props){",
          "coverage": 0
        },
        "36": {
          "source": "          app_props = window.fh_app_props;",
          "coverage": 0
        },
        "37": {
          "source": "          return cb(null, window.fh_app_props);",
          "coverage": 0
        },
        "38": {
          "source": "        }",
          "coverage": ""
        },
        "39": {
          "source": "        return cb(new Error(\"app_config_missing\"));",
          "coverage": 0
        },
        "40": {
          "source": "      } else {",
          "coverage": ""
        },
        "41": {
          "source": "        app_props = data;",
          "coverage": 0
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "        cb(null, app_props);",
          "coverage": 0
        },
        "44": {
          "source": "      }",
          "coverage": ""
        },
        "45": {
          "source": "    },",
          "coverage": ""
        },
        "46": {
          "source": "    error: function(req, statusText, error) {",
          "coverage": ""
        },
        "47": {
          "source": "      //fh v2 only",
          "coverage": ""
        },
        "48": {
          "source": "      if(window.fh_app_props){",
          "coverage": 0
        },
        "49": {
          "source": "        app_props = window.fh_app_props;",
          "coverage": 0
        },
        "50": {
          "source": "        return cb(null, window.fh_app_props);",
          "coverage": 0
        },
        "51": {
          "source": "      }",
          "coverage": ""
        },
        "52": {
          "source": "      logger.error(consts.config_js + \" Not Found\");",
          "coverage": 0
        },
        "53": {
          "source": "      cb(new Error(\"app_config_missing\"));",
          "coverage": 0
        },
        "54": {
          "source": "    }",
          "coverage": ""
        },
        "55": {
          "source": "  });",
          "coverage": ""
        },
        "56": {
          "source": "};",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "var setAppProps = function(props) {",
          "coverage": 2
        },
        "59": {
          "source": "  app_props = props;",
          "coverage": 0
        },
        "60": {
          "source": "};",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "var getAppProps = function() {",
          "coverage": 2
        },
        "63": {
          "source": "  return app_props;",
          "coverage": 130
        },
        "64": {
          "source": "};",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "67": {
          "source": "  load: load,",
          "coverage": ""
        },
        "68": {
          "source": "  getAppProps: getAppProps,",
          "coverage": ""
        },
        "69": {
          "source": "  setAppProps: setAppProps",
          "coverage": ""
        },
        "70": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/checkAuth.js",
      "coverage": 28.8135593220339,
      "hits": 17,
      "misses": 42,
      "sloc": 59,
      "source": {
        "1": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 1
        },
        "2": {
          "source": "var queryMap = require(\"./queryMap\");",
          "coverage": 1
        },
        "3": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 1
        },
        "4": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "var checkAuth = function(url) {",
          "coverage": 1
        },
        "7": {
          "source": "  if (/\\_fhAuthCallback/.test(url)) {",
          "coverage": 1
        },
        "8": {
          "source": "    var qmap = queryMap(url);",
          "coverage": 0
        },
        "9": {
          "source": "    if (qmap) {",
          "coverage": 0
        },
        "10": {
          "source": "      var fhCallback = qmap[\"_fhAuthCallback\"];",
          "coverage": 0
        },
        "11": {
          "source": "      if (fhCallback) {",
          "coverage": 0
        },
        "12": {
          "source": "        if (qmap['result'] &amp;&amp; qmap['result'] === 'success') {",
          "coverage": 0
        },
        "13": {
          "source": "          var sucRes = {'sessionToken': qmap['fh_auth_session'], 'authResponse' : JSON.parse(decodeURIComponent(decodeURIComponent(qmap['authResponse'])))};",
          "coverage": 0
        },
        "14": {
          "source": "          fhparams.setAuthSessionToken(qmap['fh_auth_session']);",
          "coverage": 0
        },
        "15": {
          "source": "          window[fhCallback](null, sucRes);",
          "coverage": 0
        },
        "16": {
          "source": "        } else {",
          "coverage": ""
        },
        "17": {
          "source": "          window[fhCallback]({'message':qmap['message']});",
          "coverage": 0
        },
        "18": {
          "source": "        }",
          "coverage": ""
        },
        "19": {
          "source": "      }",
          "coverage": ""
        },
        "20": {
          "source": "    }",
          "coverage": ""
        },
        "21": {
          "source": "  }",
          "coverage": ""
        },
        "22": {
          "source": "};",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "var handleAuthResponse = function(endurl, res, success, fail){",
          "coverage": 1
        },
        "25": {
          "source": "  if(res.status &amp;&amp; res.status === \"ok\"){",
          "coverage": 1
        },
        "26": {
          "source": "",
          "coverage": ""
        },
        "27": {
          "source": "    var onComplete = function(res){",
          "coverage": 1
        },
        "28": {
          "source": "      if(res.sessionToken){",
          "coverage": 1
        },
        "29": {
          "source": "        fhparams.setAuthSessionToken(res.sessionToken);",
          "coverage": 0
        },
        "30": {
          "source": "      }",
          "coverage": ""
        },
        "31": {
          "source": "      success(res);",
          "coverage": 1
        },
        "32": {
          "source": "    };",
          "coverage": ""
        },
        "33": {
          "source": "    //for OAuth, a url will be returned which means the user should be directed to that url to authenticate.",
          "coverage": ""
        },
        "34": {
          "source": "    //we try to use the ChildBrower plugin if it can be found. Otherwise send the url to the success function to allow developer to handle it.",
          "coverage": ""
        },
        "35": {
          "source": "    if(res.url){",
          "coverage": 1
        },
        "36": {
          "source": "      var inappBrowserWindow = null;",
          "coverage": 0
        },
        "37": {
          "source": "      var locationChange = function(new_url){",
          "coverage": 0
        },
        "38": {
          "source": "        if(new_url.indexOf(endurl) &gt; -1){",
          "coverage": 0
        },
        "39": {
          "source": "          if(inappBrowserWindow){",
          "coverage": 0
        },
        "40": {
          "source": "            inappBrowserWindow.close();",
          "coverage": 0
        },
        "41": {
          "source": "          }",
          "coverage": ""
        },
        "42": {
          "source": "          var qmap = queryMap(new_url);",
          "coverage": 0
        },
        "43": {
          "source": "          if(qmap) {",
          "coverage": 0
        },
        "44": {
          "source": "            if(qmap['result'] &amp;&amp; qmap['result'] === 'success'){",
          "coverage": 0
        },
        "45": {
          "source": "              var sucRes = {'sessionToken': qmap['fh_auth_session'], 'authResponse' : JSON.parse(decodeURIComponent(decodeURIComponent(qmap['authResponse'])))};",
          "coverage": 0
        },
        "46": {
          "source": "              onComplete(sucRes);",
          "coverage": 0
        },
        "47": {
          "source": "            } else {",
          "coverage": ""
        },
        "48": {
          "source": "              if(fail){",
          "coverage": 0
        },
        "49": {
          "source": "                fail(\"auth_failed\", {'message':qmap['message']});",
          "coverage": 0
        },
        "50": {
          "source": "              }",
          "coverage": ""
        },
        "51": {
          "source": "            }",
          "coverage": ""
        },
        "52": {
          "source": "          } else {",
          "coverage": ""
        },
        "53": {
          "source": "            if(fail){",
          "coverage": 0
        },
        "54": {
          "source": "                fail(\"auth_failed\", {'message':qmap['message']});",
          "coverage": 0
        },
        "55": {
          "source": "            }",
          "coverage": ""
        },
        "56": {
          "source": "          }",
          "coverage": ""
        },
        "57": {
          "source": "        }",
          "coverage": ""
        },
        "58": {
          "source": "      };",
          "coverage": ""
        },
        "59": {
          "source": "      if(window.PhoneGap || window.cordova){",
          "coverage": 0
        },
        "60": {
          "source": "        if(window.plugins &amp;&amp; window.plugins.childBrowser){",
          "coverage": 0
        },
        "61": {
          "source": "          //found childbrowser plugin,add the event listener and load it",
          "coverage": ""
        },
        "62": {
          "source": "          //we need to know when the OAuth process is finished by checking for the presence of endurl. If the endurl is found, it means the authentication finished and we should find if it's successful.",
          "coverage": ""
        },
        "63": {
          "source": "          if(typeof window.plugins.childBrowser.showWebPage === \"function\"){",
          "coverage": 0
        },
        "64": {
          "source": "            window.plugins.childBrowser.onLocationChange = locationChange;",
          "coverage": 0
        },
        "65": {
          "source": "            window.plugins.childBrowser.showWebPage(res.url);",
          "coverage": 0
        },
        "66": {
          "source": "            inappBrowserWindow = window.plugins.childBrowser;",
          "coverage": 0
        },
        "67": {
          "source": "          }",
          "coverage": ""
        },
        "68": {
          "source": "        } else {",
          "coverage": ""
        },
        "69": {
          "source": "          try {",
          "coverage": 0
        },
        "70": {
          "source": "            inappBrowserWindow = window.open(res.url, \"_blank\", 'location=yes');",
          "coverage": 0
        },
        "71": {
          "source": "            inappBrowserWindow.addEventListener(\"loadstart\", function(ev){",
          "coverage": 0
        },
        "72": {
          "source": "              locationChange(ev.url);",
          "coverage": 0
        },
        "73": {
          "source": "            });",
          "coverage": ""
        },
        "74": {
          "source": "          } catch(e){",
          "coverage": ""
        },
        "75": {
          "source": "            logger.info(\"InAppBrowser plugin is not intalled.\");",
          "coverage": 0
        },
        "76": {
          "source": "            onComplete(res);",
          "coverage": 0
        },
        "77": {
          "source": "          }",
          "coverage": ""
        },
        "78": {
          "source": "        }",
          "coverage": ""
        },
        "79": {
          "source": "      } else {",
          "coverage": ""
        },
        "80": {
          "source": "       document.location.href = res.url;",
          "coverage": 0
        },
        "81": {
          "source": "      }",
          "coverage": ""
        },
        "82": {
          "source": "    } else {",
          "coverage": ""
        },
        "83": {
          "source": "      onComplete(res);",
          "coverage": 1
        },
        "84": {
          "source": "    }",
          "coverage": ""
        },
        "85": {
          "source": "  } else {",
          "coverage": ""
        },
        "86": {
          "source": "    if(fail){",
          "coverage": 0
        },
        "87": {
          "source": "      fail(\"auth_failed\", res);",
          "coverage": 0
        },
        "88": {
          "source": "    }",
          "coverage": ""
        },
        "89": {
          "source": "  }",
          "coverage": ""
        },
        "90": {
          "source": "};",
          "coverage": ""
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "//This is mainly for using $fh.auth inside browsers. If the authentication method is OAuth, at the end of the process, the user will be re-directed to",
          "coverage": ""
        },
        "93": {
          "source": "//a url that we specified for checking if the auth is successful. So we always check the url to see if we are on the re-directed page.",
          "coverage": ""
        },
        "94": {
          "source": "if (window.addEventListener) {",
          "coverage": 1
        },
        "95": {
          "source": "  window.addEventListener('load', function(){",
          "coverage": 1
        },
        "96": {
          "source": "    checkAuth(window.location.href);",
          "coverage": 1
        },
        "97": {
          "source": "  }, false); //W3C",
          "coverage": ""
        },
        "98": {
          "source": "} else if (window.attachEvent) {",
          "coverage": 0
        },
        "99": {
          "source": "  window.attachEvent('onload', function(){",
          "coverage": 0
        },
        "100": {
          "source": "    checkAuth(window.location.href);",
          "coverage": 0
        },
        "101": {
          "source": "  }); //IE",
          "coverage": ""
        },
        "102": {
          "source": "}",
          "coverage": ""
        },
        "103": {
          "source": "",
          "coverage": ""
        },
        "104": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "105": {
          "source": "  \"handleAuthResponse\": handleAuthResponse",
          "coverage": ""
        },
        "106": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/constants.js",
      "coverage": 100,
      "hits": 1,
      "misses": 0,
      "sloc": 1,
      "source": {
        "1": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "2": {
          "source": "  \"boxprefix\": \"/box/srv/1.1/\",",
          "coverage": ""
        },
        "3": {
          "source": "  \"sdk_version\": \"BUILD_VERSION\",",
          "coverage": ""
        },
        "4": {
          "source": "  \"config_js\": \"fhconfig.json\",",
          "coverage": ""
        },
        "5": {
          "source": "  \"INIT_EVENT\": \"fhinit\",",
          "coverage": ""
        },
        "6": {
          "source": "  \"INTERNAL_CONFIG_LOADED_EVENT\": \"internalfhconfigloaded\",",
          "coverage": ""
        },
        "7": {
          "source": "  \"CONFIG_LOADED_EVENT\": \"fhconfigloaded\"",
          "coverage": ""
        },
        "8": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/cookies.js",
      "coverage": 92.85714285714286,
      "hits": 13,
      "misses": 1,
      "sloc": 14,
      "source": {
        "1": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "2": {
          "source": "  readCookieValue  : function (cookie_name) {",
          "coverage": ""
        },
        "3": {
          "source": "    var name_str = cookie_name + \"=\";",
          "coverage": 3
        },
        "4": {
          "source": "    var cookies = document.cookie.split(\";\");",
          "coverage": 3
        },
        "5": {
          "source": "    for (var i = 0; i &lt; cookies.length; i++) {",
          "coverage": 3
        },
        "6": {
          "source": "      var c = cookies[i];",
          "coverage": 3
        },
        "7": {
          "source": "      while (c.charAt(0) === ' ') {",
          "coverage": 3
        },
        "8": {
          "source": "        c = c.substring(1, c.length);",
          "coverage": 0
        },
        "9": {
          "source": "      }",
          "coverage": ""
        },
        "10": {
          "source": "      if (c.indexOf(name_str) === 0) {",
          "coverage": 3
        },
        "11": {
          "source": "        return c.substring(name_str.length, c.length);",
          "coverage": 2
        },
        "12": {
          "source": "      }",
          "coverage": ""
        },
        "13": {
          "source": "    }",
          "coverage": ""
        },
        "14": {
          "source": "    return null;",
          "coverage": 1
        },
        "15": {
          "source": "  },",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "  createCookie : function (cookie_name, cookie_value) {",
          "coverage": ""
        },
        "18": {
          "source": "    var date = new Date();",
          "coverage": 1
        },
        "19": {
          "source": "    date.setTime(date.getTime() + 36500 * 24 * 60 * 60 * 1000); //100 years",
          "coverage": 1
        },
        "20": {
          "source": "    var expires = \"; expires=\" + date.toGMTString();",
          "coverage": 1
        },
        "21": {
          "source": "    document.cookie = cookie_name + \"=\" + cookie_value + expires + \"; path = /\";",
          "coverage": 1
        },
        "22": {
          "source": "  }",
          "coverage": ""
        },
        "23": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/device.js",
      "coverage": 76.92307692307693,
      "hits": 30,
      "misses": 9,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var cookies = require(\"./cookies\");",
          "coverage": 2
        },
        "2": {
          "source": "var uuidModule = require(\"./uuid\");",
          "coverage": 2
        },
        "3": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "6": {
          "source": "  //try to get the unique device identifier",
          "coverage": ""
        },
        "7": {
          "source": "  \"getDeviceId\": function(){",
          "coverage": ""
        },
        "8": {
          "source": "    //check for cordova/phonegap first",
          "coverage": ""
        },
        "9": {
          "source": "    if(typeof window.fhdevice !== \"undefined\" &amp;&amp; typeof window.fhdevice.uuid !== \"undefined\"){",
          "coverage": 3
        },
        "10": {
          "source": "      return window.fhdevice.uuid;",
          "coverage": 0
        },
        "11": {
          "source": "    } else if(typeof window.device !== \"undefined\" &amp;&amp; typeof window.device.uuid !== \"undefined\"){",
          "coverage": 3
        },
        "12": {
          "source": "      return window.device.uuid;",
          "coverage": 0
        },
        "13": {
          "source": "    }  else if(typeof navigator.device !== \"undefined\" &amp;&amp; typeof navigator.device.uuid !== \"undefined\"){",
          "coverage": 3
        },
        "14": {
          "source": "      return navigator.device.uuid;",
          "coverage": 0
        },
        "15": {
          "source": "    } else {",
          "coverage": ""
        },
        "16": {
          "source": "      var _mock_uuid_cookie_name = \"mock_uuid\";",
          "coverage": 3
        },
        "17": {
          "source": "      var uuid = cookies.readCookieValue(_mock_uuid_cookie_name);",
          "coverage": 3
        },
        "18": {
          "source": "      if(null == uuid){",
          "coverage": 3
        },
        "19": {
          "source": "          uuid = uuidModule.createUUID();",
          "coverage": 1
        },
        "20": {
          "source": "          cookies.createCookie(_mock_uuid_cookie_name, uuid);",
          "coverage": 1
        },
        "21": {
          "source": "      }",
          "coverage": ""
        },
        "22": {
          "source": "      return uuid;",
          "coverage": 3
        },
        "23": {
          "source": "    }",
          "coverage": ""
        },
        "24": {
          "source": "  },",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "  //this is for fixing analytics issues when upgrading from io6 to ios7. Probably can be deprecated now",
          "coverage": ""
        },
        "27": {
          "source": "  \"getCuidMap\": function(){",
          "coverage": ""
        },
        "28": {
          "source": "    if(typeof window.fhdevice !== \"undefined\" &amp;&amp; typeof window.fhdevice.cuidMap !== \"undefined\"){",
          "coverage": 2
        },
        "29": {
          "source": "      return window.fhdevice.cuidMap;",
          "coverage": 0
        },
        "30": {
          "source": "    } else if(typeof window.device !== \"undefined\" &amp;&amp; typeof window.device.cuidMap !== \"undefined\"){",
          "coverage": 2
        },
        "31": {
          "source": "      return window.device.cuidMap;",
          "coverage": 0
        },
        "32": {
          "source": "    }  else if(typeof navigator.device !== \"undefined\" &amp;&amp; typeof navigator.device.cuidMap !== \"undefined\"){",
          "coverage": 2
        },
        "33": {
          "source": "      return navigator.device.cuidMap;",
          "coverage": 0
        },
        "34": {
          "source": "    }",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "    return null;",
          "coverage": 2
        },
        "37": {
          "source": "  },",
          "coverage": ""
        },
        "38": {
          "source": "",
          "coverage": ""
        },
        "39": {
          "source": "  \"getDestination\": function(){",
          "coverage": ""
        },
        "40": {
          "source": "    var destination = null;",
          "coverage": 2
        },
        "41": {
          "source": "    var platformsToTest = require(\"./platformsMap\");",
          "coverage": 2
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "",
          "coverage": ""
        },
        "44": {
          "source": "    var userAgent = navigator.userAgent;",
          "coverage": 2
        },
        "45": {
          "source": "",
          "coverage": ""
        },
        "46": {
          "source": "    var dest_override = document.location.search.split(\"fh_destination_code=\");",
          "coverage": 2
        },
        "47": {
          "source": "    if (dest_override.length &gt; 1) {",
          "coverage": 2
        },
        "48": {
          "source": "     destination = dest_override[1];",
          "coverage": 0
        },
        "49": {
          "source": "    } else if (typeof window.fh_destination_code !== 'undefined') {",
          "coverage": 2
        },
        "50": {
          "source": "      destination = window.fh_destination_code;",
          "coverage": 0
        },
        "51": {
          "source": "    } else {",
          "coverage": ""
        },
        "52": {
          "source": "      platformsToTest.forEach(function(testDestination){",
          "coverage": 2
        },
        "53": {
          "source": "        testDestination.test.forEach(function(destinationTest){",
          "coverage": 12
        },
        "54": {
          "source": "          if(userAgent.indexOf(destinationTest) &gt; -1){",
          "coverage": 16
        },
        "55": {
          "source": "            destination = testDestination.destination;",
          "coverage": 0
        },
        "56": {
          "source": "          }",
          "coverage": ""
        },
        "57": {
          "source": "        });",
          "coverage": ""
        },
        "58": {
          "source": "      });",
          "coverage": ""
        },
        "59": {
          "source": "    }",
          "coverage": ""
        },
        "60": {
          "source": "",
          "coverage": ""
        },
        "61": {
          "source": "    if(destination == null){ //No user agents were found, set to default web",
          "coverage": 2
        },
        "62": {
          "source": "      destination = \"web\";",
          "coverage": 2
        },
        "63": {
          "source": "    }",
          "coverage": ""
        },
        "64": {
          "source": "",
          "coverage": ""
        },
        "65": {
          "source": "    logger.debug(\"destination = \" + destination);",
          "coverage": 2
        },
        "66": {
          "source": "",
          "coverage": ""
        },
        "67": {
          "source": "    return destination;",
          "coverage": 2
        },
        "68": {
          "source": "  }",
          "coverage": ""
        },
        "69": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/events.js",
      "coverage": 100,
      "hits": 4,
      "misses": 0,
      "sloc": 4,
      "source": {
        "1": {
          "source": "var EventEmitter = require('events').EventEmitter;",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var emitter = new EventEmitter();",
          "coverage": 2
        },
        "4": {
          "source": "emitter.setMaxListeners(0);",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "module.exports = emitter;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/fhparams.js",
      "coverage": 83.72093023255815,
      "hits": 36,
      "misses": 7,
      "sloc": 43,
      "source": {
        "1": {
          "source": "var device = require(\"./device\");",
          "coverage": 2
        },
        "2": {
          "source": "var sdkversion = require(\"./sdkversion\");",
          "coverage": 2
        },
        "3": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "4": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "var defaultParams = null;",
          "coverage": 2
        },
        "7": {
          "source": "var authSessionToken = null;",
          "coverage": 2
        },
        "8": {
          "source": "//TODO: review these options, we probably only needs all of them for init calls, but we shouldn't need all of them for act calls",
          "coverage": ""
        },
        "9": {
          "source": "var buildFHParams = function(){",
          "coverage": 2
        },
        "10": {
          "source": "  if(defaultParams){",
          "coverage": 48
        },
        "11": {
          "source": "    return defaultParams;",
          "coverage": 46
        },
        "12": {
          "source": "  }",
          "coverage": ""
        },
        "13": {
          "source": "  var fhparams = {};",
          "coverage": 2
        },
        "14": {
          "source": "  fhparams.cuid = device.getDeviceId();",
          "coverage": 2
        },
        "15": {
          "source": "  fhparams.cuidMap = device.getCuidMap();",
          "coverage": 2
        },
        "16": {
          "source": "  fhparams.destination = device.getDestination();",
          "coverage": 2
        },
        "17": {
          "source": "  ",
          "coverage": ""
        },
        "18": {
          "source": "  if(window.device || navigator.device){",
          "coverage": 2
        },
        "19": {
          "source": "    fhparams.device = window.device || navigator.device;",
          "coverage": 0
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "  //backward compatible",
          "coverage": ""
        },
        "23": {
          "source": "  if (typeof window.fh_app_version !== 'undefined'){",
          "coverage": 2
        },
        "24": {
          "source": "    fhparams.app_version = fh_app_version;",
          "coverage": 0
        },
        "25": {
          "source": "  }",
          "coverage": ""
        },
        "26": {
          "source": "  if (typeof window.fh_project_version !== 'undefined'){",
          "coverage": 2
        },
        "27": {
          "source": "    fhparams.project_version = fh_project_version;",
          "coverage": 0
        },
        "28": {
          "source": "  }",
          "coverage": ""
        },
        "29": {
          "source": "  if (typeof window.fh_project_app_version !== 'undefined'){",
          "coverage": 2
        },
        "30": {
          "source": "    fhparams.project_app_version = fh_project_app_version;",
          "coverage": 0
        },
        "31": {
          "source": "  }",
          "coverage": ""
        },
        "32": {
          "source": "  fhparams.sdk_version = sdkversion();",
          "coverage": 2
        },
        "33": {
          "source": "  if(authSessionToken){",
          "coverage": 2
        },
        "34": {
          "source": "    fhparams.sessionToken = authSessionToken;",
          "coverage": 0
        },
        "35": {
          "source": "  }",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "  var app_props = appProps.getAppProps();",
          "coverage": 2
        },
        "38": {
          "source": "  if(app_props){",
          "coverage": 2
        },
        "39": {
          "source": "    fhparams.appid = app_props.appid;",
          "coverage": 2
        },
        "40": {
          "source": "    fhparams.appkey = app_props.appkey;",
          "coverage": 2
        },
        "41": {
          "source": "    fhparams.projectid = app_props.projectid;",
          "coverage": 2
        },
        "42": {
          "source": "    fhparams.analyticsTag =  app_props.analyticsTag;",
          "coverage": 2
        },
        "43": {
          "source": "    fhparams.connectiontag = app_props.connectiontag;",
          "coverage": 2
        },
        "44": {
          "source": "    if(app_props.init){",
          "coverage": 2
        },
        "45": {
          "source": "      fhparams.init = typeof(app_props.init) === \"string\" ? JSON.parse(app_props.init) : app_props.init;",
          "coverage": 0
        },
        "46": {
          "source": "    }",
          "coverage": ""
        },
        "47": {
          "source": "  }",
          "coverage": ""
        },
        "48": {
          "source": "  ",
          "coverage": ""
        },
        "49": {
          "source": "  defaultParams = fhparams;",
          "coverage": 2
        },
        "50": {
          "source": "  logger.debug(\"fhparams = \", defaultParams);",
          "coverage": 2
        },
        "51": {
          "source": "  return fhparams;",
          "coverage": 2
        },
        "52": {
          "source": "}",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "var addFHParams = function(params){",
          "coverage": 2
        },
        "55": {
          "source": "  var params = params || {};",
          "coverage": 48
        },
        "56": {
          "source": "  params.__fh = buildFHParams();",
          "coverage": 48
        },
        "57": {
          "source": "  return params;",
          "coverage": 48
        },
        "58": {
          "source": "}",
          "coverage": ""
        },
        "59": {
          "source": "",
          "coverage": ""
        },
        "60": {
          "source": "var setAuthSessionToken = function(sessionToken){",
          "coverage": 2
        },
        "61": {
          "source": "  authSessionToken = sessionToken;",
          "coverage": 0
        },
        "62": {
          "source": "}",
          "coverage": ""
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "65": {
          "source": "  \"buildFHParams\": buildFHParams,",
          "coverage": ""
        },
        "66": {
          "source": "  \"addFHParams\": addFHParams,",
          "coverage": ""
        },
        "67": {
          "source": "  \"setAuthSessionToken\":setAuthSessionToken",
          "coverage": ""
        },
        "68": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/config.js",
      "coverage": 18.446601941747574,
      "hits": 19,
      "misses": 84,
      "sloc": 103,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "3": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var online = true;",
          "coverage": 1
        },
        "6": {
          "source": "var cloudHost = \"notset\";",
          "coverage": 1
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "function Config() {",
          "coverage": 1
        },
        "9": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "10": {
          "source": "        '_type': 'config',",
          "coverage": ""
        },
        "11": {
          "source": "        \"_ludid\": \"config\"",
          "coverage": ""
        },
        "12": {
          "source": "    });",
          "coverage": ""
        },
        "13": {
          "source": "};",
          "coverage": 1
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "utils.extend(Config, Model);",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "//call in appForm.init",
          "coverage": ""
        },
        "18": {
          "source": "Config.prototype.init = function(config, cb) {",
          "coverage": 1
        },
        "19": {
          "source": "    if (config.studioMode) { //running in studio",
          "coverage": 0
        },
        "20": {
          "source": "        this.set(\"studioMode\", true);",
          "coverage": 0
        },
        "21": {
          "source": "        this.fromJSON(config);",
          "coverage": 0
        },
        "22": {
          "source": "        cb();",
          "coverage": 0
        },
        "23": {
          "source": "    } else {",
          "coverage": ""
        },
        "24": {
          "source": "        this.set(\"studioMode\", false);",
          "coverage": 0
        },
        "25": {
          "source": "        //load hard coded static config first",
          "coverage": ""
        },
        "26": {
          "source": "        this.staticConfig(config);",
          "coverage": 0
        },
        "27": {
          "source": "        //attempt to load config from mbaas then local storage.",
          "coverage": ""
        },
        "28": {
          "source": "        this.refresh(true, cb);",
          "coverage": 0
        },
        "29": {
          "source": "    }",
          "coverage": ""
        },
        "30": {
          "source": "};",
          "coverage": ""
        },
        "31": {
          "source": "Config.prototype.isStudioMode = function() {",
          "coverage": 1
        },
        "32": {
          "source": "    return this.get(\"studioMode\");",
          "coverage": 0
        },
        "33": {
          "source": "};",
          "coverage": ""
        },
        "34": {
          "source": "Config.prototype.refresh = function(fromRemote, cb) {",
          "coverage": 1
        },
        "35": {
          "source": "    var dataAgent = this.getDataAgent();",
          "coverage": 0
        },
        "36": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "37": {
          "source": "    if (typeof cb === 'undefined') {",
          "coverage": 0
        },
        "38": {
          "source": "        cb = fromRemote;",
          "coverage": 0
        },
        "39": {
          "source": "        fromRemote = false;",
          "coverage": 0
        },
        "40": {
          "source": "    }",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "    function _handler(err, res) {",
          "coverage": 0
        },
        "43": {
          "source": "        var configObj = {};",
          "coverage": 0
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "        if (!err &amp;&amp; res) {",
          "coverage": 0
        },
        "46": {
          "source": "            if (typeof(res) === \"string\") {",
          "coverage": 0
        },
        "47": {
          "source": "                try {",
          "coverage": 0
        },
        "48": {
          "source": "                    configObj = JSON.parse(res);",
          "coverage": 0
        },
        "49": {
          "source": "                } catch (error) {",
          "coverage": ""
        },
        "50": {
          "source": "                    $fh.forms.log.e(\"Invalid json config defintion from remote\", error);",
          "coverage": 0
        },
        "51": {
          "source": "                    configObj = {};",
          "coverage": 0
        },
        "52": {
          "source": "                    return cb(error, null);",
          "coverage": 0
        },
        "53": {
          "source": "                }",
          "coverage": ""
        },
        "54": {
          "source": "            } else {",
          "coverage": ""
        },
        "55": {
          "source": "                configObj = res;",
          "coverage": 0
        },
        "56": {
          "source": "            }",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "            self.set(\"defaultConfigValues\", configObj);",
          "coverage": 0
        },
        "59": {
          "source": "            self.saveLocal(function(err, updatedConfigJSON) {",
          "coverage": 0
        },
        "60": {
          "source": "                cb(err, self);",
          "coverage": 0
        },
        "61": {
          "source": "            });",
          "coverage": ""
        },
        "62": {
          "source": "        } else {",
          "coverage": ""
        },
        "63": {
          "source": "            cb(err, self);",
          "coverage": 0
        },
        "64": {
          "source": "        }",
          "coverage": ""
        },
        "65": {
          "source": "    }",
          "coverage": ""
        },
        "66": {
          "source": "    self.loadLocal(function(err, localConfig) {",
          "coverage": 0
        },
        "67": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "68": {
          "source": "            $fh.forms.log.e(\"Config loadLocal \", err);",
          "coverage": 0
        },
        "69": {
          "source": "        }",
          "coverage": ""
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "        dataAgent.remoteStore.read(self, _handler);",
          "coverage": 0
        },
        "72": {
          "source": "    });",
          "coverage": ""
        },
        "73": {
          "source": "};",
          "coverage": ""
        },
        "74": {
          "source": "Config.prototype.getCloudHost = function() {",
          "coverage": 1
        },
        "75": {
          "source": "    return cloudHost;",
          "coverage": 0
        },
        "76": {
          "source": "};",
          "coverage": ""
        },
        "77": {
          "source": "Config.prototype.staticConfig = function(config) {",
          "coverage": 1
        },
        "78": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "79": {
          "source": "    var defaultConfig = {",
          "coverage": 0
        },
        "80": {
          "source": "        \"defaultConfigValues\": {},",
          "coverage": ""
        },
        "81": {
          "source": "        \"userConfigValues\": {}",
          "coverage": ""
        },
        "82": {
          "source": "    };",
          "coverage": ""
        },
        "83": {
          "source": "    //If user already has set values, don't want to overwrite them",
          "coverage": ""
        },
        "84": {
          "source": "    if (self.get(\"userConfigValues\")) {",
          "coverage": 0
        },
        "85": {
          "source": "        defaultConfig.userConfigValues = self.get(\"userConfigValues\");",
          "coverage": 0
        },
        "86": {
          "source": "    }",
          "coverage": ""
        },
        "87": {
          "source": "    var appid = $fh &amp;&amp; $fh.app_props ? $fh.app_props.appid : config.appid;",
          "coverage": 0
        },
        "88": {
          "source": "    var mode = $fh &amp;&amp; $fh.app_props ? $fh.app_props.mode : 'dev';",
          "coverage": 0
        },
        "89": {
          "source": "    self.set('appId', appid);",
          "coverage": 0
        },
        "90": {
          "source": "    self.set('env', mode);",
          "coverage": 0
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "    if ($fh &amp;&amp; $fh._getDeviceId) {",
          "coverage": 0
        },
        "93": {
          "source": "        self.set('deviceId', $fh._getDeviceId());",
          "coverage": 0
        },
        "94": {
          "source": "    } else {",
          "coverage": ""
        },
        "95": {
          "source": "        self.set('deviceId', \"notset\");",
          "coverage": 0
        },
        "96": {
          "source": "    }",
          "coverage": ""
        },
        "97": {
          "source": "",
          "coverage": ""
        },
        "98": {
          "source": "",
          "coverage": ""
        },
        "99": {
          "source": "    self._initMBaaS(config);",
          "coverage": 0
        },
        "100": {
          "source": "    //Setting default retry attempts if not set in the config",
          "coverage": ""
        },
        "101": {
          "source": "    if (!config) {",
          "coverage": 0
        },
        "102": {
          "source": "        config = {};",
          "coverage": 0
        },
        "103": {
          "source": "    }",
          "coverage": ""
        },
        "104": {
          "source": "",
          "coverage": ""
        },
        "105": {
          "source": "    //config_admin_user can not be set by the user.",
          "coverage": ""
        },
        "106": {
          "source": "    if (config.config_admin_user) {",
          "coverage": 0
        },
        "107": {
          "source": "        delete config.config_admin_user;",
          "coverage": 0
        },
        "108": {
          "source": "    }",
          "coverage": ""
        },
        "109": {
          "source": "",
          "coverage": ""
        },
        "110": {
          "source": "    defaultConfig.defaultConfigValues = config;",
          "coverage": 0
        },
        "111": {
          "source": "    var staticConfig = {",
          "coverage": 0
        },
        "112": {
          "source": "        \"sent_save_min\": 5,",
          "coverage": ""
        },
        "113": {
          "source": "        \"sent_save_max\": 1000,",
          "coverage": ""
        },
        "114": {
          "source": "        \"targetWidth\": 640,",
          "coverage": ""
        },
        "115": {
          "source": "        \"targetHeight\": 480,",
          "coverage": ""
        },
        "116": {
          "source": "        \"quality\": 50,",
          "coverage": ""
        },
        "117": {
          "source": "        \"debug_mode\": false,",
          "coverage": ""
        },
        "118": {
          "source": "        \"logger\": false,",
          "coverage": ""
        },
        "119": {
          "source": "        \"max_retries\": 3,",
          "coverage": ""
        },
        "120": {
          "source": "        \"timeout\": 7,",
          "coverage": ""
        },
        "121": {
          "source": "        \"log_line_limit\": 5000,",
          "coverage": ""
        },
        "122": {
          "source": "        \"log_email\": \"test@example.com\",",
          "coverage": ""
        },
        "123": {
          "source": "        \"log_level\": 3,",
          "coverage": ""
        },
        "124": {
          "source": "        \"log_levels\": [\"error\", \"warning\", \"log\", \"debug\"],",
          "coverage": ""
        },
        "125": {
          "source": "        \"config_admin_user\": true,",
          "coverage": ""
        },
        "126": {
          "source": "        \"picture_source\": \"both\",",
          "coverage": ""
        },
        "127": {
          "source": "        \"saveToPhotoAlbum\": true,",
          "coverage": ""
        },
        "128": {
          "source": "        \"encodingType\": \"jpeg\",",
          "coverage": ""
        },
        "129": {
          "source": "        \"sent_items_to_keep_list\": [5, 10, 20, 30, 40, 50, 100]",
          "coverage": ""
        },
        "130": {
          "source": "    };",
          "coverage": ""
        },
        "131": {
          "source": "",
          "coverage": ""
        },
        "132": {
          "source": "    for (var key in staticConfig) {",
          "coverage": 0
        },
        "133": {
          "source": "        defaultConfig.defaultConfigValues[key] = staticConfig[key];",
          "coverage": 0
        },
        "134": {
          "source": "    }",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "    self.fromJSON(defaultConfig);",
          "coverage": 0
        },
        "137": {
          "source": "};",
          "coverage": ""
        },
        "138": {
          "source": "Config.prototype._initMBaaS = function(config) {",
          "coverage": 1
        },
        "139": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "140": {
          "source": "    config = config || {};",
          "coverage": 0
        },
        "141": {
          "source": "    var cloud_props = $fh.cloud_props;",
          "coverage": 0
        },
        "142": {
          "source": "    var app_props = $fh.app_props;",
          "coverage": 0
        },
        "143": {
          "source": "    var mode = 'dev';",
          "coverage": 0
        },
        "144": {
          "source": "    if (app_props) {",
          "coverage": 0
        },
        "145": {
          "source": "        cloudHost = app_props.host;",
          "coverage": 0
        },
        "146": {
          "source": "    }",
          "coverage": ""
        },
        "147": {
          "source": "    if (cloud_props &amp;&amp; cloud_props.hosts) {",
          "coverage": 0
        },
        "148": {
          "source": "        cloudHost = cloud_props.hosts.url;",
          "coverage": 0
        },
        "149": {
          "source": "    }",
          "coverage": ""
        },
        "150": {
          "source": "",
          "coverage": ""
        },
        "151": {
          "source": "    if (typeof(config.cloudHost) === 'string') {",
          "coverage": 0
        },
        "152": {
          "source": "        cloudHost = config.cloudHost;",
          "coverage": 0
        },
        "153": {
          "source": "    }",
          "coverage": ""
        },
        "154": {
          "source": "",
          "coverage": ""
        },
        "155": {
          "source": "",
          "coverage": ""
        },
        "156": {
          "source": "    self.set('mbaasBaseUrl', '/mbaas');",
          "coverage": 0
        },
        "157": {
          "source": "    var appId = self.get('appId');",
          "coverage": 0
        },
        "158": {
          "source": "    self.set('formUrls', {",
          "coverage": 0
        },
        "159": {
          "source": "        'forms': '/forms/:appId',",
          "coverage": ""
        },
        "160": {
          "source": "        'form': '/forms/:appId/:formId',",
          "coverage": ""
        },
        "161": {
          "source": "        'theme': '/forms/:appId/theme',",
          "coverage": ""
        },
        "162": {
          "source": "        'formSubmission': '/forms/:appId/:formId/submitFormData',",
          "coverage": ""
        },
        "163": {
          "source": "        'fileSubmission': '/forms/:appId/:submissionId/:fieldId/:hashName/submitFormFile',",
          "coverage": ""
        },
        "164": {
          "source": "        'base64fileSubmission': '/forms/:appId/:submissionId/:fieldId/:hashName/submitFormFileBase64',",
          "coverage": ""
        },
        "165": {
          "source": "        'submissionStatus': '/forms/:appId/:submissionId/status',",
          "coverage": ""
        },
        "166": {
          "source": "        'formSubmissionDownload': '/forms/:appId/submission/:submissionId',",
          "coverage": ""
        },
        "167": {
          "source": "        'fileSubmissionDownload': '/forms/:appId/submission/:submissionId/file/:fileGroupId',",
          "coverage": ""
        },
        "168": {
          "source": "        'completeSubmission': '/forms/:appId/:submissionId/completeSubmission',",
          "coverage": ""
        },
        "169": {
          "source": "        'config': '/forms/:appid/config/:deviceId'",
          "coverage": ""
        },
        "170": {
          "source": "    });",
          "coverage": ""
        },
        "171": {
          "source": "    self.set('statusUrl', '/sys/info/ping');",
          "coverage": 0
        },
        "172": {
          "source": "};",
          "coverage": ""
        },
        "173": {
          "source": "Config.prototype.setOnline = function() {",
          "coverage": 1
        },
        "174": {
          "source": "    var wasOnline = online;",
          "coverage": 0
        },
        "175": {
          "source": "    online = true;",
          "coverage": 0
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "    if (!wasOnline) {",
          "coverage": 0
        },
        "178": {
          "source": "        this.emit('online');",
          "coverage": 0
        },
        "179": {
          "source": "    }",
          "coverage": ""
        },
        "180": {
          "source": "};",
          "coverage": ""
        },
        "181": {
          "source": "Config.prototype.setOffline = function() {",
          "coverage": 1
        },
        "182": {
          "source": "    var wasOnline = online;",
          "coverage": 0
        },
        "183": {
          "source": "    online = false;",
          "coverage": 0
        },
        "184": {
          "source": "",
          "coverage": ""
        },
        "185": {
          "source": "    if (wasOnline) {",
          "coverage": 0
        },
        "186": {
          "source": "        this.emit('offline');",
          "coverage": 0
        },
        "187": {
          "source": "    }",
          "coverage": ""
        },
        "188": {
          "source": "};",
          "coverage": ""
        },
        "189": {
          "source": "Config.prototype.isOnline = function() {",
          "coverage": 1
        },
        "190": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "191": {
          "source": "    if (utils.isPhoneGap()) {",
          "coverage": 0
        },
        "192": {
          "source": "        if (navigator.connection.type) {",
          "coverage": 0
        },
        "193": {
          "source": "            return online === true &amp;&amp; navigator.connection.type !== Connection.NONE;",
          "coverage": 0
        },
        "194": {
          "source": "        } else {",
          "coverage": ""
        },
        "195": {
          "source": "            return online === true;",
          "coverage": 0
        },
        "196": {
          "source": "        }",
          "coverage": ""
        },
        "197": {
          "source": "    } else {",
          "coverage": ""
        },
        "198": {
          "source": "        return online === true;",
          "coverage": 0
        },
        "199": {
          "source": "    }",
          "coverage": ""
        },
        "200": {
          "source": "",
          "coverage": ""
        },
        "201": {
          "source": "};",
          "coverage": ""
        },
        "202": {
          "source": "Config.prototype.isStudioMode = function() {",
          "coverage": 1
        },
        "203": {
          "source": "    return this.get(\"studioMode\", false);",
          "coverage": 0
        },
        "204": {
          "source": "};",
          "coverage": ""
        },
        "205": {
          "source": "",
          "coverage": ""
        },
        "206": {
          "source": "module.exports = Config;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/dataAgent.js",
      "coverage": 23.214285714285715,
      "hits": 13,
      "misses": 43,
      "sloc": 56,
      "source": {
        "1": {
          "source": "var Store = require(\"./store\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var storeMbaas = require(\"./storeMbaas\");",
          "coverage": 1
        },
        "5": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "6": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "//default data agent uses mbaas as remote store, localstorage as local store",
          "coverage": ""
        },
        "10": {
          "source": "function DataAgent(remoteStore, localStore) {",
          "coverage": 1
        },
        "11": {
          "source": "    Store.call(this, 'DataAgent');",
          "coverage": 0
        },
        "12": {
          "source": "    this.remoteStore = remoteStore;",
          "coverage": 0
        },
        "13": {
          "source": "    this.localStore = localStore;",
          "coverage": 0
        },
        "14": {
          "source": "}",
          "coverage": ""
        },
        "15": {
          "source": "utils.extend(DataAgent, Store);",
          "coverage": 1
        },
        "16": {
          "source": "/**",
          "coverage": ""
        },
        "17": {
          "source": " * Read from local store first,",
          "coverage": ""
        },
        "18": {
          "source": " if not exists, read from remote store and store locally",
          "coverage": ""
        },
        "19": {
          "source": " * @param  {[type]}   model [description]",
          "coverage": ""
        },
        "20": {
          "source": " * @param  {Function} cb    (err,res,isFromRemote)",
          "coverage": ""
        },
        "21": {
          "source": " * @return {[type]}         [description]",
          "coverage": ""
        },
        "22": {
          "source": " */",
          "coverage": ""
        },
        "23": {
          "source": "DataAgent.prototype.read = function(model, cb) {",
          "coverage": 1
        },
        "24": {
          "source": "    log.d(\"DataAgent read \", model);",
          "coverage": 0
        },
        "25": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "26": {
          "source": "    this.localStore.read(model, function(err, locRes) {",
          "coverage": 0
        },
        "27": {
          "source": "        if (err || !locRes) {",
          "coverage": 0
        },
        "28": {
          "source": "            //local loading failed",
          "coverage": ""
        },
        "29": {
          "source": "",
          "coverage": ""
        },
        "30": {
          "source": "            log.d(\"Error reading model from localStore \", model, err);",
          "coverage": 0
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "            that.refreshRead(model, cb);",
          "coverage": 0
        },
        "33": {
          "source": "        } else {",
          "coverage": ""
        },
        "34": {
          "source": "            //local loading succeed",
          "coverage": ""
        },
        "35": {
          "source": "            cb(null, locRes, false);",
          "coverage": 0
        },
        "36": {
          "source": "        }",
          "coverage": ""
        },
        "37": {
          "source": "    });",
          "coverage": ""
        },
        "38": {
          "source": "};",
          "coverage": ""
        },
        "39": {
          "source": "/**",
          "coverage": ""
        },
        "40": {
          "source": " * Read from remote store and store the content locally.",
          "coverage": ""
        },
        "41": {
          "source": " * @param  {[type]}   model [description]",
          "coverage": ""
        },
        "42": {
          "source": " * @param  {Function} cb    [description]",
          "coverage": ""
        },
        "43": {
          "source": " * @return {[type]}         [description]",
          "coverage": ""
        },
        "44": {
          "source": " */",
          "coverage": ""
        },
        "45": {
          "source": "DataAgent.prototype.refreshRead = function(model, cb) {",
          "coverage": 1
        },
        "46": {
          "source": "    log.d(\"DataAgent refreshRead \", model);",
          "coverage": 0
        },
        "47": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "48": {
          "source": "    this.remoteStore.read(model, function(err, res) {",
          "coverage": 0
        },
        "49": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "50": {
          "source": "            log.e(\"Error reading model from remoteStore \", model, err);",
          "coverage": 0
        },
        "51": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "52": {
          "source": "        } else {",
          "coverage": ""
        },
        "53": {
          "source": "            log.d(\"Model refresh successfull from remoteStore \", model, res);",
          "coverage": 0
        },
        "54": {
          "source": "            //update model from remote response",
          "coverage": ""
        },
        "55": {
          "source": "            model.fromJSON(res);",
          "coverage": 0
        },
        "56": {
          "source": "            //update local storage for the model",
          "coverage": ""
        },
        "57": {
          "source": "            that.localStore.upsert(model, function() {",
          "coverage": 0
        },
        "58": {
          "source": "                var args = Array.slice.call(arguments, 0);",
          "coverage": 0
        },
        "59": {
          "source": "                args.push(true);",
          "coverage": 0
        },
        "60": {
          "source": "                cb.apply({}, args);",
          "coverage": 0
        },
        "61": {
          "source": "            });",
          "coverage": ""
        },
        "62": {
          "source": "        }",
          "coverage": ""
        },
        "63": {
          "source": "    });",
          "coverage": ""
        },
        "64": {
          "source": "};",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "/**",
          "coverage": ""
        },
        "67": {
          "source": " * Attempt to run refresh read first, if failed, run read.",
          "coverage": ""
        },
        "68": {
          "source": " * @param  {[type]}   model [description]",
          "coverage": ""
        },
        "69": {
          "source": " * @param  {Function} cb    [description]",
          "coverage": ""
        },
        "70": {
          "source": " * @return {[type]}         [description]",
          "coverage": ""
        },
        "71": {
          "source": " */",
          "coverage": ""
        },
        "72": {
          "source": "DataAgent.prototype.attemptRead = function(model, cb) {",
          "coverage": 1
        },
        "73": {
          "source": "    log.d(\"DataAgent attemptRead \", model);",
          "coverage": 0
        },
        "74": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "75": {
          "source": "",
          "coverage": ""
        },
        "76": {
          "source": "",
          "coverage": ""
        },
        "77": {
          "source": "    self.checkOnlineStatus(function(online) {",
          "coverage": 0
        },
        "78": {
          "source": "        if ($fh.forms.config.isOnline()) {",
          "coverage": 0
        },
        "79": {
          "source": "            self.refreshRead(model, function(err) {",
          "coverage": 0
        },
        "80": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "81": {
          "source": "                    self.read(model, cb);",
          "coverage": 0
        },
        "82": {
          "source": "                } else {",
          "coverage": ""
        },
        "83": {
          "source": "                    cb.apply({}, arguments);",
          "coverage": 0
        },
        "84": {
          "source": "                }",
          "coverage": ""
        },
        "85": {
          "source": "            });",
          "coverage": ""
        },
        "86": {
          "source": "        } else {",
          "coverage": ""
        },
        "87": {
          "source": "            self.read(model, cb);",
          "coverage": 0
        },
        "88": {
          "source": "        }",
          "coverage": ""
        },
        "89": {
          "source": "    });",
          "coverage": ""
        },
        "90": {
          "source": "};",
          "coverage": ""
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "/**",
          "coverage": ""
        },
        "93": {
          "source": " * Check online status of the remote store.",
          "coverage": ""
        },
        "94": {
          "source": " * @param  {Function} cb    [description]",
          "coverage": ""
        },
        "95": {
          "source": " * @return {[type]}         [description]",
          "coverage": ""
        },
        "96": {
          "source": " */",
          "coverage": ""
        },
        "97": {
          "source": "DataAgent.prototype.checkOnlineStatus = function(cb) {",
          "coverage": 1
        },
        "98": {
          "source": "    log.d(\"DataAgent check online status \");",
          "coverage": 0
        },
        "99": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "100": {
          "source": "",
          "coverage": ""
        },
        "101": {
          "source": "    if (utils.isPhoneGap()) {",
          "coverage": 0
        },
        "102": {
          "source": "        if (navigator.connection.type) {",
          "coverage": 0
        },
        "103": {
          "source": "            if (navigator.connection.type === Connection.NONE) {",
          "coverage": 0
        },
        "104": {
          "source": "                //No connection availabile, no need to ping.",
          "coverage": ""
        },
        "105": {
          "source": "                $fh.forms.config.offline();",
          "coverage": 0
        },
        "106": {
          "source": "                return cb(false);",
          "coverage": 0
        },
        "107": {
          "source": "            }",
          "coverage": ""
        },
        "108": {
          "source": "        }",
          "coverage": ""
        },
        "109": {
          "source": "    }",
          "coverage": ""
        },
        "110": {
          "source": "",
          "coverage": ""
        },
        "111": {
          "source": "",
          "coverage": ""
        },
        "112": {
          "source": "    self.remoteStore.isOnline(function(online) {",
          "coverage": 0
        },
        "113": {
          "source": "        if (online === false) {",
          "coverage": 0
        },
        "114": {
          "source": "            $fh.forms.config.offline();",
          "coverage": 0
        },
        "115": {
          "source": "        } else {",
          "coverage": ""
        },
        "116": {
          "source": "            $fh.forms.config.online();",
          "coverage": 0
        },
        "117": {
          "source": "        }",
          "coverage": ""
        },
        "118": {
          "source": "",
          "coverage": ""
        },
        "119": {
          "source": "        cb(null, online);",
          "coverage": 0
        },
        "120": {
          "source": "    });",
          "coverage": ""
        },
        "121": {
          "source": "};",
          "coverage": ""
        },
        "122": {
          "source": "",
          "coverage": ""
        },
        "123": {
          "source": "module.exports = DataAgent;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/field.js",
      "coverage": 40.625,
      "hits": 39,
      "misses": 57,
      "sloc": 96,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Field model for form",
          "coverage": ""
        },
        "3": {
          "source": " * @param  {[type]} module [description]",
          "coverage": ""
        },
        "4": {
          "source": " * @return {[type]}        [description]",
          "coverage": ""
        },
        "5": {
          "source": " */",
          "coverage": ""
        },
        "6": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "7": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "8": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "9": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "10": {
          "source": "var fieldCheckboxes = require(\"./fieldCheckboxes\");",
          "coverage": 1
        },
        "11": {
          "source": "var fieldFile = require(\"./fieldFile\");",
          "coverage": 1
        },
        "12": {
          "source": "var fieldImage = require(\"./fieldImage\");",
          "coverage": 1
        },
        "13": {
          "source": "var fieldLocation = require(\"./fieldLocation\");",
          "coverage": 1
        },
        "14": {
          "source": "var fieldMatrix = require(\"./fieldMatrix\");",
          "coverage": 1
        },
        "15": {
          "source": "var fieldRadio = require(\"./fieldRadio\");",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "function Field(opt, form) {",
          "coverage": 1
        },
        "18": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "19": {
          "source": "        '_type': 'field'",
          "coverage": ""
        },
        "20": {
          "source": "    });",
          "coverage": ""
        },
        "21": {
          "source": "    if (opt) {",
          "coverage": 0
        },
        "22": {
          "source": "        this.fromJSON(opt);",
          "coverage": 0
        },
        "23": {
          "source": "        this.genLocalId();",
          "coverage": 0
        },
        "24": {
          "source": "    }",
          "coverage": ""
        },
        "25": {
          "source": "    if (form) {",
          "coverage": 0
        },
        "26": {
          "source": "        this.form = form;",
          "coverage": 0
        },
        "27": {
          "source": "    }",
          "coverage": ""
        },
        "28": {
          "source": "};",
          "coverage": 1
        },
        "29": {
          "source": "",
          "coverage": ""
        },
        "30": {
          "source": "utils.extend(Field, Model);",
          "coverage": 1
        },
        "31": {
          "source": "utils.extend(Field, fieldCheckboxes);",
          "coverage": 1
        },
        "32": {
          "source": "utils.extend(Field, fieldFile);",
          "coverage": 1
        },
        "33": {
          "source": "utils.extend(Field, fieldLocation);",
          "coverage": 1
        },
        "34": {
          "source": "utils.extend(Field, fieldMatrix);",
          "coverage": 1
        },
        "35": {
          "source": "utils.extend(Field, fieldRadio);",
          "coverage": 1
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "Field.prototype.isRequired = function() {",
          "coverage": 1
        },
        "38": {
          "source": "    return this.get('required');",
          "coverage": 0
        },
        "39": {
          "source": "};",
          "coverage": ""
        },
        "40": {
          "source": "Field.prototype.getFieldValidation = function() {",
          "coverage": 1
        },
        "41": {
          "source": "    return this.getFieldOptions().validation || {};",
          "coverage": 0
        },
        "42": {
          "source": "};",
          "coverage": ""
        },
        "43": {
          "source": "Field.prototype.getFieldDefinition = function() {",
          "coverage": 1
        },
        "44": {
          "source": "    return this.getFieldOptions().definition || {};",
          "coverage": 0
        },
        "45": {
          "source": "};",
          "coverage": ""
        },
        "46": {
          "source": "Field.prototype.getMinRepeat = function() {",
          "coverage": 1
        },
        "47": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "48": {
          "source": "    return def.minRepeat || 1;",
          "coverage": 0
        },
        "49": {
          "source": "};",
          "coverage": ""
        },
        "50": {
          "source": "Field.prototype.getMaxRepeat = function() {",
          "coverage": 1
        },
        "51": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "52": {
          "source": "    return def.maxRepeat || 1;",
          "coverage": 0
        },
        "53": {
          "source": "};",
          "coverage": ""
        },
        "54": {
          "source": "Field.prototype.getFieldOptions = function() {",
          "coverage": 1
        },
        "55": {
          "source": "    return this.get('fieldOptions', {",
          "coverage": 0
        },
        "56": {
          "source": "        'validation': {},",
          "coverage": ""
        },
        "57": {
          "source": "        'definition': {}",
          "coverage": ""
        },
        "58": {
          "source": "    });",
          "coverage": ""
        },
        "59": {
          "source": "};",
          "coverage": ""
        },
        "60": {
          "source": "Field.prototype.getPhotoOptions = function() {",
          "coverage": 1
        },
        "61": {
          "source": "    var photoOptions = {",
          "coverage": 0
        },
        "62": {
          "source": "        \"targetWidth\": null,",
          "coverage": ""
        },
        "63": {
          "source": "        \"targetHeight\": null,",
          "coverage": ""
        },
        "64": {
          "source": "        \"quality\": null,",
          "coverage": ""
        },
        "65": {
          "source": "        \"saveToPhotoAlbum\": null,",
          "coverage": ""
        },
        "66": {
          "source": "        \"pictureSource\": null,",
          "coverage": ""
        },
        "67": {
          "source": "        \"encodingType\": null",
          "coverage": ""
        },
        "68": {
          "source": "    };",
          "coverage": ""
        },
        "69": {
          "source": "",
          "coverage": ""
        },
        "70": {
          "source": "    var fieldDef = this.getFieldDefinition();",
          "coverage": 0
        },
        "71": {
          "source": "    photoOptions.targetWidth = fieldDef.photoWidth;",
          "coverage": 0
        },
        "72": {
          "source": "    photoOptions.targetHeight = fieldDef.photoHeight;",
          "coverage": 0
        },
        "73": {
          "source": "    photoOptions.quality = fieldDef.photoQuality;",
          "coverage": 0
        },
        "74": {
          "source": "    photoOptions.saveToPhotoAlbum = fieldDef.saveToPhotoAlbum;",
          "coverage": 0
        },
        "75": {
          "source": "    photoOptions.pictureSource = fieldDef.photoSource;",
          "coverage": 0
        },
        "76": {
          "source": "    photoOptions.encodingType = fieldDef.photoType;",
          "coverage": 0
        },
        "77": {
          "source": "",
          "coverage": ""
        },
        "78": {
          "source": "    return photoOptions;",
          "coverage": 0
        },
        "79": {
          "source": "};",
          "coverage": ""
        },
        "80": {
          "source": "Field.prototype.isRepeating = function() {",
          "coverage": 1
        },
        "81": {
          "source": "    return this.get('repeating', false);",
          "coverage": 0
        },
        "82": {
          "source": "};",
          "coverage": ""
        },
        "83": {
          "source": "/**",
          "coverage": ""
        },
        "84": {
          "source": " * retrieve field type.",
          "coverage": ""
        },
        "85": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "86": {
          "source": " */",
          "coverage": ""
        },
        "87": {
          "source": "Field.prototype.getType = function() {",
          "coverage": 1
        },
        "88": {
          "source": "    return this.get('type', 'text');",
          "coverage": 0
        },
        "89": {
          "source": "};",
          "coverage": ""
        },
        "90": {
          "source": "Field.prototype.getFieldId = function() {",
          "coverage": 1
        },
        "91": {
          "source": "    return this.get('_id', '');",
          "coverage": 0
        },
        "92": {
          "source": "};",
          "coverage": ""
        },
        "93": {
          "source": "Field.prototype.getName = function() {",
          "coverage": 1
        },
        "94": {
          "source": "    return this.get('name', 'unknown');",
          "coverage": 0
        },
        "95": {
          "source": "};",
          "coverage": ""
        },
        "96": {
          "source": "/**",
          "coverage": ""
        },
        "97": {
          "source": " * Function to return the Field Code specified in the studio if it exists",
          "coverage": ""
        },
        "98": {
          "source": " * otherwise return null.",
          "coverage": ""
        },
        "99": {
          "source": " */",
          "coverage": ""
        },
        "100": {
          "source": "Field.prototype.getCode = function() {",
          "coverage": 1
        },
        "101": {
          "source": "    return this.get('fieldCode', null);",
          "coverage": 0
        },
        "102": {
          "source": "};",
          "coverage": ""
        },
        "103": {
          "source": "Field.prototype.getHelpText = function() {",
          "coverage": 1
        },
        "104": {
          "source": "    return this.get('helpText', '');",
          "coverage": 0
        },
        "105": {
          "source": "};",
          "coverage": ""
        },
        "106": {
          "source": "",
          "coverage": ""
        },
        "107": {
          "source": "/**",
          "coverage": ""
        },
        "108": {
          "source": " * return default value for a field",
          "coverage": ""
        },
        "109": {
          "source": " *",
          "coverage": ""
        },
        "110": {
          "source": " */",
          "coverage": ""
        },
        "111": {
          "source": "Field.prototype.getDefaultValue = function() {",
          "coverage": 1
        },
        "112": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "113": {
          "source": "    if (def) {",
          "coverage": 0
        },
        "114": {
          "source": "        return def.defaultValue;",
          "coverage": 0
        },
        "115": {
          "source": "    }",
          "coverage": ""
        },
        "116": {
          "source": "    return \"\";",
          "coverage": 0
        },
        "117": {
          "source": "};",
          "coverage": ""
        },
        "118": {
          "source": "",
          "coverage": ""
        },
        "119": {
          "source": "Field.prototype.isAdminField = function() {",
          "coverage": 1
        },
        "120": {
          "source": "    return this.get(\"adminOnly\");",
          "coverage": 0
        },
        "121": {
          "source": "};",
          "coverage": ""
        },
        "122": {
          "source": "",
          "coverage": ""
        },
        "123": {
          "source": "",
          "coverage": ""
        },
        "124": {
          "source": "/**",
          "coverage": ""
        },
        "125": {
          "source": " * Process an input value. convert to submission format. run Field.prototype.validate before this",
          "coverage": ""
        },
        "126": {
          "source": " * @param  {[type]} params {\"value\", \"isStore\":optional}",
          "coverage": ""
        },
        "127": {
          "source": " * @param {cb} cb(err,res)",
          "coverage": ""
        },
        "128": {
          "source": " * @return {[type]}           submission json used for fieldValues for the field",
          "coverage": ""
        },
        "129": {
          "source": " */",
          "coverage": ""
        },
        "130": {
          "source": "Field.prototype.processInput = function(params, cb) {",
          "coverage": 1
        },
        "131": {
          "source": "    var type = this.getType();",
          "coverage": 0
        },
        "132": {
          "source": "    var processorName = 'process_' + type;",
          "coverage": 0
        },
        "133": {
          "source": "    var inputValue = params.value;",
          "coverage": 0
        },
        "134": {
          "source": "    if (typeof inputValue === 'undefined' || inputValue === null) {",
          "coverage": 0
        },
        "135": {
          "source": "        //if user input is empty, keep going.",
          "coverage": ""
        },
        "136": {
          "source": "        return cb(null, inputValue);",
          "coverage": 0
        },
        "137": {
          "source": "    }",
          "coverage": ""
        },
        "138": {
          "source": "    // try to find specified processor",
          "coverage": ""
        },
        "139": {
          "source": "    if (this[processorName] &amp;&amp; typeof this[processorName] === 'function') {",
          "coverage": 0
        },
        "140": {
          "source": "        this[processorName](params, cb);",
          "coverage": 0
        },
        "141": {
          "source": "    } else {",
          "coverage": ""
        },
        "142": {
          "source": "        cb(null, inputValue);",
          "coverage": 0
        },
        "143": {
          "source": "    }",
          "coverage": ""
        },
        "144": {
          "source": "};",
          "coverage": ""
        },
        "145": {
          "source": "/**",
          "coverage": ""
        },
        "146": {
          "source": " * Convert the submission value back to input value.",
          "coverage": ""
        },
        "147": {
          "source": " * @param  {[type]} submissionValue [description]",
          "coverage": ""
        },
        "148": {
          "source": " * @param { function} cb callback",
          "coverage": ""
        },
        "149": {
          "source": " * @return {[type]}                 [description]",
          "coverage": ""
        },
        "150": {
          "source": " */",
          "coverage": ""
        },
        "151": {
          "source": "Field.prototype.convertSubmission = function(submissionValue, cb) {",
          "coverage": 1
        },
        "152": {
          "source": "    var type = this.getType();",
          "coverage": 0
        },
        "153": {
          "source": "    var processorName = 'convert_' + type;",
          "coverage": 0
        },
        "154": {
          "source": "    // try to find specified processor",
          "coverage": ""
        },
        "155": {
          "source": "    if (this[processorName] &amp;&amp; typeof this[processorName] === 'function') {",
          "coverage": 0
        },
        "156": {
          "source": "        this[processorName](submissionValue, cb);",
          "coverage": 0
        },
        "157": {
          "source": "    } else {",
          "coverage": ""
        },
        "158": {
          "source": "        cb(null, submissionValue);",
          "coverage": 0
        },
        "159": {
          "source": "    }",
          "coverage": ""
        },
        "160": {
          "source": "};",
          "coverage": ""
        },
        "161": {
          "source": "/**",
          "coverage": ""
        },
        "162": {
          "source": " * validate an input with this Field.prototype.",
          "coverage": ""
        },
        "163": {
          "source": " * @param  {[type]} inputValue [description]",
          "coverage": ""
        },
        "164": {
          "source": " * @return true / error message",
          "coverage": ""
        },
        "165": {
          "source": " */",
          "coverage": ""
        },
        "166": {
          "source": "Field.prototype.validate = function(inputValue, inputValueIndex, cb) {",
          "coverage": 1
        },
        "167": {
          "source": "    if (typeof(inputValueIndex) === 'function') {",
          "coverage": 0
        },
        "168": {
          "source": "        cb = inputValueIndex;",
          "coverage": 0
        },
        "169": {
          "source": "        inputValueIndex = 0;",
          "coverage": 0
        },
        "170": {
          "source": "    }",
          "coverage": ""
        },
        "171": {
          "source": "    this.form.getRuleEngine().validateFieldValue(this.getFieldId(), inputValue, inputValueIndex, cb);",
          "coverage": 0
        },
        "172": {
          "source": "};",
          "coverage": ""
        },
        "173": {
          "source": "/**",
          "coverage": ""
        },
        "174": {
          "source": " * return rule array attached to this Field.prototype.",
          "coverage": ""
        },
        "175": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "176": {
          "source": " */",
          "coverage": ""
        },
        "177": {
          "source": "Field.prototype.getRules = function() {",
          "coverage": 1
        },
        "178": {
          "source": "    var id = this.getFieldId();",
          "coverage": 0
        },
        "179": {
          "source": "    return this.form.getRulesByFieldId(id);",
          "coverage": 0
        },
        "180": {
          "source": "};",
          "coverage": ""
        },
        "181": {
          "source": "Field.prototype.setVisible = function(isVisible) {",
          "coverage": 1
        },
        "182": {
          "source": "    this.set('visible', isVisible);",
          "coverage": 0
        },
        "183": {
          "source": "    if (isVisible) {",
          "coverage": 0
        },
        "184": {
          "source": "        this.emit('visible');",
          "coverage": 0
        },
        "185": {
          "source": "    } else {",
          "coverage": ""
        },
        "186": {
          "source": "        this.emit('hidden');",
          "coverage": 0
        },
        "187": {
          "source": "    }",
          "coverage": ""
        },
        "188": {
          "source": "};",
          "coverage": ""
        },
        "189": {
          "source": "",
          "coverage": ""
        },
        "190": {
          "source": "module.exports = Field;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/fieldCheckboxes.js",
      "coverage": 36.84210526315789,
      "hits": 7,
      "misses": 12,
      "sloc": 19,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * extension of Field class to support checkbox field",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "function getCheckBoxOptions() {",
          "coverage": 1
        },
        "6": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "7": {
          "source": "    if (def.options) {",
          "coverage": 0
        },
        "8": {
          "source": "        return def.options;",
          "coverage": 0
        },
        "9": {
          "source": "    } else {",
          "coverage": ""
        },
        "10": {
          "source": "        throw 'checkbox choice definition is not found in field definition';",
          "coverage": 0
        },
        "11": {
          "source": "    }",
          "coverage": ""
        },
        "12": {
          "source": "};",
          "coverage": 1
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": "function process_checkboxes(params, cb) {",
          "coverage": 1
        },
        "15": {
          "source": "    var inputValue = params.value;",
          "coverage": 0
        },
        "16": {
          "source": "    if (!inputValue || !inputValue.selections || !(inputValue.selections instanceof Array)) {",
          "coverage": 0
        },
        "17": {
          "source": "        cb('the input value for processing checkbox field should be like {selections: [val1,val2]}');",
          "coverage": 0
        },
        "18": {
          "source": "    } else {",
          "coverage": ""
        },
        "19": {
          "source": "        cb(null, inputValue);",
          "coverage": 0
        },
        "20": {
          "source": "    }",
          "coverage": ""
        },
        "21": {
          "source": "};",
          "coverage": 1
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "function convert_checkboxes(value, cb) {",
          "coverage": 1
        },
        "24": {
          "source": "    var rtn = [];",
          "coverage": 0
        },
        "25": {
          "source": "    for (var i = 0; i &lt; value.length; i++) {",
          "coverage": 0
        },
        "26": {
          "source": "        rtn.push(value[i].selections);",
          "coverage": 0
        },
        "27": {
          "source": "    }",
          "coverage": ""
        },
        "28": {
          "source": "    cb(null, rtn);",
          "coverage": 0
        },
        "29": {
          "source": "};",
          "coverage": 1
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "32": {
          "source": "    getCheckBoxOptions: getCheckBoxOptions,",
          "coverage": ""
        },
        "33": {
          "source": "    process_checkboxes: process_checkboxes,",
          "coverage": ""
        },
        "34": {
          "source": "    convert_checkboxes: convert_checkboxes",
          "coverage": ""
        },
        "35": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/fieldFile.js",
      "coverage": 12.121212121212121,
      "hits": 8,
      "misses": 58,
      "sloc": 66,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * extension of Field class to support file field",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "5": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "6": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "7": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function checkFileObj(obj) {",
          "coverage": 1
        },
        "10": {
          "source": "    return obj.fileName &amp;&amp; obj.fileType &amp;&amp; obj.hashName;",
          "coverage": 0
        },
        "11": {
          "source": "}",
          "coverage": ""
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "function process_file(params, cb) {",
          "coverage": 1
        },
        "14": {
          "source": "    var inputValue = params.value;",
          "coverage": 0
        },
        "15": {
          "source": "    var isStore = params.isStore === undefined ? true : params.isStore;",
          "coverage": 0
        },
        "16": {
          "source": "    var lastModDate = new Date().getTime();",
          "coverage": 0
        },
        "17": {
          "source": "    var previousFile = params.previousFile || {};",
          "coverage": 0
        },
        "18": {
          "source": "    var hashName = null;",
          "coverage": 0
        },
        "19": {
          "source": "    if (typeof inputValue === 'undefined' || inputValue === null) {",
          "coverage": 0
        },
        "20": {
          "source": "        return cb(\"No input value to process_file\", null);",
          "coverage": 0
        },
        "21": {
          "source": "    }",
          "coverage": ""
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "    function getFileType(fileType, fileNameString) {",
          "coverage": 0
        },
        "24": {
          "source": "        fileType = fileType || \"\";",
          "coverage": 0
        },
        "25": {
          "source": "        fileNameString = fileNameString || \"\";",
          "coverage": 0
        },
        "26": {
          "source": "",
          "coverage": ""
        },
        "27": {
          "source": "        //The type if file is already known. No need to parse it out.",
          "coverage": ""
        },
        "28": {
          "source": "        if (fileType.length &gt; 0) {",
          "coverage": 0
        },
        "29": {
          "source": "            return fileType;",
          "coverage": 0
        },
        "30": {
          "source": "        }",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "        //Camera does not sent file type. Have to parse it from the file name.",
          "coverage": ""
        },
        "33": {
          "source": "        if (fileNameString.indexOf(\".png\") &gt; -1) {",
          "coverage": 0
        },
        "34": {
          "source": "            return \"image/png\";",
          "coverage": 0
        },
        "35": {
          "source": "        } else if (fileNameString.indexOf(\".jpg\") &gt; -1) {",
          "coverage": 0
        },
        "36": {
          "source": "            return \"image/jpeg\";",
          "coverage": 0
        },
        "37": {
          "source": "        } else {",
          "coverage": ""
        },
        "38": {
          "source": "            return \"application/octet-stream\";",
          "coverage": 0
        },
        "39": {
          "source": "        }",
          "coverage": ""
        },
        "40": {
          "source": "    }",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "    function getFileName(fileNameString, filePathString) {",
          "coverage": 0
        },
        "43": {
          "source": "        fileNameString = fileNameString || \"\";",
          "coverage": 0
        },
        "44": {
          "source": "        if (fileNameString.length &gt; 0) {",
          "coverage": 0
        },
        "45": {
          "source": "            return fileNameString;",
          "coverage": 0
        },
        "46": {
          "source": "        } else {",
          "coverage": ""
        },
        "47": {
          "source": "            //Need to extract the name from the file path",
          "coverage": ""
        },
        "48": {
          "source": "            var indexOfName = filePathString.lastIndexOf(\"/\");",
          "coverage": 0
        },
        "49": {
          "source": "            if (indexOfName &gt; -1) {",
          "coverage": 0
        },
        "50": {
          "source": "                return filePathString.slice(indexOfName);",
          "coverage": 0
        },
        "51": {
          "source": "            } else {",
          "coverage": ""
        },
        "52": {
          "source": "                return null;",
          "coverage": 0
        },
        "53": {
          "source": "            }",
          "coverage": ""
        },
        "54": {
          "source": "        }",
          "coverage": ""
        },
        "55": {
          "source": "    }",
          "coverage": ""
        },
        "56": {
          "source": "",
          "coverage": ""
        },
        "57": {
          "source": "    var file = inputValue;",
          "coverage": 0
        },
        "58": {
          "source": "    if (inputValue instanceof HTMLInputElement) {",
          "coverage": 0
        },
        "59": {
          "source": "        file = inputValue.files[0] || {}; // 1st file only, not support many files yet.",
          "coverage": 0
        },
        "60": {
          "source": "    }",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "    if (typeof(file.lastModifiedDate) === 'undefined') {",
          "coverage": 0
        },
        "63": {
          "source": "        lastModDate = utils.getTime().getTime();",
          "coverage": 0
        },
        "64": {
          "source": "    }",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "    if (file.lastModifiedDate instanceof Date) {",
          "coverage": 0
        },
        "67": {
          "source": "        lastModDate = file.lastModifiedDate.getTime();",
          "coverage": 0
        },
        "68": {
          "source": "    }",
          "coverage": ""
        },
        "69": {
          "source": "",
          "coverage": ""
        },
        "70": {
          "source": "    var fileName = getFileName(file.name || file.fileName, file.fullPath);",
          "coverage": 0
        },
        "71": {
          "source": "",
          "coverage": ""
        },
        "72": {
          "source": "    var fileType = getFileType(file.type || file.fileType, fileName);",
          "coverage": 0
        },
        "73": {
          "source": "",
          "coverage": ""
        },
        "74": {
          "source": "    //Placeholder files do not have a file type. It inherits from previous types",
          "coverage": ""
        },
        "75": {
          "source": "    if (fileName === null &amp;&amp; !previousFile.fileName) {",
          "coverage": 0
        },
        "76": {
          "source": "        return cb(\"Expected picture to be PNG or JPEG but was null\");",
          "coverage": 0
        },
        "77": {
          "source": "    }",
          "coverage": ""
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "    if (previousFile.hashName) {",
          "coverage": 0
        },
        "80": {
          "source": "        if (fileName === previousFile.hashName || file.hashName === previousFile.hashName) {",
          "coverage": 0
        },
        "81": {
          "source": "            //Submitting an existing file already saved, no need to save.",
          "coverage": ""
        },
        "82": {
          "source": "            return cb(null, previousFile);",
          "coverage": 0
        },
        "83": {
          "source": "        }",
          "coverage": ""
        },
        "84": {
          "source": "    }",
          "coverage": ""
        },
        "85": {
          "source": "",
          "coverage": ""
        },
        "86": {
          "source": "    var rtnJSON = {",
          "coverage": 0
        },
        "87": {
          "source": "        'fileName': fileName,",
          "coverage": ""
        },
        "88": {
          "source": "        'fileSize': file.size,",
          "coverage": ""
        },
        "89": {
          "source": "        'fileType': fileType,",
          "coverage": ""
        },
        "90": {
          "source": "        'fileUpdateTime': lastModDate,",
          "coverage": ""
        },
        "91": {
          "source": "        'hashName': '',",
          "coverage": ""
        },
        "92": {
          "source": "        'imgHeader': '',",
          "coverage": ""
        },
        "93": {
          "source": "        'contentType': 'binary'",
          "coverage": ""
        },
        "94": {
          "source": "    };",
          "coverage": ""
        },
        "95": {
          "source": "",
          "coverage": ""
        },
        "96": {
          "source": "    //The file to be submitted is new",
          "coverage": ""
        },
        "97": {
          "source": "    previousFile = rtnJSON;",
          "coverage": 0
        },
        "98": {
          "source": "",
          "coverage": ""
        },
        "99": {
          "source": "    var name = fileName + new Date().getTime() + Math.ceil(Math.random() * 100000);",
          "coverage": 0
        },
        "100": {
          "source": "    utils.md5(name, function(err, res) {",
          "coverage": 0
        },
        "101": {
          "source": "        hashName = res;",
          "coverage": 0
        },
        "102": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "103": {
          "source": "            hashName = name;",
          "coverage": 0
        },
        "104": {
          "source": "        }",
          "coverage": ""
        },
        "105": {
          "source": "        hashName = 'filePlaceHolder' + hashName;",
          "coverage": 0
        },
        "106": {
          "source": "",
          "coverage": ""
        },
        "107": {
          "source": "        if (fileName.length === 0) {",
          "coverage": 0
        },
        "108": {
          "source": "            previousFile.fileName = hashName;",
          "coverage": 0
        },
        "109": {
          "source": "        }",
          "coverage": ""
        },
        "110": {
          "source": "",
          "coverage": ""
        },
        "111": {
          "source": "        previousFile.hashName = hashName;",
          "coverage": 0
        },
        "112": {
          "source": "        if (isStore) {",
          "coverage": 0
        },
        "113": {
          "source": "            localStorage.saveFile(hashName, file, function(err, res) {",
          "coverage": 0
        },
        "114": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "115": {
          "source": "                    log.e(err);",
          "coverage": 0
        },
        "116": {
          "source": "                    cb(err);",
          "coverage": 0
        },
        "117": {
          "source": "                } else {",
          "coverage": ""
        },
        "118": {
          "source": "                    cb(null, previousFile);",
          "coverage": 0
        },
        "119": {
          "source": "                }",
          "coverage": ""
        },
        "120": {
          "source": "            });",
          "coverage": ""
        },
        "121": {
          "source": "        } else {",
          "coverage": ""
        },
        "122": {
          "source": "            cb(null, previousFile);",
          "coverage": 0
        },
        "123": {
          "source": "        }",
          "coverage": ""
        },
        "124": {
          "source": "    });",
          "coverage": ""
        },
        "125": {
          "source": "};",
          "coverage": 1
        },
        "126": {
          "source": "",
          "coverage": ""
        },
        "127": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "128": {
          "source": "    checkFileObj: checkFileObj,",
          "coverage": ""
        },
        "129": {
          "source": "    process_file: process_file",
          "coverage": ""
        },
        "130": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/fieldImage.js",
      "coverage": 13.043478260869565,
      "hits": 9,
      "misses": 60,
      "sloc": 69,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * extension of Field class to support file field",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "6": {
          "source": "var fileSystem = require(\"./fileSystem\");",
          "coverage": 1
        },
        "7": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "8": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "function imageProcess(params, cb) {",
          "coverage": 1
        },
        "11": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "12": {
          "source": "    var inputValue = params.value;",
          "coverage": 0
        },
        "13": {
          "source": "    var isStore = params.isStore === undefined ? true : params.isStore;",
          "coverage": 0
        },
        "14": {
          "source": "    var previousFile = params.previousFile || {};",
          "coverage": 0
        },
        "15": {
          "source": "    if (typeof(inputValue) !== \"string\") {",
          "coverage": 0
        },
        "16": {
          "source": "        return cb(\"Expected base64 string image or file URI but parameter was not a string\", null);",
          "coverage": 0
        },
        "17": {
          "source": "    }",
          "coverage": ""
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "    //Input value can be either a base64 String or file uri, the behaviour of upload will change accordingly.",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "    if (inputValue.length &lt; 1) {",
          "coverage": 0
        },
        "22": {
          "source": "        return cb(\"Expected base64 string or file uri but got string of lenght 0:  \" + inputValue, null);",
          "coverage": 0
        },
        "23": {
          "source": "    }",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "    if (inputValue.indexOf(\";base64,\") &gt; -1) {",
          "coverage": 0
        },
        "26": {
          "source": "        var imgName = '';",
          "coverage": 0
        },
        "27": {
          "source": "        var dataArr = inputValue.split(';base64,');",
          "coverage": 0
        },
        "28": {
          "source": "        var imgType = dataArr[0].split(':')[1];",
          "coverage": 0
        },
        "29": {
          "source": "        var extension = imgType.split('/')[1];",
          "coverage": 0
        },
        "30": {
          "source": "        var size = inputValue.length;",
          "coverage": 0
        },
        "31": {
          "source": "        genImageName(function(err, n) {",
          "coverage": 0
        },
        "32": {
          "source": "            imgName = previousFile.hashName ? previousFile.hashName : 'filePlaceHolder' + n;",
          "coverage": 0
        },
        "33": {
          "source": "            //TODO Abstract this out",
          "coverage": ""
        },
        "34": {
          "source": "            var meta = {",
          "coverage": 0
        },
        "35": {
          "source": "                'fileName': imgName + '.' + extension,",
          "coverage": ""
        },
        "36": {
          "source": "                'hashName': imgName,",
          "coverage": ""
        },
        "37": {
          "source": "                'contentType': 'base64',",
          "coverage": ""
        },
        "38": {
          "source": "                'fileSize': size,",
          "coverage": ""
        },
        "39": {
          "source": "                'fileType': imgType,",
          "coverage": ""
        },
        "40": {
          "source": "                'imgHeader': 'data:' + imgType + ';base64,',",
          "coverage": ""
        },
        "41": {
          "source": "                'fileUpdateTime': new Date().getTime()",
          "coverage": ""
        },
        "42": {
          "source": "            };",
          "coverage": ""
        },
        "43": {
          "source": "            if (isStore) {",
          "coverage": 0
        },
        "44": {
          "source": "                localStorage.updateTextFile(imgName, dataArr[1], function(err, res) {",
          "coverage": 0
        },
        "45": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "46": {
          "source": "                        log.e(err);",
          "coverage": 0
        },
        "47": {
          "source": "                        cb(err);",
          "coverage": 0
        },
        "48": {
          "source": "                    } else {",
          "coverage": ""
        },
        "49": {
          "source": "                        cb(null, meta);",
          "coverage": 0
        },
        "50": {
          "source": "                    }",
          "coverage": ""
        },
        "51": {
          "source": "                });",
          "coverage": ""
        },
        "52": {
          "source": "            } else {",
          "coverage": ""
        },
        "53": {
          "source": "                cb(null, meta);",
          "coverage": 0
        },
        "54": {
          "source": "            }",
          "coverage": ""
        },
        "55": {
          "source": "        });",
          "coverage": ""
        },
        "56": {
          "source": "    } else {",
          "coverage": ""
        },
        "57": {
          "source": "        //Image is a file uri, the file needs to be saved as a file.",
          "coverage": ""
        },
        "58": {
          "source": "        //Can use the process_file function to do this.",
          "coverage": ""
        },
        "59": {
          "source": "        //Need to read the file as a file first",
          "coverage": ""
        },
        "60": {
          "source": "        fileSystem.readAsFile(inputValue, function(err, file) {",
          "coverage": 0
        },
        "61": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "62": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "63": {
          "source": "            }",
          "coverage": ""
        },
        "64": {
          "source": "",
          "coverage": ""
        },
        "65": {
          "source": "            params.value = file;",
          "coverage": 0
        },
        "66": {
          "source": "            self.process_file(params, cb);",
          "coverage": 0
        },
        "67": {
          "source": "        });",
          "coverage": ""
        },
        "68": {
          "source": "    }",
          "coverage": ""
        },
        "69": {
          "source": "}",
          "coverage": ""
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "function genImageName(cb) {",
          "coverage": 1
        },
        "72": {
          "source": "    var name = new Date().getTime() + '' + Math.ceil(Math.random() * 100000);",
          "coverage": 0
        },
        "73": {
          "source": "    utils.md5(name, cb);",
          "coverage": 0
        },
        "74": {
          "source": "}",
          "coverage": ""
        },
        "75": {
          "source": "",
          "coverage": ""
        },
        "76": {
          "source": "function convertImage(value, cb) {",
          "coverage": 1
        },
        "77": {
          "source": "    if (value.length === 0) {",
          "coverage": 0
        },
        "78": {
          "source": "        cb(null, value);",
          "coverage": 0
        },
        "79": {
          "source": "    } else {",
          "coverage": ""
        },
        "80": {
          "source": "        var count = value.length;",
          "coverage": 0
        },
        "81": {
          "source": "        for (var i = 0; i &lt; value.length; i++) {",
          "coverage": 0
        },
        "82": {
          "source": "            var meta = value[i];",
          "coverage": 0
        },
        "83": {
          "source": "            _loadImage(meta, function() {",
          "coverage": 0
        },
        "84": {
          "source": "                count--;",
          "coverage": 0
        },
        "85": {
          "source": "                if (count === 0) {",
          "coverage": 0
        },
        "86": {
          "source": "                    cb(null, value);",
          "coverage": 0
        },
        "87": {
          "source": "                }",
          "coverage": ""
        },
        "88": {
          "source": "            });",
          "coverage": ""
        },
        "89": {
          "source": "        }",
          "coverage": ""
        },
        "90": {
          "source": "    }",
          "coverage": ""
        },
        "91": {
          "source": "}",
          "coverage": ""
        },
        "92": {
          "source": "",
          "coverage": ""
        },
        "93": {
          "source": "//An image can be either a base64 image or a binary image.",
          "coverage": ""
        },
        "94": {
          "source": "//If base64, need to load the data as text.",
          "coverage": ""
        },
        "95": {
          "source": "//If binary, just need to load the file uri.",
          "coverage": ""
        },
        "96": {
          "source": "function _loadImage(meta, cb) {",
          "coverage": 1
        },
        "97": {
          "source": "    if (meta) {",
          "coverage": 0
        },
        "98": {
          "source": "",
          "coverage": ""
        },
        "99": {
          "source": "        /**",
          "coverage": ""
        },
        "100": {
          "source": "         * If the file already contains a local uri, then no need to load it.",
          "coverage": ""
        },
        "101": {
          "source": "         */",
          "coverage": ""
        },
        "102": {
          "source": "        if (meta.localURI) {",
          "coverage": 0
        },
        "103": {
          "source": "            return cb(null, meta);",
          "coverage": 0
        },
        "104": {
          "source": "        }",
          "coverage": ""
        },
        "105": {
          "source": "",
          "coverage": ""
        },
        "106": {
          "source": "        var name = meta.hashName;",
          "coverage": 0
        },
        "107": {
          "source": "        if (meta.contentType === \"base64\") {",
          "coverage": 0
        },
        "108": {
          "source": "            localStorage.readFileText(name, function(err, text) {",
          "coverage": 0
        },
        "109": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "110": {
          "source": "                    log.e(err);",
          "coverage": 0
        },
        "111": {
          "source": "                }",
          "coverage": ""
        },
        "112": {
          "source": "                meta.data = text;",
          "coverage": 0
        },
        "113": {
          "source": "                cb(err, meta);",
          "coverage": 0
        },
        "114": {
          "source": "            });",
          "coverage": ""
        },
        "115": {
          "source": "        } else if (meta.contentType === \"binary\") {",
          "coverage": 0
        },
        "116": {
          "source": "            localStorage.readFile(name, function(err, file) {",
          "coverage": 0
        },
        "117": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "118": {
          "source": "                    log.e(\"Error reading file \" + name, err);",
          "coverage": 0
        },
        "119": {
          "source": "                }",
          "coverage": ""
        },
        "120": {
          "source": "",
          "coverage": ""
        },
        "121": {
          "source": "                if (file &amp;&amp; file.fullPath) {",
          "coverage": 0
        },
        "122": {
          "source": "                    meta.data = file.fullPath;",
          "coverage": 0
        },
        "123": {
          "source": "                } else {",
          "coverage": ""
        },
        "124": {
          "source": "                    meta.data = \"file-not-found\";",
          "coverage": 0
        },
        "125": {
          "source": "                }",
          "coverage": ""
        },
        "126": {
          "source": "",
          "coverage": ""
        },
        "127": {
          "source": "                cb(err, meta);",
          "coverage": 0
        },
        "128": {
          "source": "            });",
          "coverage": ""
        },
        "129": {
          "source": "        } else {",
          "coverage": ""
        },
        "130": {
          "source": "            log.e(\"Error load image with invalid meta\" + meta.contentType);",
          "coverage": 0
        },
        "131": {
          "source": "        }",
          "coverage": ""
        },
        "132": {
          "source": "    } else {",
          "coverage": ""
        },
        "133": {
          "source": "        cb(null, meta);",
          "coverage": 0
        },
        "134": {
          "source": "    }",
          "coverage": ""
        },
        "135": {
          "source": "}",
          "coverage": ""
        },
        "136": {
          "source": "",
          "coverage": ""
        },
        "137": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "138": {
          "source": "    process_signature: imageProcess,",
          "coverage": ""
        },
        "139": {
          "source": "    convert_signature: convertImage,",
          "coverage": ""
        },
        "140": {
          "source": "    process_photo: imageProcess,",
          "coverage": ""
        },
        "141": {
          "source": "    convert_photo: convertImage",
          "coverage": ""
        },
        "142": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/fieldLocation.js",
      "coverage": 27.27272727272727,
      "hits": 6,
      "misses": 16,
      "sloc": 22,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * extension of Field class to support latitude longitude field",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "6": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "7": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function process_location(params, cb) {",
          "coverage": 1
        },
        "10": {
          "source": "    var inputValue = params.value;",
          "coverage": 0
        },
        "11": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "12": {
          "source": "    var obj = {};",
          "coverage": 0
        },
        "13": {
          "source": "    switch (def.locationUnit) {",
          "coverage": 0
        },
        "14": {
          "source": "        case 'latlong':",
          "coverage": ""
        },
        "15": {
          "source": "            if (!inputValue.lat || !inputValue[\"long\"]) {",
          "coverage": 0
        },
        "16": {
          "source": "                cb('the input values for latlong field is {lat: number, long: number}');",
          "coverage": 0
        },
        "17": {
          "source": "            } else {",
          "coverage": ""
        },
        "18": {
          "source": "                obj = {",
          "coverage": 0
        },
        "19": {
          "source": "                    'lat': inputValue.lat,",
          "coverage": ""
        },
        "20": {
          "source": "                    'long': inputValue[\"long\"]",
          "coverage": ""
        },
        "21": {
          "source": "                };",
          "coverage": ""
        },
        "22": {
          "source": "                cb(null, obj);",
          "coverage": 0
        },
        "23": {
          "source": "            }",
          "coverage": ""
        },
        "24": {
          "source": "            break;",
          "coverage": 0
        },
        "25": {
          "source": "        case 'eastnorth':",
          "coverage": ""
        },
        "26": {
          "source": "            if (!inputValue.zone || !inputValue.eastings || !inputValue.northings) {",
          "coverage": 0
        },
        "27": {
          "source": "                cb('the input values for northeast field is {zone: text, eastings: text, northings:text}');",
          "coverage": 0
        },
        "28": {
          "source": "            } else {",
          "coverage": ""
        },
        "29": {
          "source": "                obj = {",
          "coverage": 0
        },
        "30": {
          "source": "                    'zone': inputValue.zone,",
          "coverage": ""
        },
        "31": {
          "source": "                    'eastings': inputValue.eastings,",
          "coverage": ""
        },
        "32": {
          "source": "                    'northings': inputValue.northings",
          "coverage": ""
        },
        "33": {
          "source": "                };",
          "coverage": ""
        },
        "34": {
          "source": "                cb(null, obj);",
          "coverage": 0
        },
        "35": {
          "source": "            }",
          "coverage": ""
        },
        "36": {
          "source": "            break;",
          "coverage": 0
        },
        "37": {
          "source": "        default:",
          "coverage": ""
        },
        "38": {
          "source": "            cb('Invalid subtype type of location field, allowed types: latlong and eastnorth, was: ' + def.locationUnit);",
          "coverage": 0
        },
        "39": {
          "source": "            break;",
          "coverage": 0
        },
        "40": {
          "source": "    }",
          "coverage": ""
        },
        "41": {
          "source": "};",
          "coverage": 1
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "44": {
          "source": "    process_location: process_location",
          "coverage": ""
        },
        "45": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/fieldMatrix.js",
      "coverage": 44.44444444444444,
      "hits": 8,
      "misses": 10,
      "sloc": 18,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * extension of Field class to support matrix field",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "6": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "7": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function getMatrixRows() {",
          "coverage": 1
        },
        "10": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "11": {
          "source": "    if (def.rows) {",
          "coverage": 0
        },
        "12": {
          "source": "        return def.rows;",
          "coverage": 0
        },
        "13": {
          "source": "    } else {",
          "coverage": ""
        },
        "14": {
          "source": "        log.e('matrix rows definition is not found in field definition');",
          "coverage": 0
        },
        "15": {
          "source": "        return null;",
          "coverage": 0
        },
        "16": {
          "source": "    }",
          "coverage": ""
        },
        "17": {
          "source": "};",
          "coverage": 1
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "function getMatrixCols() {",
          "coverage": 1
        },
        "20": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "21": {
          "source": "    if (def.columns) {",
          "coverage": 0
        },
        "22": {
          "source": "        return def.columns;",
          "coverage": 0
        },
        "23": {
          "source": "    } else {",
          "coverage": ""
        },
        "24": {
          "source": "        log.e('matrix columns definition is not found in field definition');",
          "coverage": 0
        },
        "25": {
          "source": "        return null;",
          "coverage": 0
        },
        "26": {
          "source": "    }",
          "coverage": ""
        },
        "27": {
          "source": "};",
          "coverage": 1
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "30": {
          "source": "    getMatrixRows: getMatrixRows,",
          "coverage": ""
        },
        "31": {
          "source": "    getMatrixCols: getMatrixCols",
          "coverage": ""
        },
        "32": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/fieldRadio.js",
      "coverage": 60,
      "hits": 6,
      "misses": 4,
      "sloc": 10,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * extension of Field class to support radio field",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "6": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "7": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function getRadioOption() {",
          "coverage": 1
        },
        "10": {
          "source": "    var def = this.getFieldDefinition();",
          "coverage": 0
        },
        "11": {
          "source": "    if (def.options) {",
          "coverage": 0
        },
        "12": {
          "source": "        return def.options;",
          "coverage": 0
        },
        "13": {
          "source": "    } else {",
          "coverage": ""
        },
        "14": {
          "source": "        log.e('Radio options definition is not found in field definition');",
          "coverage": 0
        },
        "15": {
          "source": "    }",
          "coverage": ""
        },
        "16": {
          "source": "};",
          "coverage": 1
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "19": {
          "source": "    getRadioOption: getRadioOption",
          "coverage": ""
        },
        "20": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/fileSubmission.js",
      "coverage": 41.66666666666667,
      "hits": 15,
      "misses": 21,
      "sloc": 36,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "5": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "function FileSubmission(fileData) {",
          "coverage": 1
        },
        "8": {
          "source": "    log.d(\"FileSubmission \", fileData);",
          "coverage": 0
        },
        "9": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "10": {
          "source": "        '_type': 'fileSubmission',",
          "coverage": ""
        },
        "11": {
          "source": "        'data': fileData",
          "coverage": ""
        },
        "12": {
          "source": "    });",
          "coverage": ""
        },
        "13": {
          "source": "};",
          "coverage": 1
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "utils.extend(FileSubmission, Model);",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "FileSubmission.prototype.loadFile = function(cb) {",
          "coverage": 1
        },
        "18": {
          "source": "    log.d(\"FileSubmission loadFile\");",
          "coverage": 0
        },
        "19": {
          "source": "    var fileName = this.getHashName();",
          "coverage": 0
        },
        "20": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "21": {
          "source": "    localStorage.readFile(fileName, function(err, file) {",
          "coverage": 0
        },
        "22": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "23": {
          "source": "            log.e(\"FileSubmission loadFile. Error reading file\", fileName, err);",
          "coverage": 0
        },
        "24": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "25": {
          "source": "        } else {",
          "coverage": ""
        },
        "26": {
          "source": "            log.d(\"FileSubmission loadFile. File read correctly\", fileName, file);",
          "coverage": 0
        },
        "27": {
          "source": "            that.fileObj = file;",
          "coverage": 0
        },
        "28": {
          "source": "            cb(null);",
          "coverage": 0
        },
        "29": {
          "source": "        }",
          "coverage": ""
        },
        "30": {
          "source": "    });",
          "coverage": ""
        },
        "31": {
          "source": "};",
          "coverage": ""
        },
        "32": {
          "source": "FileSubmission.prototype.getProps = function() {",
          "coverage": 1
        },
        "33": {
          "source": "    if (this.fileObj) {",
          "coverage": 0
        },
        "34": {
          "source": "        log.d(\"FileSubmissionDownload: file object found\");",
          "coverage": 0
        },
        "35": {
          "source": "        return this.fileObj;",
          "coverage": 0
        },
        "36": {
          "source": "    } else {",
          "coverage": ""
        },
        "37": {
          "source": "        log.e(\"FileSubmissionDownload: no file object found\");",
          "coverage": 0
        },
        "38": {
          "source": "    }",
          "coverage": ""
        },
        "39": {
          "source": "};",
          "coverage": ""
        },
        "40": {
          "source": "FileSubmission.prototype.setSubmissionId = function(submissionId) {",
          "coverage": 1
        },
        "41": {
          "source": "    log.d(\"FileSubmission setSubmissionId.\", submissionId);",
          "coverage": 0
        },
        "42": {
          "source": "    this.set('submissionId', submissionId);",
          "coverage": 0
        },
        "43": {
          "source": "};",
          "coverage": ""
        },
        "44": {
          "source": "FileSubmission.prototype.getSubmissionId = function() {",
          "coverage": 1
        },
        "45": {
          "source": "    return this.get('submissionId');",
          "coverage": 0
        },
        "46": {
          "source": "};",
          "coverage": ""
        },
        "47": {
          "source": "FileSubmission.prototype.getHashName = function() {",
          "coverage": 1
        },
        "48": {
          "source": "    return this.get('data').hashName;",
          "coverage": 0
        },
        "49": {
          "source": "};",
          "coverage": ""
        },
        "50": {
          "source": "FileSubmission.prototype.getFieldId = function() {",
          "coverage": 1
        },
        "51": {
          "source": "    return this.get('data').fieldId;",
          "coverage": 0
        },
        "52": {
          "source": "};",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "module.exports = FileSubmission;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/fileSubmissionBase64.js",
      "coverage": 81.81818181818183,
      "hits": 9,
      "misses": 2,
      "sloc": 11,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "5": {
          "source": "var FileSubmission = require(\"./fileSubmission\");",
          "coverage": 1
        },
        "6": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "function Base64FileSubmission(fileData) {",
          "coverage": 1
        },
        "9": {
          "source": "    FileSubmission.call(this, fileData);",
          "coverage": 0
        },
        "10": {
          "source": "    this.set('_type', 'base64fileSubmission');",
          "coverage": 0
        },
        "11": {
          "source": "}",
          "coverage": ""
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "utils.extend(Base64FileSubmission, Model);",
          "coverage": 1
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "module.exports = Base64FileSubmission;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/fileSubmissionDownload.js",
      "coverage": 36.17021276595745,
      "hits": 17,
      "misses": 30,
      "sloc": 47,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "5": {
          "source": "var FileSubmission = require(\"./fileSubmission\");",
          "coverage": 1
        },
        "6": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function FileSubmissionDownload(fileData) {",
          "coverage": 1
        },
        "10": {
          "source": "    log.d(\"FileSubmissionDownload \", fileData);",
          "coverage": 0
        },
        "11": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "12": {
          "source": "        '_type': 'fileSubmissionDownload',",
          "coverage": ""
        },
        "13": {
          "source": "        'data': fileData",
          "coverage": ""
        },
        "14": {
          "source": "    });",
          "coverage": ""
        },
        "15": {
          "source": "};",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "utils.extend(FileSubmissionDownload, Model);",
          "coverage": 1
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "FileSubmissionDownload.prototype.setSubmissionId = function(submissionId) {",
          "coverage": 1
        },
        "20": {
          "source": "    log.d(\"FileSubmission setSubmissionId.\", submissionId);",
          "coverage": 0
        },
        "21": {
          "source": "    this.set('submissionId', submissionId);",
          "coverage": 0
        },
        "22": {
          "source": "};",
          "coverage": ""
        },
        "23": {
          "source": "FileSubmissionDownload.prototype.getSubmissionId = function() {",
          "coverage": 1
        },
        "24": {
          "source": "    log.d(\"FileSubmission getSubmissionId: \", this.get('submissionId'));",
          "coverage": 0
        },
        "25": {
          "source": "    return this.get('submissionId', \"\");",
          "coverage": 0
        },
        "26": {
          "source": "};",
          "coverage": ""
        },
        "27": {
          "source": "FileSubmissionDownload.prototype.getHashName = function() {",
          "coverage": 1
        },
        "28": {
          "source": "    log.d(\"FileSubmission getHashName: \", this.get('data').hashName);",
          "coverage": 0
        },
        "29": {
          "source": "    return this.get('data', {}).hashName;",
          "coverage": 0
        },
        "30": {
          "source": "};",
          "coverage": ""
        },
        "31": {
          "source": "FileSubmissionDownload.prototype.getFieldId = function() {",
          "coverage": 1
        },
        "32": {
          "source": "    log.d(\"FileSubmission getFieldId: \", this.get('data').fieldId);",
          "coverage": 0
        },
        "33": {
          "source": "    return this.get('data', {}).fieldId;",
          "coverage": 0
        },
        "34": {
          "source": "};",
          "coverage": ""
        },
        "35": {
          "source": "FileSubmissionDownload.prototype.getFileMetaData = function() {",
          "coverage": 1
        },
        "36": {
          "source": "    log.d(\"FileSubmission getFileMetaData: \", this.get('data'));",
          "coverage": 0
        },
        "37": {
          "source": "    if (this.get('data')) {",
          "coverage": 0
        },
        "38": {
          "source": "        log.d(\"FileSubmission getFileMetaData: data found\", this.get('data'));",
          "coverage": 0
        },
        "39": {
          "source": "    } else {",
          "coverage": ""
        },
        "40": {
          "source": "        log.e(\"FileSubmission getFileMetaData: No data found\");",
          "coverage": 0
        },
        "41": {
          "source": "    }",
          "coverage": ""
        },
        "42": {
          "source": "    return this.get('data', {});",
          "coverage": 0
        },
        "43": {
          "source": "};",
          "coverage": ""
        },
        "44": {
          "source": "FileSubmissionDownload.prototype.getFileGroupId = function() {",
          "coverage": 1
        },
        "45": {
          "source": "    log.d(\"FileSubmission getFileGroupId: \", this.get('data'));",
          "coverage": 0
        },
        "46": {
          "source": "    return this.get('data', {}).groupId || \"notset\";",
          "coverage": 0
        },
        "47": {
          "source": "};",
          "coverage": ""
        },
        "48": {
          "source": "FileSubmissionDownload.prototype.getRemoteFileURL = function() {",
          "coverage": 1
        },
        "49": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "50": {
          "source": "    log.d(\"FileSubmission getRemoteFileURL: \");",
          "coverage": 0
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "    //RemoteFileUrl = cloudHost + /mbaas/forms/submission/:submissionId/file/:fileGroupId",
          "coverage": ""
        },
        "53": {
          "source": "    //Returned by the mbaas.",
          "coverage": ""
        },
        "54": {
          "source": "    function buildRemoteFileUrl() {",
          "coverage": 0
        },
        "55": {
          "source": "        var submissionId = self.getSubmissionId();",
          "coverage": 0
        },
        "56": {
          "source": "        var fileGroupId = self.getFileGroupId();",
          "coverage": 0
        },
        "57": {
          "source": "        var urlTemplate = config.get('formUrls', {}).fileSubmissionDownload;",
          "coverage": 0
        },
        "58": {
          "source": "        if (urlTemplate) {",
          "coverage": 0
        },
        "59": {
          "source": "            urlTemplate = urlTemplate.replace(\":submissionId\", submissionId);",
          "coverage": 0
        },
        "60": {
          "source": "            urlTemplate = urlTemplate.replace(\":fileGroupId\", fileGroupId);",
          "coverage": 0
        },
        "61": {
          "source": "            urlTemplate = urlTemplate.replace(\":appId\", config.get('appId', \"notSet\"));",
          "coverage": 0
        },
        "62": {
          "source": "            return config.getCloudHost() + \"/mbaas\" + urlTemplate;",
          "coverage": 0
        },
        "63": {
          "source": "        } else {",
          "coverage": ""
        },
        "64": {
          "source": "            return \"notset\";",
          "coverage": 0
        },
        "65": {
          "source": "        }",
          "coverage": ""
        },
        "66": {
          "source": "    }",
          "coverage": ""
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "    return buildRemoteFileUrl();",
          "coverage": 0
        },
        "69": {
          "source": "};",
          "coverage": ""
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "module.exports = FileSubmissionDownload;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/fileSystem.js",
      "coverage": 12.716763005780345,
      "hits": 22,
      "misses": 151,
      "sloc": 173,
      "source": {
        "1": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "2": {
          "source": "var async = require('../../../libs/async');",
          "coverage": 1
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "var fileSystemAvailable = false;",
          "coverage": 1
        },
        "5": {
          "source": "var _requestFileSystem = function() {",
          "coverage": 1
        },
        "6": {
          "source": "    console.error(\"No file system available\");",
          "coverage": 0
        },
        "7": {
          "source": "};",
          "coverage": ""
        },
        "8": {
          "source": "//placeholder",
          "coverage": ""
        },
        "9": {
          "source": "var PERSISTENT = 1;",
          "coverage": 1
        },
        "10": {
          "source": "//placeholder",
          "coverage": ""
        },
        "11": {
          "source": "function isFileSystemAvailable() {",
          "coverage": 1
        },
        "12": {
          "source": "    _checkEnv();",
          "coverage": 0
        },
        "13": {
          "source": "    return fileSystemAvailable;",
          "coverage": 0
        },
        "14": {
          "source": "}",
          "coverage": ""
        },
        "15": {
          "source": "//convert a file object to base64 encoded.",
          "coverage": ""
        },
        "16": {
          "source": "function fileToBase64(file, cb) {",
          "coverage": 1
        },
        "17": {
          "source": "    if (!file instanceof File) {",
          "coverage": 0
        },
        "18": {
          "source": "        return cb('Only file object can be used for converting');",
          "coverage": 0
        },
        "19": {
          "source": "    }",
          "coverage": ""
        },
        "20": {
          "source": "    var fileReader = new FileReader();",
          "coverage": 0
        },
        "21": {
          "source": "    fileReader.onloadend = function(evt) {",
          "coverage": 0
        },
        "22": {
          "source": "        var text = evt.target.result;",
          "coverage": 0
        },
        "23": {
          "source": "        return cb(null, text);",
          "coverage": 0
        },
        "24": {
          "source": "    };",
          "coverage": ""
        },
        "25": {
          "source": "    fileReader.readAsDataURL(file);",
          "coverage": 0
        },
        "26": {
          "source": "}",
          "coverage": ""
        },
        "27": {
          "source": "",
          "coverage": ""
        },
        "28": {
          "source": "function _createBlobOrString(contentstr) {",
          "coverage": 1
        },
        "29": {
          "source": "    var retVal;",
          "coverage": 0
        },
        "30": {
          "source": "    if (utils.isPhoneGap()) { // phonegap filewriter works with strings, later versions also ork with binary arrays, and if passed a blob will just convert to binary array anyway",
          "coverage": 0
        },
        "31": {
          "source": "        retVal = contentstr;",
          "coverage": 0
        },
        "32": {
          "source": "    } else {",
          "coverage": ""
        },
        "33": {
          "source": "        var targetContentType = 'text/plain';",
          "coverage": 0
        },
        "34": {
          "source": "        try {",
          "coverage": 0
        },
        "35": {
          "source": "            retVal = new Blob([contentstr], {",
          "coverage": 0
        },
        "36": {
          "source": "                type: targetContentType",
          "coverage": ""
        },
        "37": {
          "source": "            }); // Blob doesn't exist on all androids",
          "coverage": ""
        },
        "38": {
          "source": "        } catch (e) {",
          "coverage": ""
        },
        "39": {
          "source": "            // TypeError old chrome and FF",
          "coverage": ""
        },
        "40": {
          "source": "            var blobBuilder = window.BlobBuilder ||",
          "coverage": 0
        },
        "41": {
          "source": "                window.WebKitBlobBuilder ||",
          "coverage": ""
        },
        "42": {
          "source": "                window.MozBlobBuilder ||",
          "coverage": ""
        },
        "43": {
          "source": "                window.MSBlobBuilder;",
          "coverage": ""
        },
        "44": {
          "source": "            if (e.name === 'TypeError' &amp;&amp; blobBuilder) {",
          "coverage": 0
        },
        "45": {
          "source": "                var bb = new blobBuilder();",
          "coverage": 0
        },
        "46": {
          "source": "                bb.append([contentstr.buffer]);",
          "coverage": 0
        },
        "47": {
          "source": "                retVal = bb.getBlob(targetContentType);",
          "coverage": 0
        },
        "48": {
          "source": "            } else {",
          "coverage": ""
        },
        "49": {
          "source": "                // We can't make a Blob, so just return the stringified content",
          "coverage": ""
        },
        "50": {
          "source": "                retVal = contentstr;",
          "coverage": 0
        },
        "51": {
          "source": "            }",
          "coverage": ""
        },
        "52": {
          "source": "        }",
          "coverage": ""
        },
        "53": {
          "source": "    }",
          "coverage": ""
        },
        "54": {
          "source": "    return retVal;",
          "coverage": 0
        },
        "55": {
          "source": "}",
          "coverage": ""
        },
        "56": {
          "source": "",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "function getBasePath(cb) {",
          "coverage": 1
        },
        "59": {
          "source": "    save(\"dummy.txt\", \"TestContnet\", function(err, fileEntry) {",
          "coverage": 0
        },
        "60": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "61": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "62": {
          "source": "        }",
          "coverage": ""
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "        _getFileEntry(\"dummy.txt\", 0, {}, function(err, fileEntry) {",
          "coverage": 0
        },
        "65": {
          "source": "            var sPath = fileEntry.fullPath.replace(\"dummy.txt\", \"\");",
          "coverage": 0
        },
        "66": {
          "source": "            fileEntry.remove();",
          "coverage": 0
        },
        "67": {
          "source": "            return cb(null, sPath);",
          "coverage": 0
        },
        "68": {
          "source": "        });",
          "coverage": ""
        },
        "69": {
          "source": "    });",
          "coverage": ""
        },
        "70": {
          "source": "}",
          "coverage": ""
        },
        "71": {
          "source": "",
          "coverage": ""
        },
        "72": {
          "source": "function _getSaveObject(content) {",
          "coverage": 1
        },
        "73": {
          "source": "    var saveObj = null;",
          "coverage": 0
        },
        "74": {
          "source": "    if (typeof content === 'object' &amp;&amp; content !== null) {",
          "coverage": 0
        },
        "75": {
          "source": "        if (content instanceof File || content instanceof Blob) {",
          "coverage": 0
        },
        "76": {
          "source": "            //File object",
          "coverage": ""
        },
        "77": {
          "source": "            saveObj = content;",
          "coverage": 0
        },
        "78": {
          "source": "        } else {",
          "coverage": ""
        },
        "79": {
          "source": "            //JSON object",
          "coverage": ""
        },
        "80": {
          "source": "            var contentstr = JSON.stringify(content);",
          "coverage": 0
        },
        "81": {
          "source": "            saveObj = _createBlobOrString(contentstr);",
          "coverage": 0
        },
        "82": {
          "source": "        }",
          "coverage": ""
        },
        "83": {
          "source": "    } else if (typeof content === 'string') {",
          "coverage": 0
        },
        "84": {
          "source": "        saveObj = _createBlobOrString(content);",
          "coverage": 0
        },
        "85": {
          "source": "    }",
          "coverage": ""
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "    return saveObj;",
          "coverage": 0
        },
        "88": {
          "source": "}",
          "coverage": ""
        },
        "89": {
          "source": "",
          "coverage": ""
        },
        "90": {
          "source": "/**",
          "coverage": ""
        },
        "91": {
          "source": " * Save a content to file system into a file",
          "coverage": ""
        },
        "92": {
          "source": " *",
          "coverage": ""
        },
        "93": {
          "source": " * In the case where the content is a File and PhoneGap is available, the function will attempt to use the \"copyTo\" function instead of writing the file.",
          "coverage": ""
        },
        "94": {
          "source": " * This is because windows phone does not allow writing binary files with PhoneGap.",
          "coverage": ""
        },
        "95": {
          "source": " * @param  {[type]} fileName file name to be stored.",
          "coverage": ""
        },
        "96": {
          "source": " * @param  {[type]} content  json object / string /  file object / blob object",
          "coverage": ""
        },
        "97": {
          "source": " * @param  {[type]} cb  (err, result)",
          "coverage": ""
        },
        "98": {
          "source": " * @return {[type]}          [description]",
          "coverage": ""
        },
        "99": {
          "source": " */",
          "coverage": ""
        },
        "100": {
          "source": "function save(fileName, content, cb) {",
          "coverage": 1
        },
        "101": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "102": {
          "source": "    var saveObj = _getSaveObject(content);",
          "coverage": 0
        },
        "103": {
          "source": "    if (saveObj === null) {",
          "coverage": 0
        },
        "104": {
          "source": "        return cb(\"Invalid content type. Object was null\");",
          "coverage": 0
        },
        "105": {
          "source": "    }",
          "coverage": ""
        },
        "106": {
          "source": "    var size = saveObj.size || saveObj.length;",
          "coverage": 0
        },
        "107": {
          "source": "",
          "coverage": ""
        },
        "108": {
          "source": "    _getFileEntry(fileName, size, {",
          "coverage": 0
        },
        "109": {
          "source": "        create: true",
          "coverage": ""
        },
        "110": {
          "source": "    }, function(err, fileEntry) {",
          "coverage": ""
        },
        "111": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "112": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "113": {
          "source": "        } else {",
          "coverage": ""
        },
        "114": {
          "source": "            if (utils.isPhoneGap() &amp;&amp; saveObj instanceof File) {",
          "coverage": 0
        },
        "115": {
          "source": "                //Writing binary files is not possible in windows phone.",
          "coverage": ""
        },
        "116": {
          "source": "                //So if the thing to save is a file, and it is in phonegap, use the copyTo functions instead.",
          "coverage": ""
        },
        "117": {
          "source": "                fileEntry.getParent(function(parentDir) {",
          "coverage": 0
        },
        "118": {
          "source": "                    //Get the file entry for the file input",
          "coverage": ""
        },
        "119": {
          "source": "                    _resolveFile(saveObj.fullPath, function(err, fileToCopy) {",
          "coverage": 0
        },
        "120": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "121": {
          "source": "                            return cb(err);",
          "coverage": 0
        },
        "122": {
          "source": "                        }",
          "coverage": ""
        },
        "123": {
          "source": "                        fileName = fileEntry.name;",
          "coverage": 0
        },
        "124": {
          "source": "",
          "coverage": ""
        },
        "125": {
          "source": "                        fileEntry.remove(function() {",
          "coverage": 0
        },
        "126": {
          "source": "                            fileToCopy.copyTo(parentDir, fileName, function(copiedFile) {",
          "coverage": 0
        },
        "127": {
          "source": "                                return cb(null, copiedFile);",
          "coverage": 0
        },
        "128": {
          "source": "                            }, function(err) {",
          "coverage": ""
        },
        "129": {
          "source": "                                return cb(err);",
          "coverage": 0
        },
        "130": {
          "source": "                            });",
          "coverage": ""
        },
        "131": {
          "source": "                        }, function(err) {",
          "coverage": ""
        },
        "132": {
          "source": "                            return cb(err);",
          "coverage": 0
        },
        "133": {
          "source": "                        });",
          "coverage": ""
        },
        "134": {
          "source": "                    }, function(err) {",
          "coverage": ""
        },
        "135": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "136": {
          "source": "                    });",
          "coverage": ""
        },
        "137": {
          "source": "                }, function(err) {",
          "coverage": ""
        },
        "138": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "139": {
          "source": "                });",
          "coverage": ""
        },
        "140": {
          "source": "            } else {",
          "coverage": ""
        },
        "141": {
          "source": "                //Otherwise, just write text",
          "coverage": ""
        },
        "142": {
          "source": "                fileEntry.createWriter(function(writer) {",
          "coverage": 0
        },
        "143": {
          "source": "                    function _onFinished(evt) {",
          "coverage": 0
        },
        "144": {
          "source": "                        return cb(null, evt);",
          "coverage": 0
        },
        "145": {
          "source": "                    }",
          "coverage": ""
        },
        "146": {
          "source": "",
          "coverage": ""
        },
        "147": {
          "source": "                    function _onTruncated() {",
          "coverage": 0
        },
        "148": {
          "source": "                        writer.onwriteend = _onFinished;",
          "coverage": 0
        },
        "149": {
          "source": "                        writer.write(saveObj); //write method can take a blob or file object according to html5 standard.",
          "coverage": 0
        },
        "150": {
          "source": "                    }",
          "coverage": ""
        },
        "151": {
          "source": "                    writer.onwriteend = _onTruncated;",
          "coverage": 0
        },
        "152": {
          "source": "                    //truncate the file first.",
          "coverage": ""
        },
        "153": {
          "source": "                    writer.truncate(0);",
          "coverage": 0
        },
        "154": {
          "source": "                }, function(e) {",
          "coverage": ""
        },
        "155": {
          "source": "                    cb('Failed to create file write:' + e);",
          "coverage": 0
        },
        "156": {
          "source": "                });",
          "coverage": ""
        },
        "157": {
          "source": "            }",
          "coverage": ""
        },
        "158": {
          "source": "",
          "coverage": ""
        },
        "159": {
          "source": "        }",
          "coverage": ""
        },
        "160": {
          "source": "    });",
          "coverage": ""
        },
        "161": {
          "source": "}",
          "coverage": ""
        },
        "162": {
          "source": "/**",
          "coverage": ""
        },
        "163": {
          "source": " * Remove a file from file system",
          "coverage": ""
        },
        "164": {
          "source": " * @param  {[type]}   fileName file name of file to be removed",
          "coverage": ""
        },
        "165": {
          "source": " * @param  {Function} cb",
          "coverage": ""
        },
        "166": {
          "source": " * @return {[type]}            [description]",
          "coverage": ""
        },
        "167": {
          "source": " */",
          "coverage": ""
        },
        "168": {
          "source": "function remove(fileName, cb) {",
          "coverage": 1
        },
        "169": {
          "source": "    _getFileEntry(fileName, 0, {}, function(err, fileEntry) {",
          "coverage": 0
        },
        "170": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "171": {
          "source": "            if (!(err.name === 'NotFoundError' || err.code === 1)) {",
          "coverage": 0
        },
        "172": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "173": {
          "source": "            } else {",
          "coverage": ""
        },
        "174": {
          "source": "                return cb(null, null);",
          "coverage": 0
        },
        "175": {
          "source": "            }",
          "coverage": ""
        },
        "176": {
          "source": "        }",
          "coverage": ""
        },
        "177": {
          "source": "        fileEntry.remove(function() {",
          "coverage": 0
        },
        "178": {
          "source": "            cb(null, null);",
          "coverage": 0
        },
        "179": {
          "source": "        }, function(e) {",
          "coverage": ""
        },
        "180": {
          "source": "            cb('Failed to remove file' + e);",
          "coverage": 0
        },
        "181": {
          "source": "        });",
          "coverage": ""
        },
        "182": {
          "source": "    });",
          "coverage": ""
        },
        "183": {
          "source": "}",
          "coverage": ""
        },
        "184": {
          "source": "/**",
          "coverage": ""
        },
        "185": {
          "source": " * Read a file as text",
          "coverage": ""
        },
        "186": {
          "source": " * @param  {[type]}   fileName [description]",
          "coverage": ""
        },
        "187": {
          "source": " * @param  {Function} cb       (err,text)",
          "coverage": ""
        },
        "188": {
          "source": " * @return {[type]}            [description]",
          "coverage": ""
        },
        "189": {
          "source": " */",
          "coverage": ""
        },
        "190": {
          "source": "function readAsText(fileName, cb) {",
          "coverage": 1
        },
        "191": {
          "source": "    _getFile(fileName, function(err, file) {",
          "coverage": 0
        },
        "192": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "193": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "194": {
          "source": "        } else {",
          "coverage": ""
        },
        "195": {
          "source": "            var reader = new FileReader();",
          "coverage": 0
        },
        "196": {
          "source": "            reader.onloadend = function(evt) {",
          "coverage": 0
        },
        "197": {
          "source": "                var text = evt.target.result;",
          "coverage": 0
        },
        "198": {
          "source": "                if (typeof text === \"object\") {",
          "coverage": 0
        },
        "199": {
          "source": "                    text = JSON.stringify(text);",
          "coverage": 0
        },
        "200": {
          "source": "                }",
          "coverage": ""
        },
        "201": {
          "source": "                // Check for URLencoded",
          "coverage": ""
        },
        "202": {
          "source": "                // PG 2.2 bug in readAsText()",
          "coverage": ""
        },
        "203": {
          "source": "                try {",
          "coverage": 0
        },
        "204": {
          "source": "                    text = decodeURIComponent(text);",
          "coverage": 0
        },
        "205": {
          "source": "                } catch (e) {",
          "coverage": ""
        },
        "206": {
          "source": "",
          "coverage": ""
        },
        "207": {
          "source": "                }",
          "coverage": ""
        },
        "208": {
          "source": "                return cb(null, text);",
          "coverage": 0
        },
        "209": {
          "source": "            };",
          "coverage": ""
        },
        "210": {
          "source": "            reader.readAsText(file);",
          "coverage": 0
        },
        "211": {
          "source": "        }",
          "coverage": ""
        },
        "212": {
          "source": "    });",
          "coverage": ""
        },
        "213": {
          "source": "}",
          "coverage": ""
        },
        "214": {
          "source": "/**",
          "coverage": ""
        },
        "215": {
          "source": " * Read a file and return base64 encoded data",
          "coverage": ""
        },
        "216": {
          "source": " * @param  {[type]}   fileName [description]",
          "coverage": ""
        },
        "217": {
          "source": " * @param  {Function} cb       (err,base64Encoded)",
          "coverage": ""
        },
        "218": {
          "source": " * @return {[type]}            [description]",
          "coverage": ""
        },
        "219": {
          "source": " */",
          "coverage": ""
        },
        "220": {
          "source": "function readAsBase64Encoded(fileName, cb) {",
          "coverage": 1
        },
        "221": {
          "source": "    _getFile(fileName, function(err, file) {",
          "coverage": 0
        },
        "222": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "223": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "224": {
          "source": "        }",
          "coverage": ""
        },
        "225": {
          "source": "        var reader = new FileReader();",
          "coverage": 0
        },
        "226": {
          "source": "        reader.onloadend = function(evt) {",
          "coverage": 0
        },
        "227": {
          "source": "            var text = evt.target.result;",
          "coverage": 0
        },
        "228": {
          "source": "            return cb(null, text);",
          "coverage": 0
        },
        "229": {
          "source": "        };",
          "coverage": ""
        },
        "230": {
          "source": "        reader.readAsDataURL(file);",
          "coverage": 0
        },
        "231": {
          "source": "    });",
          "coverage": ""
        },
        "232": {
          "source": "}",
          "coverage": ""
        },
        "233": {
          "source": "/**",
          "coverage": ""
        },
        "234": {
          "source": " * Read a file return blob object (which can be used for XHR uploading binary)",
          "coverage": ""
        },
        "235": {
          "source": " * @param  {[type]}   fileName [description]",
          "coverage": ""
        },
        "236": {
          "source": " * @param  {Function} cb       (err, blob)",
          "coverage": ""
        },
        "237": {
          "source": " * @return {[type]}            [description]",
          "coverage": ""
        },
        "238": {
          "source": " */",
          "coverage": ""
        },
        "239": {
          "source": "function readAsBlob(fileName, cb) {",
          "coverage": 1
        },
        "240": {
          "source": "    _getFile(fileName, function(err, file) {",
          "coverage": 0
        },
        "241": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "242": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "243": {
          "source": "        } else {",
          "coverage": ""
        },
        "244": {
          "source": "            var type = file.type;",
          "coverage": 0
        },
        "245": {
          "source": "            var reader = new FileReader();",
          "coverage": 0
        },
        "246": {
          "source": "            reader.onloadend = function(evt) {",
          "coverage": 0
        },
        "247": {
          "source": "                var arrayBuffer = evt.target.result;",
          "coverage": 0
        },
        "248": {
          "source": "                var blob = new Blob([arrayBuffer], {",
          "coverage": 0
        },
        "249": {
          "source": "                    'type': type",
          "coverage": ""
        },
        "250": {
          "source": "                });",
          "coverage": ""
        },
        "251": {
          "source": "                cb(null, blob);",
          "coverage": 0
        },
        "252": {
          "source": "            };",
          "coverage": ""
        },
        "253": {
          "source": "            reader.readAsArrayBuffer(file);",
          "coverage": 0
        },
        "254": {
          "source": "        }",
          "coverage": ""
        },
        "255": {
          "source": "    });",
          "coverage": ""
        },
        "256": {
          "source": "}",
          "coverage": ""
        },
        "257": {
          "source": "",
          "coverage": ""
        },
        "258": {
          "source": "function readAsFile(fileName, cb) {",
          "coverage": 1
        },
        "259": {
          "source": "    _getFile(fileName, cb);",
          "coverage": 0
        },
        "260": {
          "source": "}",
          "coverage": ""
        },
        "261": {
          "source": "/**",
          "coverage": ""
        },
        "262": {
          "source": " * Retrieve a file object",
          "coverage": ""
        },
        "263": {
          "source": " * @param  {[type]}   fileName [description]",
          "coverage": ""
        },
        "264": {
          "source": " * @param  {Function} cb     (err,file)",
          "coverage": ""
        },
        "265": {
          "source": " * @return {[type]}            [description]",
          "coverage": ""
        },
        "266": {
          "source": " */",
          "coverage": ""
        },
        "267": {
          "source": "function _getFile(fileName, cb) {",
          "coverage": 1
        },
        "268": {
          "source": "    _getFileEntry(fileName, 0, {}, function(err, fe) {",
          "coverage": 0
        },
        "269": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "270": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "271": {
          "source": "        }",
          "coverage": ""
        },
        "272": {
          "source": "        fe.file(function(file) {",
          "coverage": 0
        },
        "273": {
          "source": "            cb(null, file);",
          "coverage": 0
        },
        "274": {
          "source": "        }, function(e) {",
          "coverage": ""
        },
        "275": {
          "source": "            cb(e);",
          "coverage": 0
        },
        "276": {
          "source": "        });",
          "coverage": ""
        },
        "277": {
          "source": "    });",
          "coverage": ""
        },
        "278": {
          "source": "}",
          "coverage": ""
        },
        "279": {
          "source": "",
          "coverage": ""
        },
        "280": {
          "source": "function _resolveFile(fileName, cb) {",
          "coverage": 1
        },
        "281": {
          "source": "    //This is necessary to get the correct uri for apple. The URI in a file object for iphone does not have the file:// prefix.",
          "coverage": ""
        },
        "282": {
          "source": "    //This gives invalid uri errors when trying to resolve.",
          "coverage": ""
        },
        "283": {
          "source": "    if (fileName.indexOf(\"file://\") === -1 &amp;&amp; window.device.platform !== \"Win32NT\") {",
          "coverage": 0
        },
        "284": {
          "source": "        fileName = \"file://\" + fileName;",
          "coverage": 0
        },
        "285": {
          "source": "    }",
          "coverage": ""
        },
        "286": {
          "source": "    window.resolveLocalFileSystemURI(fileName, function(fileEntry) {",
          "coverage": 0
        },
        "287": {
          "source": "        return cb(null, fileEntry);",
          "coverage": 0
        },
        "288": {
          "source": "    }, function(err) {",
          "coverage": ""
        },
        "289": {
          "source": "        return cb(err);",
          "coverage": 0
        },
        "290": {
          "source": "    });",
          "coverage": ""
        },
        "291": {
          "source": "}",
          "coverage": ""
        },
        "292": {
          "source": "",
          "coverage": ""
        },
        "293": {
          "source": "function _getFileEntry(fileName, size, params, cb) {",
          "coverage": 1
        },
        "294": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "295": {
          "source": "    _checkEnv();",
          "coverage": 0
        },
        "296": {
          "source": "    if (typeof(fileName) === \"string\") {",
          "coverage": 0
        },
        "297": {
          "source": "        _requestFileSystem(PERSISTENT, size, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "298": {
          "source": "            fileSystem.root.getFile(fileName, params, function gotFileEntry(fileEntry) {",
          "coverage": 0
        },
        "299": {
          "source": "                cb(null, fileEntry);",
          "coverage": 0
        },
        "300": {
          "source": "            }, function(err) {",
          "coverage": ""
        },
        "301": {
          "source": "                if (err.name === 'QuotaExceededError' || err.code === 10) {",
          "coverage": 0
        },
        "302": {
          "source": "                    //this happens only on browser. request for 1 gb storage",
          "coverage": ""
        },
        "303": {
          "source": "                    //TODO configurable from cloud",
          "coverage": ""
        },
        "304": {
          "source": "                    var bigSize = 1024 * 1024 * 1024;",
          "coverage": 0
        },
        "305": {
          "source": "                    _requestQuote(bigSize, function(err, bigSize) {",
          "coverage": 0
        },
        "306": {
          "source": "                        _getFileEntry(fileName, size, params, cb);",
          "coverage": 0
        },
        "307": {
          "source": "                    });",
          "coverage": ""
        },
        "308": {
          "source": "                } else {",
          "coverage": ""
        },
        "309": {
          "source": "                    if (!utils.isPhoneGap()) {",
          "coverage": 0
        },
        "310": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "311": {
          "source": "                    } else {",
          "coverage": ""
        },
        "312": {
          "source": "                        _resolveFile(fileName, cb);",
          "coverage": 0
        },
        "313": {
          "source": "                    }",
          "coverage": ""
        },
        "314": {
          "source": "                }",
          "coverage": ""
        },
        "315": {
          "source": "            });",
          "coverage": ""
        },
        "316": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "317": {
          "source": "            cb('Failed to requestFileSystem');",
          "coverage": 0
        },
        "318": {
          "source": "        });",
          "coverage": ""
        },
        "319": {
          "source": "    } else {",
          "coverage": ""
        },
        "320": {
          "source": "        if (typeof(cb) === \"function\") {",
          "coverage": 0
        },
        "321": {
          "source": "            cb(\"Expected file name to be a string but was \" + fileName);",
          "coverage": 0
        },
        "322": {
          "source": "        }",
          "coverage": ""
        },
        "323": {
          "source": "    }",
          "coverage": ""
        },
        "324": {
          "source": "}",
          "coverage": ""
        },
        "325": {
          "source": "",
          "coverage": ""
        },
        "326": {
          "source": "function _requestQuote(size, cb) {",
          "coverage": 1
        },
        "327": {
          "source": "    if (navigator.webkitPersistentStorage) {",
          "coverage": 0
        },
        "328": {
          "source": "        //webkit browser",
          "coverage": ""
        },
        "329": {
          "source": "        navigator.webkitPersistentStorage.requestQuota(size, function(size) {",
          "coverage": 0
        },
        "330": {
          "source": "            cb(null, size);",
          "coverage": 0
        },
        "331": {
          "source": "        }, function(err) {",
          "coverage": ""
        },
        "332": {
          "source": "            cb(err, 0);",
          "coverage": 0
        },
        "333": {
          "source": "        });",
          "coverage": ""
        },
        "334": {
          "source": "    } else {",
          "coverage": ""
        },
        "335": {
          "source": "        //PhoneGap does not need to do this.return directly.",
          "coverage": ""
        },
        "336": {
          "source": "        cb(null, size);",
          "coverage": 0
        },
        "337": {
          "source": "    }",
          "coverage": ""
        },
        "338": {
          "source": "}",
          "coverage": ""
        },
        "339": {
          "source": "",
          "coverage": ""
        },
        "340": {
          "source": "function _checkEnv() {",
          "coverage": 1
        },
        "341": {
          "source": "    if (window.requestFileSystem) {",
          "coverage": 0
        },
        "342": {
          "source": "        _requestFileSystem = window.requestFileSystem;",
          "coverage": 0
        },
        "343": {
          "source": "        fileSystemAvailable = true;",
          "coverage": 0
        },
        "344": {
          "source": "    } else if (window.webkitRequestFileSystem) {",
          "coverage": 0
        },
        "345": {
          "source": "        _requestFileSystem = window.webkitRequestFileSystem;",
          "coverage": 0
        },
        "346": {
          "source": "        fileSystemAvailable = true;",
          "coverage": 0
        },
        "347": {
          "source": "    } else {",
          "coverage": ""
        },
        "348": {
          "source": "        fileSystemAvailable = false;",
          "coverage": 0
        },
        "349": {
          "source": "    }",
          "coverage": ""
        },
        "350": {
          "source": "    if (window.LocalFileSystem) {",
          "coverage": 0
        },
        "351": {
          "source": "        PERSISTENT = window.LocalFileSystem.PERSISTENT;",
          "coverage": 0
        },
        "352": {
          "source": "    } else if (window.PERSISTENT) {",
          "coverage": 0
        },
        "353": {
          "source": "        PERSISTENT = window.PERSISTENT;",
          "coverage": 0
        },
        "354": {
          "source": "    }",
          "coverage": ""
        },
        "355": {
          "source": "}",
          "coverage": ""
        },
        "356": {
          "source": "",
          "coverage": ""
        },
        "357": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "358": {
          "source": "    isFileSystemAvailable: isFileSystemAvailable,",
          "coverage": ""
        },
        "359": {
          "source": "    save: save,",
          "coverage": ""
        },
        "360": {
          "source": "    remove: remove,",
          "coverage": ""
        },
        "361": {
          "source": "    readAsText: readAsText,",
          "coverage": ""
        },
        "362": {
          "source": "    readAsBlob: readAsBlob,",
          "coverage": ""
        },
        "363": {
          "source": "    readAsBase64Encoded: readAsBase64Encoded,",
          "coverage": ""
        },
        "364": {
          "source": "    readAsFile: readAsFile,",
          "coverage": ""
        },
        "365": {
          "source": "    fileToBase64: fileToBase64,",
          "coverage": ""
        },
        "366": {
          "source": "    getBasePath: getBasePath",
          "coverage": ""
        },
        "367": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/form.js",
      "coverage": 18.556701030927837,
      "hits": 36,
      "misses": 158,
      "sloc": 194,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var Page = require(\"./page\");",
          "coverage": 1
        },
        "3": {
          "source": "var Field = require(\"./field\");",
          "coverage": 1
        },
        "4": {
          "source": "var RulesEngine = require(\"./rulesEngine\");",
          "coverage": 1
        },
        "5": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "6": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "7": {
          "source": "var submission = require(\"./submission\");",
          "coverage": 1
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "var _forms = {};",
          "coverage": 1
        },
        "10": {
          "source": "//cache of all forms. single instance for 1 formid",
          "coverage": ""
        },
        "11": {
          "source": "/**",
          "coverage": ""
        },
        "12": {
          "source": " * [Form description]",
          "coverage": ""
        },
        "13": {
          "source": " * @param {[type]}   params  {formId: string, fromRemote:boolean(false), rawMode:false, rawData:JSON}",
          "coverage": ""
        },
        "14": {
          "source": " * @param {Function} cb         [description]",
          "coverage": ""
        },
        "15": {
          "source": " */",
          "coverage": ""
        },
        "16": {
          "source": "function Form(params, cb) {",
          "coverage": 1
        },
        "17": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "18": {
          "source": "    var rawMode = params.rawMode || false;",
          "coverage": 0
        },
        "19": {
          "source": "    var rawData = params.rawData || null;",
          "coverage": 0
        },
        "20": {
          "source": "    var formId = params.formId;",
          "coverage": 0
        },
        "21": {
          "source": "    var fromRemote = params.fromRemote;",
          "coverage": 0
        },
        "22": {
          "source": "    log.d(\"Form: \", rawMode, rawData, formId, fromRemote);",
          "coverage": 0
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "    if (typeof fromRemote === 'function' || typeof cb === 'function') {",
          "coverage": 0
        },
        "25": {
          "source": "        if (typeof fromRemote === 'function') {",
          "coverage": 0
        },
        "26": {
          "source": "            cb = fromRemote;",
          "coverage": 0
        },
        "27": {
          "source": "            fromRemote = false;",
          "coverage": 0
        },
        "28": {
          "source": "        }",
          "coverage": ""
        },
        "29": {
          "source": "    } else {",
          "coverage": ""
        },
        "30": {
          "source": "        return log.e('a callback function is required for initialising form data. new Form (formId, [isFromRemote], cb)');",
          "coverage": 0
        },
        "31": {
          "source": "    }",
          "coverage": ""
        },
        "32": {
          "source": "",
          "coverage": ""
        },
        "33": {
          "source": "    if (!formId) {",
          "coverage": 0
        },
        "34": {
          "source": "        return cb('Cannot initialise a form object without an id. id:' + formId, null);",
          "coverage": 0
        },
        "35": {
          "source": "    }",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "    Model.call(that, {",
          "coverage": 0
        },
        "39": {
          "source": "        '_id': formId,",
          "coverage": ""
        },
        "40": {
          "source": "        '_type': 'form'",
          "coverage": ""
        },
        "41": {
          "source": "    });",
          "coverage": ""
        },
        "42": {
          "source": "    that.set('_id', formId);",
          "coverage": 0
        },
        "43": {
          "source": "    that.setLocalId(that.genLocalId(formId));",
          "coverage": 0
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "",
          "coverage": ""
        },
        "46": {
          "source": "    function loadFromLocal() {",
          "coverage": 0
        },
        "47": {
          "source": "        log.d(\"Form: loadFromLocal \", rawMode, rawData, formId, fromRemote);",
          "coverage": 0
        },
        "48": {
          "source": "        if (_forms[formId]) {",
          "coverage": 0
        },
        "49": {
          "source": "            //found form object in mem return it.",
          "coverage": ""
        },
        "50": {
          "source": "            cb(null, _forms[formId]);",
          "coverage": 0
        },
        "51": {
          "source": "            return _forms[formId];",
          "coverage": 0
        },
        "52": {
          "source": "        }",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "        function processRawFormJSON() {",
          "coverage": 0
        },
        "55": {
          "source": "            that.fromJSON(rawData);",
          "coverage": 0
        },
        "56": {
          "source": "            that.initialise();",
          "coverage": 0
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "            _forms[that.getFormId()] = that;",
          "coverage": 0
        },
        "59": {
          "source": "            return cb(null, that);",
          "coverage": 0
        },
        "60": {
          "source": "        }",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "        if (rawData) {",
          "coverage": 0
        },
        "63": {
          "source": "            return processRawFormJSON();",
          "coverage": 0
        },
        "64": {
          "source": "        } else {",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "            /**",
          "coverage": ""
        },
        "67": {
          "source": "             * No Form JSON object to process into Models, load the form from local",
          "coverage": ""
        },
        "68": {
          "source": "             * storage.",
          "coverage": ""
        },
        "69": {
          "source": "             */",
          "coverage": ""
        },
        "70": {
          "source": "            that.refresh(false, function(err, form) {",
          "coverage": 0
        },
        "71": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "72": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "73": {
          "source": "                }",
          "coverage": ""
        },
        "74": {
          "source": "",
          "coverage": ""
        },
        "75": {
          "source": "                form.initialise();",
          "coverage": 0
        },
        "76": {
          "source": "",
          "coverage": ""
        },
        "77": {
          "source": "                _forms[formId] = form;",
          "coverage": 0
        },
        "78": {
          "source": "                return cb(null, form);",
          "coverage": 0
        },
        "79": {
          "source": "            });",
          "coverage": ""
        },
        "80": {
          "source": "        }",
          "coverage": ""
        },
        "81": {
          "source": "    }",
          "coverage": ""
        },
        "82": {
          "source": "",
          "coverage": ""
        },
        "83": {
          "source": "",
          "coverage": ""
        },
        "84": {
          "source": "    function loadFromRemote() {",
          "coverage": 0
        },
        "85": {
          "source": "        log.d(\"Form: loadFromRemote\", rawMode, rawData, formId, fromRemote);",
          "coverage": 0
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "        function checkForUpdate(form) {",
          "coverage": 0
        },
        "88": {
          "source": "            log.d(\"Form: checkForUpdate\", rawMode, rawData, formId, fromRemote);",
          "coverage": 0
        },
        "89": {
          "source": "            form.refresh(false, function(err, obj) {",
          "coverage": 0
        },
        "90": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "91": {
          "source": "                    log.e(\"Error refreshing form from local: \", err);",
          "coverage": 0
        },
        "92": {
          "source": "                }",
          "coverage": ""
        },
        "93": {
          "source": "                if (forms.isFormUpdated(form)) {",
          "coverage": 0
        },
        "94": {
          "source": "                    form.refresh(true, function(err, obj1) {",
          "coverage": 0
        },
        "95": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "96": {
          "source": "                            return cb(err, null);",
          "coverage": 0
        },
        "97": {
          "source": "                        }",
          "coverage": ""
        },
        "98": {
          "source": "                        form.initialise();",
          "coverage": 0
        },
        "99": {
          "source": "",
          "coverage": ""
        },
        "100": {
          "source": "                        _forms[formId] = obj1;",
          "coverage": 0
        },
        "101": {
          "source": "                        return cb(err, obj1);",
          "coverage": 0
        },
        "102": {
          "source": "                    });",
          "coverage": ""
        },
        "103": {
          "source": "                } else {",
          "coverage": ""
        },
        "104": {
          "source": "                    form.initialise();",
          "coverage": 0
        },
        "105": {
          "source": "                    _forms[formId] = obj;",
          "coverage": 0
        },
        "106": {
          "source": "                    cb(err, obj);",
          "coverage": 0
        },
        "107": {
          "source": "                }",
          "coverage": ""
        },
        "108": {
          "source": "            });",
          "coverage": ""
        },
        "109": {
          "source": "        }",
          "coverage": ""
        },
        "110": {
          "source": "",
          "coverage": ""
        },
        "111": {
          "source": "        if (_forms[formId]) {",
          "coverage": 0
        },
        "112": {
          "source": "            log.d(\"Form: loaded from cache\", rawMode, rawData, formId, fromRemote);",
          "coverage": 0
        },
        "113": {
          "source": "            //found form object in mem return it.",
          "coverage": ""
        },
        "114": {
          "source": "            if (!forms.isFormUpdated(_forms[formId])) {",
          "coverage": 0
        },
        "115": {
          "source": "                cb(null, _forms[formId]);",
          "coverage": 0
        },
        "116": {
          "source": "                return _forms[formId];",
          "coverage": 0
        },
        "117": {
          "source": "            }",
          "coverage": ""
        },
        "118": {
          "source": "        }",
          "coverage": ""
        },
        "119": {
          "source": "",
          "coverage": ""
        },
        "120": {
          "source": "        checkForUpdate(that);",
          "coverage": 0
        },
        "121": {
          "source": "    }",
          "coverage": ""
        },
        "122": {
          "source": "",
          "coverage": ""
        },
        "123": {
          "source": "    //Raw mode is for avoiding interaction with the mbaas",
          "coverage": ""
        },
        "124": {
          "source": "    if (rawMode === true) {",
          "coverage": 0
        },
        "125": {
          "source": "        loadFromLocal();",
          "coverage": 0
        },
        "126": {
          "source": "    } else {",
          "coverage": ""
        },
        "127": {
          "source": "        loadFromRemote();",
          "coverage": 0
        },
        "128": {
          "source": "    }",
          "coverage": ""
        },
        "129": {
          "source": "};",
          "coverage": 1
        },
        "130": {
          "source": "",
          "coverage": ""
        },
        "131": {
          "source": "utils.extend(Form, Model);",
          "coverage": 1
        },
        "132": {
          "source": "",
          "coverage": ""
        },
        "133": {
          "source": "Form.prototype.getLastUpdate = function() {",
          "coverage": 1
        },
        "134": {
          "source": "    log.d(\"Form: getLastUpdate\");",
          "coverage": 0
        },
        "135": {
          "source": "    return this.get('lastUpdatedTimestamp');",
          "coverage": 0
        },
        "136": {
          "source": "};",
          "coverage": ""
        },
        "137": {
          "source": "Form.prototype.genLocalId = function(formId) {",
          "coverage": 1
        },
        "138": {
          "source": "    formId = typeof(formId) === 'string' ? formId : this.get(\"_id\", \"\");",
          "coverage": 0
        },
        "139": {
          "source": "    return \"form_\" + formId;",
          "coverage": 0
        },
        "140": {
          "source": "};",
          "coverage": ""
        },
        "141": {
          "source": "/**",
          "coverage": ""
        },
        "142": {
          "source": " * Initiliase form json to objects",
          "coverage": ""
        },
        "143": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "144": {
          "source": " */",
          "coverage": ""
        },
        "145": {
          "source": "Form.prototype.initialise = function() {",
          "coverage": 1
        },
        "146": {
          "source": "    this.filterAdminFields();",
          "coverage": 0
        },
        "147": {
          "source": "    this.initialisePage();",
          "coverage": 0
        },
        "148": {
          "source": "    this.initialiseFields();",
          "coverage": 0
        },
        "149": {
          "source": "    this.initialiseRules();",
          "coverage": 0
        },
        "150": {
          "source": "};",
          "coverage": ""
        },
        "151": {
          "source": "/**",
          "coverage": ""
        },
        "152": {
          "source": " * Admin fields should not be part of the form.",
          "coverage": ""
        },
        "153": {
          "source": " */",
          "coverage": ""
        },
        "154": {
          "source": "Form.prototype.filterAdminFields = function() {",
          "coverage": 1
        },
        "155": {
          "source": "    var pages = this.getPagesDef();",
          "coverage": 0
        },
        "156": {
          "source": "    var newFieldRef = {};",
          "coverage": 0
        },
        "157": {
          "source": "",
          "coverage": ""
        },
        "158": {
          "source": "    for (var pageIndex = 0; pageIndex &lt; pages.length; pageIndex++) {",
          "coverage": 0
        },
        "159": {
          "source": "        var page = pages[pageIndex];",
          "coverage": 0
        },
        "160": {
          "source": "        var pageFields = page.fields;",
          "coverage": 0
        },
        "161": {
          "source": "        var filteredFields = [];",
          "coverage": 0
        },
        "162": {
          "source": "        var fieldInPageIndex = 0;",
          "coverage": 0
        },
        "163": {
          "source": "",
          "coverage": ""
        },
        "164": {
          "source": "        for (var fieldIndex = 0; fieldIndex &lt; pageFields.length; fieldIndex++) {",
          "coverage": 0
        },
        "165": {
          "source": "            var field = pageFields[fieldIndex];",
          "coverage": 0
        },
        "166": {
          "source": "",
          "coverage": ""
        },
        "167": {
          "source": "            if (!field.adminOnly) {",
          "coverage": 0
        },
        "168": {
          "source": "                newFieldRef[field._id] = {",
          "coverage": 0
        },
        "169": {
          "source": "                    page: pageIndex,",
          "coverage": ""
        },
        "170": {
          "source": "                    field: fieldInPageIndex",
          "coverage": ""
        },
        "171": {
          "source": "                };",
          "coverage": ""
        },
        "172": {
          "source": "                fieldInPageIndex++;",
          "coverage": 0
        },
        "173": {
          "source": "                filteredFields.push(field);",
          "coverage": 0
        },
        "174": {
          "source": "            }",
          "coverage": ""
        },
        "175": {
          "source": "        }",
          "coverage": ""
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "        pages[pageIndex].fields = filteredFields;",
          "coverage": 0
        },
        "178": {
          "source": "    }",
          "coverage": ""
        },
        "179": {
          "source": "",
          "coverage": ""
        },
        "180": {
          "source": "    this.set(\"pages\", pages);",
          "coverage": 0
        },
        "181": {
          "source": "    this.set(\"fieldRef\", newFieldRef);",
          "coverage": 0
        },
        "182": {
          "source": "};",
          "coverage": ""
        },
        "183": {
          "source": "",
          "coverage": ""
        },
        "184": {
          "source": "Form.prototype.initialiseFields = function() {",
          "coverage": 1
        },
        "185": {
          "source": "    log.d(\"Form: initialiseFields\");",
          "coverage": 0
        },
        "186": {
          "source": "    var fieldsRef = this.getFieldRef();",
          "coverage": 0
        },
        "187": {
          "source": "    this.fields = {};",
          "coverage": 0
        },
        "188": {
          "source": "    for (var fieldId in fieldsRef) {",
          "coverage": 0
        },
        "189": {
          "source": "        var fieldRef = fieldsRef[fieldId];",
          "coverage": 0
        },
        "190": {
          "source": "        var pageIndex = fieldRef.page;",
          "coverage": 0
        },
        "191": {
          "source": "        var fieldIndex = fieldRef.field;",
          "coverage": 0
        },
        "192": {
          "source": "        if (pageIndex === undefined || fieldIndex === undefined) {",
          "coverage": 0
        },
        "193": {
          "source": "            throw 'Corruptted field reference';",
          "coverage": 0
        },
        "194": {
          "source": "        }",
          "coverage": ""
        },
        "195": {
          "source": "        var fieldDef = this.getFieldDefByIndex(pageIndex, fieldIndex);",
          "coverage": 0
        },
        "196": {
          "source": "        if (fieldDef) {",
          "coverage": 0
        },
        "197": {
          "source": "            this.fields[fieldId] = new Field(fieldDef, this);",
          "coverage": 0
        },
        "198": {
          "source": "        } else {",
          "coverage": ""
        },
        "199": {
          "source": "            throw 'Field def is not found.';",
          "coverage": 0
        },
        "200": {
          "source": "        }",
          "coverage": ""
        },
        "201": {
          "source": "    }",
          "coverage": ""
        },
        "202": {
          "source": "};",
          "coverage": ""
        },
        "203": {
          "source": "Form.prototype.initialisePage = function() {",
          "coverage": 1
        },
        "204": {
          "source": "    log.d(\"Form: initialisePage\");",
          "coverage": 0
        },
        "205": {
          "source": "    var pages = this.getPagesDef();",
          "coverage": 0
        },
        "206": {
          "source": "    this.pages = [];",
          "coverage": 0
        },
        "207": {
          "source": "    for (var i = 0; i &lt; pages.length; i++) {",
          "coverage": 0
        },
        "208": {
          "source": "        var pageDef = pages[i];",
          "coverage": 0
        },
        "209": {
          "source": "        var pageModel = new Page(pageDef, this);",
          "coverage": 0
        },
        "210": {
          "source": "        this.pages.push(pageModel);",
          "coverage": 0
        },
        "211": {
          "source": "    }",
          "coverage": ""
        },
        "212": {
          "source": "};",
          "coverage": ""
        },
        "213": {
          "source": "Form.prototype.getPageNumberByFieldId = function(fieldId) {",
          "coverage": 1
        },
        "214": {
          "source": "    if (fieldId) {",
          "coverage": 0
        },
        "215": {
          "source": "        return this.getFieldRef()[fieldId].page;",
          "coverage": 0
        },
        "216": {
          "source": "    } else {",
          "coverage": ""
        },
        "217": {
          "source": "        return null;",
          "coverage": 0
        },
        "218": {
          "source": "    }",
          "coverage": ""
        },
        "219": {
          "source": "};",
          "coverage": ""
        },
        "220": {
          "source": "Form.prototype.getPageModelList = function() {",
          "coverage": 1
        },
        "221": {
          "source": "    return this.pages;",
          "coverage": 0
        },
        "222": {
          "source": "};",
          "coverage": ""
        },
        "223": {
          "source": "Form.prototype.getName = function() {",
          "coverage": 1
        },
        "224": {
          "source": "    return this.get('name', '');",
          "coverage": 0
        },
        "225": {
          "source": "};",
          "coverage": ""
        },
        "226": {
          "source": "Form.prototype.getDescription = function() {",
          "coverage": 1
        },
        "227": {
          "source": "    return this.get('description', '');",
          "coverage": 0
        },
        "228": {
          "source": "};",
          "coverage": ""
        },
        "229": {
          "source": "Form.prototype.getPageRules = function() {",
          "coverage": 1
        },
        "230": {
          "source": "    return this.get('pageRules', []);",
          "coverage": 0
        },
        "231": {
          "source": "};",
          "coverage": ""
        },
        "232": {
          "source": "Form.prototype.getFieldRules = function() {",
          "coverage": 1
        },
        "233": {
          "source": "    return this.get('fieldRules', []);",
          "coverage": 0
        },
        "234": {
          "source": "};",
          "coverage": ""
        },
        "235": {
          "source": "Form.prototype.getFieldRef = function() {",
          "coverage": 1
        },
        "236": {
          "source": "    return this.get('fieldRef', {});",
          "coverage": 0
        },
        "237": {
          "source": "};",
          "coverage": ""
        },
        "238": {
          "source": "Form.prototype.getPagesDef = function() {",
          "coverage": 1
        },
        "239": {
          "source": "    return this.get('pages', []);",
          "coverage": 0
        },
        "240": {
          "source": "};",
          "coverage": ""
        },
        "241": {
          "source": "Form.prototype.getPageRef = function() {",
          "coverage": 1
        },
        "242": {
          "source": "    return this.get('pageRef', {});",
          "coverage": 0
        },
        "243": {
          "source": "};",
          "coverage": ""
        },
        "244": {
          "source": "Form.prototype.getFieldModelById = function(fieldId) {",
          "coverage": 1
        },
        "245": {
          "source": "    return this.fields[fieldId];",
          "coverage": 0
        },
        "246": {
          "source": "};",
          "coverage": ""
        },
        "247": {
          "source": "/**",
          "coverage": ""
        },
        "248": {
          "source": " * Finding a field model by the Field Code specified in the studio if it exists",
          "coverage": ""
        },
        "249": {
          "source": " * Otherwise return null;",
          "coverage": ""
        },
        "250": {
          "source": " * @param code - The code of the field that is being searched for",
          "coverage": ""
        },
        "251": {
          "source": " */",
          "coverage": ""
        },
        "252": {
          "source": "Form.prototype.getFieldModelByCode = function(code) {",
          "coverage": 1
        },
        "253": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "254": {
          "source": "    if (!code || typeof(code) !== \"string\") {",
          "coverage": 0
        },
        "255": {
          "source": "        return null;",
          "coverage": 0
        },
        "256": {
          "source": "    }",
          "coverage": ""
        },
        "257": {
          "source": "",
          "coverage": ""
        },
        "258": {
          "source": "    for (var fieldId in self.fields) {",
          "coverage": 0
        },
        "259": {
          "source": "        var field = self.fields[fieldId];",
          "coverage": 0
        },
        "260": {
          "source": "        if (field.getCode() !== null &amp;&amp; field.getCode() === code) {",
          "coverage": 0
        },
        "261": {
          "source": "            return field;",
          "coverage": 0
        },
        "262": {
          "source": "        }",
          "coverage": ""
        },
        "263": {
          "source": "    }",
          "coverage": ""
        },
        "264": {
          "source": "",
          "coverage": ""
        },
        "265": {
          "source": "    return null;",
          "coverage": 0
        },
        "266": {
          "source": "};",
          "coverage": ""
        },
        "267": {
          "source": "Form.prototype.getFieldDefByIndex = function(pageIndex, fieldIndex) {",
          "coverage": 1
        },
        "268": {
          "source": "    log.d(\"Form: getFieldDefByIndex: \", pageIndex, fieldIndex);",
          "coverage": 0
        },
        "269": {
          "source": "    var pages = this.getPagesDef();",
          "coverage": 0
        },
        "270": {
          "source": "    var page = pages[pageIndex];",
          "coverage": 0
        },
        "271": {
          "source": "    if (page) {",
          "coverage": 0
        },
        "272": {
          "source": "        var fields = page.fields ? page.fields : [];",
          "coverage": 0
        },
        "273": {
          "source": "        var field = fields[fieldIndex];",
          "coverage": 0
        },
        "274": {
          "source": "        if (field) {",
          "coverage": 0
        },
        "275": {
          "source": "            return field;",
          "coverage": 0
        },
        "276": {
          "source": "        }",
          "coverage": ""
        },
        "277": {
          "source": "    }",
          "coverage": ""
        },
        "278": {
          "source": "    log.e(\"Form: getFieldDefByIndex: No field found for page and field index: \", pageIndex, fieldIndex);",
          "coverage": 0
        },
        "279": {
          "source": "    return null;",
          "coverage": 0
        },
        "280": {
          "source": "};",
          "coverage": ""
        },
        "281": {
          "source": "Form.prototype.getPageModelById = function(pageId) {",
          "coverage": 1
        },
        "282": {
          "source": "    log.d(\"Form: getPageModelById: \", pageId);",
          "coverage": 0
        },
        "283": {
          "source": "    var index = this.getPageRef()[pageId];",
          "coverage": 0
        },
        "284": {
          "source": "    if (typeof index === 'undefined') {",
          "coverage": 0
        },
        "285": {
          "source": "        log.e('page id is not found in pageRef: ' + pageId);",
          "coverage": 0
        },
        "286": {
          "source": "    } else {",
          "coverage": ""
        },
        "287": {
          "source": "        return this.pages[index];",
          "coverage": 0
        },
        "288": {
          "source": "    }",
          "coverage": ""
        },
        "289": {
          "source": "};",
          "coverage": ""
        },
        "290": {
          "source": "Form.prototype.newSubmission = function() {",
          "coverage": 1
        },
        "291": {
          "source": "    log.d(\"Form: newSubmission\");",
          "coverage": 0
        },
        "292": {
          "source": "    return submission.newInstance(this);",
          "coverage": 0
        },
        "293": {
          "source": "};",
          "coverage": ""
        },
        "294": {
          "source": "Form.prototype.getFormId = function() {",
          "coverage": 1
        },
        "295": {
          "source": "    return this.get('_id');",
          "coverage": 0
        },
        "296": {
          "source": "};",
          "coverage": ""
        },
        "297": {
          "source": "Form.prototype.removeFromCache = function() {",
          "coverage": 1
        },
        "298": {
          "source": "    log.d(\"Form: removeFromCache\");",
          "coverage": 0
        },
        "299": {
          "source": "    if (_forms[this.getFormId()]) {",
          "coverage": 0
        },
        "300": {
          "source": "        delete _forms[this.getFormId()];",
          "coverage": 0
        },
        "301": {
          "source": "    }",
          "coverage": ""
        },
        "302": {
          "source": "};",
          "coverage": ""
        },
        "303": {
          "source": "Form.prototype.getFileFieldsId = function() {",
          "coverage": 1
        },
        "304": {
          "source": "    log.d(\"Form: getFileFieldsId\");",
          "coverage": 0
        },
        "305": {
          "source": "    var fieldsId = [];",
          "coverage": 0
        },
        "306": {
          "source": "    for (var fieldId in this.fields) {",
          "coverage": 0
        },
        "307": {
          "source": "        var field = this.fields[fieldId];",
          "coverage": 0
        },
        "308": {
          "source": "        if (field.getType() === 'file' || field.getType() === 'photo' || field.getType() === 'signature') {",
          "coverage": 0
        },
        "309": {
          "source": "            fieldsId.push(fieldId);",
          "coverage": 0
        },
        "310": {
          "source": "        }",
          "coverage": ""
        },
        "311": {
          "source": "    }",
          "coverage": ""
        },
        "312": {
          "source": "    return fieldsId;",
          "coverage": 0
        },
        "313": {
          "source": "};",
          "coverage": ""
        },
        "314": {
          "source": "",
          "coverage": ""
        },
        "315": {
          "source": "Form.prototype.getRuleEngine = function() {",
          "coverage": 1
        },
        "316": {
          "source": "    log.d(\"Form: getRuleEngine\");",
          "coverage": 0
        },
        "317": {
          "source": "    if (this.rulesEngine) {",
          "coverage": 0
        },
        "318": {
          "source": "        return this.rulesEngine;",
          "coverage": 0
        },
        "319": {
          "source": "    } else {",
          "coverage": ""
        },
        "320": {
          "source": "        var formDefinition = this.getProps();",
          "coverage": 0
        },
        "321": {
          "source": "        this.rulesEngine = new RulesEngine(formDefinition);",
          "coverage": 0
        },
        "322": {
          "source": "        return this.rulesEngine;",
          "coverage": 0
        },
        "323": {
          "source": "    }",
          "coverage": ""
        },
        "324": {
          "source": "};",
          "coverage": ""
        },
        "325": {
          "source": "",
          "coverage": ""
        },
        "326": {
          "source": "",
          "coverage": ""
        },
        "327": {
          "source": "module.exports = Form;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/formSubmission.js",
      "coverage": 64.28571428571429,
      "hits": 9,
      "misses": 5,
      "sloc": 14,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "function FormSubmission(submissionJSON) {",
          "coverage": 1
        },
        "7": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "8": {
          "source": "        '_type': 'formSubmission',",
          "coverage": ""
        },
        "9": {
          "source": "        'data': submissionJSON",
          "coverage": ""
        },
        "10": {
          "source": "    });",
          "coverage": ""
        },
        "11": {
          "source": "}",
          "coverage": ""
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "utils.extend(FormSubmission, Model);",
          "coverage": 1
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "FormSubmission.prototype.getProps = function() {",
          "coverage": 1
        },
        "16": {
          "source": "    return this.get('data');",
          "coverage": 0
        },
        "17": {
          "source": "};",
          "coverage": ""
        },
        "18": {
          "source": "FormSubmission.prototype.getFormId = function() {",
          "coverage": 1
        },
        "19": {
          "source": "    if (!this.get('data')) {",
          "coverage": 0
        },
        "20": {
          "source": "        log.e(\"No form data for form submission\");",
          "coverage": 0
        },
        "21": {
          "source": "    }",
          "coverage": ""
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "    return this.get('data').formId;",
          "coverage": 0
        },
        "24": {
          "source": "};",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "module.exports = FormSubmission;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/formSubmissionComplete.js",
      "coverage": 87.5,
      "hits": 7,
      "misses": 1,
      "sloc": 8,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "function FormSubmissionComplete(submissionTask) {",
          "coverage": 1
        },
        "7": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "8": {
          "source": "        '_type': 'completeSubmission',",
          "coverage": ""
        },
        "9": {
          "source": "        'submissionId': submissionTask.get('submissionId'),",
          "coverage": ""
        },
        "10": {
          "source": "        'localSubmissionId': submissionTask.get('localSubmissionId')",
          "coverage": ""
        },
        "11": {
          "source": "    });",
          "coverage": ""
        },
        "12": {
          "source": "}",
          "coverage": ""
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": "utils.extend(FormSubmissionComplete, Model);",
          "coverage": 1
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "module.exports = FormSubmissionComplete;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/formSubmissionDownload.js",
      "coverage": 80,
      "hits": 8,
      "misses": 2,
      "sloc": 10,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "function FormSubmissionDownload(uploadTask) {",
          "coverage": 1
        },
        "7": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "8": {
          "source": "        '_type': 'formSubmissionDownload',",
          "coverage": ""
        },
        "9": {
          "source": "        'data': uploadTask",
          "coverage": ""
        },
        "10": {
          "source": "    });",
          "coverage": ""
        },
        "11": {
          "source": "}",
          "coverage": ""
        },
        "12": {
          "source": "FormSubmissionDownload.prototype.getSubmissionId = function() {",
          "coverage": 1
        },
        "13": {
          "source": "    return this.get('data').get(\"submissionId\", \"not-set\");",
          "coverage": 0
        },
        "14": {
          "source": "};",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "utils.extend(FormSubmissionDownload, Model);",
          "coverage": 1
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "module.exports = FormSubmissionDownload;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/formSubmissionStatus.js",
      "coverage": 87.5,
      "hits": 7,
      "misses": 1,
      "sloc": 8,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "4": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "function FormSubmissionStatus(submissionTask) {",
          "coverage": 1
        },
        "7": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "8": {
          "source": "        '_type': 'submissionStatus',",
          "coverage": ""
        },
        "9": {
          "source": "        'submissionId': submissionTask.get('submissionId'),",
          "coverage": ""
        },
        "10": {
          "source": "        'localSubmissionId': submissionTask.get('localSubmissionId')",
          "coverage": ""
        },
        "11": {
          "source": "    });",
          "coverage": ""
        },
        "12": {
          "source": "}",
          "coverage": ""
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": "utils.extend(FormSubmissionStatus, Model);",
          "coverage": 1
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "module.exports = FormSubmissionStatus;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/forms.js",
      "coverage": 42.42424242424242,
      "hits": 14,
      "misses": 19,
      "sloc": 33,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "3": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var forms;",
          "coverage": 1
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "function Forms() {",
          "coverage": 1
        },
        "8": {
          "source": "    Model.call(this, {",
          "coverage": 1
        },
        "9": {
          "source": "        '_type': 'forms',",
          "coverage": ""
        },
        "10": {
          "source": "        '_ludid': 'forms_list',",
          "coverage": ""
        },
        "11": {
          "source": "        'loaded': false",
          "coverage": ""
        },
        "12": {
          "source": "    });",
          "coverage": ""
        },
        "13": {
          "source": "}",
          "coverage": ""
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "utils.extend(Forms, Model);",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "Forms.prototype.isFormUpdated = function(formModel) {",
          "coverage": 1
        },
        "18": {
          "source": "    var id = formModel.get('_id');",
          "coverage": 0
        },
        "19": {
          "source": "    var formLastUpdate = formModel.getLastUpdate();",
          "coverage": 0
        },
        "20": {
          "source": "    var formMeta = this.getFormMetaById(id);",
          "coverage": 0
        },
        "21": {
          "source": "    if (formMeta) {",
          "coverage": 0
        },
        "22": {
          "source": "        return formLastUpdate !== formMeta.lastUpdatedTimestamp;",
          "coverage": 0
        },
        "23": {
          "source": "    } else {",
          "coverage": ""
        },
        "24": {
          "source": "        //could have been deleted. leave it for now",
          "coverage": ""
        },
        "25": {
          "source": "        return false;",
          "coverage": 0
        },
        "26": {
          "source": "    }",
          "coverage": ""
        },
        "27": {
          "source": "};",
          "coverage": ""
        },
        "28": {
          "source": "Forms.prototype.setLocalId = function() {",
          "coverage": 1
        },
        "29": {
          "source": "    log.e(\"Forms setLocalId. Not Permitted for Forms.prototype.\");",
          "coverage": 0
        },
        "30": {
          "source": "};",
          "coverage": ""
        },
        "31": {
          "source": "Forms.prototype.getFormMetaById = function(formId) {",
          "coverage": 1
        },
        "32": {
          "source": "    log.d(\"Forms getFormMetaById \", formId);",
          "coverage": 0
        },
        "33": {
          "source": "    var forms = this.getFormsList();",
          "coverage": 0
        },
        "34": {
          "source": "    for (var i = 0; i &lt; forms.length; i++) {",
          "coverage": 0
        },
        "35": {
          "source": "        var form = forms[i];",
          "coverage": 0
        },
        "36": {
          "source": "        if (form._id === formId) {",
          "coverage": 0
        },
        "37": {
          "source": "            return form;",
          "coverage": 0
        },
        "38": {
          "source": "        }",
          "coverage": ""
        },
        "39": {
          "source": "    }",
          "coverage": ""
        },
        "40": {
          "source": "    log.e(\"Forms getFormMetaById: No form found for id: \", formId);",
          "coverage": 0
        },
        "41": {
          "source": "    return null;",
          "coverage": 0
        },
        "42": {
          "source": "};",
          "coverage": ""
        },
        "43": {
          "source": "Forms.prototype.size = function() {",
          "coverage": 1
        },
        "44": {
          "source": "    return this.get('forms').length;",
          "coverage": 0
        },
        "45": {
          "source": "};",
          "coverage": ""
        },
        "46": {
          "source": "Forms.prototype.getFormsList = function() {",
          "coverage": 1
        },
        "47": {
          "source": "    return this.get('forms', []);",
          "coverage": 0
        },
        "48": {
          "source": "};",
          "coverage": ""
        },
        "49": {
          "source": "Forms.prototype.getFormIdByIndex = function(index) {",
          "coverage": 1
        },
        "50": {
          "source": "    log.d(\"Forms getFormIdByIndex: \", index);",
          "coverage": 0
        },
        "51": {
          "source": "    return this.getFormsList()[index]._id;",
          "coverage": 0
        },
        "52": {
          "source": "};",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "",
          "coverage": ""
        },
        "55": {
          "source": "module.exports = new Forms();",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/init.js",
      "coverage": 31.03448275862069,
      "hits": 9,
      "misses": 20,
      "sloc": 29,
      "source": {
        "1": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "2": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "3": {
          "source": "var submissions = require(\"./submissions\");",
          "coverage": 1
        },
        "4": {
          "source": "var uploadManager = require(\"./uploadManager\");",
          "coverage": 1
        },
        "5": {
          "source": "var theme = require(\"./theme\");",
          "coverage": 1
        },
        "6": {
          "source": "var forms = require(\"./forms\");",
          "coverage": 1
        },
        "7": {
          "source": "var async = require('../../../libs/async');",
          "coverage": 1
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "var init = function(params, cb) {",
          "coverage": 1
        },
        "10": {
          "source": "    var def = {",
          "coverage": 0
        },
        "11": {
          "source": "        'updateForms': true",
          "coverage": ""
        },
        "12": {
          "source": "    };",
          "coverage": ""
        },
        "13": {
          "source": "    if (typeof cb === 'undefined') {",
          "coverage": 0
        },
        "14": {
          "source": "        cb = params;",
          "coverage": 0
        },
        "15": {
          "source": "    } else {",
          "coverage": ""
        },
        "16": {
          "source": "        for (var key in params) {",
          "coverage": 0
        },
        "17": {
          "source": "            def[key] = params[key];",
          "coverage": 0
        },
        "18": {
          "source": "        }",
          "coverage": ""
        },
        "19": {
          "source": "    }",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "    //init config module",
          "coverage": ""
        },
        "22": {
          "source": "    var config = def.config || {};",
          "coverage": 0
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "    async.series([",
          "coverage": 0
        },
        "25": {
          "source": "        function(cb) {",
          "coverage": ""
        },
        "26": {
          "source": "            log.loadLocal(cb);",
          "coverage": 0
        },
        "27": {
          "source": "        },",
          "coverage": ""
        },
        "28": {
          "source": "        function(cb) {",
          "coverage": ""
        },
        "29": {
          "source": "            log.l(\"Loading Config\");",
          "coverage": 0
        },
        "30": {
          "source": "            config.init(config, cb);",
          "coverage": 0
        },
        "31": {
          "source": "        },",
          "coverage": ""
        },
        "32": {
          "source": "        function(cb) {",
          "coverage": ""
        },
        "33": {
          "source": "            log.l(\"Loading Submissions\");",
          "coverage": 0
        },
        "34": {
          "source": "            submissions.loadLocal(cb);",
          "coverage": 0
        },
        "35": {
          "source": "        },",
          "coverage": ""
        },
        "36": {
          "source": "        function(cb) {",
          "coverage": ""
        },
        "37": {
          "source": "            log.l(\"Loading Upload Tasks\");",
          "coverage": 0
        },
        "38": {
          "source": "            uploadManager.loadLocal(cb);",
          "coverage": 0
        },
        "39": {
          "source": "        }",
          "coverage": ""
        },
        "40": {
          "source": "    ], function(err) {",
          "coverage": ""
        },
        "41": {
          "source": "        if(err){",
          "coverage": 0
        },
        "42": {
          "source": "            log.e(\"Error Initialising Forms: \" + err);",
          "coverage": 0
        },
        "43": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "44": {
          "source": "        }",
          "coverage": ""
        },
        "45": {
          "source": "",
          "coverage": ""
        },
        "46": {
          "source": "        log.l(\"Initialisation Complete. Starting Upload Manager\");",
          "coverage": 0
        },
        "47": {
          "source": "        //Starting any uploads that are queued",
          "coverage": ""
        },
        "48": {
          "source": "        uploadManager.start();",
          "coverage": 0
        },
        "49": {
          "source": "        //init forms module",
          "coverage": ""
        },
        "50": {
          "source": "",
          "coverage": ""
        },
        "51": {
          "source": "        return cb();",
          "coverage": 0
        },
        "52": {
          "source": "    });",
          "coverage": ""
        },
        "53": {
          "source": "}",
          "coverage": ""
        },
        "54": {
          "source": "",
          "coverage": ""
        },
        "55": {
          "source": "module.exports = init;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/localStorage.js",
      "coverage": 18.51851851851852,
      "hits": 25,
      "misses": 110,
      "sloc": 135,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Local storage stores a model's json definition persistently.",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "6": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "7": {
          "source": "var fileSystem = require(\"./fileSystem\");",
          "coverage": 1
        },
        "8": {
          "source": "var Store = require(\"./store\");",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "var _fileSystemAvailable = function() {};",
          "coverage": 1
        },
        "11": {
          "source": "//placeholder",
          "coverage": ""
        },
        "12": {
          "source": "function LocalStorage() {",
          "coverage": 1
        },
        "13": {
          "source": "    Store.call(this, 'LocalStorage');",
          "coverage": 0
        },
        "14": {
          "source": "};",
          "coverage": 1
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "utils.extend(LocalStorage, Store);",
          "coverage": 1
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "//store a model to local storage",
          "coverage": ""
        },
        "19": {
          "source": "LocalStorage.prototype.create = function(model, cb) {",
          "coverage": 1
        },
        "20": {
          "source": "    var key = utils.localId(model);",
          "coverage": 0
        },
        "21": {
          "source": "    model.setLocalId(key);",
          "coverage": 0
        },
        "22": {
          "source": "    this.update(model, cb);",
          "coverage": 0
        },
        "23": {
          "source": "};",
          "coverage": ""
        },
        "24": {
          "source": "//read a model from local storage",
          "coverage": ""
        },
        "25": {
          "source": "LocalStorage.prototype.read = function(model, cb) {",
          "coverage": 1
        },
        "26": {
          "source": "    if (typeof(model) === \"object\") {",
          "coverage": 0
        },
        "27": {
          "source": "        if (model.get(\"_type\") === \"offlineTest\") {",
          "coverage": 0
        },
        "28": {
          "source": "            return cb(null, {});",
          "coverage": 0
        },
        "29": {
          "source": "        }",
          "coverage": ""
        },
        "30": {
          "source": "    }",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "    var key = _getKey(model);",
          "coverage": 0
        },
        "33": {
          "source": "    if (key != null) {",
          "coverage": 0
        },
        "34": {
          "source": "        _fhData({",
          "coverage": 0
        },
        "35": {
          "source": "            'act': 'load',",
          "coverage": ""
        },
        "36": {
          "source": "            'key': key.toString()",
          "coverage": ""
        },
        "37": {
          "source": "        }, cb, cb);",
          "coverage": ""
        },
        "38": {
          "source": "    } else {",
          "coverage": ""
        },
        "39": {
          "source": "        //model does not exist in local storage if key is null.",
          "coverage": ""
        },
        "40": {
          "source": "        cb(null, null);",
          "coverage": 0
        },
        "41": {
          "source": "    }",
          "coverage": ""
        },
        "42": {
          "source": "};",
          "coverage": ""
        },
        "43": {
          "source": "//update a model",
          "coverage": ""
        },
        "44": {
          "source": "LocalStorage.prototype.update = function(model, cb) {",
          "coverage": 1
        },
        "45": {
          "source": "    var key = _getKey(model);",
          "coverage": 0
        },
        "46": {
          "source": "    var data = model.getProps();",
          "coverage": 0
        },
        "47": {
          "source": "    var dataStr = JSON.stringify(data);",
          "coverage": 0
        },
        "48": {
          "source": "    _fhData({",
          "coverage": 0
        },
        "49": {
          "source": "        'act': 'save',",
          "coverage": ""
        },
        "50": {
          "source": "        'key': key.toString(),",
          "coverage": ""
        },
        "51": {
          "source": "        'val': dataStr",
          "coverage": ""
        },
        "52": {
          "source": "    }, cb, cb);",
          "coverage": ""
        },
        "53": {
          "source": "};",
          "coverage": ""
        },
        "54": {
          "source": "//delete a model",
          "coverage": ""
        },
        "55": {
          "source": "LocalStorage.prototype.removeEntry = function(model, cb) {",
          "coverage": 1
        },
        "56": {
          "source": "    var key = _getKey(model);",
          "coverage": 0
        },
        "57": {
          "source": "    _fhData({",
          "coverage": 0
        },
        "58": {
          "source": "        'act': 'remove',",
          "coverage": ""
        },
        "59": {
          "source": "        'key': key.toString()",
          "coverage": ""
        },
        "60": {
          "source": "    }, cb, cb);",
          "coverage": ""
        },
        "61": {
          "source": "};",
          "coverage": ""
        },
        "62": {
          "source": "LocalStorage.prototype.upsert = function(model, cb) {",
          "coverage": 1
        },
        "63": {
          "source": "    var key = _getKey(model);",
          "coverage": 0
        },
        "64": {
          "source": "    if (key === null) {",
          "coverage": 0
        },
        "65": {
          "source": "        this.create(model, cb);",
          "coverage": 0
        },
        "66": {
          "source": "    } else {",
          "coverage": ""
        },
        "67": {
          "source": "        this.update(model, cb);",
          "coverage": 0
        },
        "68": {
          "source": "    }",
          "coverage": ""
        },
        "69": {
          "source": "};",
          "coverage": ""
        },
        "70": {
          "source": "LocalStorage.prototype.switchFileSystem = function(isOn) {",
          "coverage": 1
        },
        "71": {
          "source": "    _fileSystemAvailable = function() {",
          "coverage": 0
        },
        "72": {
          "source": "        return isOn;",
          "coverage": 0
        },
        "73": {
          "source": "    };",
          "coverage": ""
        },
        "74": {
          "source": "};",
          "coverage": ""
        },
        "75": {
          "source": "LocalStorage.prototype.defaultStorage = function() {",
          "coverage": 1
        },
        "76": {
          "source": "    _fileSystemAvailable = function() {",
          "coverage": 0
        },
        "77": {
          "source": "        return fileSystem.isFileSystemAvailable();",
          "coverage": 0
        },
        "78": {
          "source": "    };",
          "coverage": ""
        },
        "79": {
          "source": "};",
          "coverage": ""
        },
        "80": {
          "source": "LocalStorage.prototype.saveFile = function(fileName, fileToSave, cb) {",
          "coverage": 1
        },
        "81": {
          "source": "    if (!_fileSystemAvailable()) {",
          "coverage": 0
        },
        "82": {
          "source": "        return cb(\"File system not available\");",
          "coverage": 0
        },
        "83": {
          "source": "    }",
          "coverage": ""
        },
        "84": {
          "source": "",
          "coverage": ""
        },
        "85": {
          "source": "    _fhData({",
          "coverage": 0
        },
        "86": {
          "source": "        'act': 'save',",
          "coverage": ""
        },
        "87": {
          "source": "        'key': fileName,",
          "coverage": ""
        },
        "88": {
          "source": "        'val': fileToSave",
          "coverage": ""
        },
        "89": {
          "source": "    }, cb, cb);",
          "coverage": ""
        },
        "90": {
          "source": "};",
          "coverage": ""
        },
        "91": {
          "source": "LocalStorage.prototype.updateTextFile = function(key, dataStr, cb) {",
          "coverage": 1
        },
        "92": {
          "source": "    _fhData({",
          "coverage": 0
        },
        "93": {
          "source": "        'act': 'save',",
          "coverage": ""
        },
        "94": {
          "source": "        'key': key,",
          "coverage": ""
        },
        "95": {
          "source": "        'val': dataStr",
          "coverage": ""
        },
        "96": {
          "source": "    }, cb, cb);",
          "coverage": ""
        },
        "97": {
          "source": "};",
          "coverage": ""
        },
        "98": {
          "source": "LocalStorage.prototype.readFile = function(fileName, cb) {",
          "coverage": 1
        },
        "99": {
          "source": "    _fhData({",
          "coverage": 0
        },
        "100": {
          "source": "        'act': 'loadFile',",
          "coverage": ""
        },
        "101": {
          "source": "        'key': fileName",
          "coverage": ""
        },
        "102": {
          "source": "    }, cb, cb);",
          "coverage": ""
        },
        "103": {
          "source": "};",
          "coverage": ""
        },
        "104": {
          "source": "LocalStorage.prototype.readFileText = function(fileName, cb) {",
          "coverage": 1
        },
        "105": {
          "source": "    _fhData({",
          "coverage": 0
        },
        "106": {
          "source": "        'act': 'load',",
          "coverage": ""
        },
        "107": {
          "source": "        'key': fileName",
          "coverage": ""
        },
        "108": {
          "source": "    }, cb, cb);",
          "coverage": ""
        },
        "109": {
          "source": "};",
          "coverage": ""
        },
        "110": {
          "source": "_fileSystemAvailable = function() {",
          "coverage": 1
        },
        "111": {
          "source": "    return fileSystem.isFileSystemAvailable();",
          "coverage": 0
        },
        "112": {
          "source": "};",
          "coverage": ""
        },
        "113": {
          "source": "",
          "coverage": ""
        },
        "114": {
          "source": "function _getKey(key) {",
          "coverage": 1
        },
        "115": {
          "source": "    return typeof(key.getLocalId) === \"function\" ? key.getLocalId() : key;",
          "coverage": 0
        },
        "116": {
          "source": "}",
          "coverage": ""
        },
        "117": {
          "source": "//use different local storage model according to environment",
          "coverage": ""
        },
        "118": {
          "source": "function _fhData() {",
          "coverage": 1
        },
        "119": {
          "source": "    if (_fileSystemAvailable()) {",
          "coverage": 0
        },
        "120": {
          "source": "        _fhFileData.apply({}, arguments);",
          "coverage": 0
        },
        "121": {
          "source": "    } else {",
          "coverage": ""
        },
        "122": {
          "source": "        _fhLSData.apply({}, arguments);",
          "coverage": 0
        },
        "123": {
          "source": "    }",
          "coverage": ""
        },
        "124": {
          "source": "}",
          "coverage": ""
        },
        "125": {
          "source": "//use $fh data",
          "coverage": ""
        },
        "126": {
          "source": "function _fhLSData(options, success, failure) {",
          "coverage": 1
        },
        "127": {
          "source": "    //allow for no $fh api in studio",
          "coverage": ""
        },
        "128": {
          "source": "    if (!$fh || !$fh.data) {",
          "coverage": 0
        },
        "129": {
          "source": "        return success();",
          "coverage": 0
        },
        "130": {
          "source": "    }",
          "coverage": ""
        },
        "131": {
          "source": "",
          "coverage": ""
        },
        "132": {
          "source": "    $fh.data(options, function(res) {",
          "coverage": 0
        },
        "133": {
          "source": "        if (typeof res === 'undefined') {",
          "coverage": 0
        },
        "134": {
          "source": "            res = {",
          "coverage": 0
        },
        "135": {
          "source": "                key: options.key,",
          "coverage": ""
        },
        "136": {
          "source": "                val: options.val",
          "coverage": ""
        },
        "137": {
          "source": "            };",
          "coverage": ""
        },
        "138": {
          "source": "        }",
          "coverage": ""
        },
        "139": {
          "source": "        //unify the interfaces",
          "coverage": ""
        },
        "140": {
          "source": "        if (options.act.toLowerCase() === 'remove') {",
          "coverage": 0
        },
        "141": {
          "source": "            return success(null, null);",
          "coverage": 0
        },
        "142": {
          "source": "        }",
          "coverage": ""
        },
        "143": {
          "source": "        success(null, res.val ? res.val : null);",
          "coverage": 0
        },
        "144": {
          "source": "    }, failure);",
          "coverage": ""
        },
        "145": {
          "source": "}",
          "coverage": ""
        },
        "146": {
          "source": "//use file system",
          "coverage": ""
        },
        "147": {
          "source": "function _fhFileData(options, success, failure) {",
          "coverage": 1
        },
        "148": {
          "source": "    function fail(msg) {",
          "coverage": 0
        },
        "149": {
          "source": "        if (typeof failure !== 'undefined') {",
          "coverage": 0
        },
        "150": {
          "source": "            return failure(msg, {});",
          "coverage": 0
        },
        "151": {
          "source": "        } else {}",
          "coverage": ""
        },
        "152": {
          "source": "    }",
          "coverage": ""
        },
        "153": {
          "source": "",
          "coverage": ""
        },
        "154": {
          "source": "    function filenameForKey(key, cb) {",
          "coverage": 0
        },
        "155": {
          "source": "        var appid = config.get(\"appId\", \"unknownAppId\");",
          "coverage": 0
        },
        "156": {
          "source": "        key = key + appid;",
          "coverage": 0
        },
        "157": {
          "source": "        utils.md5(key, function(err, hash) {",
          "coverage": 0
        },
        "158": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "159": {
          "source": "                hash = key;",
          "coverage": 0
        },
        "160": {
          "source": "            }",
          "coverage": ""
        },
        "161": {
          "source": "",
          "coverage": ""
        },
        "162": {
          "source": "            var filename = hash;",
          "coverage": 0
        },
        "163": {
          "source": "",
          "coverage": ""
        },
        "164": {
          "source": "            if (key.indexOf(\"filePlaceHolder\") === -1) {",
          "coverage": 0
        },
        "165": {
          "source": "                filename += \".txt\";",
          "coverage": 0
        },
        "166": {
          "source": "            }",
          "coverage": ""
        },
        "167": {
          "source": "",
          "coverage": ""
        },
        "168": {
          "source": "            if (typeof navigator.externalstorage !== 'undefined') {",
          "coverage": 0
        },
        "169": {
          "source": "                navigator.externalstorage.enable(function handleSuccess(res) {",
          "coverage": 0
        },
        "170": {
          "source": "                    var path = filename;",
          "coverage": 0
        },
        "171": {
          "source": "                    if (res.path) {",
          "coverage": 0
        },
        "172": {
          "source": "                        path = res.path;",
          "coverage": 0
        },
        "173": {
          "source": "                        if (!path.match(/\\/$/)) {",
          "coverage": 0
        },
        "174": {
          "source": "                            path += '/';",
          "coverage": 0
        },
        "175": {
          "source": "                        }",
          "coverage": ""
        },
        "176": {
          "source": "                        path += filename;",
          "coverage": 0
        },
        "177": {
          "source": "                    }",
          "coverage": ""
        },
        "178": {
          "source": "                    filename = path;",
          "coverage": 0
        },
        "179": {
          "source": "                    return cb(filename);",
          "coverage": 0
        },
        "180": {
          "source": "                }, function handleError(err) {",
          "coverage": ""
        },
        "181": {
          "source": "                    return cb(filename);",
          "coverage": 0
        },
        "182": {
          "source": "                });",
          "coverage": ""
        },
        "183": {
          "source": "            } else {",
          "coverage": ""
        },
        "184": {
          "source": "                return cb(filename);",
          "coverage": 0
        },
        "185": {
          "source": "            }",
          "coverage": ""
        },
        "186": {
          "source": "        });",
          "coverage": ""
        },
        "187": {
          "source": "    }",
          "coverage": ""
        },
        "188": {
          "source": "",
          "coverage": ""
        },
        "189": {
          "source": "    function save(key, value) {",
          "coverage": 0
        },
        "190": {
          "source": "        filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "191": {
          "source": "            fileSystem.save(hash, value, function(err, res) {",
          "coverage": 0
        },
        "192": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "193": {
          "source": "                    fail(err);",
          "coverage": 0
        },
        "194": {
          "source": "                } else {",
          "coverage": ""
        },
        "195": {
          "source": "                    success(null, value);",
          "coverage": 0
        },
        "196": {
          "source": "                }",
          "coverage": ""
        },
        "197": {
          "source": "            });",
          "coverage": ""
        },
        "198": {
          "source": "        });",
          "coverage": ""
        },
        "199": {
          "source": "    }",
          "coverage": ""
        },
        "200": {
          "source": "",
          "coverage": ""
        },
        "201": {
          "source": "    function remove(key) {",
          "coverage": 0
        },
        "202": {
          "source": "        filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "203": {
          "source": "            fileSystem.remove(hash, function(err) {",
          "coverage": 0
        },
        "204": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "205": {
          "source": "                    if (err.name === 'NotFoundError' || err.code === 1) {",
          "coverage": 0
        },
        "206": {
          "source": "                        //same respons of $fh.data if key not found.",
          "coverage": ""
        },
        "207": {
          "source": "                        success(null, null);",
          "coverage": 0
        },
        "208": {
          "source": "                    } else {",
          "coverage": ""
        },
        "209": {
          "source": "                        fail(err);",
          "coverage": 0
        },
        "210": {
          "source": "                    }",
          "coverage": ""
        },
        "211": {
          "source": "                } else {",
          "coverage": ""
        },
        "212": {
          "source": "                    success(null, null);",
          "coverage": 0
        },
        "213": {
          "source": "                }",
          "coverage": ""
        },
        "214": {
          "source": "            });",
          "coverage": ""
        },
        "215": {
          "source": "        });",
          "coverage": ""
        },
        "216": {
          "source": "    }",
          "coverage": ""
        },
        "217": {
          "source": "",
          "coverage": ""
        },
        "218": {
          "source": "    function load(key) {",
          "coverage": 0
        },
        "219": {
          "source": "        filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "220": {
          "source": "            fileSystem.readAsText(hash, function(err, text) {",
          "coverage": 0
        },
        "221": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "222": {
          "source": "                    if (err.name === 'NotFoundError' || err.code === 1) {",
          "coverage": 0
        },
        "223": {
          "source": "                        //same respons of $fh.data if key not found.",
          "coverage": ""
        },
        "224": {
          "source": "                        success(null, null);",
          "coverage": 0
        },
        "225": {
          "source": "                    } else {",
          "coverage": ""
        },
        "226": {
          "source": "                        fail(err);",
          "coverage": 0
        },
        "227": {
          "source": "                    }",
          "coverage": ""
        },
        "228": {
          "source": "                } else {",
          "coverage": ""
        },
        "229": {
          "source": "                    success(null, text);",
          "coverage": 0
        },
        "230": {
          "source": "                }",
          "coverage": ""
        },
        "231": {
          "source": "            });",
          "coverage": ""
        },
        "232": {
          "source": "        });",
          "coverage": ""
        },
        "233": {
          "source": "    }",
          "coverage": ""
        },
        "234": {
          "source": "",
          "coverage": ""
        },
        "235": {
          "source": "    function loadFile(key) {",
          "coverage": 0
        },
        "236": {
          "source": "        filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "237": {
          "source": "            fileSystem.readAsFile(hash, function(err, file) {",
          "coverage": 0
        },
        "238": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "239": {
          "source": "                    if (err.name === 'NotFoundError' || err.code === 1) {",
          "coverage": 0
        },
        "240": {
          "source": "                        //same respons of $fh.data if key not found.",
          "coverage": ""
        },
        "241": {
          "source": "                        success(null, null);",
          "coverage": 0
        },
        "242": {
          "source": "                    } else {",
          "coverage": ""
        },
        "243": {
          "source": "                        fail(err);",
          "coverage": 0
        },
        "244": {
          "source": "                    }",
          "coverage": ""
        },
        "245": {
          "source": "                } else {",
          "coverage": ""
        },
        "246": {
          "source": "                    success(null, file);",
          "coverage": 0
        },
        "247": {
          "source": "                }",
          "coverage": ""
        },
        "248": {
          "source": "            });",
          "coverage": ""
        },
        "249": {
          "source": "        });",
          "coverage": ""
        },
        "250": {
          "source": "    }",
          "coverage": ""
        },
        "251": {
          "source": "",
          "coverage": ""
        },
        "252": {
          "source": "    if (typeof options.act === 'undefined') {",
          "coverage": 0
        },
        "253": {
          "source": "        return load(options.key);",
          "coverage": 0
        },
        "254": {
          "source": "    } else if (options.act === 'save') {",
          "coverage": 0
        },
        "255": {
          "source": "        return save(options.key, options.val);",
          "coverage": 0
        },
        "256": {
          "source": "    } else if (options.act === 'remove') {",
          "coverage": 0
        },
        "257": {
          "source": "        return remove(options.key);",
          "coverage": 0
        },
        "258": {
          "source": "    } else if (options.act === 'load') {",
          "coverage": 0
        },
        "259": {
          "source": "        return load(options.key);",
          "coverage": 0
        },
        "260": {
          "source": "    } else if (options.act === 'loadFile') {",
          "coverage": 0
        },
        "261": {
          "source": "        return loadFile(options.key);",
          "coverage": 0
        },
        "262": {
          "source": "    } else {",
          "coverage": ""
        },
        "263": {
          "source": "        if (typeof failure !== 'undefined') {",
          "coverage": 0
        },
        "264": {
          "source": "            return failure('Action [' + options.act + '] is not defined', {});",
          "coverage": 0
        },
        "265": {
          "source": "        }",
          "coverage": ""
        },
        "266": {
          "source": "    }",
          "coverage": ""
        },
        "267": {
          "source": "}",
          "coverage": ""
        },
        "268": {
          "source": "",
          "coverage": ""
        },
        "269": {
          "source": "module.exports = LocalStorage;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/log.js",
      "coverage": 22.5,
      "hits": 18,
      "misses": 62,
      "sloc": 80,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Async log module",
          "coverage": ""
        },
        "3": {
          "source": " * @param  {[type]} module [description]",
          "coverage": ""
        },
        "4": {
          "source": " * @return {[type]}        [description]",
          "coverage": ""
        },
        "5": {
          "source": " */",
          "coverage": ""
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "8": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "function Log() {",
          "coverage": 1
        },
        "11": {
          "source": "    console.log(\"Init Log\");",
          "coverage": 1
        },
        "12": {
          "source": "    this.logs = [];",
          "coverage": 1
        },
        "13": {
          "source": "    this.isWriting = false;",
          "coverage": 1
        },
        "14": {
          "source": "    this.moreToWrite = false;",
          "coverage": 1
        },
        "15": {
          "source": "}",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "Log.prototype.info = function(logLevel, msgs) {",
          "coverage": 1
        },
        "19": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "20": {
          "source": "    if (config.get(\"logger\") === true) {",
          "coverage": 0
        },
        "21": {
          "source": "        var levelString = \"\";",
          "coverage": 0
        },
        "22": {
          "source": "        var curLevel = config.get(\"log_level\");",
          "coverage": 0
        },
        "23": {
          "source": "        var log_levels = config.get(\"log_levels\");",
          "coverage": 0
        },
        "24": {
          "source": "        ",
          "coverage": ""
        },
        "25": {
          "source": "        if (typeof logLevel === \"string\") {",
          "coverage": 0
        },
        "26": {
          "source": "            levelString = logLevel;",
          "coverage": 0
        },
        "27": {
          "source": "            logLevel = log_levels.indexOf(logLevel.toLowerCase());",
          "coverage": 0
        },
        "28": {
          "source": "        } else {",
          "coverage": ""
        },
        "29": {
          "source": "            logLevel = 0;",
          "coverage": 0
        },
        "30": {
          "source": "        }",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "        curLevel = isNaN(parseInt(curLevel, 10)) ? curLevel : parseInt(curLevel, 10);",
          "coverage": 0
        },
        "33": {
          "source": "        logLevel = isNaN(parseInt(logLevel, 10)) ? logLevel : parseInt(logLevel, 10);",
          "coverage": 0
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "        if (curLevel &lt; logLevel) {",
          "coverage": 0
        },
        "36": {
          "source": "            return;",
          "coverage": 0
        },
        "37": {
          "source": "        } else {",
          "coverage": ""
        },
        "38": {
          "source": "            var args = Array.splice.call(arguments, 0);",
          "coverage": 0
        },
        "39": {
          "source": "            var logs = self.get(\"logs\");",
          "coverage": 0
        },
        "40": {
          "source": "            args.shift();",
          "coverage": 0
        },
        "41": {
          "source": "            var logStr = \"\";",
          "coverage": 0
        },
        "42": {
          "source": "            while (args.length &gt; 0) {",
          "coverage": 0
        },
        "43": {
          "source": "                logStr += JSON.stringify(args.shift()) + \" \";",
          "coverage": 0
        },
        "44": {
          "source": "            }",
          "coverage": ""
        },
        "45": {
          "source": "            logs.push(self.wrap(logStr, levelString));",
          "coverage": 0
        },
        "46": {
          "source": "            if (logs.length &gt; config.get(\"log_line_limit\")) {",
          "coverage": 0
        },
        "47": {
          "source": "                logs.shift();",
          "coverage": 0
        },
        "48": {
          "source": "            }",
          "coverage": ""
        },
        "49": {
          "source": "            if (self.isWriting) {",
          "coverage": 0
        },
        "50": {
          "source": "                self.moreToWrite = true;",
          "coverage": 0
        },
        "51": {
          "source": "            } else {",
          "coverage": ""
        },
        "52": {
          "source": "                var _recursiveHandler = function() {",
          "coverage": 0
        },
        "53": {
          "source": "                    if (self.moreToWrite) {",
          "coverage": 0
        },
        "54": {
          "source": "                        self.moreToWrite = false;",
          "coverage": 0
        },
        "55": {
          "source": "                        self.write(_recursiveHandler);",
          "coverage": 0
        },
        "56": {
          "source": "                    }",
          "coverage": ""
        },
        "57": {
          "source": "                };",
          "coverage": ""
        },
        "58": {
          "source": "                self.write(_recursiveHandler);",
          "coverage": 0
        },
        "59": {
          "source": "            }",
          "coverage": ""
        },
        "60": {
          "source": "        }",
          "coverage": ""
        },
        "61": {
          "source": "    }",
          "coverage": ""
        },
        "62": {
          "source": "};",
          "coverage": ""
        },
        "63": {
          "source": "Log.prototype.wrap = function(msg, levelString) {",
          "coverage": 1
        },
        "64": {
          "source": "    var now = new Date();",
          "coverage": 0
        },
        "65": {
          "source": "    var dateStr = now.toISOString();",
          "coverage": 0
        },
        "66": {
          "source": "    if (typeof msg === \"object\") {",
          "coverage": 0
        },
        "67": {
          "source": "        msg = JSON.stringify(msg);",
          "coverage": 0
        },
        "68": {
          "source": "    }",
          "coverage": ""
        },
        "69": {
          "source": "    var finalMsg = dateStr + \" \" + levelString.toUpperCase() + \" \" + msg;",
          "coverage": 0
        },
        "70": {
          "source": "    return finalMsg;",
          "coverage": 0
        },
        "71": {
          "source": "};",
          "coverage": ""
        },
        "72": {
          "source": "",
          "coverage": ""
        },
        "73": {
          "source": "Log.prototype.write = function(cb) {",
          "coverage": 1
        },
        "74": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "75": {
          "source": "    self.isWriting = true;",
          "coverage": 0
        },
        "76": {
          "source": "    self.saveLocal(function() {",
          "coverage": 0
        },
        "77": {
          "source": "        self.isWriting = false;",
          "coverage": 0
        },
        "78": {
          "source": "        cb();",
          "coverage": 0
        },
        "79": {
          "source": "    });",
          "coverage": ""
        },
        "80": {
          "source": "};",
          "coverage": ""
        },
        "81": {
          "source": "Log.prototype.e = function() {",
          "coverage": 1
        },
        "82": {
          "source": "    var args = Array.splice.call(arguments, 0);",
          "coverage": 0
        },
        "83": {
          "source": "    args.unshift(\"error\");",
          "coverage": 0
        },
        "84": {
          "source": "    this.info.apply(this, args);",
          "coverage": 0
        },
        "85": {
          "source": "};",
          "coverage": ""
        },
        "86": {
          "source": "Log.prototype.w = function() {",
          "coverage": 1
        },
        "87": {
          "source": "    var args = Array.splice.call(arguments, 0);",
          "coverage": 0
        },
        "88": {
          "source": "    args.unshift(\"warning\");",
          "coverage": 0
        },
        "89": {
          "source": "    this.info.apply(this, args);",
          "coverage": 0
        },
        "90": {
          "source": "};",
          "coverage": ""
        },
        "91": {
          "source": "Log.prototype.l = function() {",
          "coverage": 1
        },
        "92": {
          "source": "    var args = Array.splice.call(arguments, 0);",
          "coverage": 0
        },
        "93": {
          "source": "    args.unshift(\"log\");",
          "coverage": 0
        },
        "94": {
          "source": "    this.info.apply(this, args);",
          "coverage": 0
        },
        "95": {
          "source": "};",
          "coverage": ""
        },
        "96": {
          "source": "Log.prototype.d = function() {",
          "coverage": 1
        },
        "97": {
          "source": "    var args = Array.splice.call(arguments, 0);",
          "coverage": 0
        },
        "98": {
          "source": "    args.unshift(\"debug\");",
          "coverage": 0
        },
        "99": {
          "source": "    this.info.apply(this, args);",
          "coverage": 0
        },
        "100": {
          "source": "};",
          "coverage": ""
        },
        "101": {
          "source": "Log.prototype.getLogs = function() {",
          "coverage": 1
        },
        "102": {
          "source": "    return this.get(\"logs\");",
          "coverage": 0
        },
        "103": {
          "source": "};",
          "coverage": ""
        },
        "104": {
          "source": "Log.prototype.clearLogs = function(cb) {",
          "coverage": 1
        },
        "105": {
          "source": "    this.set(\"logs\", []);",
          "coverage": 0
        },
        "106": {
          "source": "    this.saveLocal(function() {",
          "coverage": 0
        },
        "107": {
          "source": "        if (cb) {",
          "coverage": 0
        },
        "108": {
          "source": "            cb();",
          "coverage": 0
        },
        "109": {
          "source": "        }",
          "coverage": ""
        },
        "110": {
          "source": "    });",
          "coverage": ""
        },
        "111": {
          "source": "};",
          "coverage": ""
        },
        "112": {
          "source": "Log.prototype.sendLogs = function(cb) {",
          "coverage": 1
        },
        "113": {
          "source": "    var email = config.get(\"log_email\");",
          "coverage": 0
        },
        "114": {
          "source": "    var config = config.getProps();",
          "coverage": 0
        },
        "115": {
          "source": "    var logs = this.getLogs();",
          "coverage": 0
        },
        "116": {
          "source": "    var params = {",
          "coverage": 0
        },
        "117": {
          "source": "        \"type\": \"email\",",
          "coverage": ""
        },
        "118": {
          "source": "        \"to\": email,",
          "coverage": ""
        },
        "119": {
          "source": "        \"subject\": \"App Forms App Logs\",",
          "coverage": ""
        },
        "120": {
          "source": "        \"body\": \"Configuration:\\n\" + JSON.stringify(config) + \"\\n\\nApp Logs:\\n\" + logs.join(\"\\n\")",
          "coverage": ""
        },
        "121": {
          "source": "    };",
          "coverage": ""
        },
        "122": {
          "source": "    utils.send(params, cb);",
          "coverage": 0
        },
        "123": {
          "source": "};",
          "coverage": ""
        },
        "124": {
          "source": "",
          "coverage": ""
        },
        "125": {
          "source": "",
          "coverage": ""
        },
        "126": {
          "source": "module.exports = new Log();",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/model.js",
      "coverage": 35.714285714285715,
      "hits": 30,
      "misses": 54,
      "sloc": 84,
      "source": {
        "1": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "2": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "3": {
          "source": "var dataAgent = require(\"./dataAgent\");",
          "coverage": 1
        },
        "4": {
          "source": "var Event = require('../../../libs/events');",
          "coverage": 1
        },
        "5": {
          "source": "var _ = require('../../../libs/underscore.js');",
          "coverage": 1
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "var Model = function(options){",
          "coverage": 1
        },
        "8": {
          "source": "    this.props = {",
          "coverage": 4
        },
        "9": {
          "source": "        '_id': null,",
          "coverage": ""
        },
        "10": {
          "source": "        '_type': null,",
          "coverage": ""
        },
        "11": {
          "source": "        '_ludid': null",
          "coverage": ""
        },
        "12": {
          "source": "    };",
          "coverage": ""
        },
        "13": {
          "source": "    this.events = {};",
          "coverage": 4
        },
        "14": {
          "source": "};",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "utils.extend(Model, Event);",
          "coverage": 1
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "Model.prototype.getProps = function() {",
          "coverage": 1
        },
        "19": {
          "source": "    return this.props;",
          "coverage": 0
        },
        "20": {
          "source": "};",
          "coverage": ""
        },
        "21": {
          "source": "Model.prototype.get = function(key, def) {",
          "coverage": 1
        },
        "22": {
          "source": "    return typeof this.props[key] === 'undefined' ? def : this.props[key];",
          "coverage": 0
        },
        "23": {
          "source": "};",
          "coverage": ""
        },
        "24": {
          "source": "Model.prototype.set = function(key, val) {",
          "coverage": 1
        },
        "25": {
          "source": "    this.props[key] = val;",
          "coverage": 1
        },
        "26": {
          "source": "};",
          "coverage": ""
        },
        "27": {
          "source": "Model.prototype.setLocalId = function(localId) {",
          "coverage": 1
        },
        "28": {
          "source": "    this.set('_ludid', localId);",
          "coverage": 0
        },
        "29": {
          "source": "};",
          "coverage": ""
        },
        "30": {
          "source": "Model.prototype.getLocalId = function() {",
          "coverage": 1
        },
        "31": {
          "source": "    return this.get('_ludid');",
          "coverage": 0
        },
        "32": {
          "source": "};",
          "coverage": ""
        },
        "33": {
          "source": "Model.prototype.toJSON = function() {",
          "coverage": 1
        },
        "34": {
          "source": "    var retJSON = {};",
          "coverage": 0
        },
        "35": {
          "source": "    for (var key in this.props) {",
          "coverage": 0
        },
        "36": {
          "source": "        retJSON[key] = this.props[key];",
          "coverage": 0
        },
        "37": {
          "source": "    }",
          "coverage": ""
        },
        "38": {
          "source": "    return retJSON;",
          "coverage": 0
        },
        "39": {
          "source": "};",
          "coverage": ""
        },
        "40": {
          "source": "Model.prototype.fromJSON = function(json) {",
          "coverage": 1
        },
        "41": {
          "source": "    if (typeof json === 'string') {",
          "coverage": 0
        },
        "42": {
          "source": "        this.fromJSONStr(json);",
          "coverage": 0
        },
        "43": {
          "source": "    } else {",
          "coverage": ""
        },
        "44": {
          "source": "        for (var key in json) {",
          "coverage": 0
        },
        "45": {
          "source": "            this.set(key, json[key]);",
          "coverage": 0
        },
        "46": {
          "source": "        }",
          "coverage": ""
        },
        "47": {
          "source": "    }",
          "coverage": ""
        },
        "48": {
          "source": "    this.touch();",
          "coverage": 0
        },
        "49": {
          "source": "};",
          "coverage": ""
        },
        "50": {
          "source": "Model.prototype.fromJSONStr = function(jsonStr) {",
          "coverage": 1
        },
        "51": {
          "source": "    try {",
          "coverage": 0
        },
        "52": {
          "source": "        var json = JSON.parse(jsonStr);",
          "coverage": 0
        },
        "53": {
          "source": "        this.fromJSON(json);",
          "coverage": 0
        },
        "54": {
          "source": "    } catch (e) {",
          "coverage": ""
        },
        "55": {
          "source": "        console.error(\"Error parsing JSON\", e);",
          "coverage": 0
        },
        "56": {
          "source": "    }",
          "coverage": ""
        },
        "57": {
          "source": "};",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "Model.prototype.touch = function() {",
          "coverage": 1
        },
        "60": {
          "source": "    this.set('_localLastUpdate', utils.getTime());",
          "coverage": 0
        },
        "61": {
          "source": "};",
          "coverage": ""
        },
        "62": {
          "source": "Model.prototype.getLocalUpdateTimeStamp = function() {",
          "coverage": 1
        },
        "63": {
          "source": "    return this.get('_localLastUpdate');",
          "coverage": 0
        },
        "64": {
          "source": "};",
          "coverage": ""
        },
        "65": {
          "source": "Model.prototype.genLocalId = function() {",
          "coverage": 1
        },
        "66": {
          "source": "    return utils.localId(this);",
          "coverage": 0
        },
        "67": {
          "source": "};",
          "coverage": ""
        },
        "68": {
          "source": "/**",
          "coverage": ""
        },
        "69": {
          "source": " * retrieve model from local or remote with data agent store.",
          "coverage": ""
        },
        "70": {
          "source": " * @param {boolean} fromRemote optional true--force from remote",
          "coverage": ""
        },
        "71": {
          "source": " * @param  {Function} cb (err,currentModel)",
          "coverage": ""
        },
        "72": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "73": {
          "source": " */",
          "coverage": ""
        },
        "74": {
          "source": "Model.prototype.refresh = function(fromRemote, cb) {",
          "coverage": 1
        },
        "75": {
          "source": "    var dataAgent = this.getDataAgent();",
          "coverage": 0
        },
        "76": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "77": {
          "source": "    if (typeof cb === 'undefined') {",
          "coverage": 0
        },
        "78": {
          "source": "        cb = fromRemote;",
          "coverage": 0
        },
        "79": {
          "source": "        fromRemote = false;",
          "coverage": 0
        },
        "80": {
          "source": "    }",
          "coverage": ""
        },
        "81": {
          "source": "    if (fromRemote) {",
          "coverage": 0
        },
        "82": {
          "source": "        dataAgent.attemptRead(this, _handler);",
          "coverage": 0
        },
        "83": {
          "source": "    } else {",
          "coverage": ""
        },
        "84": {
          "source": "        dataAgent.read(this, _handler);",
          "coverage": 0
        },
        "85": {
          "source": "    }",
          "coverage": ""
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "    function _handler(err, res) {",
          "coverage": 0
        },
        "88": {
          "source": "        if (!err &amp;&amp; res) {",
          "coverage": 0
        },
        "89": {
          "source": "            that.fromJSON(res);",
          "coverage": 0
        },
        "90": {
          "source": "            cb(null, that);",
          "coverage": 0
        },
        "91": {
          "source": "        } else {",
          "coverage": ""
        },
        "92": {
          "source": "            cb(err, that);",
          "coverage": 0
        },
        "93": {
          "source": "        }",
          "coverage": ""
        },
        "94": {
          "source": "    }",
          "coverage": ""
        },
        "95": {
          "source": "};",
          "coverage": ""
        },
        "96": {
          "source": "Model.prototype.attemptRefresh = function(cb) {",
          "coverage": 1
        },
        "97": {
          "source": "    var dataAgent = this.getDataAgent();",
          "coverage": 0
        },
        "98": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "99": {
          "source": "    dataAgent.attemptRead(this, function(err, res) {",
          "coverage": 0
        },
        "100": {
          "source": "        if (!err &amp;&amp; res) {",
          "coverage": 0
        },
        "101": {
          "source": "            self.fromJSON(res);",
          "coverage": 0
        },
        "102": {
          "source": "            cb(null, self);",
          "coverage": 0
        },
        "103": {
          "source": "        } else {",
          "coverage": ""
        },
        "104": {
          "source": "            cb(err, self);",
          "coverage": 0
        },
        "105": {
          "source": "        }",
          "coverage": ""
        },
        "106": {
          "source": "    });",
          "coverage": ""
        },
        "107": {
          "source": "};",
          "coverage": ""
        },
        "108": {
          "source": "/**",
          "coverage": ""
        },
        "109": {
          "source": " * Retrieve model from local storage store",
          "coverage": ""
        },
        "110": {
          "source": " * @param  {Function} cb (err, curModel)",
          "coverage": ""
        },
        "111": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "112": {
          "source": " */",
          "coverage": ""
        },
        "113": {
          "source": "Model.prototype.loadLocal = function(cb) {",
          "coverage": 1
        },
        "114": {
          "source": "    var localStorage = localStorage;",
          "coverage": 0
        },
        "115": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "116": {
          "source": "    localStorage.read(this, function(err, res) {",
          "coverage": 0
        },
        "117": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "118": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "119": {
          "source": "        } else {",
          "coverage": ""
        },
        "120": {
          "source": "            if (res) {",
          "coverage": 0
        },
        "121": {
          "source": "                that.fromJSON(res);",
          "coverage": 0
        },
        "122": {
          "source": "            }",
          "coverage": ""
        },
        "123": {
          "source": "            cb(err, that);",
          "coverage": 0
        },
        "124": {
          "source": "        }",
          "coverage": ""
        },
        "125": {
          "source": "    });",
          "coverage": ""
        },
        "126": {
          "source": "};",
          "coverage": ""
        },
        "127": {
          "source": "/**",
          "coverage": ""
        },
        "128": {
          "source": " * save current model to local storage store",
          "coverage": ""
        },
        "129": {
          "source": " * @param  {Function} cb [description]",
          "coverage": ""
        },
        "130": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "131": {
          "source": " */",
          "coverage": ""
        },
        "132": {
          "source": "Model.prototype.saveLocal = function(cb) {",
          "coverage": 1
        },
        "133": {
          "source": "    var localStorage = localStorage;",
          "coverage": 0
        },
        "134": {
          "source": "    localStorage.upsert(this, cb);",
          "coverage": 0
        },
        "135": {
          "source": "};",
          "coverage": ""
        },
        "136": {
          "source": "/**",
          "coverage": ""
        },
        "137": {
          "source": " * Remove current model from local storage store",
          "coverage": ""
        },
        "138": {
          "source": " * @param  {Function} cb [description]",
          "coverage": ""
        },
        "139": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "140": {
          "source": " */",
          "coverage": ""
        },
        "141": {
          "source": "Model.prototype.clearLocal = function(cb) {",
          "coverage": 1
        },
        "142": {
          "source": "    var localStorage = localStorage;",
          "coverage": 0
        },
        "143": {
          "source": "    localStorage.removeEntry(this, cb);",
          "coverage": 0
        },
        "144": {
          "source": "};",
          "coverage": ""
        },
        "145": {
          "source": "Model.prototype.getDataAgent = function() {",
          "coverage": 1
        },
        "146": {
          "source": "    return dataAgent;",
          "coverage": 0
        },
        "147": {
          "source": "};",
          "coverage": ""
        },
        "148": {
          "source": "Model.prototype.setDataAgent = function(dataAgent) {",
          "coverage": 1
        },
        "149": {
          "source": "    this.dataAgent = dataAgent;",
          "coverage": 0
        },
        "150": {
          "source": "};",
          "coverage": ""
        },
        "151": {
          "source": "",
          "coverage": ""
        },
        "152": {
          "source": "console.log(\"MODEL \", JSON.stringify(Model));",
          "coverage": 1
        },
        "153": {
          "source": "",
          "coverage": ""
        },
        "154": {
          "source": "module.exports = Model;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/page.js",
      "coverage": 24.675324675324674,
      "hits": 19,
      "misses": 58,
      "sloc": 77,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * One form contains multiple pages",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "5": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "6": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "function Page(opt, parentForm) {",
          "coverage": 1
        },
        "9": {
          "source": "    if (typeof opt === 'undefined' || typeof parentForm === 'undefined') {",
          "coverage": 0
        },
        "10": {
          "source": "        log.e('Page initialise failed: new Page(pageDefinitionJSON, parentFormModel)');",
          "coverage": 0
        },
        "11": {
          "source": "        return;",
          "coverage": 0
        },
        "12": {
          "source": "    }",
          "coverage": ""
        },
        "13": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "14": {
          "source": "        '_type': 'page'",
          "coverage": ""
        },
        "15": {
          "source": "    });",
          "coverage": ""
        },
        "16": {
          "source": "    this.fromJSON(opt);",
          "coverage": 0
        },
        "17": {
          "source": "    this.form = parentForm;",
          "coverage": 0
        },
        "18": {
          "source": "    this.initialise();",
          "coverage": 0
        },
        "19": {
          "source": "};",
          "coverage": 1
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "Page.prototype.initialise = function() {",
          "coverage": 1
        },
        "22": {
          "source": "    var fieldsDef = this.getFieldDef();",
          "coverage": 0
        },
        "23": {
          "source": "    this.fieldsIds = [];",
          "coverage": 0
        },
        "24": {
          "source": "    for (var i = 0; i &lt; fieldsDef.length; i++) {",
          "coverage": 0
        },
        "25": {
          "source": "        this.fieldsIds.push(fieldsDef[i]._id);",
          "coverage": 0
        },
        "26": {
          "source": "    }",
          "coverage": ""
        },
        "27": {
          "source": "};",
          "coverage": ""
        },
        "28": {
          "source": "Page.prototype.setVisible = function(isVisible) {",
          "coverage": 1
        },
        "29": {
          "source": "    this.set('visible', isVisible);",
          "coverage": 0
        },
        "30": {
          "source": "    if (isVisible) {",
          "coverage": 0
        },
        "31": {
          "source": "        this.emit('visible');",
          "coverage": 0
        },
        "32": {
          "source": "    } else {",
          "coverage": ""
        },
        "33": {
          "source": "        this.emit('hidden');",
          "coverage": 0
        },
        "34": {
          "source": "    }",
          "coverage": ""
        },
        "35": {
          "source": "};",
          "coverage": ""
        },
        "36": {
          "source": "Page.prototype.getFieldDef = function() {",
          "coverage": 1
        },
        "37": {
          "source": "    return this.get(\"fields\", []);",
          "coverage": 0
        },
        "38": {
          "source": "};",
          "coverage": ""
        },
        "39": {
          "source": "Page.prototype.getFieldDef = function() {",
          "coverage": 1
        },
        "40": {
          "source": "    return this.get(\"fields\", []);",
          "coverage": 0
        },
        "41": {
          "source": "};",
          "coverage": ""
        },
        "42": {
          "source": "Page.prototype.getFieldModelList = function() {",
          "coverage": 1
        },
        "43": {
          "source": "    var list = [];",
          "coverage": 0
        },
        "44": {
          "source": "    for (var i = 0; i &lt; this.fieldsIds.length; i++) {",
          "coverage": 0
        },
        "45": {
          "source": "        list.push(this.form.getFieldModelById(this.fieldsIds[i]));",
          "coverage": 0
        },
        "46": {
          "source": "    }",
          "coverage": ""
        },
        "47": {
          "source": "    return list;",
          "coverage": 0
        },
        "48": {
          "source": "};",
          "coverage": ""
        },
        "49": {
          "source": "Page.prototype.checkForSectionBreaks = function() { //Checking for any sections",
          "coverage": 1
        },
        "50": {
          "source": "    for (var i = 0; i &lt; this.fieldsIds.length; i++) {",
          "coverage": 0
        },
        "51": {
          "source": "        var fieldModel = this.form.getFieldModelById(this.fieldsIds[i]);",
          "coverage": 0
        },
        "52": {
          "source": "        if (fieldModel &amp;&amp; fieldModel.getType() === \"sectionBreak\") {",
          "coverage": 0
        },
        "53": {
          "source": "            return true;",
          "coverage": 0
        },
        "54": {
          "source": "        }",
          "coverage": ""
        },
        "55": {
          "source": "    }",
          "coverage": ""
        },
        "56": {
          "source": "    return false;",
          "coverage": 0
        },
        "57": {
          "source": "};",
          "coverage": ""
        },
        "58": {
          "source": "Page.prototype.getSections = function() { //Checking for any sections",
          "coverage": 1
        },
        "59": {
          "source": "    var sectionList = {};",
          "coverage": 0
        },
        "60": {
          "source": "    var currentSection = null;",
          "coverage": 0
        },
        "61": {
          "source": "    var sectionBreaksExist = this.checkForSectionBreaks();",
          "coverage": 0
        },
        "62": {
          "source": "    var insertSectionBreak = false;",
          "coverage": 0
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "    if (sectionBreaksExist) {",
          "coverage": 0
        },
        "65": {
          "source": "        //If there are section breaks, the first field in the form must be a section break. If not, add a placeholder",
          "coverage": ""
        },
        "66": {
          "source": "        var firstField = this.form.getFieldModelById(this.fieldsIds[0]);",
          "coverage": 0
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "        if (firstField.getType() !== \"sectionBreak\") {",
          "coverage": 0
        },
        "69": {
          "source": "            insertSectionBreak = true;",
          "coverage": 0
        },
        "70": {
          "source": "        }",
          "coverage": ""
        },
        "71": {
          "source": "    } else {",
          "coverage": ""
        },
        "72": {
          "source": "        return null;",
          "coverage": 0
        },
        "73": {
          "source": "    }",
          "coverage": ""
        },
        "74": {
          "source": "",
          "coverage": ""
        },
        "75": {
          "source": "    for (var i = 0; i &lt; this.fieldsIds.length; i++) {",
          "coverage": 0
        },
        "76": {
          "source": "        var fieldModel = this.form.getFieldModelById(this.fieldsIds[i]);",
          "coverage": 0
        },
        "77": {
          "source": "",
          "coverage": ""
        },
        "78": {
          "source": "        if (insertSectionBreak &amp;&amp; i === 0) { //Adding a first section.",
          "coverage": 0
        },
        "79": {
          "source": "            currentSection = \"sectionBreak\" + i;",
          "coverage": 0
        },
        "80": {
          "source": "            sectionList[currentSection] = sectionList[currentSection] ? sectionList[currentSection] : {",
          "coverage": 0
        },
        "81": {
          "source": "                fields: []",
          "coverage": ""
        },
        "82": {
          "source": "            };",
          "coverage": ""
        },
        "83": {
          "source": "            sectionList[currentSection].title = \"Section \" + (i + 1);",
          "coverage": 0
        },
        "84": {
          "source": "        }",
          "coverage": ""
        },
        "85": {
          "source": "",
          "coverage": ""
        },
        "86": {
          "source": "        if (currentSection !== null &amp;&amp; fieldModel.getType() !== \"sectionBreak\") {",
          "coverage": 0
        },
        "87": {
          "source": "            sectionList[currentSection].fields.push(fieldModel);",
          "coverage": 0
        },
        "88": {
          "source": "        }",
          "coverage": ""
        },
        "89": {
          "source": "",
          "coverage": ""
        },
        "90": {
          "source": "        if (fieldModel.getType() === \"sectionBreak\") {",
          "coverage": 0
        },
        "91": {
          "source": "            currentSection = \"sectionBreak\" + i;",
          "coverage": 0
        },
        "92": {
          "source": "            sectionList[currentSection] = sectionList[currentSection] ? sectionList[currentSection] : {",
          "coverage": 0
        },
        "93": {
          "source": "                fields: []",
          "coverage": ""
        },
        "94": {
          "source": "            };",
          "coverage": ""
        },
        "95": {
          "source": "            sectionList[currentSection].title = fieldModel.get('name', \"Section \" + (i + 1));",
          "coverage": 0
        },
        "96": {
          "source": "            sectionList[currentSection].fields.push(fieldModel);",
          "coverage": 0
        },
        "97": {
          "source": "        }",
          "coverage": ""
        },
        "98": {
          "source": "    }",
          "coverage": ""
        },
        "99": {
          "source": "",
          "coverage": ""
        },
        "100": {
          "source": "    return sectionList;",
          "coverage": 0
        },
        "101": {
          "source": "};",
          "coverage": ""
        },
        "102": {
          "source": "Page.prototype.getFieldModelById = function(fieldId) {",
          "coverage": 1
        },
        "103": {
          "source": "    return this.form.getFieldModelById(fieldId);",
          "coverage": 0
        },
        "104": {
          "source": "};",
          "coverage": ""
        },
        "105": {
          "source": "Page.prototype.getPageId = function() {",
          "coverage": 1
        },
        "106": {
          "source": "    return this.get(\"_id\", \"\");",
          "coverage": 0
        },
        "107": {
          "source": "};",
          "coverage": ""
        },
        "108": {
          "source": "Page.prototype.getName = function() {",
          "coverage": 1
        },
        "109": {
          "source": "    return this.get('name', '');",
          "coverage": 0
        },
        "110": {
          "source": "};",
          "coverage": ""
        },
        "111": {
          "source": "Page.prototype.getDescription = function() {",
          "coverage": 1
        },
        "112": {
          "source": "    return this.get('description', '');",
          "coverage": 0
        },
        "113": {
          "source": "};",
          "coverage": ""
        },
        "114": {
          "source": "Page.prototype.getFieldDef = function() {",
          "coverage": 1
        },
        "115": {
          "source": "    return this.get('fields', []);",
          "coverage": 0
        },
        "116": {
          "source": "};",
          "coverage": ""
        },
        "117": {
          "source": "Page.prototype.getFieldModelList = function() {",
          "coverage": 1
        },
        "118": {
          "source": "    var list = [];",
          "coverage": 0
        },
        "119": {
          "source": "    for (var i = 0; i &lt; this.fieldsIds.length; i++) {",
          "coverage": 0
        },
        "120": {
          "source": "        list.push(this.form.getFieldModelById(this.fieldsIds[i]));",
          "coverage": 0
        },
        "121": {
          "source": "    }",
          "coverage": ""
        },
        "122": {
          "source": "",
          "coverage": ""
        },
        "123": {
          "source": "    return list;",
          "coverage": 0
        },
        "124": {
          "source": "};",
          "coverage": ""
        },
        "125": {
          "source": "",
          "coverage": ""
        },
        "126": {
          "source": "module.exports = Page;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/rulesEngine.js",
      "coverage": 0.6830601092896175,
      "hits": 5,
      "misses": 727,
      "sloc": 732,
      "source": {
        "1": {
          "source": "/*! fh-forms - v0.8.00 -  */",
          "coverage": ""
        },
        "2": {
          "source": "/*! async - v0.2.9 -  */",
          "coverage": ""
        },
        "3": {
          "source": "/*! 2014-08-27 */",
          "coverage": ""
        },
        "4": {
          "source": "/* This is the prefix file */",
          "coverage": ""
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "var async = require('../../../libs/async');",
          "coverage": 1
        },
        "7": {
          "source": "var _ = require('../../../libs/underscore');",
          "coverage": 1
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function rulesEngine(formDef) {",
          "coverage": 1
        },
        "10": {
          "source": "    /*",
          "coverage": ""
        },
        "11": {
          "source": "     * Sample Usage",
          "coverage": ""
        },
        "12": {
          "source": "     *",
          "coverage": ""
        },
        "13": {
          "source": "     * var engine = formsRulesEngine(form-definition);",
          "coverage": ""
        },
        "14": {
          "source": "     *",
          "coverage": ""
        },
        "15": {
          "source": "     * engine.validateForms(form-submission, function(err, res) {});",
          "coverage": ""
        },
        "16": {
          "source": "     *      res:",
          "coverage": ""
        },
        "17": {
          "source": "     *      {",
          "coverage": ""
        },
        "18": {
          "source": "     *          \"validation\": {",
          "coverage": ""
        },
        "19": {
          "source": "     *              \"fieldId\": {",
          "coverage": ""
        },
        "20": {
          "source": "     *                  \"fieldId\": \"\",",
          "coverage": ""
        },
        "21": {
          "source": "     *                  \"valid\": true,",
          "coverage": ""
        },
        "22": {
          "source": "     *                  \"errorMessages\": [",
          "coverage": ""
        },
        "23": {
          "source": "     *                      \"length should be 3 to 5\",",
          "coverage": ""
        },
        "24": {
          "source": "     *                      \"should not contain dammit\",",
          "coverage": ""
        },
        "25": {
          "source": "     *                      \"should repeat at least 2 times\"",
          "coverage": ""
        },
        "26": {
          "source": "     *                  ]",
          "coverage": ""
        },
        "27": {
          "source": "     *              },",
          "coverage": ""
        },
        "28": {
          "source": "     *              \"fieldId1\": {",
          "coverage": ""
        },
        "29": {
          "source": "     *",
          "coverage": ""
        },
        "30": {
          "source": "     *              }",
          "coverage": ""
        },
        "31": {
          "source": "     *          }",
          "coverage": ""
        },
        "32": {
          "source": "     *      }",
          "coverage": ""
        },
        "33": {
          "source": "     *",
          "coverage": ""
        },
        "34": {
          "source": "     *",
          "coverage": ""
        },
        "35": {
          "source": "     * engine.validateField(fieldId, submissionJSON, function(err,res) {});",
          "coverage": ""
        },
        "36": {
          "source": "     *      // validate only field values on validation (no rules, no repeat checking)",
          "coverage": ""
        },
        "37": {
          "source": "     *      res:",
          "coverage": ""
        },
        "38": {
          "source": "     *      \"validation\":{",
          "coverage": ""
        },
        "39": {
          "source": "     *              \"fieldId\":{",
          "coverage": ""
        },
        "40": {
          "source": "     *                  \"fieldId\":\"\",",
          "coverage": ""
        },
        "41": {
          "source": "     *                  \"valid\":true,",
          "coverage": ""
        },
        "42": {
          "source": "     *                  \"errorMessages\":[",
          "coverage": ""
        },
        "43": {
          "source": "     *                      \"length should be 3 to 5\",",
          "coverage": ""
        },
        "44": {
          "source": "     *                      \"should not contain dammit\"",
          "coverage": ""
        },
        "45": {
          "source": "     *                  ]",
          "coverage": ""
        },
        "46": {
          "source": "     *              }",
          "coverage": ""
        },
        "47": {
          "source": "     *          }",
          "coverage": ""
        },
        "48": {
          "source": "     *",
          "coverage": ""
        },
        "49": {
          "source": "     * engine.checkRules(submissionJSON, unction(err, res) {})",
          "coverage": ""
        },
        "50": {
          "source": "     *      // check all rules actions",
          "coverage": ""
        },
        "51": {
          "source": "     *      res:",
          "coverage": ""
        },
        "52": {
          "source": "     *      {",
          "coverage": ""
        },
        "53": {
          "source": "     *          \"actions\": {",
          "coverage": ""
        },
        "54": {
          "source": "     *              \"pages\": {",
          "coverage": ""
        },
        "55": {
          "source": "     *                  \"targetId\": {",
          "coverage": ""
        },
        "56": {
          "source": "     *                      \"targetId\": \"\",",
          "coverage": ""
        },
        "57": {
          "source": "     *                      \"action\": \"show|hide\"",
          "coverage": ""
        },
        "58": {
          "source": "     *                  }",
          "coverage": ""
        },
        "59": {
          "source": "     *              },",
          "coverage": ""
        },
        "60": {
          "source": "     *              \"fields\": {",
          "coverage": ""
        },
        "61": {
          "source": "     *",
          "coverage": ""
        },
        "62": {
          "source": "     *              }",
          "coverage": ""
        },
        "63": {
          "source": "     *          }",
          "coverage": ""
        },
        "64": {
          "source": "     *      }",
          "coverage": ""
        },
        "65": {
          "source": "     *",
          "coverage": ""
        },
        "66": {
          "source": "     */",
          "coverage": ""
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "    var FIELD_TYPE_CHECKBOX = \"checkboxes\";",
          "coverage": 0
        },
        "69": {
          "source": "    var FIELD_TYPE_DATETIME = \"dateTime\";",
          "coverage": 0
        },
        "70": {
          "source": "    var FIELD_TYPE_DATETIME_DATETIMEUNIT_DATEONLY = \"date\";",
          "coverage": 0
        },
        "71": {
          "source": "    var FIELD_TYPE_DATETIME_DATETIMEUNIT_TIMEONLY = \"time\";",
          "coverage": 0
        },
        "72": {
          "source": "    var FIELD_TYPE_DATETIME_DATETIMEUNIT_DATETIME = \"datetime\";",
          "coverage": 0
        },
        "73": {
          "source": "",
          "coverage": ""
        },
        "74": {
          "source": "    var formsRulesEngine = function(formDef) {",
          "coverage": 0
        },
        "75": {
          "source": "        var initialised;",
          "coverage": 0
        },
        "76": {
          "source": "",
          "coverage": ""
        },
        "77": {
          "source": "        var definition = formDef;",
          "coverage": 0
        },
        "78": {
          "source": "        var submission;",
          "coverage": 0
        },
        "79": {
          "source": "",
          "coverage": ""
        },
        "80": {
          "source": "        var fieldMap = {};",
          "coverage": 0
        },
        "81": {
          "source": "        var adminFieldMap = {}; //Admin fields should not be part of a submission",
          "coverage": 0
        },
        "82": {
          "source": "        var requiredFieldMap = {};",
          "coverage": 0
        },
        "83": {
          "source": "        var submissionRequiredFieldsMap = {}; // map to hold the status of the required fields per submission",
          "coverage": 0
        },
        "84": {
          "source": "        var fieldRulePredicateMap = {};",
          "coverage": 0
        },
        "85": {
          "source": "        var fieldRuleSubjectMap = {};",
          "coverage": 0
        },
        "86": {
          "source": "        var pageRulePredicateMap = {};",
          "coverage": 0
        },
        "87": {
          "source": "        var pageRuleSubjectMap = {};",
          "coverage": 0
        },
        "88": {
          "source": "        var submissionFieldsMap = {};",
          "coverage": 0
        },
        "89": {
          "source": "        var validatorsMap = {",
          "coverage": 0
        },
        "90": {
          "source": "            \"text\": validatorString,",
          "coverage": ""
        },
        "91": {
          "source": "            \"textarea\": validatorString,",
          "coverage": ""
        },
        "92": {
          "source": "            \"number\": validatorNumericString,",
          "coverage": ""
        },
        "93": {
          "source": "            \"emailAddress\": validatorEmail,",
          "coverage": ""
        },
        "94": {
          "source": "            \"dropdown\": validatorDropDown,",
          "coverage": ""
        },
        "95": {
          "source": "            \"radio\": validatorDropDown,",
          "coverage": ""
        },
        "96": {
          "source": "            \"checkboxes\": validatorCheckboxes,",
          "coverage": ""
        },
        "97": {
          "source": "            \"location\": validatorLocation,",
          "coverage": ""
        },
        "98": {
          "source": "            \"locationMap\": validatorLocationMap,",
          "coverage": ""
        },
        "99": {
          "source": "            \"photo\": validatorFile,",
          "coverage": ""
        },
        "100": {
          "source": "            \"signature\": validatorFile,",
          "coverage": ""
        },
        "101": {
          "source": "            \"file\": validatorFile,",
          "coverage": ""
        },
        "102": {
          "source": "            \"dateTime\": validatorDateTime,",
          "coverage": ""
        },
        "103": {
          "source": "            \"url\": validatorString,",
          "coverage": ""
        },
        "104": {
          "source": "            \"sectionBreak\": validatorSection",
          "coverage": ""
        },
        "105": {
          "source": "        };",
          "coverage": ""
        },
        "106": {
          "source": "",
          "coverage": ""
        },
        "107": {
          "source": "        var validatorsClientMap = {",
          "coverage": 0
        },
        "108": {
          "source": "            \"text\": validatorString,",
          "coverage": ""
        },
        "109": {
          "source": "            \"textarea\": validatorString,",
          "coverage": ""
        },
        "110": {
          "source": "            \"number\": validatorNumericString,",
          "coverage": ""
        },
        "111": {
          "source": "            \"emailAddress\": validatorEmail,",
          "coverage": ""
        },
        "112": {
          "source": "            \"dropdown\": validatorDropDown,",
          "coverage": ""
        },
        "113": {
          "source": "            \"radio\": validatorDropDown,",
          "coverage": ""
        },
        "114": {
          "source": "            \"checkboxes\": validatorCheckboxes,",
          "coverage": ""
        },
        "115": {
          "source": "            \"location\": validatorLocation,",
          "coverage": ""
        },
        "116": {
          "source": "            \"locationMap\": validatorLocationMap,",
          "coverage": ""
        },
        "117": {
          "source": "            \"photo\": validatorAnyFile,",
          "coverage": ""
        },
        "118": {
          "source": "            \"signature\": validatorAnyFile,",
          "coverage": ""
        },
        "119": {
          "source": "            \"file\": validatorAnyFile,",
          "coverage": ""
        },
        "120": {
          "source": "            \"dateTime\": validatorDateTime,",
          "coverage": ""
        },
        "121": {
          "source": "            \"url\": validatorString,",
          "coverage": ""
        },
        "122": {
          "source": "            \"sectionBreak\": validatorSection",
          "coverage": ""
        },
        "123": {
          "source": "        };",
          "coverage": ""
        },
        "124": {
          "source": "",
          "coverage": ""
        },
        "125": {
          "source": "        var isFieldRuleSubject = function(fieldId) {",
          "coverage": 0
        },
        "126": {
          "source": "            return !!fieldRuleSubjectMap[fieldId];",
          "coverage": 0
        },
        "127": {
          "source": "        };",
          "coverage": ""
        },
        "128": {
          "source": "",
          "coverage": ""
        },
        "129": {
          "source": "        var isPageRuleSubject = function(pageId) {",
          "coverage": 0
        },
        "130": {
          "source": "            return !!pageRuleSubjectMap[pageId];",
          "coverage": 0
        },
        "131": {
          "source": "        };",
          "coverage": ""
        },
        "132": {
          "source": "",
          "coverage": ""
        },
        "133": {
          "source": "        function buildFieldMap(cb) {",
          "coverage": 0
        },
        "134": {
          "source": "            // Iterate over all fields in form definition &amp; build fieldMap",
          "coverage": ""
        },
        "135": {
          "source": "            async.each(definition.pages, function(page, cbPages) {",
          "coverage": 0
        },
        "136": {
          "source": "                async.each(page.fields, function(field, cbFields) {",
          "coverage": 0
        },
        "137": {
          "source": "                    field.pageId = page._id;",
          "coverage": 0
        },
        "138": {
          "source": "",
          "coverage": ""
        },
        "139": {
          "source": "                    /**",
          "coverage": ""
        },
        "140": {
          "source": "                     * If the field is an admin field, then it is not considered part of validation for a submission.",
          "coverage": ""
        },
        "141": {
          "source": "                     */",
          "coverage": ""
        },
        "142": {
          "source": "                    if (field.adminOnly) {",
          "coverage": 0
        },
        "143": {
          "source": "                        adminFieldMap[field._id] = field;",
          "coverage": 0
        },
        "144": {
          "source": "                        return cbFields();",
          "coverage": 0
        },
        "145": {
          "source": "                    }",
          "coverage": ""
        },
        "146": {
          "source": "",
          "coverage": ""
        },
        "147": {
          "source": "                    field.fieldOptions = field.fieldOptions ? field.fieldOptions : {};",
          "coverage": 0
        },
        "148": {
          "source": "                    field.fieldOptions.definition = field.fieldOptions.definition ? field.fieldOptions.definition : {};",
          "coverage": 0
        },
        "149": {
          "source": "                    field.fieldOptions.validation = field.fieldOptions.validation ? field.fieldOptions.validation : {};",
          "coverage": 0
        },
        "150": {
          "source": "",
          "coverage": ""
        },
        "151": {
          "source": "                    fieldMap[field._id] = field;",
          "coverage": 0
        },
        "152": {
          "source": "                    if (field.required) {",
          "coverage": 0
        },
        "153": {
          "source": "                        requiredFieldMap[field._id] = {",
          "coverage": 0
        },
        "154": {
          "source": "                            field: field,",
          "coverage": ""
        },
        "155": {
          "source": "                            submitted: false,",
          "coverage": ""
        },
        "156": {
          "source": "                            validated: false",
          "coverage": ""
        },
        "157": {
          "source": "                        };",
          "coverage": ""
        },
        "158": {
          "source": "                    }",
          "coverage": ""
        },
        "159": {
          "source": "                    return cbFields();",
          "coverage": 0
        },
        "160": {
          "source": "                }, function() {",
          "coverage": ""
        },
        "161": {
          "source": "                    return cbPages();",
          "coverage": 0
        },
        "162": {
          "source": "                });",
          "coverage": ""
        },
        "163": {
          "source": "            }, cb);",
          "coverage": ""
        },
        "164": {
          "source": "        }",
          "coverage": ""
        },
        "165": {
          "source": "",
          "coverage": ""
        },
        "166": {
          "source": "        function buildFieldRuleMaps(cb) {",
          "coverage": 0
        },
        "167": {
          "source": "            // Iterate over all rules in form definition &amp; build ruleSubjectMap",
          "coverage": ""
        },
        "168": {
          "source": "            async.each(definition.fieldRules, function(rule, cbRules) {",
          "coverage": 0
        },
        "169": {
          "source": "                async.each(rule.ruleConditionalStatements, function(ruleConditionalStatement, cbRuleConditionalStatements) {",
          "coverage": 0
        },
        "170": {
          "source": "                    var fieldId = ruleConditionalStatement.sourceField;",
          "coverage": 0
        },
        "171": {
          "source": "                    fieldRulePredicateMap[fieldId] = fieldRulePredicateMap[fieldId] || [];",
          "coverage": 0
        },
        "172": {
          "source": "                    fieldRulePredicateMap[fieldId].push(rule);",
          "coverage": 0
        },
        "173": {
          "source": "                    return cbRuleConditionalStatements();",
          "coverage": 0
        },
        "174": {
          "source": "                }, function() {",
          "coverage": ""
        },
        "175": {
          "source": "",
          "coverage": ""
        },
        "176": {
          "source": "                    /**",
          "coverage": ""
        },
        "177": {
          "source": "                     * Target fields are an array of fieldIds that can be targeted by a field rule",
          "coverage": ""
        },
        "178": {
          "source": "                     * To maintain backwards compatibility, the case where the targetPage is not an array has to be considered",
          "coverage": ""
        },
        "179": {
          "source": "                     * @type {*|Array}",
          "coverage": ""
        },
        "180": {
          "source": "                     */",
          "coverage": ""
        },
        "181": {
          "source": "                    if (Array.isArray(rule.targetField)) {",
          "coverage": 0
        },
        "182": {
          "source": "                        async.each(rule.targetField, function(targetField, cb) {",
          "coverage": 0
        },
        "183": {
          "source": "                            fieldRuleSubjectMap[targetField] = fieldRuleSubjectMap[targetField] || [];",
          "coverage": 0
        },
        "184": {
          "source": "                            fieldRuleSubjectMap[targetField].push(rule);",
          "coverage": 0
        },
        "185": {
          "source": "                            cb();",
          "coverage": 0
        },
        "186": {
          "source": "                        }, cbRules);",
          "coverage": ""
        },
        "187": {
          "source": "                    } else {",
          "coverage": ""
        },
        "188": {
          "source": "                        fieldRuleSubjectMap[rule.targetField] = fieldRuleSubjectMap[rule.targetField] || [];",
          "coverage": 0
        },
        "189": {
          "source": "                        fieldRuleSubjectMap[rule.targetField].push(rule);",
          "coverage": 0
        },
        "190": {
          "source": "                        return cbRules();",
          "coverage": 0
        },
        "191": {
          "source": "                    }",
          "coverage": ""
        },
        "192": {
          "source": "                });",
          "coverage": ""
        },
        "193": {
          "source": "            }, cb);",
          "coverage": ""
        },
        "194": {
          "source": "        }",
          "coverage": ""
        },
        "195": {
          "source": "",
          "coverage": ""
        },
        "196": {
          "source": "        function buildPageRuleMap(cb) {",
          "coverage": 0
        },
        "197": {
          "source": "            // Iterate over all rules in form definition &amp; build ruleSubjectMap",
          "coverage": ""
        },
        "198": {
          "source": "            async.each(definition.pageRules, function(rule, cbRules) {",
          "coverage": 0
        },
        "199": {
          "source": "                async.each(rule.ruleConditionalStatements, function(ruleConditionalStatement, cbRulePredicates) {",
          "coverage": 0
        },
        "200": {
          "source": "                    var fieldId = ruleConditionalStatement.sourceField;",
          "coverage": 0
        },
        "201": {
          "source": "                    pageRulePredicateMap[fieldId] = pageRulePredicateMap[fieldId] || [];",
          "coverage": 0
        },
        "202": {
          "source": "                    pageRulePredicateMap[fieldId].push(rule);",
          "coverage": 0
        },
        "203": {
          "source": "                    return cbRulePredicates();",
          "coverage": 0
        },
        "204": {
          "source": "                }, function() {",
          "coverage": ""
        },
        "205": {
          "source": "",
          "coverage": ""
        },
        "206": {
          "source": "                    /**",
          "coverage": ""
        },
        "207": {
          "source": "                     * Target pages are an array of pageIds that can be targeted by a page rule",
          "coverage": ""
        },
        "208": {
          "source": "                     * To maintain backwards compatibility, the case where the targetPage is not an array has to be considered",
          "coverage": ""
        },
        "209": {
          "source": "                     * @type {*|Array}",
          "coverage": ""
        },
        "210": {
          "source": "                     */",
          "coverage": ""
        },
        "211": {
          "source": "                    if (Array.isArray(rule.targetPage)) {",
          "coverage": 0
        },
        "212": {
          "source": "                        async.each(rule.targetPage, function(targetPage, cb) {",
          "coverage": 0
        },
        "213": {
          "source": "                            pageRuleSubjectMap[targetPage] = pageRuleSubjectMap[targetPage] || [];",
          "coverage": 0
        },
        "214": {
          "source": "                            pageRuleSubjectMap[targetPage].push(rule);",
          "coverage": 0
        },
        "215": {
          "source": "                            cb();",
          "coverage": 0
        },
        "216": {
          "source": "                        }, cbRules);",
          "coverage": ""
        },
        "217": {
          "source": "                    } else {",
          "coverage": ""
        },
        "218": {
          "source": "                        pageRuleSubjectMap[rule.targetPage] = pageRuleSubjectMap[rule.targetPage] || [];",
          "coverage": 0
        },
        "219": {
          "source": "                        pageRuleSubjectMap[rule.targetPage].push(rule);",
          "coverage": 0
        },
        "220": {
          "source": "                        return cbRules();",
          "coverage": 0
        },
        "221": {
          "source": "                    }",
          "coverage": ""
        },
        "222": {
          "source": "                });",
          "coverage": ""
        },
        "223": {
          "source": "            }, cb);",
          "coverage": ""
        },
        "224": {
          "source": "        }",
          "coverage": ""
        },
        "225": {
          "source": "",
          "coverage": ""
        },
        "226": {
          "source": "        function buildSubmissionFieldsMap(cb) {",
          "coverage": 0
        },
        "227": {
          "source": "            submissionRequiredFieldsMap = JSON.parse(JSON.stringify(requiredFieldMap)); // clone the map for use with this submission",
          "coverage": 0
        },
        "228": {
          "source": "            submissionFieldsMap = {}; // start with empty map, rulesEngine can be called with multiple submissions",
          "coverage": 0
        },
        "229": {
          "source": "",
          "coverage": ""
        },
        "230": {
          "source": "            // iterate over all the fields in the submissions and build a map for easier lookup",
          "coverage": ""
        },
        "231": {
          "source": "            async.each(submission.formFields, function(formField, cb) {",
          "coverage": 0
        },
        "232": {
          "source": "                if (!formField.fieldId) return cb(new Error(\"No fieldId in this submission entry: \" + util.inspect(formField)));",
          "coverage": 0
        },
        "233": {
          "source": "",
          "coverage": ""
        },
        "234": {
          "source": "                /**",
          "coverage": ""
        },
        "235": {
          "source": "                 * If the field passed in a submission is an admin field, then return an error.",
          "coverage": ""
        },
        "236": {
          "source": "                 */",
          "coverage": ""
        },
        "237": {
          "source": "                if (adminFieldMap[formField.fieldId]) {",
          "coverage": 0
        },
        "238": {
          "source": "                    return cb(\"Submission \" + formField.fieldId + \" is an admin field. Admin fields cannot be passed to the rules engine.\");",
          "coverage": 0
        },
        "239": {
          "source": "                }",
          "coverage": ""
        },
        "240": {
          "source": "",
          "coverage": ""
        },
        "241": {
          "source": "                submissionFieldsMap[formField.fieldId] = formField;",
          "coverage": 0
        },
        "242": {
          "source": "                return cb();",
          "coverage": 0
        },
        "243": {
          "source": "            }, cb);",
          "coverage": ""
        },
        "244": {
          "source": "        }",
          "coverage": ""
        },
        "245": {
          "source": "",
          "coverage": ""
        },
        "246": {
          "source": "        function init(cb) {",
          "coverage": 0
        },
        "247": {
          "source": "            if (initialised) return cb();",
          "coverage": 0
        },
        "248": {
          "source": "            async.parallel([",
          "coverage": 0
        },
        "249": {
          "source": "                buildFieldMap,",
          "coverage": ""
        },
        "250": {
          "source": "                buildFieldRuleMaps,",
          "coverage": ""
        },
        "251": {
          "source": "                buildPageRuleMap",
          "coverage": ""
        },
        "252": {
          "source": "            ], function(err) {",
          "coverage": ""
        },
        "253": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "254": {
          "source": "                initialised = true;",
          "coverage": 0
        },
        "255": {
          "source": "                return cb();",
          "coverage": 0
        },
        "256": {
          "source": "            });",
          "coverage": ""
        },
        "257": {
          "source": "        }",
          "coverage": ""
        },
        "258": {
          "source": "",
          "coverage": ""
        },
        "259": {
          "source": "        function initSubmission(formSubmission, cb) {",
          "coverage": 0
        },
        "260": {
          "source": "            init(function(err) {",
          "coverage": 0
        },
        "261": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "262": {
          "source": "",
          "coverage": ""
        },
        "263": {
          "source": "                submission = formSubmission;",
          "coverage": 0
        },
        "264": {
          "source": "                buildSubmissionFieldsMap(cb);",
          "coverage": 0
        },
        "265": {
          "source": "            });",
          "coverage": ""
        },
        "266": {
          "source": "        }",
          "coverage": ""
        },
        "267": {
          "source": "",
          "coverage": ""
        },
        "268": {
          "source": "        function getPreviousFieldValues(submittedField, previousSubmission, cb) {",
          "coverage": 0
        },
        "269": {
          "source": "            if (previousSubmission &amp;&amp; previousSubmission.formFields) {",
          "coverage": 0
        },
        "270": {
          "source": "                async.filter(previousSubmission.formFields, function(formField, cb) {",
          "coverage": 0
        },
        "271": {
          "source": "                    return cb(formField.fieldId.toString() === submittedField.fieldId.toString());",
          "coverage": 0
        },
        "272": {
          "source": "                }, function(results) {",
          "coverage": ""
        },
        "273": {
          "source": "                    var previousFieldValues = null;",
          "coverage": 0
        },
        "274": {
          "source": "                    if (results &amp;&amp; results[0] &amp;&amp; results[0].fieldValues) {",
          "coverage": 0
        },
        "275": {
          "source": "                        previousFieldValues = results[0].fieldValues;",
          "coverage": 0
        },
        "276": {
          "source": "                    }",
          "coverage": ""
        },
        "277": {
          "source": "                    return cb(undefined, previousFieldValues);",
          "coverage": 0
        },
        "278": {
          "source": "                });",
          "coverage": ""
        },
        "279": {
          "source": "            } else {",
          "coverage": ""
        },
        "280": {
          "source": "                return cb();",
          "coverage": 0
        },
        "281": {
          "source": "            }",
          "coverage": ""
        },
        "282": {
          "source": "        }",
          "coverage": ""
        },
        "283": {
          "source": "",
          "coverage": ""
        },
        "284": {
          "source": "        function validateForm(submission, previousSubmission, cb) {",
          "coverage": 0
        },
        "285": {
          "source": "            if (\"function\" === typeof previousSubmission) {",
          "coverage": 0
        },
        "286": {
          "source": "                cb = previousSubmission;",
          "coverage": 0
        },
        "287": {
          "source": "                previousSubmission = null;",
          "coverage": 0
        },
        "288": {
          "source": "            }",
          "coverage": ""
        },
        "289": {
          "source": "            init(function(err) {",
          "coverage": 0
        },
        "290": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "291": {
          "source": "",
          "coverage": ""
        },
        "292": {
          "source": "                initSubmission(submission, function(err) {",
          "coverage": 0
        },
        "293": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "294": {
          "source": "",
          "coverage": ""
        },
        "295": {
          "source": "                    async.waterfall([",
          "coverage": 0
        },
        "296": {
          "source": "",
          "coverage": ""
        },
        "297": {
          "source": "                        function(cb) {",
          "coverage": ""
        },
        "298": {
          "source": "                            return cb(undefined, {",
          "coverage": 0
        },
        "299": {
          "source": "                                validation: {",
          "coverage": ""
        },
        "300": {
          "source": "                                    valid: true",
          "coverage": ""
        },
        "301": {
          "source": "                                }",
          "coverage": ""
        },
        "302": {
          "source": "                            }); // any invalid fields will set this to false",
          "coverage": ""
        },
        "303": {
          "source": "                        },",
          "coverage": ""
        },
        "304": {
          "source": "                        function(res, cb) {",
          "coverage": ""
        },
        "305": {
          "source": "                            validateSubmittedFields(res, previousSubmission, cb);",
          "coverage": 0
        },
        "306": {
          "source": "                        },",
          "coverage": ""
        },
        "307": {
          "source": "                        checkIfRequiredFieldsNotSubmitted",
          "coverage": ""
        },
        "308": {
          "source": "                    ], function(err, results) {",
          "coverage": ""
        },
        "309": {
          "source": "                        if (err) return cb(err);",
          "coverage": 0
        },
        "310": {
          "source": "",
          "coverage": ""
        },
        "311": {
          "source": "                        return cb(undefined, results);",
          "coverage": 0
        },
        "312": {
          "source": "                    });",
          "coverage": ""
        },
        "313": {
          "source": "                });",
          "coverage": ""
        },
        "314": {
          "source": "            });",
          "coverage": ""
        },
        "315": {
          "source": "        }",
          "coverage": ""
        },
        "316": {
          "source": "",
          "coverage": ""
        },
        "317": {
          "source": "        function validateSubmittedFields(res, previousSubmission, cb) {",
          "coverage": 0
        },
        "318": {
          "source": "            // for each field, call validateField",
          "coverage": ""
        },
        "319": {
          "source": "            async.each(submission.formFields, function(submittedField, callback) {",
          "coverage": 0
        },
        "320": {
          "source": "                var fieldID = submittedField.fieldId;",
          "coverage": 0
        },
        "321": {
          "source": "                var fieldDef = fieldMap[fieldID];",
          "coverage": 0
        },
        "322": {
          "source": "",
          "coverage": ""
        },
        "323": {
          "source": "                getPreviousFieldValues(submittedField, previousSubmission, function(err, previousFieldValues) {",
          "coverage": 0
        },
        "324": {
          "source": "                    if (err) return callback(err);",
          "coverage": 0
        },
        "325": {
          "source": "                    getFieldValidationStatus(submittedField, fieldDef, previousFieldValues, function(err, fieldRes) {",
          "coverage": 0
        },
        "326": {
          "source": "                        if (err) return callback(err);",
          "coverage": 0
        },
        "327": {
          "source": "",
          "coverage": ""
        },
        "328": {
          "source": "                        if (!fieldRes.valid) {",
          "coverage": 0
        },
        "329": {
          "source": "                            res.validation.valid = false; // indicate invalid form if any fields invalid",
          "coverage": 0
        },
        "330": {
          "source": "                            res.validation[fieldID] = fieldRes; // add invalid field info to validate form result",
          "coverage": 0
        },
        "331": {
          "source": "                        }",
          "coverage": ""
        },
        "332": {
          "source": "",
          "coverage": ""
        },
        "333": {
          "source": "                        return callback();",
          "coverage": 0
        },
        "334": {
          "source": "                    });",
          "coverage": ""
        },
        "335": {
          "source": "",
          "coverage": ""
        },
        "336": {
          "source": "                });",
          "coverage": ""
        },
        "337": {
          "source": "            }, function(err) {",
          "coverage": ""
        },
        "338": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "339": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "340": {
          "source": "                }",
          "coverage": ""
        },
        "341": {
          "source": "                return cb(undefined, res);",
          "coverage": 0
        },
        "342": {
          "source": "            });",
          "coverage": ""
        },
        "343": {
          "source": "        }",
          "coverage": ""
        },
        "344": {
          "source": "",
          "coverage": ""
        },
        "345": {
          "source": "        function checkIfRequiredFieldsNotSubmitted(res, cb) {",
          "coverage": 0
        },
        "346": {
          "source": "            async.each(Object.keys(submissionRequiredFieldsMap), function(requiredFieldId, cb) {",
          "coverage": 0
        },
        "347": {
          "source": "                var resField = {};",
          "coverage": 0
        },
        "348": {
          "source": "                if (!submissionRequiredFieldsMap[requiredFieldId].submitted) {",
          "coverage": 0
        },
        "349": {
          "source": "                    isFieldVisible(requiredFieldId, true, function(err, visible) {",
          "coverage": 0
        },
        "350": {
          "source": "                        if (err) return cb(err);",
          "coverage": 0
        },
        "351": {
          "source": "                        if (visible) { // we only care about required fields if they are visible",
          "coverage": 0
        },
        "352": {
          "source": "                            resField.fieldId = requiredFieldId;",
          "coverage": 0
        },
        "353": {
          "source": "                            resField.valid = false;",
          "coverage": 0
        },
        "354": {
          "source": "                            resField.fieldErrorMessage = [\"Required Field Not Submitted\"];",
          "coverage": 0
        },
        "355": {
          "source": "                            res.validation[requiredFieldId] = resField;",
          "coverage": 0
        },
        "356": {
          "source": "                            res.validation.valid = false;",
          "coverage": 0
        },
        "357": {
          "source": "                        }",
          "coverage": ""
        },
        "358": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "359": {
          "source": "                    });",
          "coverage": ""
        },
        "360": {
          "source": "                } else { // was included in submission",
          "coverage": ""
        },
        "361": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "362": {
          "source": "                }",
          "coverage": ""
        },
        "363": {
          "source": "            }, function(err) {",
          "coverage": ""
        },
        "364": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "365": {
          "source": "",
          "coverage": ""
        },
        "366": {
          "source": "                return cb(undefined, res);",
          "coverage": 0
        },
        "367": {
          "source": "            });",
          "coverage": ""
        },
        "368": {
          "source": "        }",
          "coverage": ""
        },
        "369": {
          "source": "",
          "coverage": ""
        },
        "370": {
          "source": "        /*",
          "coverage": ""
        },
        "371": {
          "source": "         * validate only field values on validation (no rules, no repeat checking)",
          "coverage": ""
        },
        "372": {
          "source": "         *     res:",
          "coverage": ""
        },
        "373": {
          "source": "         *     \"validation\":{",
          "coverage": ""
        },
        "374": {
          "source": "         *             \"fieldId\":{",
          "coverage": ""
        },
        "375": {
          "source": "         *                 \"fieldId\":\"\",",
          "coverage": ""
        },
        "376": {
          "source": "         *                 \"valid\":true,",
          "coverage": ""
        },
        "377": {
          "source": "         *                 \"errorMessages\":[",
          "coverage": ""
        },
        "378": {
          "source": "         *                     \"length should be 3 to 5\",",
          "coverage": ""
        },
        "379": {
          "source": "         *                     \"should not contain dammit\"",
          "coverage": ""
        },
        "380": {
          "source": "         *                 ]",
          "coverage": ""
        },
        "381": {
          "source": "         *             }",
          "coverage": ""
        },
        "382": {
          "source": "         *         }",
          "coverage": ""
        },
        "383": {
          "source": "         */",
          "coverage": ""
        },
        "384": {
          "source": "        function validateField(fieldId, submission, cb) {",
          "coverage": 0
        },
        "385": {
          "source": "            init(function(err) {",
          "coverage": 0
        },
        "386": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "387": {
          "source": "",
          "coverage": ""
        },
        "388": {
          "source": "                initSubmission(submission, function(err) {",
          "coverage": 0
        },
        "389": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "390": {
          "source": "",
          "coverage": ""
        },
        "391": {
          "source": "                    var submissionField = submissionFieldsMap[fieldId];",
          "coverage": 0
        },
        "392": {
          "source": "                    var fieldDef = fieldMap[fieldId];",
          "coverage": 0
        },
        "393": {
          "source": "                    getFieldValidationStatus(submissionField, fieldDef, null, function(err, res) {",
          "coverage": 0
        },
        "394": {
          "source": "                        if (err) return cb(err);",
          "coverage": 0
        },
        "395": {
          "source": "                        var ret = {",
          "coverage": 0
        },
        "396": {
          "source": "                            validation: {}",
          "coverage": ""
        },
        "397": {
          "source": "                        };",
          "coverage": ""
        },
        "398": {
          "source": "                        ret.validation[fieldId] = res;",
          "coverage": 0
        },
        "399": {
          "source": "                        return cb(undefined, ret);",
          "coverage": 0
        },
        "400": {
          "source": "                    });",
          "coverage": ""
        },
        "401": {
          "source": "                });",
          "coverage": ""
        },
        "402": {
          "source": "            });",
          "coverage": ""
        },
        "403": {
          "source": "        }",
          "coverage": ""
        },
        "404": {
          "source": "",
          "coverage": ""
        },
        "405": {
          "source": "        /*",
          "coverage": ""
        },
        "406": {
          "source": "         * validate only single field value (no rules, no repeat checking)",
          "coverage": ""
        },
        "407": {
          "source": "         * cb(err, result)",
          "coverage": ""
        },
        "408": {
          "source": "         * example of result:",
          "coverage": ""
        },
        "409": {
          "source": "         * \"validation\":{",
          "coverage": ""
        },
        "410": {
          "source": "         *         \"fieldId\":{",
          "coverage": ""
        },
        "411": {
          "source": "         *             \"fieldId\":\"\",",
          "coverage": ""
        },
        "412": {
          "source": "         *             \"valid\":true,",
          "coverage": ""
        },
        "413": {
          "source": "         *             \"errorMessages\":[",
          "coverage": ""
        },
        "414": {
          "source": "         *                 \"length should be 3 to 5\",",
          "coverage": ""
        },
        "415": {
          "source": "         *                 \"should not contain dammit\"",
          "coverage": ""
        },
        "416": {
          "source": "         *             ]",
          "coverage": ""
        },
        "417": {
          "source": "         *         }",
          "coverage": ""
        },
        "418": {
          "source": "         *     }",
          "coverage": ""
        },
        "419": {
          "source": "         */",
          "coverage": ""
        },
        "420": {
          "source": "        function validateFieldValue(fieldId, inputValue, valueIndex, cb) {",
          "coverage": 0
        },
        "421": {
          "source": "            if (\"function\" === typeof valueIndex) {",
          "coverage": 0
        },
        "422": {
          "source": "                cb = valueIndex;",
          "coverage": 0
        },
        "423": {
          "source": "                valueIndex = 0;",
          "coverage": 0
        },
        "424": {
          "source": "            }",
          "coverage": ""
        },
        "425": {
          "source": "",
          "coverage": ""
        },
        "426": {
          "source": "            init(function(err) {",
          "coverage": 0
        },
        "427": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "428": {
          "source": "                var fieldDefinition = fieldMap[fieldId];",
          "coverage": 0
        },
        "429": {
          "source": "",
          "coverage": ""
        },
        "430": {
          "source": "                var required = false;",
          "coverage": 0
        },
        "431": {
          "source": "                if (fieldDefinition.repeating &amp;&amp;",
          "coverage": 0
        },
        "432": {
          "source": "                    fieldDefinition.fieldOptions &amp;&amp;",
          "coverage": ""
        },
        "433": {
          "source": "                    fieldDefinition.fieldOptions.definition &amp;&amp;",
          "coverage": ""
        },
        "434": {
          "source": "                    fieldDefinition.fieldOptions.definition.minRepeat) {",
          "coverage": ""
        },
        "435": {
          "source": "                    required = (valueIndex &lt; fieldDefinition.fieldOptions.definition.minRepeat);",
          "coverage": 0
        },
        "436": {
          "source": "                } else {",
          "coverage": ""
        },
        "437": {
          "source": "                    required = fieldDefinition.required;",
          "coverage": 0
        },
        "438": {
          "source": "                }",
          "coverage": ""
        },
        "439": {
          "source": "",
          "coverage": ""
        },
        "440": {
          "source": "                var validation = (fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.validation) ? fieldDefinition.fieldOptions.validation : undefined;",
          "coverage": 0
        },
        "441": {
          "source": "",
          "coverage": ""
        },
        "442": {
          "source": "                if (validation &amp;&amp; false === validation.validateImmediately) {",
          "coverage": 0
        },
        "443": {
          "source": "                    var ret = {",
          "coverage": 0
        },
        "444": {
          "source": "                        validation: {}",
          "coverage": ""
        },
        "445": {
          "source": "                    };",
          "coverage": ""
        },
        "446": {
          "source": "                    ret.validation[fieldId] = {",
          "coverage": 0
        },
        "447": {
          "source": "                        \"valid\": true",
          "coverage": ""
        },
        "448": {
          "source": "                    };",
          "coverage": ""
        },
        "449": {
          "source": "                    return cb(undefined, ret);",
          "coverage": 0
        },
        "450": {
          "source": "                }",
          "coverage": ""
        },
        "451": {
          "source": "",
          "coverage": ""
        },
        "452": {
          "source": "                if (fieldEmpty(inputValue)) {",
          "coverage": 0
        },
        "453": {
          "source": "                    if (required) {",
          "coverage": 0
        },
        "454": {
          "source": "                        return formatResponse(\"No value specified for required input\", cb);",
          "coverage": 0
        },
        "455": {
          "source": "                    } else {",
          "coverage": ""
        },
        "456": {
          "source": "                        return formatResponse(undefined, cb); // optional field not supplied is valid",
          "coverage": 0
        },
        "457": {
          "source": "                    }",
          "coverage": ""
        },
        "458": {
          "source": "                }",
          "coverage": ""
        },
        "459": {
          "source": "",
          "coverage": ""
        },
        "460": {
          "source": "                // not empty need to validate",
          "coverage": ""
        },
        "461": {
          "source": "                getClientValidatorFunction(fieldDefinition.type, function(err, validator) {",
          "coverage": 0
        },
        "462": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "463": {
          "source": "",
          "coverage": ""
        },
        "464": {
          "source": "                    validator(inputValue, fieldDefinition, undefined, function(err) {",
          "coverage": 0
        },
        "465": {
          "source": "                        var message;",
          "coverage": 0
        },
        "466": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "467": {
          "source": "                            if (err.message) {",
          "coverage": 0
        },
        "468": {
          "source": "                                message = err.message;",
          "coverage": 0
        },
        "469": {
          "source": "                            } else {",
          "coverage": ""
        },
        "470": {
          "source": "                                message = \"Unknown error message\";",
          "coverage": 0
        },
        "471": {
          "source": "                            }",
          "coverage": ""
        },
        "472": {
          "source": "                        }",
          "coverage": ""
        },
        "473": {
          "source": "                        formatResponse(message, cb);",
          "coverage": 0
        },
        "474": {
          "source": "                    });",
          "coverage": ""
        },
        "475": {
          "source": "                });",
          "coverage": ""
        },
        "476": {
          "source": "            });",
          "coverage": ""
        },
        "477": {
          "source": "",
          "coverage": ""
        },
        "478": {
          "source": "            function formatResponse(msg, cb) {",
          "coverage": 0
        },
        "479": {
          "source": "                var messages = {",
          "coverage": 0
        },
        "480": {
          "source": "                    errorMessages: []",
          "coverage": ""
        },
        "481": {
          "source": "                };",
          "coverage": ""
        },
        "482": {
          "source": "                if (msg) {",
          "coverage": 0
        },
        "483": {
          "source": "                    messages.errorMessages.push(msg);",
          "coverage": 0
        },
        "484": {
          "source": "                }",
          "coverage": ""
        },
        "485": {
          "source": "                return createValidatorResponse(fieldId, messages, function(err, res) {",
          "coverage": 0
        },
        "486": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "487": {
          "source": "                    var ret = {",
          "coverage": 0
        },
        "488": {
          "source": "                        validation: {}",
          "coverage": ""
        },
        "489": {
          "source": "                    };",
          "coverage": ""
        },
        "490": {
          "source": "                    ret.validation[fieldId] = res;",
          "coverage": 0
        },
        "491": {
          "source": "                    return cb(undefined, ret);",
          "coverage": 0
        },
        "492": {
          "source": "                });",
          "coverage": ""
        },
        "493": {
          "source": "            }",
          "coverage": ""
        },
        "494": {
          "source": "        }",
          "coverage": ""
        },
        "495": {
          "source": "",
          "coverage": ""
        },
        "496": {
          "source": "        function createValidatorResponse(fieldId, messages, cb) {",
          "coverage": 0
        },
        "497": {
          "source": "            // intentionally not checking err here, used further down to get validation errors",
          "coverage": ""
        },
        "498": {
          "source": "            var res = {};",
          "coverage": 0
        },
        "499": {
          "source": "            res.fieldId = fieldId;",
          "coverage": 0
        },
        "500": {
          "source": "            res.errorMessages = messages.errorMessages || [];",
          "coverage": 0
        },
        "501": {
          "source": "            res.fieldErrorMessage = messages.fieldErrorMessage || [];",
          "coverage": 0
        },
        "502": {
          "source": "            async.some(res.errorMessages, function(item, cb) {",
          "coverage": 0
        },
        "503": {
          "source": "                return cb(item !== null);",
          "coverage": 0
        },
        "504": {
          "source": "            }, function(someErrors) {",
          "coverage": ""
        },
        "505": {
          "source": "                res.valid = !someErrors &amp;&amp; (res.fieldErrorMessage.length &lt; 1);",
          "coverage": 0
        },
        "506": {
          "source": "",
          "coverage": ""
        },
        "507": {
          "source": "                return cb(undefined, res);",
          "coverage": 0
        },
        "508": {
          "source": "            });",
          "coverage": ""
        },
        "509": {
          "source": "        }",
          "coverage": ""
        },
        "510": {
          "source": "",
          "coverage": ""
        },
        "511": {
          "source": "        function getFieldValidationStatus(submittedField, fieldDef, previousFieldValues, cb) {",
          "coverage": 0
        },
        "512": {
          "source": "            isFieldVisible(fieldDef._id, true, function(err, visible) {",
          "coverage": 0
        },
        "513": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "514": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "515": {
          "source": "                }",
          "coverage": ""
        },
        "516": {
          "source": "                validateFieldInternal(submittedField, fieldDef, previousFieldValues, visible, function(err, messages) {",
          "coverage": 0
        },
        "517": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "518": {
          "source": "                    createValidatorResponse(submittedField.fieldId, messages, cb);",
          "coverage": 0
        },
        "519": {
          "source": "                });",
          "coverage": ""
        },
        "520": {
          "source": "            });",
          "coverage": ""
        },
        "521": {
          "source": "        }",
          "coverage": ""
        },
        "522": {
          "source": "",
          "coverage": ""
        },
        "523": {
          "source": "        function getMapFunction(key, map, cb) {",
          "coverage": 0
        },
        "524": {
          "source": "            var validator = map[key];",
          "coverage": 0
        },
        "525": {
          "source": "            if (!validator) {",
          "coverage": 0
        },
        "526": {
          "source": "                return cb(new Error(\"Invalid Field Type \" + key));",
          "coverage": 0
        },
        "527": {
          "source": "            }",
          "coverage": ""
        },
        "528": {
          "source": "",
          "coverage": ""
        },
        "529": {
          "source": "            return cb(undefined, validator);",
          "coverage": 0
        },
        "530": {
          "source": "        }",
          "coverage": ""
        },
        "531": {
          "source": "",
          "coverage": ""
        },
        "532": {
          "source": "        function getValidatorFunction(fieldType, cb) {",
          "coverage": 0
        },
        "533": {
          "source": "            return getMapFunction(fieldType, validatorsMap, cb);",
          "coverage": 0
        },
        "534": {
          "source": "        }",
          "coverage": ""
        },
        "535": {
          "source": "",
          "coverage": ""
        },
        "536": {
          "source": "        function getClientValidatorFunction(fieldType, cb) {",
          "coverage": 0
        },
        "537": {
          "source": "            return getMapFunction(fieldType, validatorsClientMap, cb);",
          "coverage": 0
        },
        "538": {
          "source": "        }",
          "coverage": ""
        },
        "539": {
          "source": "",
          "coverage": ""
        },
        "540": {
          "source": "        function fieldEmpty(fieldValue) {",
          "coverage": 0
        },
        "541": {
          "source": "            return ('undefined' === typeof fieldValue || null === fieldValue || \"\" === fieldValue); // empty string also regarded as not specified",
          "coverage": 0
        },
        "542": {
          "source": "        }",
          "coverage": ""
        },
        "543": {
          "source": "",
          "coverage": ""
        },
        "544": {
          "source": "        function validateFieldInternal(submittedField, fieldDef, previousFieldValues, visible, cb) {",
          "coverage": 0
        },
        "545": {
          "source": "            previousFieldValues = previousFieldValues || null;",
          "coverage": 0
        },
        "546": {
          "source": "            countSubmittedValues(submittedField, function(err, numSubmittedValues) {",
          "coverage": 0
        },
        "547": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "548": {
          "source": "                async.series({",
          "coverage": 0
        },
        "549": {
          "source": "                    valuesSubmitted: async.apply(checkValueSubmitted, submittedField, fieldDef, visible),",
          "coverage": ""
        },
        "550": {
          "source": "                    repeats: async.apply(checkRepeat, numSubmittedValues, fieldDef, visible),",
          "coverage": ""
        },
        "551": {
          "source": "                    values: async.apply(checkValues, submittedField, fieldDef, previousFieldValues)",
          "coverage": ""
        },
        "552": {
          "source": "                }, function(err, results) {",
          "coverage": ""
        },
        "553": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "554": {
          "source": "",
          "coverage": ""
        },
        "555": {
          "source": "                    var fieldErrorMessages = [];",
          "coverage": 0
        },
        "556": {
          "source": "                    if (results.valuesSubmitted) {",
          "coverage": 0
        },
        "557": {
          "source": "                        fieldErrorMessages.push(results.valuesSubmitted);",
          "coverage": 0
        },
        "558": {
          "source": "                    }",
          "coverage": ""
        },
        "559": {
          "source": "                    if (results.repeats) {",
          "coverage": 0
        },
        "560": {
          "source": "                        fieldErrorMessages.push(results.repeats);",
          "coverage": 0
        },
        "561": {
          "source": "                    }",
          "coverage": ""
        },
        "562": {
          "source": "                    return cb(undefined, {",
          "coverage": 0
        },
        "563": {
          "source": "                        fieldErrorMessage: fieldErrorMessages,",
          "coverage": ""
        },
        "564": {
          "source": "                        errorMessages: results.values",
          "coverage": ""
        },
        "565": {
          "source": "                    });",
          "coverage": ""
        },
        "566": {
          "source": "                });",
          "coverage": ""
        },
        "567": {
          "source": "            });",
          "coverage": ""
        },
        "568": {
          "source": "",
          "coverage": ""
        },
        "569": {
          "source": "            return; // just functions below this",
          "coverage": 0
        },
        "570": {
          "source": "",
          "coverage": ""
        },
        "571": {
          "source": "            function checkValueSubmitted(submittedField, fieldDefinition, visible, cb) {",
          "coverage": 0
        },
        "572": {
          "source": "                if (!fieldDefinition.required) return cb(undefined, null);",
          "coverage": 0
        },
        "573": {
          "source": "",
          "coverage": ""
        },
        "574": {
          "source": "                var valueSubmitted = submittedField &amp;&amp; submittedField.fieldValues &amp;&amp; (submittedField.fieldValues.length &gt; 0);",
          "coverage": 0
        },
        "575": {
          "source": "                //No value submitted is only an error if the field is visible.",
          "coverage": ""
        },
        "576": {
          "source": "                if (!valueSubmitted &amp;&amp; visible) {",
          "coverage": 0
        },
        "577": {
          "source": "                    return cb(undefined, \"No value submitted for field \" + fieldDefinition.name);",
          "coverage": 0
        },
        "578": {
          "source": "                }",
          "coverage": ""
        },
        "579": {
          "source": "                return cb(undefined, null);",
          "coverage": 0
        },
        "580": {
          "source": "",
          "coverage": ""
        },
        "581": {
          "source": "            }",
          "coverage": ""
        },
        "582": {
          "source": "",
          "coverage": ""
        },
        "583": {
          "source": "            function countSubmittedValues(submittedField, cb) {",
          "coverage": 0
        },
        "584": {
          "source": "                var numSubmittedValues = 0;",
          "coverage": 0
        },
        "585": {
          "source": "                if (submittedField &amp;&amp; submittedField.fieldValues &amp;&amp; submittedField.fieldValues.length &gt; 0) {",
          "coverage": 0
        },
        "586": {
          "source": "                    for (var i = 0; i &lt; submittedField.fieldValues.length; i += 1) {",
          "coverage": 0
        },
        "587": {
          "source": "                        if (submittedField.fieldValues[i]) {",
          "coverage": 0
        },
        "588": {
          "source": "                            numSubmittedValues += 1;",
          "coverage": 0
        },
        "589": {
          "source": "                        }",
          "coverage": ""
        },
        "590": {
          "source": "                    }",
          "coverage": ""
        },
        "591": {
          "source": "                }",
          "coverage": ""
        },
        "592": {
          "source": "                return cb(undefined, numSubmittedValues);",
          "coverage": 0
        },
        "593": {
          "source": "            }",
          "coverage": ""
        },
        "594": {
          "source": "",
          "coverage": ""
        },
        "595": {
          "source": "            function checkRepeat(numSubmittedValues, fieldDefinition, visible, cb) {",
          "coverage": 0
        },
        "596": {
          "source": "                //If the field is not visible, then checking the repeating values of the field is not required",
          "coverage": ""
        },
        "597": {
          "source": "                if (!visible) {",
          "coverage": 0
        },
        "598": {
          "source": "                    return cb(undefined, null);",
          "coverage": 0
        },
        "599": {
          "source": "                }",
          "coverage": ""
        },
        "600": {
          "source": "",
          "coverage": ""
        },
        "601": {
          "source": "                if (fieldDefinition.repeating &amp;&amp; fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.definition) {",
          "coverage": 0
        },
        "602": {
          "source": "                    if (fieldDefinition.fieldOptions.definition.minRepeat) {",
          "coverage": 0
        },
        "603": {
          "source": "                        if (numSubmittedValues &lt; fieldDefinition.fieldOptions.definition.minRepeat) {",
          "coverage": 0
        },
        "604": {
          "source": "                            return cb(undefined, \"Expected min of \" + fieldDefinition.fieldOptions.definition.minRepeat + \" values for field \" + fieldDefinition.name + \" but got \" + numSubmittedValues);",
          "coverage": 0
        },
        "605": {
          "source": "                        }",
          "coverage": ""
        },
        "606": {
          "source": "                    }",
          "coverage": ""
        },
        "607": {
          "source": "",
          "coverage": ""
        },
        "608": {
          "source": "                    if (fieldDefinition.fieldOptions.definition.maxRepeat) {",
          "coverage": 0
        },
        "609": {
          "source": "                        if (numSubmittedValues &gt; fieldDefinition.fieldOptions.definition.maxRepeat) {",
          "coverage": 0
        },
        "610": {
          "source": "                            return cb(undefined, \"Expected max of \" + fieldDefinition.fieldOptions.definition.maxRepeat + \" values for field \" + fieldDefinition.name + \" but got \" + numSubmittedValues);",
          "coverage": 0
        },
        "611": {
          "source": "                        }",
          "coverage": ""
        },
        "612": {
          "source": "                    }",
          "coverage": ""
        },
        "613": {
          "source": "                } else {",
          "coverage": ""
        },
        "614": {
          "source": "                    if (numSubmittedValues &gt; 1) {",
          "coverage": 0
        },
        "615": {
          "source": "                        return cb(undefined, \"Should not have multiple values for non-repeating field\");",
          "coverage": 0
        },
        "616": {
          "source": "                    }",
          "coverage": ""
        },
        "617": {
          "source": "                }",
          "coverage": ""
        },
        "618": {
          "source": "",
          "coverage": ""
        },
        "619": {
          "source": "                return cb(undefined, null);",
          "coverage": 0
        },
        "620": {
          "source": "            }",
          "coverage": ""
        },
        "621": {
          "source": "",
          "coverage": ""
        },
        "622": {
          "source": "            function checkValues(submittedField, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "623": {
          "source": "                getValidatorFunction(fieldDefinition.type, function(err, validator) {",
          "coverage": 0
        },
        "624": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "625": {
          "source": "                    async.map(submittedField.fieldValues, function(fieldValue, cb) {",
          "coverage": 0
        },
        "626": {
          "source": "                        if (fieldEmpty(fieldValue)) {",
          "coverage": 0
        },
        "627": {
          "source": "                            return cb(undefined, null);",
          "coverage": 0
        },
        "628": {
          "source": "                        } else {",
          "coverage": ""
        },
        "629": {
          "source": "                            validator(fieldValue, fieldDefinition, previousFieldValues, function(validationError) {",
          "coverage": 0
        },
        "630": {
          "source": "                                var errorMessage;",
          "coverage": 0
        },
        "631": {
          "source": "                                if (validationError) {",
          "coverage": 0
        },
        "632": {
          "source": "                                    errorMessage = validationError.message || \"Error during validation of field\";",
          "coverage": 0
        },
        "633": {
          "source": "                                } else {",
          "coverage": ""
        },
        "634": {
          "source": "                                    errorMessage = null;",
          "coverage": 0
        },
        "635": {
          "source": "                                }",
          "coverage": ""
        },
        "636": {
          "source": "",
          "coverage": ""
        },
        "637": {
          "source": "                                if (submissionRequiredFieldsMap[fieldDefinition._id]) { // set to true if at least one value",
          "coverage": 0
        },
        "638": {
          "source": "                                    submissionRequiredFieldsMap[fieldDefinition._id].submitted = true;",
          "coverage": 0
        },
        "639": {
          "source": "                                }",
          "coverage": ""
        },
        "640": {
          "source": "",
          "coverage": ""
        },
        "641": {
          "source": "                                return cb(undefined, errorMessage);",
          "coverage": 0
        },
        "642": {
          "source": "                            });",
          "coverage": ""
        },
        "643": {
          "source": "                        }",
          "coverage": ""
        },
        "644": {
          "source": "                    }, function(err, results) {",
          "coverage": ""
        },
        "645": {
          "source": "                        if (err) return cb(err);",
          "coverage": 0
        },
        "646": {
          "source": "",
          "coverage": ""
        },
        "647": {
          "source": "                        return cb(undefined, results);",
          "coverage": 0
        },
        "648": {
          "source": "                    });",
          "coverage": ""
        },
        "649": {
          "source": "                });",
          "coverage": ""
        },
        "650": {
          "source": "            }",
          "coverage": ""
        },
        "651": {
          "source": "        }",
          "coverage": ""
        },
        "652": {
          "source": "",
          "coverage": ""
        },
        "653": {
          "source": "        function convertSimpleFormatToRegex(field_format_string) {",
          "coverage": 0
        },
        "654": {
          "source": "            var regex = \"^\";",
          "coverage": 0
        },
        "655": {
          "source": "            var C = \"c\".charCodeAt(0);",
          "coverage": 0
        },
        "656": {
          "source": "            var N = \"n\".charCodeAt(0);",
          "coverage": 0
        },
        "657": {
          "source": "",
          "coverage": ""
        },
        "658": {
          "source": "            var i;",
          "coverage": 0
        },
        "659": {
          "source": "            var ch;",
          "coverage": 0
        },
        "660": {
          "source": "            var match;",
          "coverage": 0
        },
        "661": {
          "source": "            var len = field_format_string.length;",
          "coverage": 0
        },
        "662": {
          "source": "            for (i = 0; i &lt; len; i += 1) {",
          "coverage": 0
        },
        "663": {
          "source": "                ch = field_format_string.charCodeAt(i);",
          "coverage": 0
        },
        "664": {
          "source": "                switch (ch) {",
          "coverage": 0
        },
        "665": {
          "source": "                    case C:",
          "coverage": ""
        },
        "666": {
          "source": "                        match = \"[a-zA-Z0-9]\";",
          "coverage": 0
        },
        "667": {
          "source": "                        break;",
          "coverage": 0
        },
        "668": {
          "source": "                    case N:",
          "coverage": ""
        },
        "669": {
          "source": "                        match = \"[0-9]\";",
          "coverage": 0
        },
        "670": {
          "source": "                        break;",
          "coverage": 0
        },
        "671": {
          "source": "                    default:",
          "coverage": ""
        },
        "672": {
          "source": "                        var num = ch.toString(16).toUpperCase();",
          "coverage": 0
        },
        "673": {
          "source": "                        match = \"\\\\u\" + (\"0000\" + num).substr(-4);",
          "coverage": 0
        },
        "674": {
          "source": "                        break;",
          "coverage": 0
        },
        "675": {
          "source": "                }",
          "coverage": ""
        },
        "676": {
          "source": "                regex += match;",
          "coverage": 0
        },
        "677": {
          "source": "            }",
          "coverage": ""
        },
        "678": {
          "source": "            return regex + \"$\";",
          "coverage": 0
        },
        "679": {
          "source": "        }",
          "coverage": ""
        },
        "680": {
          "source": "",
          "coverage": ""
        },
        "681": {
          "source": "        function validFormatRegex(fieldValue, field_format_string) {",
          "coverage": 0
        },
        "682": {
          "source": "            var pattern = new RegExp(field_format_string);",
          "coverage": 0
        },
        "683": {
          "source": "            return pattern.test(fieldValue);",
          "coverage": 0
        },
        "684": {
          "source": "        }",
          "coverage": ""
        },
        "685": {
          "source": "",
          "coverage": ""
        },
        "686": {
          "source": "        function validFormat(fieldValue, field_format_mode, field_format_string) {",
          "coverage": 0
        },
        "687": {
          "source": "            var regex;",
          "coverage": 0
        },
        "688": {
          "source": "            if (\"simple\" === field_format_mode) {",
          "coverage": 0
        },
        "689": {
          "source": "                regex = convertSimpleFormatToRegex(field_format_string);",
          "coverage": 0
        },
        "690": {
          "source": "            } else if (\"regex\" === field_format_mode) {",
          "coverage": 0
        },
        "691": {
          "source": "                regex = field_format_string;",
          "coverage": 0
        },
        "692": {
          "source": "            } else { // should never be anything else, but if it is then default to simple format",
          "coverage": ""
        },
        "693": {
          "source": "                regex = convertSimpleFormatToRegex(field_format_string);",
          "coverage": 0
        },
        "694": {
          "source": "            }",
          "coverage": ""
        },
        "695": {
          "source": "",
          "coverage": ""
        },
        "696": {
          "source": "            return validFormatRegex(fieldValue, regex);",
          "coverage": 0
        },
        "697": {
          "source": "        }",
          "coverage": ""
        },
        "698": {
          "source": "",
          "coverage": ""
        },
        "699": {
          "source": "        function validatorString(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "700": {
          "source": "            if (typeof fieldValue !== \"string\") {",
          "coverage": 0
        },
        "701": {
          "source": "                return cb(new Error(\"Expected string but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "702": {
          "source": "            }",
          "coverage": ""
        },
        "703": {
          "source": "",
          "coverage": ""
        },
        "704": {
          "source": "            var validation = {};",
          "coverage": 0
        },
        "705": {
          "source": "            if (fieldDefinition &amp;&amp; fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.validation) {",
          "coverage": 0
        },
        "706": {
          "source": "                validation = fieldDefinition.fieldOptions.validation;",
          "coverage": 0
        },
        "707": {
          "source": "            }",
          "coverage": ""
        },
        "708": {
          "source": "",
          "coverage": ""
        },
        "709": {
          "source": "            var field_format_mode = validation.field_format_mode || \"\";",
          "coverage": 0
        },
        "710": {
          "source": "            field_format_mode = field_format_mode.trim();",
          "coverage": 0
        },
        "711": {
          "source": "            var field_format_string = validation.field_format_string || \"\";",
          "coverage": 0
        },
        "712": {
          "source": "            field_format_string = field_format_string.trim();",
          "coverage": 0
        },
        "713": {
          "source": "",
          "coverage": ""
        },
        "714": {
          "source": "            if (field_format_string &amp;&amp; (field_format_string.length &gt; 0) &amp;&amp; field_format_mode &amp;&amp; (field_format_mode.length &gt; 0)) {",
          "coverage": 0
        },
        "715": {
          "source": "                if (!validFormat(fieldValue, field_format_mode, field_format_string)) {",
          "coverage": 0
        },
        "716": {
          "source": "                    return cb(new Error(\"field value in incorrect format, expected format: \" + field_format_string + \" but submission value is: \" + fieldValue));",
          "coverage": 0
        },
        "717": {
          "source": "                }",
          "coverage": ""
        },
        "718": {
          "source": "            }",
          "coverage": ""
        },
        "719": {
          "source": "",
          "coverage": ""
        },
        "720": {
          "source": "            if (fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.validation &amp;&amp; fieldDefinition.fieldOptions.validation.min) {",
          "coverage": 0
        },
        "721": {
          "source": "                if (fieldValue.length &lt; fieldDefinition.fieldOptions.validation.min) {",
          "coverage": 0
        },
        "722": {
          "source": "                    return cb(new Error(\"Expected minimum string length of \" + fieldDefinition.fieldOptions.validation.min + \" but submission is \" + fieldValue.length + \". Submitted val: \" + fieldValue));",
          "coverage": 0
        },
        "723": {
          "source": "                }",
          "coverage": ""
        },
        "724": {
          "source": "            }",
          "coverage": ""
        },
        "725": {
          "source": "",
          "coverage": ""
        },
        "726": {
          "source": "            if (fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.validation &amp;&amp; fieldDefinition.fieldOptions.validation.max) {",
          "coverage": 0
        },
        "727": {
          "source": "                if (fieldValue.length &gt; fieldDefinition.fieldOptions.validation.max) {",
          "coverage": 0
        },
        "728": {
          "source": "                    return cb(new Error(\"Expected maximum string length of \" + fieldDefinition.fieldOptions.validation.max + \" but submission is \" + fieldValue.length + \". Submitted val: \" + fieldValue));",
          "coverage": 0
        },
        "729": {
          "source": "                }",
          "coverage": ""
        },
        "730": {
          "source": "            }",
          "coverage": ""
        },
        "731": {
          "source": "",
          "coverage": ""
        },
        "732": {
          "source": "            return cb();",
          "coverage": 0
        },
        "733": {
          "source": "        }",
          "coverage": ""
        },
        "734": {
          "source": "",
          "coverage": ""
        },
        "735": {
          "source": "        function validatorNumericString(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "736": {
          "source": "            var testVal = (fieldValue - 0); // coerce to number (or NaN)",
          "coverage": 0
        },
        "737": {
          "source": "            /*jshint eqeqeq:false */",
          "coverage": ""
        },
        "738": {
          "source": "            var numeric = (testVal == fieldValue); // testVal co-erced to numeric above, so numeric comparison and NaN != NaN",
          "coverage": 0
        },
        "739": {
          "source": "",
          "coverage": ""
        },
        "740": {
          "source": "            if (!numeric) {",
          "coverage": 0
        },
        "741": {
          "source": "                return cb(new Error(\"Expected numeric but got: \" + fieldValue));",
          "coverage": 0
        },
        "742": {
          "source": "            }",
          "coverage": ""
        },
        "743": {
          "source": "",
          "coverage": ""
        },
        "744": {
          "source": "            return validatorNumber(testVal, fieldDefinition, previousFieldValues, cb);",
          "coverage": 0
        },
        "745": {
          "source": "        }",
          "coverage": ""
        },
        "746": {
          "source": "",
          "coverage": ""
        },
        "747": {
          "source": "        function validatorNumber(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "748": {
          "source": "            if (typeof fieldValue !== \"number\") {",
          "coverage": 0
        },
        "749": {
          "source": "                return cb(new Error(\"Expected number but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "750": {
          "source": "            }",
          "coverage": ""
        },
        "751": {
          "source": "",
          "coverage": ""
        },
        "752": {
          "source": "            if (fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.validation &amp;&amp; fieldDefinition.fieldOptions.validation.min) {",
          "coverage": 0
        },
        "753": {
          "source": "                if (fieldValue &lt; fieldDefinition.fieldOptions.validation.min) {",
          "coverage": 0
        },
        "754": {
          "source": "                    return cb(new Error(\"Expected minimum Number \" + fieldDefinition.fieldOptions.validation.min + \" but submission is \" + fieldValue + \". Submitted number: \" + fieldValue));",
          "coverage": 0
        },
        "755": {
          "source": "                }",
          "coverage": ""
        },
        "756": {
          "source": "            }",
          "coverage": ""
        },
        "757": {
          "source": "",
          "coverage": ""
        },
        "758": {
          "source": "            if (fieldDefinition.fieldOptions.validation.max) {",
          "coverage": 0
        },
        "759": {
          "source": "                if (fieldValue &gt; fieldDefinition.fieldOptions.validation.max) {",
          "coverage": 0
        },
        "760": {
          "source": "                    return cb(new Error(\"Expected maximum Number \" + fieldDefinition.fieldOptions.validation.max + \" but submission is \" + fieldValue + \". Submitted number: \" + fieldValue));",
          "coverage": 0
        },
        "761": {
          "source": "                }",
          "coverage": ""
        },
        "762": {
          "source": "            }",
          "coverage": ""
        },
        "763": {
          "source": "",
          "coverage": ""
        },
        "764": {
          "source": "            return cb();",
          "coverage": 0
        },
        "765": {
          "source": "        }",
          "coverage": ""
        },
        "766": {
          "source": "",
          "coverage": ""
        },
        "767": {
          "source": "        function validatorEmail(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "768": {
          "source": "            if (typeof(fieldValue) !== \"string\") {",
          "coverage": 0
        },
        "769": {
          "source": "                return cb(new Error(\"Expected string but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "770": {
          "source": "            }",
          "coverage": ""
        },
        "771": {
          "source": "",
          "coverage": ""
        },
        "772": {
          "source": "            if (fieldValue.match(/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+\\.[a-zA-Z]{2,4}/g) === null) {",
          "coverage": 0
        },
        "773": {
          "source": "                return cb(new Error(\"Invalid email address format: \" + fieldValue));",
          "coverage": 0
        },
        "774": {
          "source": "            } else {",
          "coverage": ""
        },
        "775": {
          "source": "                return cb();",
          "coverage": 0
        },
        "776": {
          "source": "            }",
          "coverage": ""
        },
        "777": {
          "source": "        }",
          "coverage": ""
        },
        "778": {
          "source": "",
          "coverage": ""
        },
        "779": {
          "source": "        function validatorDropDown(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "780": {
          "source": "            if (typeof(fieldValue) !== \"string\") {",
          "coverage": 0
        },
        "781": {
          "source": "                return cb(new Error(\"Expected submission to be string but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "782": {
          "source": "            }",
          "coverage": ""
        },
        "783": {
          "source": "",
          "coverage": ""
        },
        "784": {
          "source": "            //Check value exists in the field definition",
          "coverage": ""
        },
        "785": {
          "source": "            if (!fieldDefinition.fieldOptions.definition.options) {",
          "coverage": 0
        },
        "786": {
          "source": "                return cb(new Error(\"No options exist for field \" + fieldDefinition.name));",
          "coverage": 0
        },
        "787": {
          "source": "            }",
          "coverage": ""
        },
        "788": {
          "source": "",
          "coverage": ""
        },
        "789": {
          "source": "            async.some(fieldDefinition.fieldOptions.definition.options, function(dropdownOption, cb) {",
          "coverage": 0
        },
        "790": {
          "source": "                return cb(dropdownOption.label === fieldValue);",
          "coverage": 0
        },
        "791": {
          "source": "            }, function(found) {",
          "coverage": ""
        },
        "792": {
          "source": "                if (!found) {",
          "coverage": 0
        },
        "793": {
          "source": "                    return cb(new Error(\"Invalid option specified: \" + fieldValue));",
          "coverage": 0
        },
        "794": {
          "source": "                } else {",
          "coverage": ""
        },
        "795": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "796": {
          "source": "                }",
          "coverage": ""
        },
        "797": {
          "source": "            });",
          "coverage": ""
        },
        "798": {
          "source": "        }",
          "coverage": ""
        },
        "799": {
          "source": "",
          "coverage": ""
        },
        "800": {
          "source": "        function validatorCheckboxes(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "801": {
          "source": "            var minVal;",
          "coverage": 0
        },
        "802": {
          "source": "            if (fieldDefinition &amp;&amp; fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.validation) {",
          "coverage": 0
        },
        "803": {
          "source": "                minVal = fieldDefinition.fieldOptions.validation.min;",
          "coverage": 0
        },
        "804": {
          "source": "            }",
          "coverage": ""
        },
        "805": {
          "source": "            var maxVal;",
          "coverage": 0
        },
        "806": {
          "source": "            if (fieldDefinition &amp;&amp; fieldDefinition.fieldOptions &amp;&amp; fieldDefinition.fieldOptions.validation) {",
          "coverage": 0
        },
        "807": {
          "source": "                maxVal = fieldDefinition.fieldOptions.validation.max;",
          "coverage": 0
        },
        "808": {
          "source": "            }",
          "coverage": ""
        },
        "809": {
          "source": "",
          "coverage": ""
        },
        "810": {
          "source": "            if (minVal) {",
          "coverage": 0
        },
        "811": {
          "source": "                if (fieldValue.selections === null || fieldValue.selections === undefined || fieldValue.selections.length &lt; minVal) {",
          "coverage": 0
        },
        "812": {
          "source": "                    var len;",
          "coverage": 0
        },
        "813": {
          "source": "                    if (fieldValue.selections) {",
          "coverage": 0
        },
        "814": {
          "source": "                        len = fieldValue.selections.length;",
          "coverage": 0
        },
        "815": {
          "source": "                    }",
          "coverage": ""
        },
        "816": {
          "source": "                    return cb(new Error(\"Expected a minimum number of selections \" + minVal + \" but got \" + len));",
          "coverage": 0
        },
        "817": {
          "source": "                }",
          "coverage": ""
        },
        "818": {
          "source": "            }",
          "coverage": ""
        },
        "819": {
          "source": "",
          "coverage": ""
        },
        "820": {
          "source": "            if (maxVal) {",
          "coverage": 0
        },
        "821": {
          "source": "                if (fieldValue.selections) {",
          "coverage": 0
        },
        "822": {
          "source": "                    if (fieldValue.selections.length &gt; maxVal) {",
          "coverage": 0
        },
        "823": {
          "source": "                        return cb(new Error(\"Expected a maximum number of selections \" + maxVal + \" but got \" + fieldValue.selections.length));",
          "coverage": 0
        },
        "824": {
          "source": "                    }",
          "coverage": ""
        },
        "825": {
          "source": "                }",
          "coverage": ""
        },
        "826": {
          "source": "            }",
          "coverage": ""
        },
        "827": {
          "source": "",
          "coverage": ""
        },
        "828": {
          "source": "            var optionsInCheckbox = [];",
          "coverage": 0
        },
        "829": {
          "source": "",
          "coverage": ""
        },
        "830": {
          "source": "            async.eachSeries(fieldDefinition.fieldOptions.definition.options, function(choice, cb) {",
          "coverage": 0
        },
        "831": {
          "source": "                for (var choiceName in choice) {",
          "coverage": 0
        },
        "832": {
          "source": "                    optionsInCheckbox.push(choice[choiceName]);",
          "coverage": 0
        },
        "833": {
          "source": "                }",
          "coverage": ""
        },
        "834": {
          "source": "                return cb();",
          "coverage": 0
        },
        "835": {
          "source": "            }, function() {",
          "coverage": ""
        },
        "836": {
          "source": "                async.eachSeries(fieldValue.selections, function(selection, cb) {",
          "coverage": 0
        },
        "837": {
          "source": "                    if (typeof(selection) !== \"string\") {",
          "coverage": 0
        },
        "838": {
          "source": "                        return cb(new Error(\"Expected checkbox submission to be string but got \" + typeof(selection)));",
          "coverage": 0
        },
        "839": {
          "source": "                    }",
          "coverage": ""
        },
        "840": {
          "source": "",
          "coverage": ""
        },
        "841": {
          "source": "                    if (optionsInCheckbox.indexOf(selection) === -1) {",
          "coverage": 0
        },
        "842": {
          "source": "                        return cb(new Error(\"Checkbox Option \" + selection + \" does not exist in the field.\"));",
          "coverage": 0
        },
        "843": {
          "source": "                    }",
          "coverage": ""
        },
        "844": {
          "source": "",
          "coverage": ""
        },
        "845": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "846": {
          "source": "                }, cb);",
          "coverage": ""
        },
        "847": {
          "source": "            });",
          "coverage": ""
        },
        "848": {
          "source": "        }",
          "coverage": ""
        },
        "849": {
          "source": "",
          "coverage": ""
        },
        "850": {
          "source": "        function validatorLocationMap(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "851": {
          "source": "            if (fieldValue.lat &amp;&amp; fieldValue[\"long\"]) {",
          "coverage": 0
        },
        "852": {
          "source": "                if (isNaN(parseFloat(fieldValue.lat)) || isNaN(parseFloat(fieldValue[\"long\"]))) {",
          "coverage": 0
        },
        "853": {
          "source": "                    return cb(new Error(\"Invalid latitude and longitude values\"));",
          "coverage": 0
        },
        "854": {
          "source": "                } else {",
          "coverage": ""
        },
        "855": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "856": {
          "source": "                }",
          "coverage": ""
        },
        "857": {
          "source": "            } else {",
          "coverage": ""
        },
        "858": {
          "source": "                return cb(new Error(\"Invalid object for locationMap submission\"));",
          "coverage": 0
        },
        "859": {
          "source": "            }",
          "coverage": ""
        },
        "860": {
          "source": "        }",
          "coverage": ""
        },
        "861": {
          "source": "",
          "coverage": ""
        },
        "862": {
          "source": "",
          "coverage": ""
        },
        "863": {
          "source": "        function validatorLocation(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "864": {
          "source": "            if (fieldDefinition.fieldOptions.definition.locationUnit === \"latlong\") {",
          "coverage": 0
        },
        "865": {
          "source": "                if (fieldValue.lat &amp;&amp; fieldValue[\"long\"]) {",
          "coverage": 0
        },
        "866": {
          "source": "                    if (isNaN(parseFloat(fieldValue.lat)) || isNaN(parseFloat(fieldValue[\"long\"]))) {",
          "coverage": 0
        },
        "867": {
          "source": "                        return cb(new Error(\"Invalid latitude and longitude values\"));",
          "coverage": 0
        },
        "868": {
          "source": "                    } else {",
          "coverage": ""
        },
        "869": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "870": {
          "source": "                    }",
          "coverage": ""
        },
        "871": {
          "source": "                } else {",
          "coverage": ""
        },
        "872": {
          "source": "                    return cb(new Error(\"Invalid object for latitude longitude submission\"));",
          "coverage": 0
        },
        "873": {
          "source": "                }",
          "coverage": ""
        },
        "874": {
          "source": "            } else {",
          "coverage": ""
        },
        "875": {
          "source": "                if (fieldValue.zone &amp;&amp; fieldValue.eastings &amp;&amp; fieldValue.northings) {",
          "coverage": 0
        },
        "876": {
          "source": "                    //Zone must be 3 characters, eastings 6 and northings 9",
          "coverage": ""
        },
        "877": {
          "source": "                    return validateNorthingsEastings(fieldValue, cb);",
          "coverage": 0
        },
        "878": {
          "source": "                } else {",
          "coverage": ""
        },
        "879": {
          "source": "                    return cb(new Error(\"Invalid object for northings easting submission. Zone, Eastings and Northings elemets are required\"));",
          "coverage": 0
        },
        "880": {
          "source": "                }",
          "coverage": ""
        },
        "881": {
          "source": "            }",
          "coverage": ""
        },
        "882": {
          "source": "",
          "coverage": ""
        },
        "883": {
          "source": "            function validateNorthingsEastings(fieldValue, cb) {",
          "coverage": 0
        },
        "884": {
          "source": "                if (typeof(fieldValue.zone) !== \"string\" || fieldValue.zone.length === 0) {",
          "coverage": 0
        },
        "885": {
          "source": "                    return cb(new Error(\"Invalid zone definition for northings and eastings location. \" + fieldValue.zone));",
          "coverage": 0
        },
        "886": {
          "source": "                }",
          "coverage": ""
        },
        "887": {
          "source": "",
          "coverage": ""
        },
        "888": {
          "source": "                var east = parseInt(fieldValue.eastings, 10);",
          "coverage": 0
        },
        "889": {
          "source": "                if (isNaN(east)) {",
          "coverage": 0
        },
        "890": {
          "source": "                    return cb(new Error(\"Invalid eastings definition for northings and eastings location. \" + fieldValue.eastings));",
          "coverage": 0
        },
        "891": {
          "source": "                }",
          "coverage": ""
        },
        "892": {
          "source": "",
          "coverage": ""
        },
        "893": {
          "source": "                var north = parseInt(fieldValue.northings, 10);",
          "coverage": 0
        },
        "894": {
          "source": "                if (isNaN(north)) {",
          "coverage": 0
        },
        "895": {
          "source": "                    return cb(new Error(\"Invalid northings definition for northings and eastings location. \" + fieldValue.northings));",
          "coverage": 0
        },
        "896": {
          "source": "                }",
          "coverage": ""
        },
        "897": {
          "source": "",
          "coverage": ""
        },
        "898": {
          "source": "                return cb();",
          "coverage": 0
        },
        "899": {
          "source": "            }",
          "coverage": ""
        },
        "900": {
          "source": "        }",
          "coverage": ""
        },
        "901": {
          "source": "",
          "coverage": ""
        },
        "902": {
          "source": "        function validatorAnyFile(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "903": {
          "source": "            // if any of the following validators return ok, then return ok.",
          "coverage": ""
        },
        "904": {
          "source": "            validatorBase64(fieldValue, fieldDefinition, previousFieldValues, function(err) {",
          "coverage": 0
        },
        "905": {
          "source": "                if (!err) {",
          "coverage": 0
        },
        "906": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "907": {
          "source": "                }",
          "coverage": ""
        },
        "908": {
          "source": "                validatorFile(fieldValue, fieldDefinition, previousFieldValues, function(err) {",
          "coverage": 0
        },
        "909": {
          "source": "                    if (!err) {",
          "coverage": 0
        },
        "910": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "911": {
          "source": "                    }",
          "coverage": ""
        },
        "912": {
          "source": "                    validatorFileObj(fieldValue, fieldDefinition, previousFieldValues, function(err) {",
          "coverage": 0
        },
        "913": {
          "source": "                        if (!err) {",
          "coverage": 0
        },
        "914": {
          "source": "                            return cb();",
          "coverage": 0
        },
        "915": {
          "source": "                        }",
          "coverage": ""
        },
        "916": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "917": {
          "source": "                    });",
          "coverage": ""
        },
        "918": {
          "source": "                });",
          "coverage": ""
        },
        "919": {
          "source": "            });",
          "coverage": ""
        },
        "920": {
          "source": "        }",
          "coverage": ""
        },
        "921": {
          "source": "",
          "coverage": ""
        },
        "922": {
          "source": "        function checkFileSize(fieldDefinition, fieldValue, sizeKey, cb) {",
          "coverage": 0
        },
        "923": {
          "source": "            fieldDefinition = fieldDefinition || {};",
          "coverage": 0
        },
        "924": {
          "source": "            var fieldOptions = fieldDefinition.fieldOptions || {};",
          "coverage": 0
        },
        "925": {
          "source": "            var fieldOptionsDef = fieldOptions.definition || {};",
          "coverage": 0
        },
        "926": {
          "source": "            var fileSizeMax = fieldOptionsDef.file_size || null; //FileSizeMax will be in KB. File size is in bytes",
          "coverage": 0
        },
        "927": {
          "source": "",
          "coverage": ""
        },
        "928": {
          "source": "            if (fileSizeMax !== null) {",
          "coverage": 0
        },
        "929": {
          "source": "                var fieldValueSize = fieldValue[sizeKey];",
          "coverage": 0
        },
        "930": {
          "source": "                var fieldValueSizeKB = 1;",
          "coverage": 0
        },
        "931": {
          "source": "                if (fieldValueSize &gt; 1000) {",
          "coverage": 0
        },
        "932": {
          "source": "                    fieldValueSizeKB = fieldValueSize / 1000;",
          "coverage": 0
        },
        "933": {
          "source": "                }",
          "coverage": ""
        },
        "934": {
          "source": "                if (fieldValueSize &gt; (fileSizeMax * 1000)) {",
          "coverage": 0
        },
        "935": {
          "source": "                    return cb(new Error(\"File size is too large. File can be a maximum of \" + fileSizeMax + \"KB. Size of file selected: \" + fieldValueSizeKB + \"KB\"));",
          "coverage": 0
        },
        "936": {
          "source": "                } else {",
          "coverage": ""
        },
        "937": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "938": {
          "source": "                }",
          "coverage": ""
        },
        "939": {
          "source": "            } else {",
          "coverage": ""
        },
        "940": {
          "source": "                return cb();",
          "coverage": 0
        },
        "941": {
          "source": "            }",
          "coverage": ""
        },
        "942": {
          "source": "        }",
          "coverage": ""
        },
        "943": {
          "source": "",
          "coverage": ""
        },
        "944": {
          "source": "        function validatorFile(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "945": {
          "source": "            if (typeof fieldValue !== \"object\") {",
          "coverage": 0
        },
        "946": {
          "source": "                return cb(new Error(\"Expected object but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "947": {
          "source": "            }",
          "coverage": ""
        },
        "948": {
          "source": "",
          "coverage": ""
        },
        "949": {
          "source": "            var keyTypes = [{",
          "coverage": 0
        },
        "950": {
          "source": "                keyName: \"fileName\",",
          "coverage": ""
        },
        "951": {
          "source": "                valueType: \"string\"",
          "coverage": ""
        },
        "952": {
          "source": "            }, {",
          "coverage": ""
        },
        "953": {
          "source": "                keyName: \"fileSize\",",
          "coverage": ""
        },
        "954": {
          "source": "                valueType: \"number\"",
          "coverage": ""
        },
        "955": {
          "source": "            }, {",
          "coverage": ""
        },
        "956": {
          "source": "                keyName: \"fileType\",",
          "coverage": ""
        },
        "957": {
          "source": "                valueType: \"string\"",
          "coverage": ""
        },
        "958": {
          "source": "            }, {",
          "coverage": ""
        },
        "959": {
          "source": "                keyName: \"fileUpdateTime\",",
          "coverage": ""
        },
        "960": {
          "source": "                valueType: \"number\"",
          "coverage": ""
        },
        "961": {
          "source": "            }, {",
          "coverage": ""
        },
        "962": {
          "source": "                keyName: \"hashName\",",
          "coverage": ""
        },
        "963": {
          "source": "                valueType: \"string\"",
          "coverage": ""
        },
        "964": {
          "source": "            }];",
          "coverage": ""
        },
        "965": {
          "source": "",
          "coverage": ""
        },
        "966": {
          "source": "            async.each(keyTypes, function(keyType, cb) {",
          "coverage": 0
        },
        "967": {
          "source": "                var actualType = typeof fieldValue[keyType.keyName];",
          "coverage": 0
        },
        "968": {
          "source": "                if (actualType !== keyType.valueType) {",
          "coverage": 0
        },
        "969": {
          "source": "                    return cb(new Error(\"Expected \" + keyType.valueType + \" but got \" + actualType));",
          "coverage": 0
        },
        "970": {
          "source": "                }",
          "coverage": ""
        },
        "971": {
          "source": "                if (keyType.keyName === \"fileName\" &amp;&amp; fieldValue[keyType.keyName].length &lt;= 0) {",
          "coverage": 0
        },
        "972": {
          "source": "                    return cb(new Error(\"Expected value for \" + keyType.keyName));",
          "coverage": 0
        },
        "973": {
          "source": "                }",
          "coverage": ""
        },
        "974": {
          "source": "",
          "coverage": ""
        },
        "975": {
          "source": "                return cb();",
          "coverage": 0
        },
        "976": {
          "source": "            }, function(err) {",
          "coverage": ""
        },
        "977": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "978": {
          "source": "",
          "coverage": ""
        },
        "979": {
          "source": "                checkFileSize(fieldDefinition, fieldValue, \"fileSize\", function(err) {",
          "coverage": 0
        },
        "980": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "981": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "982": {
          "source": "                    }",
          "coverage": ""
        },
        "983": {
          "source": "",
          "coverage": ""
        },
        "984": {
          "source": "                    if (fieldValue.hashName.indexOf(\"filePlaceHolder\") &gt; -1) { //TODO abstract out to config",
          "coverage": 0
        },
        "985": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "986": {
          "source": "                    } else if (previousFieldValues &amp;&amp; previousFieldValues.hashName &amp;&amp; previousFieldValues.hashName.indexOf(fieldValue.hashName) &gt; -1) {",
          "coverage": 0
        },
        "987": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "988": {
          "source": "                    } else {",
          "coverage": ""
        },
        "989": {
          "source": "                        return cb(new Error(\"Invalid file placeholder text\" + fieldValue.hashName));",
          "coverage": 0
        },
        "990": {
          "source": "                    }",
          "coverage": ""
        },
        "991": {
          "source": "                });",
          "coverage": ""
        },
        "992": {
          "source": "            });",
          "coverage": ""
        },
        "993": {
          "source": "        }",
          "coverage": ""
        },
        "994": {
          "source": "",
          "coverage": ""
        },
        "995": {
          "source": "        function validatorFileObj(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "996": {
          "source": "            if ((typeof File !== \"function\")) {",
          "coverage": 0
        },
        "997": {
          "source": "                return cb(new Error(\"Expected File object but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "998": {
          "source": "            }",
          "coverage": ""
        },
        "999": {
          "source": "",
          "coverage": ""
        },
        "1000": {
          "source": "            var keyTypes = [{",
          "coverage": 0
        },
        "1001": {
          "source": "                keyName: \"name\",",
          "coverage": ""
        },
        "1002": {
          "source": "                valueType: \"string\"",
          "coverage": ""
        },
        "1003": {
          "source": "            }, {",
          "coverage": ""
        },
        "1004": {
          "source": "                keyName: \"size\",",
          "coverage": ""
        },
        "1005": {
          "source": "                valueType: \"number\"",
          "coverage": ""
        },
        "1006": {
          "source": "            }];",
          "coverage": ""
        },
        "1007": {
          "source": "",
          "coverage": ""
        },
        "1008": {
          "source": "            async.each(keyTypes, function(keyType, cb) {",
          "coverage": 0
        },
        "1009": {
          "source": "                var actualType = typeof fieldValue[keyType.keyName];",
          "coverage": 0
        },
        "1010": {
          "source": "                if (actualType !== keyType.valueType) {",
          "coverage": 0
        },
        "1011": {
          "source": "                    return cb(new Error(\"Expected \" + keyType.valueType + \" but got \" + actualType));",
          "coverage": 0
        },
        "1012": {
          "source": "                }",
          "coverage": ""
        },
        "1013": {
          "source": "                if (actualType === \"string\" &amp;&amp; fieldValue[keyType.keyName].length &lt;= 0) {",
          "coverage": 0
        },
        "1014": {
          "source": "                    return cb(new Error(\"Expected value for \" + keyType.keyName));",
          "coverage": 0
        },
        "1015": {
          "source": "                }",
          "coverage": ""
        },
        "1016": {
          "source": "                if (actualType === \"number\" &amp;&amp; fieldValue[keyType.keyName] &lt;= 0) {",
          "coverage": 0
        },
        "1017": {
          "source": "                    return cb(new Error(\"Expected &gt; 0 value for \" + keyType.keyName));",
          "coverage": 0
        },
        "1018": {
          "source": "                }",
          "coverage": ""
        },
        "1019": {
          "source": "",
          "coverage": ""
        },
        "1020": {
          "source": "                return cb();",
          "coverage": 0
        },
        "1021": {
          "source": "            }, function(err) {",
          "coverage": ""
        },
        "1022": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "1023": {
          "source": "",
          "coverage": ""
        },
        "1024": {
          "source": "",
          "coverage": ""
        },
        "1025": {
          "source": "                checkFileSize(fieldDefinition, fieldValue, \"size\", function(err) {",
          "coverage": 0
        },
        "1026": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "1027": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "1028": {
          "source": "                    }",
          "coverage": ""
        },
        "1029": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "1030": {
          "source": "                });",
          "coverage": ""
        },
        "1031": {
          "source": "            });",
          "coverage": ""
        },
        "1032": {
          "source": "        }",
          "coverage": ""
        },
        "1033": {
          "source": "",
          "coverage": ""
        },
        "1034": {
          "source": "        function validatorBase64(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "1035": {
          "source": "            if (typeof fieldValue !== \"string\") {",
          "coverage": 0
        },
        "1036": {
          "source": "                return cb(new Error(\"Expected base64 string but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "1037": {
          "source": "            }",
          "coverage": ""
        },
        "1038": {
          "source": "",
          "coverage": ""
        },
        "1039": {
          "source": "            if (fieldValue.length &lt;= 0) {",
          "coverage": 0
        },
        "1040": {
          "source": "                return cb(new Error(\"Expected base64 string but was empty\"));",
          "coverage": 0
        },
        "1041": {
          "source": "            }",
          "coverage": ""
        },
        "1042": {
          "source": "",
          "coverage": ""
        },
        "1043": {
          "source": "            return cb();",
          "coverage": 0
        },
        "1044": {
          "source": "        }",
          "coverage": ""
        },
        "1045": {
          "source": "",
          "coverage": ""
        },
        "1046": {
          "source": "        function validatorDateTime(fieldValue, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "1047": {
          "source": "            var testDate;",
          "coverage": 0
        },
        "1048": {
          "source": "            var valid = false;",
          "coverage": 0
        },
        "1049": {
          "source": "            var parts = [];",
          "coverage": 0
        },
        "1050": {
          "source": "",
          "coverage": ""
        },
        "1051": {
          "source": "            if (typeof(fieldValue) !== \"string\") {",
          "coverage": 0
        },
        "1052": {
          "source": "                return cb(new Error(\"Expected string but got \" + typeof(fieldValue)));",
          "coverage": 0
        },
        "1053": {
          "source": "            }",
          "coverage": ""
        },
        "1054": {
          "source": "",
          "coverage": ""
        },
        "1055": {
          "source": "            switch (fieldDefinition.fieldOptions.definition.datetimeUnit) {",
          "coverage": 0
        },
        "1056": {
          "source": "                case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATEONLY:",
          "coverage": ""
        },
        "1057": {
          "source": "",
          "coverage": ""
        },
        "1058": {
          "source": "                    parts = fieldValue.split(\"/\");",
          "coverage": 0
        },
        "1059": {
          "source": "                    valid = parts.length === 3;",
          "coverage": 0
        },
        "1060": {
          "source": "",
          "coverage": ""
        },
        "1061": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1062": {
          "source": "                        valid = isNumberBetween(parts[2], 1, 31);",
          "coverage": 0
        },
        "1063": {
          "source": "                    }",
          "coverage": ""
        },
        "1064": {
          "source": "",
          "coverage": ""
        },
        "1065": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1066": {
          "source": "                        valid = isNumberBetween(parts[1], 1, 12);",
          "coverage": 0
        },
        "1067": {
          "source": "                    }",
          "coverage": ""
        },
        "1068": {
          "source": "",
          "coverage": ""
        },
        "1069": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1070": {
          "source": "                        valid = isNumberBetween(parts[0], 1000, 9999);",
          "coverage": 0
        },
        "1071": {
          "source": "                    }",
          "coverage": ""
        },
        "1072": {
          "source": "",
          "coverage": ""
        },
        "1073": {
          "source": "                    try {",
          "coverage": 0
        },
        "1074": {
          "source": "                        if (valid) {",
          "coverage": 0
        },
        "1075": {
          "source": "                            testDate = new Date(parts[3], parts[1], parts[0]);",
          "coverage": 0
        },
        "1076": {
          "source": "                        } else {",
          "coverage": ""
        },
        "1077": {
          "source": "                            testDate = new Date(fieldValue);",
          "coverage": 0
        },
        "1078": {
          "source": "                        }",
          "coverage": ""
        },
        "1079": {
          "source": "                        valid = (testDate.toString() !== \"Invalid Date\");",
          "coverage": 0
        },
        "1080": {
          "source": "                    } catch (e) {",
          "coverage": ""
        },
        "1081": {
          "source": "                        valid = false;",
          "coverage": 0
        },
        "1082": {
          "source": "                    }",
          "coverage": ""
        },
        "1083": {
          "source": "",
          "coverage": ""
        },
        "1084": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1085": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "1086": {
          "source": "                    } else {",
          "coverage": ""
        },
        "1087": {
          "source": "                        return cb(new Error(\"Invalid date value \" + fieldValue + \". Date format is YYYY/MM/DD\"));",
          "coverage": 0
        },
        "1088": {
          "source": "                    }",
          "coverage": ""
        },
        "1089": {
          "source": "                    break;",
          "coverage": 0
        },
        "1090": {
          "source": "                case FIELD_TYPE_DATETIME_DATETIMEUNIT_TIMEONLY:",
          "coverage": ""
        },
        "1091": {
          "source": "                    parts = fieldValue.split(':');",
          "coverage": 0
        },
        "1092": {
          "source": "                    valid = (parts.length === 2) || (parts.length === 3);",
          "coverage": 0
        },
        "1093": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1094": {
          "source": "                        valid = isNumberBetween(parts[0], 0, 23);",
          "coverage": 0
        },
        "1095": {
          "source": "                    }",
          "coverage": ""
        },
        "1096": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1097": {
          "source": "                        valid = isNumberBetween(parts[1], 0, 59);",
          "coverage": 0
        },
        "1098": {
          "source": "                    }",
          "coverage": ""
        },
        "1099": {
          "source": "                    if (valid &amp;&amp; (parts.length === 3)) {",
          "coverage": 0
        },
        "1100": {
          "source": "                        valid = isNumberBetween(parts[2], 0, 59);",
          "coverage": 0
        },
        "1101": {
          "source": "                    }",
          "coverage": ""
        },
        "1102": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1103": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "1104": {
          "source": "                    } else {",
          "coverage": ""
        },
        "1105": {
          "source": "                        return cb(new Error(\"Invalid time value \" + fieldValue + \". Time format is HH:MM:SS\"));",
          "coverage": 0
        },
        "1106": {
          "source": "                    }",
          "coverage": ""
        },
        "1107": {
          "source": "                    break;",
          "coverage": 0
        },
        "1108": {
          "source": "                case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATETIME:",
          "coverage": ""
        },
        "1109": {
          "source": "                    parts = fieldValue.split(/[- :]/);",
          "coverage": 0
        },
        "1110": {
          "source": "",
          "coverage": ""
        },
        "1111": {
          "source": "                    valid = (parts.length === 6) || (parts.length === 5);",
          "coverage": 0
        },
        "1112": {
          "source": "",
          "coverage": ""
        },
        "1113": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1114": {
          "source": "                        valid = isNumberBetween(parts[2], 1, 31);",
          "coverage": 0
        },
        "1115": {
          "source": "                    }",
          "coverage": ""
        },
        "1116": {
          "source": "",
          "coverage": ""
        },
        "1117": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1118": {
          "source": "                        valid = isNumberBetween(parts[1], 1, 12);",
          "coverage": 0
        },
        "1119": {
          "source": "                    }",
          "coverage": ""
        },
        "1120": {
          "source": "",
          "coverage": ""
        },
        "1121": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1122": {
          "source": "                        valid = isNumberBetween(parts[0], 1000, 9999);",
          "coverage": 0
        },
        "1123": {
          "source": "                    }",
          "coverage": ""
        },
        "1124": {
          "source": "",
          "coverage": ""
        },
        "1125": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1126": {
          "source": "                        valid = isNumberBetween(parts[3], 0, 23);",
          "coverage": 0
        },
        "1127": {
          "source": "                    }",
          "coverage": ""
        },
        "1128": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1129": {
          "source": "                        valid = isNumberBetween(parts[4], 0, 59);",
          "coverage": 0
        },
        "1130": {
          "source": "                    }",
          "coverage": ""
        },
        "1131": {
          "source": "                    if (valid &amp;&amp; parts.length === 6) {",
          "coverage": 0
        },
        "1132": {
          "source": "                        valid = isNumberBetween(parts[5], 0, 59);",
          "coverage": 0
        },
        "1133": {
          "source": "                    } else {",
          "coverage": ""
        },
        "1134": {
          "source": "                        parts[5] = 0;",
          "coverage": 0
        },
        "1135": {
          "source": "                    }",
          "coverage": ""
        },
        "1136": {
          "source": "",
          "coverage": ""
        },
        "1137": {
          "source": "                    try {",
          "coverage": 0
        },
        "1138": {
          "source": "                        if (valid) {",
          "coverage": 0
        },
        "1139": {
          "source": "                            testDate = new Date(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5]);",
          "coverage": 0
        },
        "1140": {
          "source": "                        } else {",
          "coverage": ""
        },
        "1141": {
          "source": "                            testDate = new Date(fieldValue);",
          "coverage": 0
        },
        "1142": {
          "source": "                        }",
          "coverage": ""
        },
        "1143": {
          "source": "",
          "coverage": ""
        },
        "1144": {
          "source": "                        valid = (testDate.toString() !== \"Invalid Date\");",
          "coverage": 0
        },
        "1145": {
          "source": "                    } catch (e) {",
          "coverage": ""
        },
        "1146": {
          "source": "                        valid = false;",
          "coverage": 0
        },
        "1147": {
          "source": "                    }",
          "coverage": ""
        },
        "1148": {
          "source": "",
          "coverage": ""
        },
        "1149": {
          "source": "                    if (valid) {",
          "coverage": 0
        },
        "1150": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "1151": {
          "source": "                    } else {",
          "coverage": ""
        },
        "1152": {
          "source": "                        return cb(new Error(\"Invalid dateTime string \" + fieldValue + \". dateTime format is YYYY/MM/DD HH:MM:SS\"));",
          "coverage": 0
        },
        "1153": {
          "source": "                    }",
          "coverage": ""
        },
        "1154": {
          "source": "                    break;",
          "coverage": 0
        },
        "1155": {
          "source": "                default:",
          "coverage": ""
        },
        "1156": {
          "source": "                    return cb(new Error(\"Invalid dateTime fieldtype \" + fieldDefinition.fieldOptions.definition.datetimeUnit));",
          "coverage": 0
        },
        "1157": {
          "source": "            }",
          "coverage": ""
        },
        "1158": {
          "source": "        }",
          "coverage": ""
        },
        "1159": {
          "source": "",
          "coverage": ""
        },
        "1160": {
          "source": "        function validatorSection(value, fieldDefinition, previousFieldValues, cb) {",
          "coverage": 0
        },
        "1161": {
          "source": "            return cb(new Error(\"Should not submit section field: \" + fieldDefinition.name));",
          "coverage": 0
        },
        "1162": {
          "source": "        }",
          "coverage": ""
        },
        "1163": {
          "source": "",
          "coverage": ""
        },
        "1164": {
          "source": "        function rulesResult(rules, cb) {",
          "coverage": 0
        },
        "1165": {
          "source": "            var visible = true;",
          "coverage": 0
        },
        "1166": {
          "source": "",
          "coverage": ""
        },
        "1167": {
          "source": "            // Itterate over each rule that this field is a predicate of",
          "coverage": ""
        },
        "1168": {
          "source": "            async.each(rules, function(rule, cbRule) {",
          "coverage": 0
        },
        "1169": {
          "source": "                // For each rule, itterate over the predicate fields and evaluate the rule",
          "coverage": ""
        },
        "1170": {
          "source": "                var predicateMapQueries = [];",
          "coverage": 0
        },
        "1171": {
          "source": "                var predicateMapPassed = [];",
          "coverage": 0
        },
        "1172": {
          "source": "                async.each(rule.ruleConditionalStatements, function(ruleConditionalStatement, cbPredicates) {",
          "coverage": 0
        },
        "1173": {
          "source": "                    var field = fieldMap[ruleConditionalStatement.sourceField];",
          "coverage": 0
        },
        "1174": {
          "source": "                    var passed = false;",
          "coverage": 0
        },
        "1175": {
          "source": "                    var submissionValues = [];",
          "coverage": 0
        },
        "1176": {
          "source": "                    var condition;",
          "coverage": 0
        },
        "1177": {
          "source": "                    var testValue;",
          "coverage": 0
        },
        "1178": {
          "source": "                    if (submissionFieldsMap[ruleConditionalStatement.sourceField] &amp;&amp; submissionFieldsMap[ruleConditionalStatement.sourceField].fieldValues) {",
          "coverage": 0
        },
        "1179": {
          "source": "                        submissionValues = submissionFieldsMap[ruleConditionalStatement.sourceField].fieldValues;",
          "coverage": 0
        },
        "1180": {
          "source": "                        condition = ruleConditionalStatement.restriction;",
          "coverage": 0
        },
        "1181": {
          "source": "                        testValue = ruleConditionalStatement.sourceValue;",
          "coverage": 0
        },
        "1182": {
          "source": "",
          "coverage": ""
        },
        "1183": {
          "source": "                        // Validate rule predictes on the first entry only.",
          "coverage": ""
        },
        "1184": {
          "source": "                        passed = isConditionActive(field, submissionValues[0], testValue, condition);",
          "coverage": 0
        },
        "1185": {
          "source": "                    }",
          "coverage": ""
        },
        "1186": {
          "source": "                    predicateMapQueries.push({",
          "coverage": 0
        },
        "1187": {
          "source": "                        \"field\": field,",
          "coverage": ""
        },
        "1188": {
          "source": "                        \"submissionValues\": submissionValues,",
          "coverage": ""
        },
        "1189": {
          "source": "                        \"condition\": condition,",
          "coverage": ""
        },
        "1190": {
          "source": "                        \"testValue\": testValue,",
          "coverage": ""
        },
        "1191": {
          "source": "                        \"passed\": passed",
          "coverage": ""
        },
        "1192": {
          "source": "                    });",
          "coverage": ""
        },
        "1193": {
          "source": "",
          "coverage": ""
        },
        "1194": {
          "source": "                    if (passed) {",
          "coverage": 0
        },
        "1195": {
          "source": "                        predicateMapPassed.push(field);",
          "coverage": 0
        },
        "1196": {
          "source": "                    }",
          "coverage": ""
        },
        "1197": {
          "source": "                    return cbPredicates();",
          "coverage": 0
        },
        "1198": {
          "source": "                }, function(err) {",
          "coverage": ""
        },
        "1199": {
          "source": "                    if (err) cbRule(err);",
          "coverage": 0
        },
        "1200": {
          "source": "",
          "coverage": ""
        },
        "1201": {
          "source": "                    function rulesPassed(condition, passed, queries) {",
          "coverage": 0
        },
        "1202": {
          "source": "                        return ((condition === \"and\") &amp;&amp; ((passed.length === queries.length))) || // \"and\" condition - all rules must pass",
          "coverage": 0
        },
        "1203": {
          "source": "                        ((condition === \"or\") &amp;&amp; ((passed.length &gt; 0))); // \"or\" condition - only one rule must pass",
          "coverage": ""
        },
        "1204": {
          "source": "                    }",
          "coverage": ""
        },
        "1205": {
          "source": "",
          "coverage": ""
        },
        "1206": {
          "source": "                    /**",
          "coverage": ""
        },
        "1207": {
          "source": "                     * If any rule condition that targets the field/page hides that field/page, then the page is hidden.",
          "coverage": ""
        },
        "1208": {
          "source": "                     * Hiding the field/page takes precedence over any show. This will maintain consistency.",
          "coverage": ""
        },
        "1209": {
          "source": "                     * E.g. if x is y then show p1,p2 takes precendence over if x is z then hide p1, p2",
          "coverage": ""
        },
        "1210": {
          "source": "                     */",
          "coverage": ""
        },
        "1211": {
          "source": "                    if (rulesPassed(rule.ruleConditionalOperator, predicateMapPassed, predicateMapQueries)) {",
          "coverage": 0
        },
        "1212": {
          "source": "                        visible = (rule.type === \"show\") &amp;&amp; visible;",
          "coverage": 0
        },
        "1213": {
          "source": "                    } else {",
          "coverage": ""
        },
        "1214": {
          "source": "                        visible = (rule.type !== \"show\") &amp;&amp; visible;",
          "coverage": 0
        },
        "1215": {
          "source": "                    }",
          "coverage": ""
        },
        "1216": {
          "source": "",
          "coverage": ""
        },
        "1217": {
          "source": "                    return cbRule();",
          "coverage": 0
        },
        "1218": {
          "source": "                });",
          "coverage": ""
        },
        "1219": {
          "source": "            }, function(err) {",
          "coverage": ""
        },
        "1220": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "1221": {
          "source": "",
          "coverage": ""
        },
        "1222": {
          "source": "                return cb(undefined, visible);",
          "coverage": 0
        },
        "1223": {
          "source": "            });",
          "coverage": ""
        },
        "1224": {
          "source": "        }",
          "coverage": ""
        },
        "1225": {
          "source": "",
          "coverage": ""
        },
        "1226": {
          "source": "        function isPageVisible(pageId, cb) {",
          "coverage": 0
        },
        "1227": {
          "source": "            init(function(err) {",
          "coverage": 0
        },
        "1228": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "1229": {
          "source": "                if (isPageRuleSubject(pageId)) { // if the page is the target of a rule",
          "coverage": 0
        },
        "1230": {
          "source": "                    return rulesResult(pageRuleSubjectMap[pageId], cb); // execute page rules",
          "coverage": 0
        },
        "1231": {
          "source": "                } else {",
          "coverage": ""
        },
        "1232": {
          "source": "                    return cb(undefined, true); // if page is not subject of any rule then must be visible",
          "coverage": 0
        },
        "1233": {
          "source": "                }",
          "coverage": ""
        },
        "1234": {
          "source": "            });",
          "coverage": ""
        },
        "1235": {
          "source": "        }",
          "coverage": ""
        },
        "1236": {
          "source": "",
          "coverage": ""
        },
        "1237": {
          "source": "        function isFieldVisible(fieldId, checkContainingPage, cb) {",
          "coverage": 0
        },
        "1238": {
          "source": "            /*",
          "coverage": ""
        },
        "1239": {
          "source": "             * fieldId = Id of field to check for reule predeciate references",
          "coverage": ""
        },
        "1240": {
          "source": "             * checkContainingPage = if true check page containing field, and return false if the page is hidden",
          "coverage": ""
        },
        "1241": {
          "source": "             */",
          "coverage": ""
        },
        "1242": {
          "source": "            init(function(err) {",
          "coverage": 0
        },
        "1243": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "1244": {
          "source": "",
          "coverage": ""
        },
        "1245": {
          "source": "                // Fields are visable by default",
          "coverage": ""
        },
        "1246": {
          "source": "                var field = fieldMap[fieldId];",
          "coverage": 0
        },
        "1247": {
          "source": "",
          "coverage": ""
        },
        "1248": {
          "source": "                /**",
          "coverage": ""
        },
        "1249": {
          "source": "                 * If the field is an admin field, the rules engine returns an error, as admin fields cannot be the subject of rules engine actions.",
          "coverage": ""
        },
        "1250": {
          "source": "                 */",
          "coverage": ""
        },
        "1251": {
          "source": "                if (adminFieldMap[fieldId]) {",
          "coverage": 0
        },
        "1252": {
          "source": "                    return cb(new Error(\"Submission \" + fieldId + \" is an admin field. Admin fields cannot be passed to the rules engine.\"));",
          "coverage": 0
        },
        "1253": {
          "source": "                } else if (!field) {",
          "coverage": 0
        },
        "1254": {
          "source": "                    return cb(new Error(\"Field does not exist in form\"));",
          "coverage": 0
        },
        "1255": {
          "source": "                }",
          "coverage": ""
        },
        "1256": {
          "source": "",
          "coverage": ""
        },
        "1257": {
          "source": "                async.waterfall([",
          "coverage": 0
        },
        "1258": {
          "source": "",
          "coverage": ""
        },
        "1259": {
          "source": "                    function testPage(cb) {",
          "coverage": ""
        },
        "1260": {
          "source": "                        if (checkContainingPage) {",
          "coverage": 0
        },
        "1261": {
          "source": "                            isPageVisible(field.pageId, cb);",
          "coverage": 0
        },
        "1262": {
          "source": "                        } else {",
          "coverage": ""
        },
        "1263": {
          "source": "                            return cb(undefined, true);",
          "coverage": 0
        },
        "1264": {
          "source": "                        }",
          "coverage": ""
        },
        "1265": {
          "source": "                    },",
          "coverage": ""
        },
        "1266": {
          "source": "                    function testField(pageVisible, cb) {",
          "coverage": ""
        },
        "1267": {
          "source": "                        if (!pageVisible) { // if page containing field is not visible then don't need to check field",
          "coverage": 0
        },
        "1268": {
          "source": "                            return cb(undefined, false);",
          "coverage": 0
        },
        "1269": {
          "source": "                        }",
          "coverage": ""
        },
        "1270": {
          "source": "",
          "coverage": ""
        },
        "1271": {
          "source": "                        if (isFieldRuleSubject(fieldId)) { // If the field is the subject of a rule it may have been hidden",
          "coverage": 0
        },
        "1272": {
          "source": "                            return rulesResult(fieldRuleSubjectMap[fieldId], cb); // execute field rules",
          "coverage": 0
        },
        "1273": {
          "source": "                        } else {",
          "coverage": ""
        },
        "1274": {
          "source": "                            return cb(undefined, true); // if not subject of field rules then can't be hidden",
          "coverage": 0
        },
        "1275": {
          "source": "                        }",
          "coverage": ""
        },
        "1276": {
          "source": "                    }",
          "coverage": ""
        },
        "1277": {
          "source": "                ], cb);",
          "coverage": ""
        },
        "1278": {
          "source": "            });",
          "coverage": ""
        },
        "1279": {
          "source": "        }",
          "coverage": ""
        },
        "1280": {
          "source": "",
          "coverage": ""
        },
        "1281": {
          "source": "        /*",
          "coverage": ""
        },
        "1282": {
          "source": "         * check all rules actions",
          "coverage": ""
        },
        "1283": {
          "source": "         *      res:",
          "coverage": ""
        },
        "1284": {
          "source": "         *      {",
          "coverage": ""
        },
        "1285": {
          "source": "         *          \"actions\": {",
          "coverage": ""
        },
        "1286": {
          "source": "         *              \"pages\": {",
          "coverage": ""
        },
        "1287": {
          "source": "         *                  \"targetId\": {",
          "coverage": ""
        },
        "1288": {
          "source": "         *                      \"targetId\": \"\",",
          "coverage": ""
        },
        "1289": {
          "source": "         *                      \"action\": \"show|hide\"",
          "coverage": ""
        },
        "1290": {
          "source": "         *                  }",
          "coverage": ""
        },
        "1291": {
          "source": "         *              },",
          "coverage": ""
        },
        "1292": {
          "source": "         *              \"fields\": {",
          "coverage": ""
        },
        "1293": {
          "source": "         *              }",
          "coverage": ""
        },
        "1294": {
          "source": "         *          }",
          "coverage": ""
        },
        "1295": {
          "source": "         *      }",
          "coverage": ""
        },
        "1296": {
          "source": "         */",
          "coverage": ""
        },
        "1297": {
          "source": "        function checkRules(submissionJSON, cb) {",
          "coverage": 0
        },
        "1298": {
          "source": "            init(function(err) {",
          "coverage": 0
        },
        "1299": {
          "source": "                if (err) return cb(err);",
          "coverage": 0
        },
        "1300": {
          "source": "",
          "coverage": ""
        },
        "1301": {
          "source": "                initSubmission(submissionJSON, function(err) {",
          "coverage": 0
        },
        "1302": {
          "source": "                    if (err) return cb(err);",
          "coverage": 0
        },
        "1303": {
          "source": "                    var actions = {};",
          "coverage": 0
        },
        "1304": {
          "source": "",
          "coverage": ""
        },
        "1305": {
          "source": "                    async.parallel([",
          "coverage": 0
        },
        "1306": {
          "source": "",
          "coverage": ""
        },
        "1307": {
          "source": "                        function(cb) {",
          "coverage": ""
        },
        "1308": {
          "source": "                            actions.fields = {};",
          "coverage": 0
        },
        "1309": {
          "source": "                            async.eachSeries(Object.keys(fieldRuleSubjectMap), function(fieldId, cb) {",
          "coverage": 0
        },
        "1310": {
          "source": "                                isFieldVisible(fieldId, false, function(err, fieldVisible) {",
          "coverage": 0
        },
        "1311": {
          "source": "                                    if (err) return cb(err);",
          "coverage": 0
        },
        "1312": {
          "source": "                                    actions.fields[fieldId] = {",
          "coverage": 0
        },
        "1313": {
          "source": "                                        targetId: fieldId,",
          "coverage": ""
        },
        "1314": {
          "source": "                                        action: (fieldVisible ? \"show\" : \"hide\")",
          "coverage": ""
        },
        "1315": {
          "source": "                                    };",
          "coverage": ""
        },
        "1316": {
          "source": "                                    return cb();",
          "coverage": 0
        },
        "1317": {
          "source": "                                });",
          "coverage": ""
        },
        "1318": {
          "source": "                            }, cb);",
          "coverage": ""
        },
        "1319": {
          "source": "                        },",
          "coverage": ""
        },
        "1320": {
          "source": "                        function(cb) {",
          "coverage": ""
        },
        "1321": {
          "source": "                            actions.pages = {};",
          "coverage": 0
        },
        "1322": {
          "source": "                            async.eachSeries(Object.keys(pageRuleSubjectMap), function(pageId, cb) {",
          "coverage": 0
        },
        "1323": {
          "source": "                                isPageVisible(pageId, function(err, pageVisible) {",
          "coverage": 0
        },
        "1324": {
          "source": "                                    if (err) return cb(err);",
          "coverage": 0
        },
        "1325": {
          "source": "                                    actions.pages[pageId] = {",
          "coverage": 0
        },
        "1326": {
          "source": "                                        targetId: pageId,",
          "coverage": ""
        },
        "1327": {
          "source": "                                        action: (pageVisible ? \"show\" : \"hide\")",
          "coverage": ""
        },
        "1328": {
          "source": "                                    };",
          "coverage": ""
        },
        "1329": {
          "source": "                                    return cb();",
          "coverage": 0
        },
        "1330": {
          "source": "                                });",
          "coverage": ""
        },
        "1331": {
          "source": "                            }, cb);",
          "coverage": ""
        },
        "1332": {
          "source": "                        }",
          "coverage": ""
        },
        "1333": {
          "source": "                    ], function(err) {",
          "coverage": ""
        },
        "1334": {
          "source": "                        if (err) return cb(err);",
          "coverage": 0
        },
        "1335": {
          "source": "",
          "coverage": ""
        },
        "1336": {
          "source": "                        return cb(undefined, {",
          "coverage": 0
        },
        "1337": {
          "source": "                            actions: actions",
          "coverage": ""
        },
        "1338": {
          "source": "                        });",
          "coverage": ""
        },
        "1339": {
          "source": "                    });",
          "coverage": ""
        },
        "1340": {
          "source": "                });",
          "coverage": ""
        },
        "1341": {
          "source": "            });",
          "coverage": ""
        },
        "1342": {
          "source": "        }",
          "coverage": ""
        },
        "1343": {
          "source": "",
          "coverage": ""
        },
        "1344": {
          "source": "        return {",
          "coverage": 0
        },
        "1345": {
          "source": "            validateForm: validateForm,",
          "coverage": ""
        },
        "1346": {
          "source": "            validateField: validateField,",
          "coverage": ""
        },
        "1347": {
          "source": "            validateFieldValue: validateFieldValue,",
          "coverage": ""
        },
        "1348": {
          "source": "            checkRules: checkRules,",
          "coverage": ""
        },
        "1349": {
          "source": "",
          "coverage": ""
        },
        "1350": {
          "source": "            // The following are used internally, but exposed for tests",
          "coverage": ""
        },
        "1351": {
          "source": "            validateFieldInternal: validateFieldInternal,",
          "coverage": ""
        },
        "1352": {
          "source": "            initSubmission: initSubmission,",
          "coverage": ""
        },
        "1353": {
          "source": "            isFieldVisible: isFieldVisible,",
          "coverage": ""
        },
        "1354": {
          "source": "            isConditionActive: isConditionActive",
          "coverage": ""
        },
        "1355": {
          "source": "        };",
          "coverage": ""
        },
        "1356": {
          "source": "    };",
          "coverage": ""
        },
        "1357": {
          "source": "",
          "coverage": ""
        },
        "1358": {
          "source": "    function isNumberBetween(num, min, max) {",
          "coverage": 0
        },
        "1359": {
          "source": "        var numVal = parseInt(num, 10);",
          "coverage": 0
        },
        "1360": {
          "source": "        return (!isNaN(numVal) &amp;&amp; (numVal &gt;= min) &amp;&amp; (numVal &lt;= max));",
          "coverage": 0
        },
        "1361": {
          "source": "    }",
          "coverage": ""
        },
        "1362": {
          "source": "",
          "coverage": ""
        },
        "1363": {
          "source": "    function cvtTimeToSeconds(fieldValue) {",
          "coverage": 0
        },
        "1364": {
          "source": "        var seconds = 0;",
          "coverage": 0
        },
        "1365": {
          "source": "        if (typeof fieldValue === \"string\") {",
          "coverage": 0
        },
        "1366": {
          "source": "            var parts = fieldValue.split(':');",
          "coverage": 0
        },
        "1367": {
          "source": "            valid = (parts.length === 2) || (parts.length === 3);",
          "coverage": 0
        },
        "1368": {
          "source": "            if (valid) {",
          "coverage": 0
        },
        "1369": {
          "source": "                valid = isNumberBetween(parts[0], 0, 23);",
          "coverage": 0
        },
        "1370": {
          "source": "                seconds += (parseInt(parts[0], 10) * 60 * 60);",
          "coverage": 0
        },
        "1371": {
          "source": "            }",
          "coverage": ""
        },
        "1372": {
          "source": "            if (valid) {",
          "coverage": 0
        },
        "1373": {
          "source": "                valid = isNumberBetween(parts[1], 0, 59);",
          "coverage": 0
        },
        "1374": {
          "source": "                seconds += (parseInt(parts[1], 10) * 60);",
          "coverage": 0
        },
        "1375": {
          "source": "            }",
          "coverage": ""
        },
        "1376": {
          "source": "            if (valid &amp;&amp; (parts.length === 3)) {",
          "coverage": 0
        },
        "1377": {
          "source": "                valid = isNumberBetween(parts[2], 0, 59);",
          "coverage": 0
        },
        "1378": {
          "source": "                seconds += parseInt(parts[2], 10);",
          "coverage": 0
        },
        "1379": {
          "source": "            }",
          "coverage": ""
        },
        "1380": {
          "source": "        }",
          "coverage": ""
        },
        "1381": {
          "source": "        return seconds;",
          "coverage": 0
        },
        "1382": {
          "source": "    }",
          "coverage": ""
        },
        "1383": {
          "source": "",
          "coverage": ""
        },
        "1384": {
          "source": "    function isConditionActive(field, fieldValue, testValue, condition) {",
          "coverage": 0
        },
        "1385": {
          "source": "",
          "coverage": ""
        },
        "1386": {
          "source": "        var fieldType = field.type;",
          "coverage": 0
        },
        "1387": {
          "source": "        var fieldOptions = field.fieldOptions ? field.fieldOptions : {};",
          "coverage": 0
        },
        "1388": {
          "source": "",
          "coverage": ""
        },
        "1389": {
          "source": "        if (typeof(fieldValue) === 'undefined' || fieldValue === null) {",
          "coverage": 0
        },
        "1390": {
          "source": "            return false;",
          "coverage": 0
        },
        "1391": {
          "source": "        }",
          "coverage": ""
        },
        "1392": {
          "source": "",
          "coverage": ""
        },
        "1393": {
          "source": "        function numericalComparison(condition, fieldValue, testValue) {",
          "coverage": 0
        },
        "1394": {
          "source": "            var fieldValNum = parseInt(fieldValue, 10);",
          "coverage": 0
        },
        "1395": {
          "source": "            var testValNum = parseInt(testValue, 10);",
          "coverage": 0
        },
        "1396": {
          "source": "",
          "coverage": ""
        },
        "1397": {
          "source": "            if (isNaN(fieldValNum) || isNaN(testValNum)) {",
          "coverage": 0
        },
        "1398": {
          "source": "                return false;",
          "coverage": 0
        },
        "1399": {
          "source": "            }",
          "coverage": ""
        },
        "1400": {
          "source": "",
          "coverage": ""
        },
        "1401": {
          "source": "            if (\"is equal to\" === condition) {",
          "coverage": 0
        },
        "1402": {
          "source": "                return fieldValNum === testValNum;",
          "coverage": 0
        },
        "1403": {
          "source": "            } else if (\"is less than\" === condition) {",
          "coverage": 0
        },
        "1404": {
          "source": "                return fieldValNum &lt; testValNum;",
          "coverage": 0
        },
        "1405": {
          "source": "            } else if (\"is greater than\" === condition) {",
          "coverage": 0
        },
        "1406": {
          "source": "                return fieldValNum &gt; testValNum;",
          "coverage": 0
        },
        "1407": {
          "source": "            } else {",
          "coverage": ""
        },
        "1408": {
          "source": "                return false;",
          "coverage": 0
        },
        "1409": {
          "source": "            }",
          "coverage": ""
        },
        "1410": {
          "source": "        }",
          "coverage": ""
        },
        "1411": {
          "source": "",
          "coverage": ""
        },
        "1412": {
          "source": "        var valid = true;",
          "coverage": 0
        },
        "1413": {
          "source": "        if (\"is equal to\" === condition) {",
          "coverage": 0
        },
        "1414": {
          "source": "            valid = numericalComparison(\"is equal to\", fieldValue, testValue);",
          "coverage": 0
        },
        "1415": {
          "source": "        } else if (\"is greater than\" === condition) {",
          "coverage": 0
        },
        "1416": {
          "source": "            valid = numericalComparison(\"is greater than\", fieldValue, testValue);",
          "coverage": 0
        },
        "1417": {
          "source": "        } else if (\"is less than\" === condition) {",
          "coverage": 0
        },
        "1418": {
          "source": "            valid = numericalComparison(\"is less than\", fieldValue, testValue);",
          "coverage": 0
        },
        "1419": {
          "source": "        } else if (\"is at\" === condition) {",
          "coverage": 0
        },
        "1420": {
          "source": "            valid = false;",
          "coverage": 0
        },
        "1421": {
          "source": "            if (fieldType === FIELD_TYPE_DATETIME) {",
          "coverage": 0
        },
        "1422": {
          "source": "                switch (fieldOptions.definition.datetimeUnit) {",
          "coverage": 0
        },
        "1423": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATEONLY:",
          "coverage": ""
        },
        "1424": {
          "source": "                        try {",
          "coverage": 0
        },
        "1425": {
          "source": "                            valid = (new Date(new Date(fieldValue).toDateString()).getTime() === new Date(new Date(testValue).toDateString()).getTime());",
          "coverage": 0
        },
        "1426": {
          "source": "                        } catch (e) {",
          "coverage": ""
        },
        "1427": {
          "source": "                            valid = false;",
          "coverage": 0
        },
        "1428": {
          "source": "                        }",
          "coverage": ""
        },
        "1429": {
          "source": "                        break;",
          "coverage": 0
        },
        "1430": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_TIMEONLY:",
          "coverage": ""
        },
        "1431": {
          "source": "                        valid = cvtTimeToSeconds(fieldValue) === cvtTimeToSeconds(testValue);",
          "coverage": 0
        },
        "1432": {
          "source": "                        break;",
          "coverage": 0
        },
        "1433": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATETIME:",
          "coverage": ""
        },
        "1434": {
          "source": "                        try {",
          "coverage": 0
        },
        "1435": {
          "source": "                            valid = (new Date(fieldValue).getTime() === new Date(testValue).getTime());",
          "coverage": 0
        },
        "1436": {
          "source": "                        } catch (e) {",
          "coverage": ""
        },
        "1437": {
          "source": "                            valid = false;",
          "coverage": 0
        },
        "1438": {
          "source": "                        }",
          "coverage": ""
        },
        "1439": {
          "source": "                        break;",
          "coverage": 0
        },
        "1440": {
          "source": "                    default:",
          "coverage": ""
        },
        "1441": {
          "source": "                        valid = false; // TODO should raise error here?",
          "coverage": 0
        },
        "1442": {
          "source": "                        break;",
          "coverage": 0
        },
        "1443": {
          "source": "                }",
          "coverage": ""
        },
        "1444": {
          "source": "            }",
          "coverage": ""
        },
        "1445": {
          "source": "        } else if (\"is before\" === condition) {",
          "coverage": 0
        },
        "1446": {
          "source": "            valid = false;",
          "coverage": 0
        },
        "1447": {
          "source": "            if (fieldType === FIELD_TYPE_DATETIME) {",
          "coverage": 0
        },
        "1448": {
          "source": "                switch (fieldOptions.definition.datetimeUnit) {",
          "coverage": 0
        },
        "1449": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATEONLY:",
          "coverage": ""
        },
        "1450": {
          "source": "                        try {",
          "coverage": 0
        },
        "1451": {
          "source": "                            valid = (new Date(new Date(fieldValue).toDateString()).getTime() &lt; new Date(new Date(testValue).toDateString()).getTime());",
          "coverage": 0
        },
        "1452": {
          "source": "                        } catch (e) {",
          "coverage": ""
        },
        "1453": {
          "source": "                            valid = false;",
          "coverage": 0
        },
        "1454": {
          "source": "                        }",
          "coverage": ""
        },
        "1455": {
          "source": "                        break;",
          "coverage": 0
        },
        "1456": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_TIMEONLY:",
          "coverage": ""
        },
        "1457": {
          "source": "                        valid = cvtTimeToSeconds(fieldValue) &lt; cvtTimeToSeconds(testValue);",
          "coverage": 0
        },
        "1458": {
          "source": "                        break;",
          "coverage": 0
        },
        "1459": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATETIME:",
          "coverage": ""
        },
        "1460": {
          "source": "                        try {",
          "coverage": 0
        },
        "1461": {
          "source": "                            valid = (new Date(fieldValue).getTime() &lt; new Date(testValue).getTime());",
          "coverage": 0
        },
        "1462": {
          "source": "                        } catch (e) {",
          "coverage": ""
        },
        "1463": {
          "source": "                            valid = false;",
          "coverage": 0
        },
        "1464": {
          "source": "                        }",
          "coverage": ""
        },
        "1465": {
          "source": "                        break;",
          "coverage": 0
        },
        "1466": {
          "source": "                    default:",
          "coverage": ""
        },
        "1467": {
          "source": "                        valid = false; // TODO should raise error here?",
          "coverage": 0
        },
        "1468": {
          "source": "                        break;",
          "coverage": 0
        },
        "1469": {
          "source": "                }",
          "coverage": ""
        },
        "1470": {
          "source": "            }",
          "coverage": ""
        },
        "1471": {
          "source": "        } else if (\"is after\" === condition) {",
          "coverage": 0
        },
        "1472": {
          "source": "            valid = false;",
          "coverage": 0
        },
        "1473": {
          "source": "            if (fieldType === FIELD_TYPE_DATETIME) {",
          "coverage": 0
        },
        "1474": {
          "source": "                switch (fieldOptions.definition.datetimeUnit) {",
          "coverage": 0
        },
        "1475": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATEONLY:",
          "coverage": ""
        },
        "1476": {
          "source": "                        try {",
          "coverage": 0
        },
        "1477": {
          "source": "                            valid = (new Date(new Date(fieldValue).toDateString()).getTime() &gt; new Date(new Date(testValue).toDateString()).getTime());",
          "coverage": 0
        },
        "1478": {
          "source": "                        } catch (e) {",
          "coverage": ""
        },
        "1479": {
          "source": "                            valid = false;",
          "coverage": 0
        },
        "1480": {
          "source": "                        }",
          "coverage": ""
        },
        "1481": {
          "source": "                        break;",
          "coverage": 0
        },
        "1482": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_TIMEONLY:",
          "coverage": ""
        },
        "1483": {
          "source": "                        valid = cvtTimeToSeconds(fieldValue) &gt; cvtTimeToSeconds(testValue);",
          "coverage": 0
        },
        "1484": {
          "source": "                        break;",
          "coverage": 0
        },
        "1485": {
          "source": "                    case FIELD_TYPE_DATETIME_DATETIMEUNIT_DATETIME:",
          "coverage": ""
        },
        "1486": {
          "source": "                        try {",
          "coverage": 0
        },
        "1487": {
          "source": "                            valid = (new Date(fieldValue).getTime() &gt; new Date(testValue).getTime());",
          "coverage": 0
        },
        "1488": {
          "source": "                        } catch (e) {",
          "coverage": ""
        },
        "1489": {
          "source": "                            valid = false;",
          "coverage": 0
        },
        "1490": {
          "source": "                        }",
          "coverage": ""
        },
        "1491": {
          "source": "                        break;",
          "coverage": 0
        },
        "1492": {
          "source": "                    default:",
          "coverage": ""
        },
        "1493": {
          "source": "                        valid = false; // TODO should raise error here?",
          "coverage": 0
        },
        "1494": {
          "source": "                        break;",
          "coverage": 0
        },
        "1495": {
          "source": "                }",
          "coverage": ""
        },
        "1496": {
          "source": "            }",
          "coverage": ""
        },
        "1497": {
          "source": "        } else if (\"is\" === condition) {",
          "coverage": 0
        },
        "1498": {
          "source": "            if (fieldType === FIELD_TYPE_CHECKBOX) {",
          "coverage": 0
        },
        "1499": {
          "source": "                valid = fieldValue &amp;&amp; fieldValue.selections &amp;&amp; fieldValue.selections.indexOf(testValue) !== -1;",
          "coverage": 0
        },
        "1500": {
          "source": "            } else {",
          "coverage": ""
        },
        "1501": {
          "source": "                valid = fieldValue === testValue;",
          "coverage": 0
        },
        "1502": {
          "source": "            }",
          "coverage": ""
        },
        "1503": {
          "source": "        } else if (\"is not\" === condition) {",
          "coverage": 0
        },
        "1504": {
          "source": "            if (fieldType === FIELD_TYPE_CHECKBOX) {",
          "coverage": 0
        },
        "1505": {
          "source": "                valid = fieldValue &amp;&amp; fieldValue.selections &amp;&amp; fieldValue.selections.indexOf(testValue) === -1;",
          "coverage": 0
        },
        "1506": {
          "source": "            } else {",
          "coverage": ""
        },
        "1507": {
          "source": "                valid = fieldValue !== testValue;",
          "coverage": 0
        },
        "1508": {
          "source": "            }",
          "coverage": ""
        },
        "1509": {
          "source": "        } else if (\"contains\" === condition) {",
          "coverage": 0
        },
        "1510": {
          "source": "            valid = fieldValue.indexOf(testValue) !== -1;",
          "coverage": 0
        },
        "1511": {
          "source": "        } else if (\"does not contain\" === condition) {",
          "coverage": 0
        },
        "1512": {
          "source": "            valid = fieldValue.indexOf(testValue) === -1;",
          "coverage": 0
        },
        "1513": {
          "source": "        } else if (\"begins with\" === condition) {",
          "coverage": 0
        },
        "1514": {
          "source": "            valid = fieldValue.substring(0, testValue.length) === testValue;",
          "coverage": 0
        },
        "1515": {
          "source": "        } else if (\"ends with\" === condition) {",
          "coverage": 0
        },
        "1516": {
          "source": "            valid = fieldValue.substring(Math.max(0, (fieldValue.length - testValue.length)), fieldValue.length) === testValue;",
          "coverage": 0
        },
        "1517": {
          "source": "        } else {",
          "coverage": ""
        },
        "1518": {
          "source": "            valid = false;",
          "coverage": 0
        },
        "1519": {
          "source": "        }",
          "coverage": ""
        },
        "1520": {
          "source": "",
          "coverage": ""
        },
        "1521": {
          "source": "        return valid;",
          "coverage": 0
        },
        "1522": {
          "source": "    }",
          "coverage": ""
        },
        "1523": {
          "source": "}",
          "coverage": ""
        },
        "1524": {
          "source": "if (typeof module !== 'undefined' &amp;&amp; module.exports) {",
          "coverage": 1
        },
        "1525": {
          "source": "    module.exports = rulesEngine;",
          "coverage": 1
        },
        "1526": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/store.js",
      "coverage": 53.84615384615385,
      "hits": 7,
      "misses": 6,
      "sloc": 13,
      "source": {
        "1": {
          "source": "",
          "coverage": ""
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "function Store(name) {",
          "coverage": 1
        },
        "4": {
          "source": "    this.name = name;",
          "coverage": 0
        },
        "5": {
          "source": "}",
          "coverage": ""
        },
        "6": {
          "source": "Store.prototype.create = function(model, cb) {",
          "coverage": 1
        },
        "7": {
          "source": "    throw 'Create not implemented:' + this.name;",
          "coverage": 0
        },
        "8": {
          "source": "};",
          "coverage": ""
        },
        "9": {
          "source": "/**",
          "coverage": ""
        },
        "10": {
          "source": " * Read a model data from store",
          "coverage": ""
        },
        "11": {
          "source": " * @param  {[type]} model          [description]",
          "coverage": ""
        },
        "12": {
          "source": " * @param  {[type]} cb(error, data);",
          "coverage": ""
        },
        "13": {
          "source": " */",
          "coverage": ""
        },
        "14": {
          "source": "Store.prototype.read = function(model, cb) {",
          "coverage": 1
        },
        "15": {
          "source": "    throw 'Read not implemented:' + this.name;",
          "coverage": 0
        },
        "16": {
          "source": "};",
          "coverage": ""
        },
        "17": {
          "source": "Store.prototype.update = function(model, cb) {",
          "coverage": 1
        },
        "18": {
          "source": "    throw 'Update not implemented:' + this.name;",
          "coverage": 0
        },
        "19": {
          "source": "};",
          "coverage": ""
        },
        "20": {
          "source": "Store.prototype.removeEntry = function(model, cb) {",
          "coverage": 1
        },
        "21": {
          "source": "    throw 'Delete not implemented:' + this.name;",
          "coverage": 0
        },
        "22": {
          "source": "};",
          "coverage": ""
        },
        "23": {
          "source": "Store.prototype.upsert = function(model, cb) {",
          "coverage": 1
        },
        "24": {
          "source": "    throw 'Upsert not implemented:' + this.name;",
          "coverage": 0
        },
        "25": {
          "source": "};",
          "coverage": ""
        },
        "26": {
          "source": "",
          "coverage": ""
        },
        "27": {
          "source": "module.exports = Store;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/storeMbaas.js",
      "coverage": 19.801980198019802,
      "hits": 20,
      "misses": 81,
      "sloc": 101,
      "source": {
        "1": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "2": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "3": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "4": {
          "source": "var Store = require(\"./store\");",
          "coverage": 1
        },
        "5": {
          "source": "var web = require(\"./web\");",
          "coverage": 1
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "function MBaaS() {",
          "coverage": 1
        },
        "8": {
          "source": "    Store.call(this, 'MBaaS');",
          "coverage": 0
        },
        "9": {
          "source": "}",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "utils.extend(MBaaS, Store);",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "MBaaS.prototype.checkStudio = function() {",
          "coverage": 1
        },
        "14": {
          "source": "    return config.get(\"studioMode\");",
          "coverage": 0
        },
        "15": {
          "source": "};",
          "coverage": ""
        },
        "16": {
          "source": "MBaaS.prototype.create = function(model, cb) {",
          "coverage": 1
        },
        "17": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "18": {
          "source": "    if (self.checkStudio()) {",
          "coverage": 0
        },
        "19": {
          "source": "        cb(\"Studio mode mbaas not supported\");",
          "coverage": 0
        },
        "20": {
          "source": "    } else {",
          "coverage": ""
        },
        "21": {
          "source": "        var url = _getUrl(model);",
          "coverage": 0
        },
        "22": {
          "source": "        if (self.isFileAndPhoneGap(model)) {",
          "coverage": 0
        },
        "23": {
          "source": "            web.uploadFile(url, model.getProps(), cb);",
          "coverage": 0
        },
        "24": {
          "source": "        } else {",
          "coverage": ""
        },
        "25": {
          "source": "            web.post(url, model.getProps(), cb);",
          "coverage": 0
        },
        "26": {
          "source": "        }",
          "coverage": ""
        },
        "27": {
          "source": "    }",
          "coverage": ""
        },
        "28": {
          "source": "};",
          "coverage": ""
        },
        "29": {
          "source": "MBaaS.prototype.isFileAndPhoneGap = function(model) {",
          "coverage": 1
        },
        "30": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "31": {
          "source": "    return self.isFileTransfer(model) &amp;&amp; self.isPhoneGap();",
          "coverage": 0
        },
        "32": {
          "source": "};",
          "coverage": ""
        },
        "33": {
          "source": "MBaaS.prototype.isFileTransfer = function(model) {",
          "coverage": 1
        },
        "34": {
          "source": "    return (model.get(\"_type\") === \"fileSubmission\" || model.get(\"_type\") === \"base64fileSubmission\" || model.get(\"_type\") === \"fileSubmissionDownload\");",
          "coverage": 0
        },
        "35": {
          "source": "};",
          "coverage": ""
        },
        "36": {
          "source": "MBaaS.prototype.isPhoneGap = function() {",
          "coverage": 1
        },
        "37": {
          "source": "    return (typeof window.Phonegap !== \"undefined\" || typeof window.cordova !== \"undefined\");",
          "coverage": 0
        },
        "38": {
          "source": "};",
          "coverage": ""
        },
        "39": {
          "source": "MBaaS.prototype.read = function(model, cb) {",
          "coverage": 1
        },
        "40": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "41": {
          "source": "    if (self.checkStudio()) {",
          "coverage": 0
        },
        "42": {
          "source": "        cb(\"Studio mode mbaas not supported\");",
          "coverage": 0
        },
        "43": {
          "source": "    } else {",
          "coverage": ""
        },
        "44": {
          "source": "        if (model.get(\"_type\") === \"offlineTest\") {",
          "coverage": 0
        },
        "45": {
          "source": "            cb(\"offlinetest. ignore\");",
          "coverage": 0
        },
        "46": {
          "source": "        } else {",
          "coverage": ""
        },
        "47": {
          "source": "            var url = _getUrl(model);",
          "coverage": 0
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "            if (self.isFileTransfer(model) &amp;&amp; self.isPhoneGap()) {",
          "coverage": 0
        },
        "50": {
          "source": "                web.downloadFile(url, model.getFileMetaData(), cb);",
          "coverage": 0
        },
        "51": {
          "source": "            } else if (self.isFileTransfer(model)) { //Trying to download a file without phone. No need as the direct web urls can be used",
          "coverage": 0
        },
        "52": {
          "source": "                return cb(null, model.getRemoteFileURL());",
          "coverage": 0
        },
        "53": {
          "source": "            } else {",
          "coverage": ""
        },
        "54": {
          "source": "                web.get(url, cb);",
          "coverage": 0
        },
        "55": {
          "source": "            }",
          "coverage": ""
        },
        "56": {
          "source": "        }",
          "coverage": ""
        },
        "57": {
          "source": "    }",
          "coverage": ""
        },
        "58": {
          "source": "};",
          "coverage": ""
        },
        "59": {
          "source": "MBaaS.prototype.update = function(model, cb) {};",
          "coverage": 1
        },
        "60": {
          "source": "MBaaS[\"delete\"] = function(model, cb) {};",
          "coverage": 1
        },
        "61": {
          "source": "//@Deprecated use create instead",
          "coverage": ""
        },
        "62": {
          "source": "MBaaS.prototype.completeSubmission = function(submissionToComplete, cb) {",
          "coverage": 1
        },
        "63": {
          "source": "    if (this.checkStudio()) {",
          "coverage": 0
        },
        "64": {
          "source": "        return cb(\"Studio mode mbaas not supported\");",
          "coverage": 0
        },
        "65": {
          "source": "    }",
          "coverage": ""
        },
        "66": {
          "source": "    var url = _getUrl(submissionToComplete);",
          "coverage": 0
        },
        "67": {
          "source": "    web.post(url, {}, cb);",
          "coverage": 0
        },
        "68": {
          "source": "};",
          "coverage": ""
        },
        "69": {
          "source": "MBaaS.prototype.submissionStatus = function(submission, cb) {",
          "coverage": 1
        },
        "70": {
          "source": "    if (this.checkStudio()) {",
          "coverage": 0
        },
        "71": {
          "source": "        return cb(\"Studio mode mbaas not supported\");",
          "coverage": 0
        },
        "72": {
          "source": "    }",
          "coverage": ""
        },
        "73": {
          "source": "    var url = _getUrl(submission);",
          "coverage": 0
        },
        "74": {
          "source": "    web.get(url, cb);",
          "coverage": 0
        },
        "75": {
          "source": "};",
          "coverage": ""
        },
        "76": {
          "source": "MBaaS.prototype.isOnline = function(cb) {",
          "coverage": 1
        },
        "77": {
          "source": "    var host = config.getCloudHost();",
          "coverage": 0
        },
        "78": {
          "source": "    var url = host + config.get('statusUrl', \"/sys/info/ping\");",
          "coverage": 0
        },
        "79": {
          "source": "",
          "coverage": ""
        },
        "80": {
          "source": "    web.get(url, function(err) {",
          "coverage": 0
        },
        "81": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "82": {
          "source": "            log.e(\"Online status ajax \", err);",
          "coverage": 0
        },
        "83": {
          "source": "            return cb(false);",
          "coverage": 0
        },
        "84": {
          "source": "        } else {",
          "coverage": ""
        },
        "85": {
          "source": "            log.d(\"Online status ajax success\");",
          "coverage": 0
        },
        "86": {
          "source": "            return cb(true);",
          "coverage": 0
        },
        "87": {
          "source": "        }",
          "coverage": ""
        },
        "88": {
          "source": "    });",
          "coverage": ""
        },
        "89": {
          "source": "};",
          "coverage": ""
        },
        "90": {
          "source": "",
          "coverage": ""
        },
        "91": {
          "source": "function _getUrl(model) {",
          "coverage": 1
        },
        "92": {
          "source": "    log.d(\"_getUrl \", model);",
          "coverage": 0
        },
        "93": {
          "source": "    var type = model.get('_type');",
          "coverage": 0
        },
        "94": {
          "source": "    var host = config.getCloudHost();",
          "coverage": 0
        },
        "95": {
          "source": "    var mBaaSBaseUrl = config.get('mbaasBaseUrl');",
          "coverage": 0
        },
        "96": {
          "source": "    var formUrls = config.get('formUrls');",
          "coverage": 0
        },
        "97": {
          "source": "    var relativeUrl = \"\";",
          "coverage": 0
        },
        "98": {
          "source": "    if (formUrls[type]) {",
          "coverage": 0
        },
        "99": {
          "source": "        relativeUrl = formUrls[type];",
          "coverage": 0
        },
        "100": {
          "source": "    } else {",
          "coverage": ""
        },
        "101": {
          "source": "        log.e('type not found to get url:' + type);",
          "coverage": 0
        },
        "102": {
          "source": "    }",
          "coverage": ""
        },
        "103": {
          "source": "    var url = host + mBaaSBaseUrl + relativeUrl;",
          "coverage": 0
        },
        "104": {
          "source": "    var props = {};",
          "coverage": 0
        },
        "105": {
          "source": "    props.appId = config.get('appId');",
          "coverage": 0
        },
        "106": {
          "source": "    //Theme and forms do not require any parameters that are not in _fh",
          "coverage": ""
        },
        "107": {
          "source": "    switch (type) {",
          "coverage": 0
        },
        "108": {
          "source": "        case 'config':",
          "coverage": ""
        },
        "109": {
          "source": "            props.appid = model.get(\"appId\");",
          "coverage": 0
        },
        "110": {
          "source": "            props.deviceId = model.get(\"deviceId\");",
          "coverage": 0
        },
        "111": {
          "source": "            break;",
          "coverage": 0
        },
        "112": {
          "source": "        case 'form':",
          "coverage": ""
        },
        "113": {
          "source": "            props.formId = model.get('_id');",
          "coverage": 0
        },
        "114": {
          "source": "            break;",
          "coverage": 0
        },
        "115": {
          "source": "        case 'formSubmission':",
          "coverage": ""
        },
        "116": {
          "source": "            props.formId = model.getFormId();",
          "coverage": 0
        },
        "117": {
          "source": "            break;",
          "coverage": 0
        },
        "118": {
          "source": "        case 'fileSubmission':",
          "coverage": ""
        },
        "119": {
          "source": "            props.submissionId = model.getSubmissionId();",
          "coverage": 0
        },
        "120": {
          "source": "            props.hashName = model.getHashName();",
          "coverage": 0
        },
        "121": {
          "source": "            props.fieldId = model.getFieldId();",
          "coverage": 0
        },
        "122": {
          "source": "            break;",
          "coverage": 0
        },
        "123": {
          "source": "        case 'base64fileSubmission':",
          "coverage": ""
        },
        "124": {
          "source": "            props.submissionId = model.getSubmissionId();",
          "coverage": 0
        },
        "125": {
          "source": "            props.hashName = model.getHashName();",
          "coverage": 0
        },
        "126": {
          "source": "            props.fieldId = model.getFieldId();",
          "coverage": 0
        },
        "127": {
          "source": "            break;",
          "coverage": 0
        },
        "128": {
          "source": "        case 'submissionStatus':",
          "coverage": ""
        },
        "129": {
          "source": "            props.submissionId = model.get('submissionId');",
          "coverage": 0
        },
        "130": {
          "source": "            break;",
          "coverage": 0
        },
        "131": {
          "source": "        case 'completeSubmission':",
          "coverage": ""
        },
        "132": {
          "source": "            props.submissionId = model.get('submissionId');",
          "coverage": 0
        },
        "133": {
          "source": "            break;",
          "coverage": 0
        },
        "134": {
          "source": "        case 'formSubmissionDownload':",
          "coverage": ""
        },
        "135": {
          "source": "            props.submissionId = model.getSubmissionId();",
          "coverage": 0
        },
        "136": {
          "source": "            break;",
          "coverage": 0
        },
        "137": {
          "source": "        case 'fileSubmissionDownload':",
          "coverage": ""
        },
        "138": {
          "source": "            props.submissionId = model.getSubmissionId();",
          "coverage": 0
        },
        "139": {
          "source": "            props.fileGroupId = model.getFileGroupId();",
          "coverage": 0
        },
        "140": {
          "source": "            break;",
          "coverage": 0
        },
        "141": {
          "source": "        case 'offlineTest':",
          "coverage": ""
        },
        "142": {
          "source": "            return \"http://127.0.0.1:8453\";",
          "coverage": 0
        },
        "143": {
          "source": "    }",
          "coverage": ""
        },
        "144": {
          "source": "    for (var key in props) {",
          "coverage": 0
        },
        "145": {
          "source": "        url = url.replace(':' + key, props[key]);",
          "coverage": 0
        },
        "146": {
          "source": "    }",
          "coverage": ""
        },
        "147": {
          "source": "    return url;",
          "coverage": 0
        },
        "148": {
          "source": "}",
          "coverage": ""
        },
        "149": {
          "source": "",
          "coverage": ""
        },
        "150": {
          "source": "module.exports = MBaaS;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/submission.js",
      "coverage": 12.390924956369982,
      "hits": 71,
      "misses": 502,
      "sloc": 573,
      "source": {
        "1": {
          "source": "//implmenetation",
          "coverage": ""
        },
        "2": {
          "source": "var _submissions = {};",
          "coverage": 1
        },
        "3": {
          "source": "//cache in mem for single reference usage.",
          "coverage": ""
        },
        "4": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "5": {
          "source": "var submissions = require(\"./submissions\");",
          "coverage": 1
        },
        "6": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "7": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "8": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "9": {
          "source": "var uploadManager = require(\"./uploadManager\");",
          "coverage": 1
        },
        "10": {
          "source": "var submissions = require(\"./submissions\");",
          "coverage": 1
        },
        "11": {
          "source": "var localStorage = require(\"./localStorage\");",
          "coverage": 1
        },
        "12": {
          "source": "var Form = require(\"./form\");",
          "coverage": 1
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": "var statusMachine = {",
          "coverage": 1
        },
        "15": {
          "source": "    'new': [",
          "coverage": ""
        },
        "16": {
          "source": "        'draft',",
          "coverage": ""
        },
        "17": {
          "source": "        'pending'",
          "coverage": ""
        },
        "18": {
          "source": "    ],",
          "coverage": ""
        },
        "19": {
          "source": "    'draft': [",
          "coverage": ""
        },
        "20": {
          "source": "        'pending',",
          "coverage": ""
        },
        "21": {
          "source": "        'draft'",
          "coverage": ""
        },
        "22": {
          "source": "    ],",
          "coverage": ""
        },
        "23": {
          "source": "    'pending': [",
          "coverage": ""
        },
        "24": {
          "source": "        'inprogress',",
          "coverage": ""
        },
        "25": {
          "source": "        'error',",
          "coverage": ""
        },
        "26": {
          "source": "        'draft'",
          "coverage": ""
        },
        "27": {
          "source": "    ],",
          "coverage": ""
        },
        "28": {
          "source": "    'inprogress': [",
          "coverage": ""
        },
        "29": {
          "source": "        'pending',",
          "coverage": ""
        },
        "30": {
          "source": "        'error',",
          "coverage": ""
        },
        "31": {
          "source": "        'inprogress',",
          "coverage": ""
        },
        "32": {
          "source": "        'downloaded',",
          "coverage": ""
        },
        "33": {
          "source": "        'queued'",
          "coverage": ""
        },
        "34": {
          "source": "    ],",
          "coverage": ""
        },
        "35": {
          "source": "    'submitted': [],",
          "coverage": ""
        },
        "36": {
          "source": "    'error': [",
          "coverage": ""
        },
        "37": {
          "source": "        'draft',",
          "coverage": ""
        },
        "38": {
          "source": "        'pending',",
          "coverage": ""
        },
        "39": {
          "source": "        'error'",
          "coverage": ""
        },
        "40": {
          "source": "    ],",
          "coverage": ""
        },
        "41": {
          "source": "    'downloaded': [],",
          "coverage": ""
        },
        "42": {
          "source": "    'queued': ['error', 'submitted']",
          "coverage": ""
        },
        "43": {
          "source": "};",
          "coverage": ""
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "function Submission(form, params) {",
          "coverage": 1
        },
        "46": {
          "source": "    params = params || {};",
          "coverage": 0
        },
        "47": {
          "source": "    log.d(\"Submission: \", params);",
          "coverage": 0
        },
        "48": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "49": {
          "source": "        '_type': 'submission'",
          "coverage": ""
        },
        "50": {
          "source": "    });",
          "coverage": ""
        },
        "51": {
          "source": "    if (typeof form !== 'undefined' &amp;&amp; form) {",
          "coverage": 0
        },
        "52": {
          "source": "        this.set('formName', form.get('name'));",
          "coverage": 0
        },
        "53": {
          "source": "        this.set('formId', form.get('_id'));",
          "coverage": 0
        },
        "54": {
          "source": "        this.set('deviceFormTimestamp', form.getLastUpdate());",
          "coverage": 0
        },
        "55": {
          "source": "        this.set('createDate', utils.getTime());",
          "coverage": 0
        },
        "56": {
          "source": "        this.set('timezoneOffset', utils.getTime(true));",
          "coverage": 0
        },
        "57": {
          "source": "        this.set('appId', config.get('appId'));",
          "coverage": 0
        },
        "58": {
          "source": "        this.set('appEnvironment', config.get('env'));",
          "coverage": 0
        },
        "59": {
          "source": "        this.set('appCloudName', '');",
          "coverage": 0
        },
        "60": {
          "source": "        this.set('comments', []);",
          "coverage": 0
        },
        "61": {
          "source": "        this.set('formFields', []);",
          "coverage": 0
        },
        "62": {
          "source": "        this.set('saveDate', null);",
          "coverage": 0
        },
        "63": {
          "source": "        this.set('submitDate', null);",
          "coverage": 0
        },
        "64": {
          "source": "        this.set('uploadStartDate', null);",
          "coverage": 0
        },
        "65": {
          "source": "        this.set('submittedDate', null);",
          "coverage": 0
        },
        "66": {
          "source": "        this.set('userId', null);",
          "coverage": 0
        },
        "67": {
          "source": "        this.set('filesInSubmission', []);",
          "coverage": 0
        },
        "68": {
          "source": "        this.set('deviceId', config.get('deviceId'));",
          "coverage": 0
        },
        "69": {
          "source": "        this.transactionMode = false;",
          "coverage": 0
        },
        "70": {
          "source": "    } else {",
          "coverage": ""
        },
        "71": {
          "source": "        this.set('appId', config.get('appId'));",
          "coverage": 0
        },
        "72": {
          "source": "        if (params.submissionId) {",
          "coverage": 0
        },
        "73": {
          "source": "            this.set('downloadSubmission', true);",
          "coverage": 0
        },
        "74": {
          "source": "            this.setRemoteSubmissionId(params.submissionId);",
          "coverage": 0
        },
        "75": {
          "source": "        } else {",
          "coverage": ""
        },
        "76": {
          "source": "            this.set('status', 'new');",
          "coverage": 0
        },
        "77": {
          "source": "        }",
          "coverage": ""
        },
        "78": {
          "source": "    }",
          "coverage": ""
        },
        "79": {
          "source": "    this.set('status', 'new');",
          "coverage": 0
        },
        "80": {
          "source": "    this.genLocalId();",
          "coverage": 0
        },
        "81": {
          "source": "    var localId = this.getLocalId();",
          "coverage": 0
        },
        "82": {
          "source": "    _submissions[localId] = this;",
          "coverage": 0
        },
        "83": {
          "source": "}",
          "coverage": ""
        },
        "84": {
          "source": "",
          "coverage": ""
        },
        "85": {
          "source": "utils.extend(Submission, Model);",
          "coverage": 1
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "/**",
          "coverage": ""
        },
        "88": {
          "source": " * save current submission as draft",
          "coverage": ""
        },
        "89": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "90": {
          "source": " */",
          "coverage": ""
        },
        "91": {
          "source": "Submission.prototype.saveDraft = function(cb) {",
          "coverage": 1
        },
        "92": {
          "source": "    log.d(\"Submission saveDraft: \");",
          "coverage": 0
        },
        "93": {
          "source": "    var targetStatus = 'draft';",
          "coverage": 0
        },
        "94": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "95": {
          "source": "    this.set('timezoneOffset', utils.getTime(true));",
          "coverage": 0
        },
        "96": {
          "source": "    this.set('saveDate', utils.getTime());",
          "coverage": 0
        },
        "97": {
          "source": "    this.changeStatus(targetStatus, function(err) {",
          "coverage": 0
        },
        "98": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "99": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "100": {
          "source": "        } else {",
          "coverage": ""
        },
        "101": {
          "source": "            that.emit('savedraft');",
          "coverage": 0
        },
        "102": {
          "source": "            cb(null, null);",
          "coverage": 0
        },
        "103": {
          "source": "        }",
          "coverage": ""
        },
        "104": {
          "source": "    });",
          "coverage": ""
        },
        "105": {
          "source": "};",
          "coverage": ""
        },
        "106": {
          "source": "Submission.prototype.validateField = function(fieldId, cb) {",
          "coverage": 1
        },
        "107": {
          "source": "    log.d(\"Submission validateField: \", fieldId);",
          "coverage": 0
        },
        "108": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "109": {
          "source": "    this.getForm(function(err, form) {",
          "coverage": 0
        },
        "110": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "111": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "112": {
          "source": "        } else {",
          "coverage": ""
        },
        "113": {
          "source": "            var submissionData = that.getProps();",
          "coverage": 0
        },
        "114": {
          "source": "            var ruleEngine = form.getRuleEngine();",
          "coverage": 0
        },
        "115": {
          "source": "            ruleEngine.validateField(fieldId, submissionData, cb);",
          "coverage": 0
        },
        "116": {
          "source": "        }",
          "coverage": ""
        },
        "117": {
          "source": "    });",
          "coverage": ""
        },
        "118": {
          "source": "};",
          "coverage": ""
        },
        "119": {
          "source": "Submission.prototype.checkRules = function(cb) {",
          "coverage": 1
        },
        "120": {
          "source": "    log.d(\"Submission checkRules: \");",
          "coverage": 0
        },
        "121": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "122": {
          "source": "    this.getForm(function(err, form) {",
          "coverage": 0
        },
        "123": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "124": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "125": {
          "source": "        } else {",
          "coverage": ""
        },
        "126": {
          "source": "            var submission = self.getProps();",
          "coverage": 0
        },
        "127": {
          "source": "            var ruleEngine = form.getRuleEngine();",
          "coverage": 0
        },
        "128": {
          "source": "            ruleEngine.checkRules(submission, cb);",
          "coverage": 0
        },
        "129": {
          "source": "        }",
          "coverage": ""
        },
        "130": {
          "source": "    });",
          "coverage": ""
        },
        "131": {
          "source": "};",
          "coverage": ""
        },
        "132": {
          "source": "",
          "coverage": ""
        },
        "133": {
          "source": "Submission.prototype.performValidation = function(cb) {",
          "coverage": 1
        },
        "134": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "135": {
          "source": "    self.getForm(function(err, form) {",
          "coverage": 0
        },
        "136": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "137": {
          "source": "            log.e(\"Submission submit: Error getting form \", err);",
          "coverage": 0
        },
        "138": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "139": {
          "source": "        }",
          "coverage": ""
        },
        "140": {
          "source": "        var ruleEngine = form.getRuleEngine();",
          "coverage": 0
        },
        "141": {
          "source": "        var submission = self.getProps();",
          "coverage": 0
        },
        "142": {
          "source": "        ruleEngine.validateForm(submission, cb);",
          "coverage": 0
        },
        "143": {
          "source": "    });",
          "coverage": ""
        },
        "144": {
          "source": "};",
          "coverage": ""
        },
        "145": {
          "source": "",
          "coverage": ""
        },
        "146": {
          "source": "/**",
          "coverage": ""
        },
        "147": {
          "source": " * Validate the submission only.",
          "coverage": ""
        },
        "148": {
          "source": " */",
          "coverage": ""
        },
        "149": {
          "source": "Submission.prototype.validateSubmission = function(cb) {",
          "coverage": 1
        },
        "150": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "151": {
          "source": "",
          "coverage": ""
        },
        "152": {
          "source": "    self.performValidation(function(err, res) {",
          "coverage": 0
        },
        "153": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "154": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "155": {
          "source": "        }",
          "coverage": ""
        },
        "156": {
          "source": "        var validation = res.validation;",
          "coverage": 0
        },
        "157": {
          "source": "        if (validation.valid) {",
          "coverage": 0
        },
        "158": {
          "source": "            return cb(null, validation.valid);",
          "coverage": 0
        },
        "159": {
          "source": "        } else {",
          "coverage": ""
        },
        "160": {
          "source": "            self.emit('validationerror', validation);",
          "coverage": 0
        },
        "161": {
          "source": "            cb(null, validation.valid);",
          "coverage": 0
        },
        "162": {
          "source": "        }",
          "coverage": ""
        },
        "163": {
          "source": "    });",
          "coverage": ""
        },
        "164": {
          "source": "};",
          "coverage": ""
        },
        "165": {
          "source": "",
          "coverage": ""
        },
        "166": {
          "source": "/**",
          "coverage": ""
        },
        "167": {
          "source": " * submit current submission to remote",
          "coverage": ""
        },
        "168": {
          "source": " * @param  {Function} cb [description]",
          "coverage": ""
        },
        "169": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "170": {
          "source": " */",
          "coverage": ""
        },
        "171": {
          "source": "Submission.prototype.submit = function(cb) {",
          "coverage": 1
        },
        "172": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "173": {
          "source": "    log.d(\"Submission submit: \");",
          "coverage": 0
        },
        "174": {
          "source": "    var targetStatus = 'pending';",
          "coverage": 0
        },
        "175": {
          "source": "    var validateResult = true;",
          "coverage": 0
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "    this.set('timezoneOffset', utils.getTime(true));",
          "coverage": 0
        },
        "178": {
          "source": "    that.performValidation(function(err, res) {",
          "coverage": 0
        },
        "179": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "180": {
          "source": "            log.e(\"Submission submit validateForm: Error validating form \", err);",
          "coverage": 0
        },
        "181": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "182": {
          "source": "        } else {",
          "coverage": ""
        },
        "183": {
          "source": "            log.d(\"Submission submit: validateForm. Completed result\", res);",
          "coverage": 0
        },
        "184": {
          "source": "            var validation = res.validation;",
          "coverage": 0
        },
        "185": {
          "source": "            if (validation.valid) {",
          "coverage": 0
        },
        "186": {
          "source": "                log.d(\"Submission submit: validateForm. Completed Form Valid\", res);",
          "coverage": 0
        },
        "187": {
          "source": "                that.set('submitDate', new Date());",
          "coverage": 0
        },
        "188": {
          "source": "                that.changeStatus(targetStatus, function(error) {",
          "coverage": 0
        },
        "189": {
          "source": "                    if (error) {",
          "coverage": 0
        },
        "190": {
          "source": "                        cb(error);",
          "coverage": 0
        },
        "191": {
          "source": "                    } else {",
          "coverage": ""
        },
        "192": {
          "source": "                        that.emit('submit');",
          "coverage": 0
        },
        "193": {
          "source": "                        cb(null, null);",
          "coverage": 0
        },
        "194": {
          "source": "                    }",
          "coverage": ""
        },
        "195": {
          "source": "                });",
          "coverage": ""
        },
        "196": {
          "source": "            } else {",
          "coverage": ""
        },
        "197": {
          "source": "                log.d(\"Submission submit: validateForm. Completed Validation error\", res);",
          "coverage": 0
        },
        "198": {
          "source": "                that.emit('validationerror', validation);",
          "coverage": 0
        },
        "199": {
          "source": "                cb('Validation error');",
          "coverage": 0
        },
        "200": {
          "source": "            }",
          "coverage": ""
        },
        "201": {
          "source": "        }",
          "coverage": ""
        },
        "202": {
          "source": "    });",
          "coverage": ""
        },
        "203": {
          "source": "};",
          "coverage": ""
        },
        "204": {
          "source": "Submission.prototype.getUploadTask = function(cb) {",
          "coverage": 1
        },
        "205": {
          "source": "    var taskId = this.getUploadTaskId();",
          "coverage": 0
        },
        "206": {
          "source": "    if (taskId) {",
          "coverage": 0
        },
        "207": {
          "source": "        uploadManager.getTaskById(taskId, cb);",
          "coverage": 0
        },
        "208": {
          "source": "    } else {",
          "coverage": ""
        },
        "209": {
          "source": "        cb(null, null);",
          "coverage": 0
        },
        "210": {
          "source": "    }",
          "coverage": ""
        },
        "211": {
          "source": "};",
          "coverage": ""
        },
        "212": {
          "source": "Submission.prototype.getFormId = function() {",
          "coverage": 1
        },
        "213": {
          "source": "    return this.get(\"formId\");",
          "coverage": 0
        },
        "214": {
          "source": "};",
          "coverage": ""
        },
        "215": {
          "source": "/**",
          "coverage": ""
        },
        "216": {
          "source": " * If a submission is a download submission, the JSON definition of the form",
          "coverage": ""
        },
        "217": {
          "source": " * that it was submitted against is contained in the submission.",
          "coverage": ""
        },
        "218": {
          "source": " */",
          "coverage": ""
        },
        "219": {
          "source": "Submission.prototype.getFormSubmittedAgainst = function() {",
          "coverage": 1
        },
        "220": {
          "source": "    return this.get(\"formSubmittedAgainst\");",
          "coverage": 0
        },
        "221": {
          "source": "};",
          "coverage": ""
        },
        "222": {
          "source": "Submission.prototype.getDownloadTask = function(cb) {",
          "coverage": 1
        },
        "223": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "224": {
          "source": "    log.d(\"getDownloadTask\");",
          "coverage": 0
        },
        "225": {
          "source": "    if (self.isDownloadSubmission()) {",
          "coverage": 0
        },
        "226": {
          "source": "        self.getUploadTask(cb);",
          "coverage": 0
        },
        "227": {
          "source": "    } else {",
          "coverage": ""
        },
        "228": {
          "source": "        if (cb &amp;&amp; typeof(cb) === 'function') {",
          "coverage": 0
        },
        "229": {
          "source": "            log.e(\"Submission is not a download submission\");",
          "coverage": 0
        },
        "230": {
          "source": "            return cb(\"Submission is not a download submission\");",
          "coverage": 0
        },
        "231": {
          "source": "        }",
          "coverage": ""
        },
        "232": {
          "source": "    }",
          "coverage": ""
        },
        "233": {
          "source": "};",
          "coverage": ""
        },
        "234": {
          "source": "Submission.prototype.cancelUploadTask = function(cb) {",
          "coverage": 1
        },
        "235": {
          "source": "    var targetStatus = 'submit';",
          "coverage": 0
        },
        "236": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "237": {
          "source": "    uploadManager.cancelSubmission(this, function(err) {",
          "coverage": 0
        },
        "238": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "239": {
          "source": "            log.e(err);",
          "coverage": 0
        },
        "240": {
          "source": "        }",
          "coverage": ""
        },
        "241": {
          "source": "        that.changeStatus(targetStatus, cb);",
          "coverage": 0
        },
        "242": {
          "source": "    });",
          "coverage": ""
        },
        "243": {
          "source": "};",
          "coverage": ""
        },
        "244": {
          "source": "Submission.prototype.getUploadTaskId = function() {",
          "coverage": 1
        },
        "245": {
          "source": "    return this.get('uploadTaskId');",
          "coverage": 0
        },
        "246": {
          "source": "};",
          "coverage": ""
        },
        "247": {
          "source": "Submission.prototype.setUploadTaskId = function(utId) {",
          "coverage": 1
        },
        "248": {
          "source": "    this.set('uploadTaskId', utId);",
          "coverage": 0
        },
        "249": {
          "source": "};",
          "coverage": ""
        },
        "250": {
          "source": "Submission.prototype.isInProgress = function() {",
          "coverage": 1
        },
        "251": {
          "source": "    return this.get(\"status\") === \"inprogress\";",
          "coverage": 0
        },
        "252": {
          "source": "};",
          "coverage": ""
        },
        "253": {
          "source": "Submission.prototype.isDownloaded = function() {",
          "coverage": 1
        },
        "254": {
          "source": "    return this.get(\"status\") === \"downloaded\";",
          "coverage": 0
        },
        "255": {
          "source": "};",
          "coverage": ""
        },
        "256": {
          "source": "Submission.prototype.isSubmitted = function() {",
          "coverage": 1
        },
        "257": {
          "source": "    return this.get(\"status\") === \"submitted\";",
          "coverage": 0
        },
        "258": {
          "source": "};",
          "coverage": ""
        },
        "259": {
          "source": "Submission.prototype.submitted = function(cb) {",
          "coverage": 1
        },
        "260": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "261": {
          "source": "    if (self.isDownloadSubmission()) {",
          "coverage": 0
        },
        "262": {
          "source": "        var errMsg = \"Downloaded submissions should not call submitted function.\";",
          "coverage": 0
        },
        "263": {
          "source": "        log.e(errMsg);",
          "coverage": 0
        },
        "264": {
          "source": "        return cb(errMsg);",
          "coverage": 0
        },
        "265": {
          "source": "    }",
          "coverage": ""
        },
        "266": {
          "source": "    log.d(\"Submission submitted called\");",
          "coverage": 0
        },
        "267": {
          "source": "",
          "coverage": ""
        },
        "268": {
          "source": "    var targetStatus = 'submitted';",
          "coverage": 0
        },
        "269": {
          "source": "",
          "coverage": ""
        },
        "270": {
          "source": "    self.set('submittedDate', utils.getTime());",
          "coverage": 0
        },
        "271": {
          "source": "    self.changeStatus(targetStatus, function(err) {",
          "coverage": 0
        },
        "272": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "273": {
          "source": "            log.e(\"Error setting submitted status \" + err);",
          "coverage": 0
        },
        "274": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "275": {
          "source": "        } else {",
          "coverage": ""
        },
        "276": {
          "source": "            log.d(\"Submitted status set for submission \" + self.get('submissionId') + \" with localId \" + self.getLocalId());",
          "coverage": 0
        },
        "277": {
          "source": "            self.emit('submitted', self.get('submissionId'));",
          "coverage": 0
        },
        "278": {
          "source": "            cb(null, null);",
          "coverage": 0
        },
        "279": {
          "source": "        }",
          "coverage": ""
        },
        "280": {
          "source": "    });",
          "coverage": ""
        },
        "281": {
          "source": "};",
          "coverage": ""
        },
        "282": {
          "source": "Submission.prototype.queued = function(cb) {",
          "coverage": 1
        },
        "283": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "284": {
          "source": "    if (self.isDownloadSubmission()) {",
          "coverage": 0
        },
        "285": {
          "source": "        var errMsg = \"Downloaded submissions should not call queued function.\";",
          "coverage": 0
        },
        "286": {
          "source": "        log.e(errMsg);",
          "coverage": 0
        },
        "287": {
          "source": "        return cb(errMsg);",
          "coverage": 0
        },
        "288": {
          "source": "    }",
          "coverage": ""
        },
        "289": {
          "source": "",
          "coverage": ""
        },
        "290": {
          "source": "    var targetStatus = 'queued';",
          "coverage": 0
        },
        "291": {
          "source": "    self.set('queuedDate', utils.getTime());",
          "coverage": 0
        },
        "292": {
          "source": "    self.changeStatus(targetStatus, function(err) {",
          "coverage": 0
        },
        "293": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "294": {
          "source": "            log.e(\"Error setting queued status \" + err);",
          "coverage": 0
        },
        "295": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "296": {
          "source": "        } else {",
          "coverage": ""
        },
        "297": {
          "source": "            log.d(\"Queued status set for submission \" + self.get('submissionId') + \" with localId \" + self.getLocalId());",
          "coverage": 0
        },
        "298": {
          "source": "            self.emit('queued', self.get('submissionId'));",
          "coverage": 0
        },
        "299": {
          "source": "            cb(null, self);",
          "coverage": 0
        },
        "300": {
          "source": "        }",
          "coverage": ""
        },
        "301": {
          "source": "    });",
          "coverage": ""
        },
        "302": {
          "source": "};",
          "coverage": ""
        },
        "303": {
          "source": "Submission.prototype.downloaded = function(cb) {",
          "coverage": 1
        },
        "304": {
          "source": "    log.d(\"Submission Downloaded called\");",
          "coverage": 0
        },
        "305": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "306": {
          "source": "    var targetStatus = 'downloaded';",
          "coverage": 0
        },
        "307": {
          "source": "",
          "coverage": ""
        },
        "308": {
          "source": "    that.set('downloadedDate', utils.getTime());",
          "coverage": 0
        },
        "309": {
          "source": "    that.changeStatus(targetStatus, function(err) {",
          "coverage": 0
        },
        "310": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "311": {
          "source": "            log.e(\"Error setting downloaded status \" + err);",
          "coverage": 0
        },
        "312": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "313": {
          "source": "        } else {",
          "coverage": ""
        },
        "314": {
          "source": "            log.d(\"Downloaded status set for submission \" + that.get('submissionId') + \" with localId \" + that.getLocalId());",
          "coverage": 0
        },
        "315": {
          "source": "            that.emit('downloaded', that.get('submissionId'));",
          "coverage": 0
        },
        "316": {
          "source": "            cb(null, that);",
          "coverage": 0
        },
        "317": {
          "source": "        }",
          "coverage": ""
        },
        "318": {
          "source": "    });",
          "coverage": ""
        },
        "319": {
          "source": "};",
          "coverage": ""
        },
        "320": {
          "source": "//joint form id and submissions timestamp.",
          "coverage": ""
        },
        "321": {
          "source": "Submission.prototype.genLocalId = function() {",
          "coverage": 1
        },
        "322": {
          "source": "    var lid = utils.localId(this);",
          "coverage": 0
        },
        "323": {
          "source": "    var formId = this.get('formId') || Math.ceil(Math.random() * 100000);",
          "coverage": 0
        },
        "324": {
          "source": "    this.setLocalId(formId + '_' + lid);",
          "coverage": 0
        },
        "325": {
          "source": "};",
          "coverage": ""
        },
        "326": {
          "source": "/**",
          "coverage": ""
        },
        "327": {
          "source": " * change status and save the submission locally and register to submissions list.",
          "coverage": ""
        },
        "328": {
          "source": " * @param {[type]} status [description]",
          "coverage": ""
        },
        "329": {
          "source": " */",
          "coverage": ""
        },
        "330": {
          "source": "Submission.prototype.changeStatus = function(status, cb) {",
          "coverage": 1
        },
        "331": {
          "source": "    if (this.isStatusValid(status)) {",
          "coverage": 0
        },
        "332": {
          "source": "        var that = this;",
          "coverage": 0
        },
        "333": {
          "source": "        this.set('status', status);",
          "coverage": 0
        },
        "334": {
          "source": "        this.saveToList(function(err) {",
          "coverage": 0
        },
        "335": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "336": {
          "source": "                log.e(err);",
          "coverage": 0
        },
        "337": {
          "source": "            }",
          "coverage": ""
        },
        "338": {
          "source": "        });",
          "coverage": ""
        },
        "339": {
          "source": "        this.saveLocal(cb);",
          "coverage": 0
        },
        "340": {
          "source": "    } else {",
          "coverage": ""
        },
        "341": {
          "source": "        log.e('Target status is not valid: ' + status);",
          "coverage": 0
        },
        "342": {
          "source": "        cb('Target status is not valid: ' + status);",
          "coverage": 0
        },
        "343": {
          "source": "    }",
          "coverage": ""
        },
        "344": {
          "source": "};",
          "coverage": ""
        },
        "345": {
          "source": "Submission.prototype.upload = function(cb) {",
          "coverage": 1
        },
        "346": {
          "source": "    var targetStatus = \"inprogress\";",
          "coverage": 0
        },
        "347": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "348": {
          "source": "    if (this.isStatusValid(targetStatus)) {",
          "coverage": 0
        },
        "349": {
          "source": "        this.set(\"status\", targetStatus);",
          "coverage": 0
        },
        "350": {
          "source": "        this.set(\"uploadStartDate\", utils.getTime());",
          "coverage": 0
        },
        "351": {
          "source": "        submissions.updateSubmissionWithoutSaving(this);",
          "coverage": 0
        },
        "352": {
          "source": "        uploadManager.queueSubmission(self, function(err, ut) {",
          "coverage": 0
        },
        "353": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "354": {
          "source": "                cb(err);",
          "coverage": 0
        },
        "355": {
          "source": "            } else {",
          "coverage": ""
        },
        "356": {
          "source": "                ut.set(\"error\", null);",
          "coverage": 0
        },
        "357": {
          "source": "                ut.saveLocal(function(err) {",
          "coverage": 0
        },
        "358": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "359": {
          "source": "                        log.e(\"Error saving upload task: \" + err);",
          "coverage": 0
        },
        "360": {
          "source": "                    }",
          "coverage": ""
        },
        "361": {
          "source": "                });",
          "coverage": ""
        },
        "362": {
          "source": "                self.emit(\"inprogress\", ut);",
          "coverage": 0
        },
        "363": {
          "source": "                ut.on(\"progress\", function(progress) {",
          "coverage": 0
        },
        "364": {
          "source": "                    log.d(\"Emitting upload progress for submission: \" + self.getLocalId() + JSON.stringify(progress));",
          "coverage": 0
        },
        "365": {
          "source": "                    self.emit(\"progress\", progress);",
          "coverage": 0
        },
        "366": {
          "source": "                });",
          "coverage": ""
        },
        "367": {
          "source": "                cb(null, ut);",
          "coverage": 0
        },
        "368": {
          "source": "            }",
          "coverage": ""
        },
        "369": {
          "source": "        });",
          "coverage": ""
        },
        "370": {
          "source": "    } else {",
          "coverage": ""
        },
        "371": {
          "source": "        return cb(\"Invalid Status to upload a form submission.\");",
          "coverage": 0
        },
        "372": {
          "source": "    }",
          "coverage": ""
        },
        "373": {
          "source": "};",
          "coverage": ""
        },
        "374": {
          "source": "Submission.prototype.download = function(cb) {",
          "coverage": 1
        },
        "375": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "376": {
          "source": "    log.d(\"Starting download for submission: \" + that.getLocalId());",
          "coverage": 0
        },
        "377": {
          "source": "    var targetStatus = \"pending\";",
          "coverage": 0
        },
        "378": {
          "source": "    if (this.isStatusValid(targetStatus)) {",
          "coverage": 0
        },
        "379": {
          "source": "        this.set(\"status\", targetStatus);",
          "coverage": 0
        },
        "380": {
          "source": "        targetStatus = \"inprogress\";",
          "coverage": 0
        },
        "381": {
          "source": "        if (this.isStatusValid(targetStatus)) {",
          "coverage": 0
        },
        "382": {
          "source": "            this.set(\"status\", targetStatus);",
          "coverage": 0
        },
        "383": {
          "source": "            //Status is valid, add the submission to the",
          "coverage": ""
        },
        "384": {
          "source": "            uploadManager.queueSubmission(that, function(err, downloadTask) {",
          "coverage": 0
        },
        "385": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "386": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "387": {
          "source": "                }",
          "coverage": ""
        },
        "388": {
          "source": "                downloadTask.set(\"error\", null);",
          "coverage": 0
        },
        "389": {
          "source": "                downloadTask.saveLocal(function(err) {",
          "coverage": 0
        },
        "390": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "391": {
          "source": "                        log.e(\"Error saving download task: \" + err);",
          "coverage": 0
        },
        "392": {
          "source": "                    }",
          "coverage": ""
        },
        "393": {
          "source": "                });",
          "coverage": ""
        },
        "394": {
          "source": "                that.emit(\"inprogress\", downloadTask);",
          "coverage": 0
        },
        "395": {
          "source": "                downloadTask.on(\"progress\", function(progress) {",
          "coverage": 0
        },
        "396": {
          "source": "                    log.d(\"Emitting download progress for submission: \" + that.getLocalId() + JSON.stringify(progress));",
          "coverage": 0
        },
        "397": {
          "source": "                    that.emit(\"progress\", progress);",
          "coverage": 0
        },
        "398": {
          "source": "                });",
          "coverage": ""
        },
        "399": {
          "source": "                return cb(null, downloadTask);",
          "coverage": 0
        },
        "400": {
          "source": "            });",
          "coverage": ""
        },
        "401": {
          "source": "        } else {",
          "coverage": ""
        },
        "402": {
          "source": "            return cb(\"Invalid Status to dowload a form submission\");",
          "coverage": 0
        },
        "403": {
          "source": "        }",
          "coverage": ""
        },
        "404": {
          "source": "    } else {",
          "coverage": ""
        },
        "405": {
          "source": "        return cb(\"Invalid Status to download a form submission.\");",
          "coverage": 0
        },
        "406": {
          "source": "    }",
          "coverage": ""
        },
        "407": {
          "source": "};",
          "coverage": ""
        },
        "408": {
          "source": "Submission.prototype.saveToList = function(cb) {",
          "coverage": 1
        },
        "409": {
          "source": "    submissions.saveSubmission(this, cb);",
          "coverage": 0
        },
        "410": {
          "source": "};",
          "coverage": ""
        },
        "411": {
          "source": "Submission.prototype.error = function(errorMsg, cb) {",
          "coverage": 1
        },
        "412": {
          "source": "    this.set('errorMessage', errorMsg);",
          "coverage": 0
        },
        "413": {
          "source": "    var targetStatus = 'error';",
          "coverage": 0
        },
        "414": {
          "source": "    this.changeStatus(targetStatus, cb);",
          "coverage": 0
        },
        "415": {
          "source": "    this.emit('error', errorMsg);",
          "coverage": 0
        },
        "416": {
          "source": "};",
          "coverage": ""
        },
        "417": {
          "source": "Submission.prototype.getStatus = function() {",
          "coverage": 1
        },
        "418": {
          "source": "    return this.get('status');",
          "coverage": 0
        },
        "419": {
          "source": "};",
          "coverage": ""
        },
        "420": {
          "source": "/**",
          "coverage": ""
        },
        "421": {
          "source": " * check if a target status is valid",
          "coverage": ""
        },
        "422": {
          "source": " * @param  {[type]}  targetStatus [description]",
          "coverage": ""
        },
        "423": {
          "source": " * @return {Boolean}              [description]",
          "coverage": ""
        },
        "424": {
          "source": " */",
          "coverage": ""
        },
        "425": {
          "source": "Submission.prototype.isStatusValid = function(targetStatus) {",
          "coverage": 1
        },
        "426": {
          "source": "    log.d(\"isStatusValid. Target Status: \" + targetStatus + \" Current Status: \" + this.get('status').toLowerCase());",
          "coverage": 0
        },
        "427": {
          "source": "    var status = this.get('status').toLowerCase();",
          "coverage": 0
        },
        "428": {
          "source": "    var nextStatus = statusMachine[status];",
          "coverage": 0
        },
        "429": {
          "source": "    if (nextStatus.indexOf(targetStatus) &gt; -1) {",
          "coverage": 0
        },
        "430": {
          "source": "        return true;",
          "coverage": 0
        },
        "431": {
          "source": "    } else {",
          "coverage": ""
        },
        "432": {
          "source": "        this.set('status', 'error');",
          "coverage": 0
        },
        "433": {
          "source": "        return false;",
          "coverage": 0
        },
        "434": {
          "source": "    }",
          "coverage": ""
        },
        "435": {
          "source": "};",
          "coverage": ""
        },
        "436": {
          "source": "Submission.prototype.addComment = function(msg, user) {",
          "coverage": 1
        },
        "437": {
          "source": "    var now = utils.getTime();",
          "coverage": 0
        },
        "438": {
          "source": "    var ts = now.getTime();",
          "coverage": 0
        },
        "439": {
          "source": "    var newComment = {",
          "coverage": 0
        },
        "440": {
          "source": "        'madeBy': typeof user === 'undefined' ? '' : user.toString(),",
          "coverage": ""
        },
        "441": {
          "source": "        'madeOn': now,",
          "coverage": ""
        },
        "442": {
          "source": "        'value': msg,",
          "coverage": ""
        },
        "443": {
          "source": "        'timeStamp': ts",
          "coverage": ""
        },
        "444": {
          "source": "    };",
          "coverage": ""
        },
        "445": {
          "source": "    this.getComments().push(newComment);",
          "coverage": 0
        },
        "446": {
          "source": "    return ts;",
          "coverage": 0
        },
        "447": {
          "source": "};",
          "coverage": ""
        },
        "448": {
          "source": "Submission.prototype.getComments = function() {",
          "coverage": 1
        },
        "449": {
          "source": "    return this.get('comments');",
          "coverage": 0
        },
        "450": {
          "source": "};",
          "coverage": ""
        },
        "451": {
          "source": "Submission.prototype.removeComment = function(timeStamp) {",
          "coverage": 1
        },
        "452": {
          "source": "    var comments = this.getComments();",
          "coverage": 0
        },
        "453": {
          "source": "    for (var i = 0; i &lt; comments.length; i++) {",
          "coverage": 0
        },
        "454": {
          "source": "        var comment = comments[i];",
          "coverage": 0
        },
        "455": {
          "source": "        if (comment.timeStamp === timeStamp) {",
          "coverage": 0
        },
        "456": {
          "source": "            comments.splice(i, 1);",
          "coverage": 0
        },
        "457": {
          "source": "            return;",
          "coverage": 0
        },
        "458": {
          "source": "        }",
          "coverage": ""
        },
        "459": {
          "source": "    }",
          "coverage": ""
        },
        "460": {
          "source": "};",
          "coverage": ""
        },
        "461": {
          "source": "",
          "coverage": ""
        },
        "462": {
          "source": "Submission.prototype.populateFilesInSubmission = function() {",
          "coverage": 1
        },
        "463": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "464": {
          "source": "    var tmpFileNames = [];",
          "coverage": 0
        },
        "465": {
          "source": "",
          "coverage": ""
        },
        "466": {
          "source": "    var submissionFiles = self.getSubmissionFiles();",
          "coverage": 0
        },
        "467": {
          "source": "    for (var fieldValIndex = 0; fieldValIndex &lt; submissionFiles.length; fieldValIndex++) {",
          "coverage": 0
        },
        "468": {
          "source": "        if (submissionFiles[fieldValIndex].fileName) {",
          "coverage": 0
        },
        "469": {
          "source": "            tmpFileNames.push(submissionFiles[fieldValIndex].fileName);",
          "coverage": 0
        },
        "470": {
          "source": "        } else if (submissionFiles[fieldValIndex].hashName) {",
          "coverage": 0
        },
        "471": {
          "source": "            tmpFileNames.push(submissionFiles[fieldValIndex].hashName);",
          "coverage": 0
        },
        "472": {
          "source": "        }",
          "coverage": ""
        },
        "473": {
          "source": "    }",
          "coverage": ""
        },
        "474": {
          "source": "",
          "coverage": ""
        },
        "475": {
          "source": "    self.set(\"filesInSubmission\", submissionFiles);",
          "coverage": 0
        },
        "476": {
          "source": "};",
          "coverage": ""
        },
        "477": {
          "source": "",
          "coverage": ""
        },
        "478": {
          "source": "Submission.prototype.getSubmissionFiles = function() {",
          "coverage": 1
        },
        "479": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "480": {
          "source": "    log.d(\"In getSubmissionFiles: \" + self.getLocalId());",
          "coverage": 0
        },
        "481": {
          "source": "    var submissionFiles = [];",
          "coverage": 0
        },
        "482": {
          "source": "",
          "coverage": ""
        },
        "483": {
          "source": "    var formFields = self.getFormFields();",
          "coverage": 0
        },
        "484": {
          "source": "",
          "coverage": ""
        },
        "485": {
          "source": "    for (var formFieldIndex = 0; formFieldIndex &lt; formFields.length; formFieldIndex++) {",
          "coverage": 0
        },
        "486": {
          "source": "        var tmpFieldValues = formFields[formFieldIndex].fieldValues || [];",
          "coverage": 0
        },
        "487": {
          "source": "        for (var fieldValIndex = 0; fieldValIndex &lt; tmpFieldValues.length; fieldValIndex++) {",
          "coverage": 0
        },
        "488": {
          "source": "            if (tmpFieldValues[fieldValIndex].fileName) {",
          "coverage": 0
        },
        "489": {
          "source": "                submissionFiles.push(tmpFieldValues[fieldValIndex]);",
          "coverage": 0
        },
        "490": {
          "source": "            } else if (tmpFieldValues[fieldValIndex].hashName) {",
          "coverage": 0
        },
        "491": {
          "source": "                submissionFiles.push(tmpFieldValues[fieldValIndex]);",
          "coverage": 0
        },
        "492": {
          "source": "            }",
          "coverage": ""
        },
        "493": {
          "source": "        }",
          "coverage": ""
        },
        "494": {
          "source": "",
          "coverage": ""
        },
        "495": {
          "source": "    }",
          "coverage": ""
        },
        "496": {
          "source": "",
          "coverage": ""
        },
        "497": {
          "source": "    return submissionFiles;",
          "coverage": 0
        },
        "498": {
          "source": "};",
          "coverage": ""
        },
        "499": {
          "source": "",
          "coverage": ""
        },
        "500": {
          "source": "/**",
          "coverage": ""
        },
        "501": {
          "source": " * Add a value to submission.",
          "coverage": ""
        },
        "502": {
          "source": " * This will not cause the field been validated.",
          "coverage": ""
        },
        "503": {
          "source": " * Validation should happen:",
          "coverage": ""
        },
        "504": {
          "source": " * 1. onblur (field value)",
          "coverage": ""
        },
        "505": {
          "source": " * 2. onsubmit (whole submission json)",
          "coverage": ""
        },
        "506": {
          "source": " *",
          "coverage": ""
        },
        "507": {
          "source": " * @param {[type]} params   {\"fieldId\",\"value\",\"index\":optional}",
          "coverage": ""
        },
        "508": {
          "source": " * @param {} cb(err,res) callback function when finished",
          "coverage": ""
        },
        "509": {
          "source": " * @return true / error message",
          "coverage": ""
        },
        "510": {
          "source": " */",
          "coverage": ""
        },
        "511": {
          "source": "Submission.prototype.addInputValue = function(params, cb) {",
          "coverage": 1
        },
        "512": {
          "source": "    log.d(\"Adding input value: \", JSON.stringify(params || {}));",
          "coverage": 0
        },
        "513": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "514": {
          "source": "    var fieldId = params.fieldId;",
          "coverage": 0
        },
        "515": {
          "source": "    var inputValue = params.value;",
          "coverage": 0
        },
        "516": {
          "source": "",
          "coverage": ""
        },
        "517": {
          "source": "    if (inputValue !== null &amp;&amp; typeof(inputValue) !== 'undefined') {",
          "coverage": 0
        },
        "518": {
          "source": "        var index = params.index === undefined ? -1 : params.index;",
          "coverage": 0
        },
        "519": {
          "source": "        this.getForm(function(err, form) {",
          "coverage": 0
        },
        "520": {
          "source": "            var fieldModel = form.getFieldModelById(fieldId);",
          "coverage": 0
        },
        "521": {
          "source": "            if (that.transactionMode) {",
          "coverage": 0
        },
        "522": {
          "source": "                if (!that.tmpFields[fieldId]) {",
          "coverage": 0
        },
        "523": {
          "source": "                    that.tmpFields[fieldId] = [];",
          "coverage": 0
        },
        "524": {
          "source": "                }",
          "coverage": ""
        },
        "525": {
          "source": "",
          "coverage": ""
        },
        "526": {
          "source": "                params.isStore = false; //Don't store the files until the transaction is complete",
          "coverage": 0
        },
        "527": {
          "source": "                fieldModel.processInput(params, function(err, result) {",
          "coverage": 0
        },
        "528": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "529": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "530": {
          "source": "                    } else {",
          "coverage": ""
        },
        "531": {
          "source": "                        if (index &gt; -1) {",
          "coverage": 0
        },
        "532": {
          "source": "                            that.tmpFields[fieldId][index] = result;",
          "coverage": 0
        },
        "533": {
          "source": "                        } else {",
          "coverage": ""
        },
        "534": {
          "source": "                            that.tmpFields[fieldId].push(result);",
          "coverage": 0
        },
        "535": {
          "source": "                        }",
          "coverage": ""
        },
        "536": {
          "source": "",
          "coverage": ""
        },
        "537": {
          "source": "                        return cb(null, result);",
          "coverage": 0
        },
        "538": {
          "source": "                    }",
          "coverage": ""
        },
        "539": {
          "source": "                });",
          "coverage": ""
        },
        "540": {
          "source": "            } else {",
          "coverage": ""
        },
        "541": {
          "source": "                var target = that.getInputValueObjectById(fieldId);",
          "coverage": 0
        },
        "542": {
          "source": "",
          "coverage": ""
        },
        "543": {
          "source": "                //File already exists for this input, overwrite rather than create a new file",
          "coverage": ""
        },
        "544": {
          "source": "                if (target.fieldValues[index]) {",
          "coverage": 0
        },
        "545": {
          "source": "                    if (typeof(target.fieldValues[index].hashName) === \"string\") {",
          "coverage": 0
        },
        "546": {
          "source": "                        params.previousFile = target.fieldValues[index];",
          "coverage": 0
        },
        "547": {
          "source": "                    }",
          "coverage": ""
        },
        "548": {
          "source": "                }",
          "coverage": ""
        },
        "549": {
          "source": "",
          "coverage": ""
        },
        "550": {
          "source": "",
          "coverage": ""
        },
        "551": {
          "source": "                fieldModel.processInput(params, function(err, result) {",
          "coverage": 0
        },
        "552": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "553": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "554": {
          "source": "                    } else {",
          "coverage": ""
        },
        "555": {
          "source": "                        if (index &gt; -1) {",
          "coverage": 0
        },
        "556": {
          "source": "                            target.fieldValues[index] = result;",
          "coverage": 0
        },
        "557": {
          "source": "                        } else {",
          "coverage": ""
        },
        "558": {
          "source": "                            target.fieldValues.push(result);",
          "coverage": 0
        },
        "559": {
          "source": "                        }",
          "coverage": ""
        },
        "560": {
          "source": "",
          "coverage": ""
        },
        "561": {
          "source": "                        if (typeof(result.hashName) === \"string\") {",
          "coverage": 0
        },
        "562": {
          "source": "                            that.pushFile(result.hashName);",
          "coverage": 0
        },
        "563": {
          "source": "                        }",
          "coverage": ""
        },
        "564": {
          "source": "",
          "coverage": ""
        },
        "565": {
          "source": "                        return cb(null, result);",
          "coverage": 0
        },
        "566": {
          "source": "                    }",
          "coverage": ""
        },
        "567": {
          "source": "                });",
          "coverage": ""
        },
        "568": {
          "source": "            }",
          "coverage": ""
        },
        "569": {
          "source": "        });",
          "coverage": ""
        },
        "570": {
          "source": "    } else {",
          "coverage": ""
        },
        "571": {
          "source": "        log.e(\"addInputValue: Input value was null. Params: \" + fieldId);",
          "coverage": 0
        },
        "572": {
          "source": "        return cb(null, {});",
          "coverage": 0
        },
        "573": {
          "source": "    }",
          "coverage": ""
        },
        "574": {
          "source": "};",
          "coverage": ""
        },
        "575": {
          "source": "Submission.prototype.pushFile = function(hashName) {",
          "coverage": 1
        },
        "576": {
          "source": "    var subFiles = this.get('filesInSubmission', []);",
          "coverage": 0
        },
        "577": {
          "source": "    if (typeof(hashName) === \"string\") {",
          "coverage": 0
        },
        "578": {
          "source": "        if (subFiles.indexOf(hashName) === -1) {",
          "coverage": 0
        },
        "579": {
          "source": "            subFiles.push(hashName);",
          "coverage": 0
        },
        "580": {
          "source": "            this.set('filesInSubmission', subFiles);",
          "coverage": 0
        },
        "581": {
          "source": "        }",
          "coverage": ""
        },
        "582": {
          "source": "    }",
          "coverage": ""
        },
        "583": {
          "source": "};",
          "coverage": ""
        },
        "584": {
          "source": "Submission.prototype.removeFileValue = function(hashName) {",
          "coverage": 1
        },
        "585": {
          "source": "    var subFiles = this.get('filesInSubmission', []);",
          "coverage": 0
        },
        "586": {
          "source": "    if (typeof(hashName) === \"string\" &amp;&amp; subFiles.indexOf(hashName) &gt; -1) {",
          "coverage": 0
        },
        "587": {
          "source": "        subFiles.splice(subFiles.indexOf(hashName), 1);",
          "coverage": 0
        },
        "588": {
          "source": "        this.set('filesInSubmission', subFiles);",
          "coverage": 0
        },
        "589": {
          "source": "    }",
          "coverage": ""
        },
        "590": {
          "source": "};",
          "coverage": ""
        },
        "591": {
          "source": "Submission.prototype.getInputValueByFieldId = function(fieldId, cb) {",
          "coverage": 1
        },
        "592": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "593": {
          "source": "    var values = this.getInputValueObjectById(fieldId).fieldValues;",
          "coverage": 0
        },
        "594": {
          "source": "    this.getForm(function(err, form) {",
          "coverage": 0
        },
        "595": {
          "source": "        var fieldModel = form.getFieldModelById(fieldId);",
          "coverage": 0
        },
        "596": {
          "source": "        fieldModel.convertSubmission(values, cb);",
          "coverage": 0
        },
        "597": {
          "source": "    });",
          "coverage": ""
        },
        "598": {
          "source": "};",
          "coverage": ""
        },
        "599": {
          "source": "/**",
          "coverage": ""
        },
        "600": {
          "source": " * Reset submission",
          "coverage": ""
        },
        "601": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "602": {
          "source": " */",
          "coverage": ""
        },
        "603": {
          "source": "Submission.prototype.reset = function() {",
          "coverage": 1
        },
        "604": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "605": {
          "source": "    self.clearLocalSubmissionFiles(function(err) {",
          "coverage": 0
        },
        "606": {
          "source": "        self.set('formFields', []);",
          "coverage": 0
        },
        "607": {
          "source": "    });",
          "coverage": ""
        },
        "608": {
          "source": "};",
          "coverage": ""
        },
        "609": {
          "source": "Submission.prototype.isDownloadSubmission = function() {",
          "coverage": 1
        },
        "610": {
          "source": "    return this.get(\"downloadSubmission\") === true;",
          "coverage": 0
        },
        "611": {
          "source": "};",
          "coverage": ""
        },
        "612": {
          "source": "",
          "coverage": ""
        },
        "613": {
          "source": "Submission.prototype.getSubmissionFile = function(fileName, cb) {",
          "coverage": 1
        },
        "614": {
          "source": "    localStorage.readFile(fileName, cb);",
          "coverage": 0
        },
        "615": {
          "source": "};",
          "coverage": ""
        },
        "616": {
          "source": "Submission.prototype.clearLocalSubmissionFiles = function(cb) {",
          "coverage": 1
        },
        "617": {
          "source": "    log.d(\"In clearLocalSubmissionFiles\");",
          "coverage": 0
        },
        "618": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "619": {
          "source": "    var filesInSubmission = self.get(\"filesInSubmission\", []);",
          "coverage": 0
        },
        "620": {
          "source": "    log.d(\"Files to clear \", filesInSubmission);",
          "coverage": 0
        },
        "621": {
          "source": "    var localFileName = \"\";",
          "coverage": 0
        },
        "622": {
          "source": "",
          "coverage": ""
        },
        "623": {
          "source": "    for (var fileMetaObject in filesInSubmission) {",
          "coverage": 0
        },
        "624": {
          "source": "        log.d(\"Clearing file \" + filesInSubmission[fileMetaObject]);",
          "coverage": 0
        },
        "625": {
          "source": "        localStorage.removeEntry(filesInSubmission[fileMetaObject], function(err) {",
          "coverage": 0
        },
        "626": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "627": {
          "source": "                log.e(\"Error removing files from \" + err);",
          "coverage": 0
        },
        "628": {
          "source": "            }",
          "coverage": ""
        },
        "629": {
          "source": "        });",
          "coverage": ""
        },
        "630": {
          "source": "    }",
          "coverage": ""
        },
        "631": {
          "source": "    cb();",
          "coverage": 0
        },
        "632": {
          "source": "};",
          "coverage": ""
        },
        "633": {
          "source": "Submission.prototype.startInputTransaction = function() {",
          "coverage": 1
        },
        "634": {
          "source": "    this.transactionMode = true;",
          "coverage": 0
        },
        "635": {
          "source": "    this.tmpFields = {};",
          "coverage": 0
        },
        "636": {
          "source": "};",
          "coverage": ""
        },
        "637": {
          "source": "Submission.prototype.endInputTransaction = function(succeed) {",
          "coverage": 1
        },
        "638": {
          "source": "    this.transactionMode = false;",
          "coverage": 0
        },
        "639": {
          "source": "    var tmpFields = {};",
          "coverage": 0
        },
        "640": {
          "source": "    var fieldId = \"\";",
          "coverage": 0
        },
        "641": {
          "source": "    var valIndex = 0;",
          "coverage": 0
        },
        "642": {
          "source": "    var valArr = [];",
          "coverage": 0
        },
        "643": {
          "source": "    var val = \"\";",
          "coverage": 0
        },
        "644": {
          "source": "    if (succeed) {",
          "coverage": 0
        },
        "645": {
          "source": "        tmpFields = this.tmpFields;",
          "coverage": 0
        },
        "646": {
          "source": "        for (fieldId in tmpFields) {",
          "coverage": 0
        },
        "647": {
          "source": "            var target = this.getInputValueObjectById(fieldId);",
          "coverage": 0
        },
        "648": {
          "source": "            valArr = tmpFields[fieldId];",
          "coverage": 0
        },
        "649": {
          "source": "            for (valIndex = 0; valIndex &lt; valArr.length; valIndex++) {",
          "coverage": 0
        },
        "650": {
          "source": "                val = valArr[valIndex];",
          "coverage": 0
        },
        "651": {
          "source": "                target.fieldValues.push(val);",
          "coverage": 0
        },
        "652": {
          "source": "                if (typeof(val.hashName) === \"string\") {",
          "coverage": 0
        },
        "653": {
          "source": "                    this.pushFile(val.hashName);",
          "coverage": 0
        },
        "654": {
          "source": "                }",
          "coverage": ""
        },
        "655": {
          "source": "            }",
          "coverage": ""
        },
        "656": {
          "source": "        }",
          "coverage": ""
        },
        "657": {
          "source": "        this.tmpFields = {};",
          "coverage": 0
        },
        "658": {
          "source": "    } else {",
          "coverage": ""
        },
        "659": {
          "source": "        //clear any files set as part of the transaction",
          "coverage": ""
        },
        "660": {
          "source": "        tmpFields = this.tmpFields;",
          "coverage": 0
        },
        "661": {
          "source": "        this.tmpFields = {};",
          "coverage": 0
        },
        "662": {
          "source": "        for (fieldId in tmpFields) {",
          "coverage": 0
        },
        "663": {
          "source": "            valArr = tmpFields[fieldId];",
          "coverage": 0
        },
        "664": {
          "source": "            for (valIndex = 0; valIndex &lt; valArr.length; valIndex++) {",
          "coverage": 0
        },
        "665": {
          "source": "                val = valArr[valIndex];",
          "coverage": 0
        },
        "666": {
          "source": "                if (typeof(val.hashName) === \"string\") {",
          "coverage": 0
        },
        "667": {
          "source": "                    //This is a file, needs to be removed",
          "coverage": ""
        },
        "668": {
          "source": "                    localStorage.removeEntry(val.hashName, function(err) {",
          "coverage": 0
        },
        "669": {
          "source": "                        log.e(\"Error removing file from transaction \", err);",
          "coverage": 0
        },
        "670": {
          "source": "                    });",
          "coverage": ""
        },
        "671": {
          "source": "                }",
          "coverage": ""
        },
        "672": {
          "source": "            }",
          "coverage": ""
        },
        "673": {
          "source": "        }",
          "coverage": ""
        },
        "674": {
          "source": "    }",
          "coverage": ""
        },
        "675": {
          "source": "};",
          "coverage": ""
        },
        "676": {
          "source": "/**",
          "coverage": ""
        },
        "677": {
          "source": " * remove an input value from submission",
          "coverage": ""
        },
        "678": {
          "source": " * @param  {[type]} fieldId field id",
          "coverage": ""
        },
        "679": {
          "source": " * @param  {[type]} index (optional) the position of the value will be removed if it is repeated field.",
          "coverage": ""
        },
        "680": {
          "source": " * @return {[type]}         [description]",
          "coverage": ""
        },
        "681": {
          "source": " */",
          "coverage": ""
        },
        "682": {
          "source": "Submission.prototype.removeFieldValue = function(fieldId, index) {",
          "coverage": 1
        },
        "683": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "684": {
          "source": "    var targetArr = [];",
          "coverage": 0
        },
        "685": {
          "source": "    var valRemoved = {};",
          "coverage": 0
        },
        "686": {
          "source": "    if (this.transactionMode) {",
          "coverage": 0
        },
        "687": {
          "source": "        targetArr = this.tmpFields.fieldId;",
          "coverage": 0
        },
        "688": {
          "source": "    } else {",
          "coverage": ""
        },
        "689": {
          "source": "        targetArr = this.getInputValueObjectById(fieldId).fieldId;",
          "coverage": 0
        },
        "690": {
          "source": "    }",
          "coverage": ""
        },
        "691": {
          "source": "    if (typeof index === 'undefined') {",
          "coverage": 0
        },
        "692": {
          "source": "        valRemoved = targetArr.splice(0, targetArr.length);",
          "coverage": 0
        },
        "693": {
          "source": "    } else {",
          "coverage": ""
        },
        "694": {
          "source": "        if (targetArr.length &gt; index) {",
          "coverage": 0
        },
        "695": {
          "source": "            valRemoved = targetArr.splice(index, 1);",
          "coverage": 0
        },
        "696": {
          "source": "        }",
          "coverage": ""
        },
        "697": {
          "source": "    }",
          "coverage": ""
        },
        "698": {
          "source": "",
          "coverage": ""
        },
        "699": {
          "source": "    if (typeof(valRemoved.hashName) === \"string\") {",
          "coverage": 0
        },
        "700": {
          "source": "        localStorage.removeEntry(valRemoved.hashName, function(err) {",
          "coverage": 0
        },
        "701": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "702": {
          "source": "                log.e(\"Error removing file: \", err);",
          "coverage": 0
        },
        "703": {
          "source": "            } else {",
          "coverage": ""
        },
        "704": {
          "source": "                self.removeFileValue(valRemoved.hashName);",
          "coverage": 0
        },
        "705": {
          "source": "            }",
          "coverage": ""
        },
        "706": {
          "source": "        });",
          "coverage": ""
        },
        "707": {
          "source": "    }",
          "coverage": ""
        },
        "708": {
          "source": "};",
          "coverage": ""
        },
        "709": {
          "source": "Submission.prototype.getInputValueObjectById = function(fieldId) {",
          "coverage": 1
        },
        "710": {
          "source": "    var formFields = this.getFormFields();",
          "coverage": 0
        },
        "711": {
          "source": "    for (var i = 0; i &lt; formFields.length; i++) {",
          "coverage": 0
        },
        "712": {
          "source": "        var formField = formFields[i];",
          "coverage": 0
        },
        "713": {
          "source": "",
          "coverage": ""
        },
        "714": {
          "source": "        if (formField.fieldId._id) {",
          "coverage": 0
        },
        "715": {
          "source": "            if (formField.fieldId._id === fieldId) {",
          "coverage": 0
        },
        "716": {
          "source": "                return formField;",
          "coverage": 0
        },
        "717": {
          "source": "            }",
          "coverage": ""
        },
        "718": {
          "source": "        } else {",
          "coverage": ""
        },
        "719": {
          "source": "            if (formField.fieldId === fieldId) {",
          "coverage": 0
        },
        "720": {
          "source": "                return formField;",
          "coverage": 0
        },
        "721": {
          "source": "            }",
          "coverage": ""
        },
        "722": {
          "source": "        }",
          "coverage": ""
        },
        "723": {
          "source": "    }",
          "coverage": ""
        },
        "724": {
          "source": "    var newField = {",
          "coverage": 0
        },
        "725": {
          "source": "        'fieldId': fieldId,",
          "coverage": ""
        },
        "726": {
          "source": "        'fieldValues': []",
          "coverage": ""
        },
        "727": {
          "source": "    };",
          "coverage": ""
        },
        "728": {
          "source": "    formFields.push(newField);",
          "coverage": 0
        },
        "729": {
          "source": "    return newField;",
          "coverage": 0
        },
        "730": {
          "source": "};",
          "coverage": ""
        },
        "731": {
          "source": "/**",
          "coverage": ""
        },
        "732": {
          "source": " * get form model related to this submission.",
          "coverage": ""
        },
        "733": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "734": {
          "source": " */",
          "coverage": ""
        },
        "735": {
          "source": "Submission.prototype.getForm = function(cb) {",
          "coverage": 1
        },
        "736": {
          "source": "    var formId = this.get('formId');",
          "coverage": 0
        },
        "737": {
          "source": "",
          "coverage": ""
        },
        "738": {
          "source": "    if (formId) {",
          "coverage": 0
        },
        "739": {
          "source": "        log.d(\"FormId found for getForm: \" + formId);",
          "coverage": 0
        },
        "740": {
          "source": "        new Form({",
          "coverage": 0
        },
        "741": {
          "source": "            'formId': formId,",
          "coverage": ""
        },
        "742": {
          "source": "            'rawMode': true",
          "coverage": ""
        },
        "743": {
          "source": "        }, cb);",
          "coverage": ""
        },
        "744": {
          "source": "    } else {",
          "coverage": ""
        },
        "745": {
          "source": "        log.e(\"No form Id specified for getForm\");",
          "coverage": 0
        },
        "746": {
          "source": "        return cb(\"No form Id specified for getForm\");",
          "coverage": 0
        },
        "747": {
          "source": "    }",
          "coverage": ""
        },
        "748": {
          "source": "};",
          "coverage": ""
        },
        "749": {
          "source": "Submission.prototype.reloadForm = function(cb) {",
          "coverage": 1
        },
        "750": {
          "source": "    log.d(\"Submission reload form\");",
          "coverage": 0
        },
        "751": {
          "source": "    var formId = this.get('formId');",
          "coverage": 0
        },
        "752": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "753": {
          "source": "    new Form({",
          "coverage": 0
        },
        "754": {
          "source": "        formId: formId,",
          "coverage": ""
        },
        "755": {
          "source": "        'rawMode': true",
          "coverage": ""
        },
        "756": {
          "source": "    }, function(err, form) {",
          "coverage": ""
        },
        "757": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "758": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "759": {
          "source": "        } else {",
          "coverage": ""
        },
        "760": {
          "source": "            self.form = form;",
          "coverage": 0
        },
        "761": {
          "source": "            if (!self.get('deviceFormTimestamp', null)) {",
          "coverage": 0
        },
        "762": {
          "source": "                self.set('deviceFormTimestamp', form.getLastUpdate());",
          "coverage": 0
        },
        "763": {
          "source": "            }",
          "coverage": ""
        },
        "764": {
          "source": "            cb(null, form);",
          "coverage": 0
        },
        "765": {
          "source": "        }",
          "coverage": ""
        },
        "766": {
          "source": "    });",
          "coverage": ""
        },
        "767": {
          "source": "};",
          "coverage": ""
        },
        "768": {
          "source": "/**",
          "coverage": ""
        },
        "769": {
          "source": " * Retrieve all file fields related value",
          "coverage": ""
        },
        "770": {
          "source": " * If the submission has been downloaded, there is no gurantee that the form is  on-device.",
          "coverage": ""
        },
        "771": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "772": {
          "source": " */",
          "coverage": ""
        },
        "773": {
          "source": "Submission.prototype.getFileInputValues = function(cb) {",
          "coverage": 1
        },
        "774": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "775": {
          "source": "    self.getFileFieldsId(function(err, fileFieldIds) {",
          "coverage": 0
        },
        "776": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "777": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "778": {
          "source": "        }",
          "coverage": ""
        },
        "779": {
          "source": "        return cb(null, self.getInputValueArray(fileFieldIds));",
          "coverage": 0
        },
        "780": {
          "source": "    });",
          "coverage": ""
        },
        "781": {
          "source": "};",
          "coverage": ""
        },
        "782": {
          "source": "",
          "coverage": ""
        },
        "783": {
          "source": "Submission.prototype.getFormFields = function() {",
          "coverage": 1
        },
        "784": {
          "source": "    var formFields = this.get(\"formFields\", []);",
          "coverage": 0
        },
        "785": {
          "source": "",
          "coverage": ""
        },
        "786": {
          "source": "    //Removing null values",
          "coverage": ""
        },
        "787": {
          "source": "    for (var formFieldIndex = 0; formFieldIndex &lt; formFields.length; formFieldIndex++) {",
          "coverage": 0
        },
        "788": {
          "source": "        formFields[formFieldIndex].fieldValues = formFields[formFieldIndex].fieldValues || [];",
          "coverage": 0
        },
        "789": {
          "source": "        formFields[formFieldIndex].fieldValues = formFields[formFieldIndex].fieldValues.filter(function(fieldValue) {",
          "coverage": 0
        },
        "790": {
          "source": "            return fieldValue !== null &amp;&amp; typeof(fieldValue) !== \"undefined\";",
          "coverage": 0
        },
        "791": {
          "source": "        });",
          "coverage": ""
        },
        "792": {
          "source": "    }",
          "coverage": ""
        },
        "793": {
          "source": "",
          "coverage": ""
        },
        "794": {
          "source": "    return formFields;",
          "coverage": 0
        },
        "795": {
          "source": "};",
          "coverage": ""
        },
        "796": {
          "source": "",
          "coverage": ""
        },
        "797": {
          "source": "Submission.prototype.getFileFieldsId = function(cb) {",
          "coverage": 1
        },
        "798": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "799": {
          "source": "    var formFieldIds = [];",
          "coverage": 0
        },
        "800": {
          "source": "",
          "coverage": ""
        },
        "801": {
          "source": "    if (self.isDownloadSubmission()) {",
          "coverage": 0
        },
        "802": {
          "source": "        //For Submission downloads, there needs to be a scan through the formFields param",
          "coverage": ""
        },
        "803": {
          "source": "        var formFields = self.getFormFields();",
          "coverage": 0
        },
        "804": {
          "source": "",
          "coverage": ""
        },
        "805": {
          "source": "        for (var formFieldIndex = 0; formFieldIndex &lt; formFields.length; formFieldIndex++) {",
          "coverage": 0
        },
        "806": {
          "source": "            var formFieldEntry = formFields[formFieldIndex].fieldId || {};",
          "coverage": 0
        },
        "807": {
          "source": "            if (formFieldEntry.type === 'file' || formFieldEntry.type === 'photo' || formFieldEntry.type === 'signature') {",
          "coverage": 0
        },
        "808": {
          "source": "                if (formFieldEntry._id) {",
          "coverage": 0
        },
        "809": {
          "source": "                    formFieldIds.push(formFieldEntry._id);",
          "coverage": 0
        },
        "810": {
          "source": "                }",
          "coverage": ""
        },
        "811": {
          "source": "            }",
          "coverage": ""
        },
        "812": {
          "source": "        }",
          "coverage": ""
        },
        "813": {
          "source": "        return cb(null, formFieldIds);",
          "coverage": 0
        },
        "814": {
          "source": "    } else {",
          "coverage": ""
        },
        "815": {
          "source": "        self.getForm(function(err, form) {",
          "coverage": 0
        },
        "816": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "817": {
          "source": "                log.e(\"Error getting form for getFileFieldsId\" + err);",
          "coverage": 0
        },
        "818": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "819": {
          "source": "            }",
          "coverage": ""
        },
        "820": {
          "source": "            return cb(err, form.getFileFieldsId());",
          "coverage": 0
        },
        "821": {
          "source": "        });",
          "coverage": ""
        },
        "822": {
          "source": "    }",
          "coverage": ""
        },
        "823": {
          "source": "};",
          "coverage": ""
        },
        "824": {
          "source": "",
          "coverage": ""
        },
        "825": {
          "source": "Submission.prototype.updateFileLocalURI = function(fileDetails, newLocalFileURI, cb) {",
          "coverage": 1
        },
        "826": {
          "source": "    log.d(\"updateFileLocalURI: \" + newLocalFileURI);",
          "coverage": 0
        },
        "827": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "828": {
          "source": "    fileDetails = fileDetails || {};",
          "coverage": 0
        },
        "829": {
          "source": "",
          "coverage": ""
        },
        "830": {
          "source": "    if (fileDetails.fileName &amp;&amp; newLocalFileURI) {",
          "coverage": 0
        },
        "831": {
          "source": "        //Search for the file placeholder name.",
          "coverage": ""
        },
        "832": {
          "source": "        self.findFilePlaceholderFieldId(fileDetails.fileName, function(err, fieldDetails) {",
          "coverage": 0
        },
        "833": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "834": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "835": {
          "source": "            }",
          "coverage": ""
        },
        "836": {
          "source": "            if (fieldDetails.fieldId) {",
          "coverage": 0
        },
        "837": {
          "source": "                var tmpObj = self.getInputValueObjectById(fieldDetails.fieldId).fieldValues[fieldDetails.valueIndex];",
          "coverage": 0
        },
        "838": {
          "source": "                tmpObj.localURI = newLocalFileURI;",
          "coverage": 0
        },
        "839": {
          "source": "                self.getInputValueObjectById(fieldDetails.fieldId).fieldValues[fieldDetails.valueIndex] = tmpObj;",
          "coverage": 0
        },
        "840": {
          "source": "                self.saveLocal(cb);",
          "coverage": 0
        },
        "841": {
          "source": "            } else {",
          "coverage": ""
        },
        "842": {
          "source": "                log.e(\"No file field matches the placeholder name \" + fileDetails.fileName);",
          "coverage": 0
        },
        "843": {
          "source": "                return cb(\"No file field matches the placeholder name \" + fileDetails.fileName);",
          "coverage": 0
        },
        "844": {
          "source": "            }",
          "coverage": ""
        },
        "845": {
          "source": "        });",
          "coverage": ""
        },
        "846": {
          "source": "    } else {",
          "coverage": ""
        },
        "847": {
          "source": "        log.e(\"Submission: updateFileLocalURI : No fileName for submissionId : \" + JSON.stringify(fileDetails));",
          "coverage": 0
        },
        "848": {
          "source": "        return cb(\"Submission: updateFileLocalURI : No fileName for submissionId : \" + JSON.stringify(fileDetails));",
          "coverage": 0
        },
        "849": {
          "source": "    }",
          "coverage": ""
        },
        "850": {
          "source": "};",
          "coverage": ""
        },
        "851": {
          "source": "",
          "coverage": ""
        },
        "852": {
          "source": "Submission.prototype.findFilePlaceholderFieldId = function(filePlaceholderName, cb) {",
          "coverage": 1
        },
        "853": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "854": {
          "source": "    var fieldDetails = {};",
          "coverage": 0
        },
        "855": {
          "source": "    self.getFileFieldsId(function(err, fieldIds) {",
          "coverage": 0
        },
        "856": {
          "source": "        for (var i = 0; i &lt; fieldIds.length; i++) {",
          "coverage": 0
        },
        "857": {
          "source": "            var fieldId = fieldIds[i];",
          "coverage": 0
        },
        "858": {
          "source": "            var inputValue = self.getInputValueObjectById(fieldId);",
          "coverage": 0
        },
        "859": {
          "source": "            for (var j = 0; j &lt; inputValue.fieldValues.length; j++) {",
          "coverage": 0
        },
        "860": {
          "source": "                var tmpObj = inputValue.fieldValues[j];",
          "coverage": 0
        },
        "861": {
          "source": "                if (tmpObj) {",
          "coverage": 0
        },
        "862": {
          "source": "                    if (tmpObj.fileName !== null &amp;&amp; tmpObj.fileName === filePlaceholderName) {",
          "coverage": 0
        },
        "863": {
          "source": "                        fieldDetails.fieldId = fieldId;",
          "coverage": 0
        },
        "864": {
          "source": "                        fieldDetails.valueIndex = j;",
          "coverage": 0
        },
        "865": {
          "source": "                    }",
          "coverage": ""
        },
        "866": {
          "source": "                }",
          "coverage": ""
        },
        "867": {
          "source": "            }",
          "coverage": ""
        },
        "868": {
          "source": "        }",
          "coverage": ""
        },
        "869": {
          "source": "        return cb(null, fieldDetails);",
          "coverage": 0
        },
        "870": {
          "source": "    });",
          "coverage": ""
        },
        "871": {
          "source": "};",
          "coverage": ""
        },
        "872": {
          "source": "",
          "coverage": ""
        },
        "873": {
          "source": "Submission.prototype.getInputValueArray = function(fieldIds) {",
          "coverage": 1
        },
        "874": {
          "source": "    var rtn = [];",
          "coverage": 0
        },
        "875": {
          "source": "    for (var i = 0; i &lt; fieldIds.length; i++) {",
          "coverage": 0
        },
        "876": {
          "source": "        var fieldId = fieldIds[i];",
          "coverage": 0
        },
        "877": {
          "source": "        var inputValue = this.getInputValueObjectById(fieldId);",
          "coverage": 0
        },
        "878": {
          "source": "        for (var j = 0; j &lt; inputValue.fieldValues.length; j++) {",
          "coverage": 0
        },
        "879": {
          "source": "            var tmpObj = inputValue.fieldValues[j];",
          "coverage": 0
        },
        "880": {
          "source": "            if (tmpObj) {",
          "coverage": 0
        },
        "881": {
          "source": "                tmpObj.fieldId = fieldId;",
          "coverage": 0
        },
        "882": {
          "source": "                rtn.push(tmpObj);",
          "coverage": 0
        },
        "883": {
          "source": "            }",
          "coverage": ""
        },
        "884": {
          "source": "        }",
          "coverage": ""
        },
        "885": {
          "source": "    }",
          "coverage": ""
        },
        "886": {
          "source": "    return rtn;",
          "coverage": 0
        },
        "887": {
          "source": "};",
          "coverage": ""
        },
        "888": {
          "source": "Submission.prototype.clearLocal = function(cb) {",
          "coverage": 1
        },
        "889": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "890": {
          "source": "    //remove from uploading list",
          "coverage": ""
        },
        "891": {
          "source": "    uploadManager.cancelSubmission(self, function(err, uploadTask) {",
          "coverage": 0
        },
        "892": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "893": {
          "source": "            log.e(err);",
          "coverage": 0
        },
        "894": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "895": {
          "source": "        }",
          "coverage": ""
        },
        "896": {
          "source": "        //remove from submission list",
          "coverage": ""
        },
        "897": {
          "source": "        submissions.removeSubmission(self.getLocalId(), function(err) {",
          "coverage": 0
        },
        "898": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "899": {
          "source": "                log.e(err);",
          "coverage": 0
        },
        "900": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "901": {
          "source": "            }",
          "coverage": ""
        },
        "902": {
          "source": "            self.clearLocalSubmissionFiles(function() {",
          "coverage": 0
        },
        "903": {
          "source": "                Model.clearLocal.call(self, function(err) {",
          "coverage": 0
        },
        "904": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "905": {
          "source": "                        log.e(err);",
          "coverage": 0
        },
        "906": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "907": {
          "source": "                    }",
          "coverage": ""
        },
        "908": {
          "source": "                    cb(null, null);",
          "coverage": 0
        },
        "909": {
          "source": "                });",
          "coverage": ""
        },
        "910": {
          "source": "            });",
          "coverage": ""
        },
        "911": {
          "source": "        });",
          "coverage": ""
        },
        "912": {
          "source": "    });",
          "coverage": ""
        },
        "913": {
          "source": "};",
          "coverage": ""
        },
        "914": {
          "source": "Submission.prototype.getRemoteSubmissionId = function() {",
          "coverage": 1
        },
        "915": {
          "source": "    return this.get(\"submissionId\", \"\");",
          "coverage": 0
        },
        "916": {
          "source": "};",
          "coverage": ""
        },
        "917": {
          "source": "Submission.prototype.setRemoteSubmissionId = function(submissionId) {",
          "coverage": 1
        },
        "918": {
          "source": "    if (submissionId) {",
          "coverage": 0
        },
        "919": {
          "source": "        this.set(\"submissionId\", submissionId);",
          "coverage": 0
        },
        "920": {
          "source": "    }",
          "coverage": ""
        },
        "921": {
          "source": "};",
          "coverage": ""
        },
        "922": {
          "source": "",
          "coverage": ""
        },
        "923": {
          "source": "function newInstance(form, params) {",
          "coverage": 1
        },
        "924": {
          "source": "    params = params ? params : {};",
          "coverage": 0
        },
        "925": {
          "source": "    var sub = new Submission(form, params);",
          "coverage": 0
        },
        "926": {
          "source": "",
          "coverage": ""
        },
        "927": {
          "source": "    if (params.submissionId) {",
          "coverage": 0
        },
        "928": {
          "source": "        submissions.updateSubmissionWithoutSaving(sub);",
          "coverage": 0
        },
        "929": {
          "source": "    }",
          "coverage": ""
        },
        "930": {
          "source": "    return sub;",
          "coverage": 0
        },
        "931": {
          "source": "}",
          "coverage": ""
        },
        "932": {
          "source": "",
          "coverage": ""
        },
        "933": {
          "source": "function fromLocal(localId, cb) {",
          "coverage": 1
        },
        "934": {
          "source": "    log.d(\"Submission fromLocal: \", localId);",
          "coverage": 0
        },
        "935": {
          "source": "    if (_submissions[localId]) {",
          "coverage": 0
        },
        "936": {
          "source": "        log.d(\"Submission fromLocal from cache: \", localId);",
          "coverage": 0
        },
        "937": {
          "source": "        //already loaded",
          "coverage": ""
        },
        "938": {
          "source": "        cb(null, _submissions[localId]);",
          "coverage": 0
        },
        "939": {
          "source": "    } else {",
          "coverage": ""
        },
        "940": {
          "source": "        //load from storage",
          "coverage": ""
        },
        "941": {
          "source": "        log.d(\"Submission fromLocal not in cache. Loading from local storage.: \", localId);",
          "coverage": 0
        },
        "942": {
          "source": "        var submissionObject = new Submission();",
          "coverage": 0
        },
        "943": {
          "source": "        submissionObject.setLocalId(localId);",
          "coverage": 0
        },
        "944": {
          "source": "        submissionObject.loadLocal(function(err, submission) {",
          "coverage": 0
        },
        "945": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "946": {
          "source": "                log.e(\"Submission fromLocal. Error loading from local: \", localId, err);",
          "coverage": 0
        },
        "947": {
          "source": "                cb(err);",
          "coverage": 0
        },
        "948": {
          "source": "            } else {",
          "coverage": ""
        },
        "949": {
          "source": "                log.d(\"Submission fromLocal. Load from local sucessfull: \", localId);",
          "coverage": 0
        },
        "950": {
          "source": "                if (submission.isDownloadSubmission()) {",
          "coverage": 0
        },
        "951": {
          "source": "                    return cb(null, submission);",
          "coverage": 0
        },
        "952": {
          "source": "                } else {",
          "coverage": ""
        },
        "953": {
          "source": "                    submission.reloadForm(function(err, res) {",
          "coverage": 0
        },
        "954": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "955": {
          "source": "                            log.e(\"Submission fromLocal. reloadForm. Error re-loading form: \", localId, err);",
          "coverage": 0
        },
        "956": {
          "source": "                            cb(err);",
          "coverage": 0
        },
        "957": {
          "source": "                        } else {",
          "coverage": ""
        },
        "958": {
          "source": "                            log.d(\"Submission fromLocal. reloadForm. Re-loading form successfull: \", localId);",
          "coverage": 0
        },
        "959": {
          "source": "                            _submissions[localId] = submission;",
          "coverage": 0
        },
        "960": {
          "source": "                            cb(null, submission);",
          "coverage": 0
        },
        "961": {
          "source": "                        }",
          "coverage": ""
        },
        "962": {
          "source": "                    });",
          "coverage": ""
        },
        "963": {
          "source": "                }",
          "coverage": ""
        },
        "964": {
          "source": "",
          "coverage": ""
        },
        "965": {
          "source": "            }",
          "coverage": ""
        },
        "966": {
          "source": "        });",
          "coverage": ""
        },
        "967": {
          "source": "    }",
          "coverage": ""
        },
        "968": {
          "source": "}",
          "coverage": ""
        },
        "969": {
          "source": "",
          "coverage": ""
        },
        "970": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "971": {
          "source": "    newInstance: newInstance,",
          "coverage": ""
        },
        "972": {
          "source": "    fromLocal: fromLocal",
          "coverage": ""
        },
        "973": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/submissions.js",
      "coverage": 16.756756756756758,
      "hits": 31,
      "misses": 154,
      "sloc": 185,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "3": {
          "source": "var submission = require(\"./submission\");",
          "coverage": 1
        },
        "4": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "5": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "function Submissions() {",
          "coverage": 1
        },
        "8": {
          "source": "    Model.call(this, {",
          "coverage": 1
        },
        "9": {
          "source": "        '_type': 'submissions',",
          "coverage": ""
        },
        "10": {
          "source": "        '_ludid': 'submissions_list',",
          "coverage": ""
        },
        "11": {
          "source": "        'submissions': []",
          "coverage": ""
        },
        "12": {
          "source": "    });",
          "coverage": ""
        },
        "13": {
          "source": "};",
          "coverage": 1
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "utils.extend(Submissions, Model);",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "Submissions.prototype.setLocalId = function() {",
          "coverage": 1
        },
        "18": {
          "source": "    log.e(\"Submissions setLocalId. Not Permitted for submissions.\");",
          "coverage": 0
        },
        "19": {
          "source": "};",
          "coverage": ""
        },
        "20": {
          "source": "/**",
          "coverage": ""
        },
        "21": {
          "source": " * save a submission to list and store it immediately",
          "coverage": ""
        },
        "22": {
          "source": " * @param  {[type]}   submission [description]",
          "coverage": ""
        },
        "23": {
          "source": " * @param  {Function} cb         [description]",
          "coverage": ""
        },
        "24": {
          "source": " * @return {[type]}              [description]",
          "coverage": ""
        },
        "25": {
          "source": " */",
          "coverage": ""
        },
        "26": {
          "source": "Submissions.prototype.saveSubmission = function(submission, cb) {",
          "coverage": 1
        },
        "27": {
          "source": "    log.d(\"Submissions saveSubmission\");",
          "coverage": 0
        },
        "28": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "29": {
          "source": "    this.updateSubmissionWithoutSaving(submission);",
          "coverage": 0
        },
        "30": {
          "source": "    this.clearSentSubmission(function() {",
          "coverage": 0
        },
        "31": {
          "source": "        self.saveLocal(cb);",
          "coverage": 0
        },
        "32": {
          "source": "    });",
          "coverage": ""
        },
        "33": {
          "source": "};",
          "coverage": ""
        },
        "34": {
          "source": "Submissions.prototype.updateSubmissionWithoutSaving = function(submission) {",
          "coverage": 1
        },
        "35": {
          "source": "    log.d(\"Submissions updateSubmissionWithoutSaving\");",
          "coverage": 0
        },
        "36": {
          "source": "    var pruneData = this.pruneSubmission(submission);",
          "coverage": 0
        },
        "37": {
          "source": "    var localId = pruneData._ludid;",
          "coverage": 0
        },
        "38": {
          "source": "    if (localId) {",
          "coverage": 0
        },
        "39": {
          "source": "        var meta = this.findMetaByLocalId(localId);",
          "coverage": 0
        },
        "40": {
          "source": "        var submissions = this.get('submissions');",
          "coverage": 0
        },
        "41": {
          "source": "        if (meta) {",
          "coverage": 0
        },
        "42": {
          "source": "            //existed, remove the old meta and save the new one.",
          "coverage": ""
        },
        "43": {
          "source": "            submissions.splice(submissions.indexOf(meta), 1);",
          "coverage": 0
        },
        "44": {
          "source": "            submissions.push(pruneData);",
          "coverage": 0
        },
        "45": {
          "source": "        } else {",
          "coverage": ""
        },
        "46": {
          "source": "            // not existed, insert to the tail.",
          "coverage": ""
        },
        "47": {
          "source": "            submissions.push(pruneData);",
          "coverage": 0
        },
        "48": {
          "source": "        }",
          "coverage": ""
        },
        "49": {
          "source": "    } else {",
          "coverage": ""
        },
        "50": {
          "source": "        // invalid local id.",
          "coverage": ""
        },
        "51": {
          "source": "        log.e('Invalid submission for localId:', localId, JSON.stringify(submission));",
          "coverage": 0
        },
        "52": {
          "source": "    }",
          "coverage": ""
        },
        "53": {
          "source": "};",
          "coverage": ""
        },
        "54": {
          "source": "Submissions.prototype.clearSentSubmission = function(cb) {",
          "coverage": 1
        },
        "55": {
          "source": "    log.d(\"Submissions clearSentSubmission\");",
          "coverage": 0
        },
        "56": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "57": {
          "source": "    var maxSent = config.get(\"max_sent_saved\") ? config.get(\"max_sent_saved\") : config.get(\"sent_save_min\");",
          "coverage": 0
        },
        "58": {
          "source": "    var submissions = this.get(\"submissions\");",
          "coverage": 0
        },
        "59": {
          "source": "    var sentSubmissions = this.getSubmitted();",
          "coverage": 0
        },
        "60": {
          "source": "",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "    if (sentSubmissions.length &gt; maxSent) {",
          "coverage": 0
        },
        "63": {
          "source": "        log.d(\"Submissions clearSentSubmission pruning sentSubmissions.length&gt;maxSent\");",
          "coverage": 0
        },
        "64": {
          "source": "        sentSubmissions = sentSubmissions.sort(function(a, b) {",
          "coverage": 0
        },
        "65": {
          "source": "            if (Date(a.submittedDate) &lt; Date(b.submittedDate)) {",
          "coverage": 0
        },
        "66": {
          "source": "                return 1;",
          "coverage": 0
        },
        "67": {
          "source": "            } else {",
          "coverage": ""
        },
        "68": {
          "source": "                return -1;",
          "coverage": 0
        },
        "69": {
          "source": "            }",
          "coverage": ""
        },
        "70": {
          "source": "        });",
          "coverage": ""
        },
        "71": {
          "source": "        var toBeRemoved = [];",
          "coverage": 0
        },
        "72": {
          "source": "        while (sentSubmissions.length &gt; maxSent) {",
          "coverage": 0
        },
        "73": {
          "source": "            toBeRemoved.push(sentSubmissions.pop());",
          "coverage": 0
        },
        "74": {
          "source": "        }",
          "coverage": ""
        },
        "75": {
          "source": "        var count = toBeRemoved.length;",
          "coverage": 0
        },
        "76": {
          "source": "        for (var i = 0; i &lt; toBeRemoved.length; i++) {",
          "coverage": 0
        },
        "77": {
          "source": "            var subMeta = toBeRemoved[i];",
          "coverage": 0
        },
        "78": {
          "source": "            self.getSubmissionByMeta(subMeta, function(err, submission) {",
          "coverage": 0
        },
        "79": {
          "source": "                submission.clearLocal(function(err) {",
          "coverage": 0
        },
        "80": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "81": {
          "source": "                        log.e(\"Submissions clearSentSubmission submission clearLocal\", err);",
          "coverage": 0
        },
        "82": {
          "source": "                    }",
          "coverage": ""
        },
        "83": {
          "source": "                    count--;",
          "coverage": 0
        },
        "84": {
          "source": "                    if (count === 0) {",
          "coverage": 0
        },
        "85": {
          "source": "                        cb(null, null);",
          "coverage": 0
        },
        "86": {
          "source": "                    }",
          "coverage": ""
        },
        "87": {
          "source": "                });",
          "coverage": ""
        },
        "88": {
          "source": "            });",
          "coverage": ""
        },
        "89": {
          "source": "        }",
          "coverage": ""
        },
        "90": {
          "source": "    } else {",
          "coverage": ""
        },
        "91": {
          "source": "        cb(null, null);",
          "coverage": 0
        },
        "92": {
          "source": "    }",
          "coverage": ""
        },
        "93": {
          "source": "};",
          "coverage": ""
        },
        "94": {
          "source": "Submissions.prototype.findByFormId = function(formId) {",
          "coverage": 1
        },
        "95": {
          "source": "    log.d(\"Submissions findByFormId\", formId);",
          "coverage": 0
        },
        "96": {
          "source": "    var rtn = [];",
          "coverage": 0
        },
        "97": {
          "source": "    var submissions = this.get('submissions');",
          "coverage": 0
        },
        "98": {
          "source": "    for (var i = 0; i &lt; submissions.length; i++) {",
          "coverage": 0
        },
        "99": {
          "source": "        var obj = submissions[i];",
          "coverage": 0
        },
        "100": {
          "source": "        if (submissions[i].formId === formId) {",
          "coverage": 0
        },
        "101": {
          "source": "            rtn.push(obj);",
          "coverage": 0
        },
        "102": {
          "source": "        }",
          "coverage": ""
        },
        "103": {
          "source": "    }",
          "coverage": ""
        },
        "104": {
          "source": "    return rtn;",
          "coverage": 0
        },
        "105": {
          "source": "};",
          "coverage": ""
        },
        "106": {
          "source": "Submissions.prototype.getSubmissions = function() {",
          "coverage": 1
        },
        "107": {
          "source": "    return this.get('submissions');",
          "coverage": 0
        },
        "108": {
          "source": "};",
          "coverage": ""
        },
        "109": {
          "source": "Submissions.prototype.getSubmissionMetaList = Submissions.prototype.getSubmissions;",
          "coverage": 1
        },
        "110": {
          "source": "//function alias",
          "coverage": ""
        },
        "111": {
          "source": "Submissions.prototype.findMetaByLocalId = function(localId) {",
          "coverage": 1
        },
        "112": {
          "source": "    log.d(\"Submissions findMetaByLocalId\", localId);",
          "coverage": 0
        },
        "113": {
          "source": "    var submissions = this.get('submissions');",
          "coverage": 0
        },
        "114": {
          "source": "    for (var i = 0; i &lt; submissions.length; i++) {",
          "coverage": 0
        },
        "115": {
          "source": "        var obj = submissions[i];",
          "coverage": 0
        },
        "116": {
          "source": "        if (submissions[i]._ludid === localId) {",
          "coverage": 0
        },
        "117": {
          "source": "            return obj;",
          "coverage": 0
        },
        "118": {
          "source": "        }",
          "coverage": ""
        },
        "119": {
          "source": "    }",
          "coverage": ""
        },
        "120": {
          "source": "",
          "coverage": ""
        },
        "121": {
          "source": "    //log.e(\"Submissions findMetaByLocalId: No submissions for localId: \", localId);",
          "coverage": ""
        },
        "122": {
          "source": "    return null;",
          "coverage": 0
        },
        "123": {
          "source": "};",
          "coverage": ""
        },
        "124": {
          "source": "",
          "coverage": ""
        },
        "125": {
          "source": "/**",
          "coverage": ""
        },
        "126": {
          "source": " * Finding a submission object by it's remote Id",
          "coverage": ""
        },
        "127": {
          "source": " * @param remoteId",
          "coverage": ""
        },
        "128": {
          "source": " * @returns {*}",
          "coverage": ""
        },
        "129": {
          "source": " */",
          "coverage": ""
        },
        "130": {
          "source": "Submissions.prototype.findMetaByRemoteId = function(remoteId) {",
          "coverage": 1
        },
        "131": {
          "source": "    remoteId = remoteId || \"\";",
          "coverage": 0
        },
        "132": {
          "source": "",
          "coverage": ""
        },
        "133": {
          "source": "    log.d(\"Submissions findMetaByRemoteId: \" + remoteId);",
          "coverage": 0
        },
        "134": {
          "source": "    var submissions = this.get('submissions');",
          "coverage": 0
        },
        "135": {
          "source": "    for (var i = 0; i &lt; submissions.length; i++) {",
          "coverage": 0
        },
        "136": {
          "source": "        var obj = submissions[i];",
          "coverage": 0
        },
        "137": {
          "source": "        if (submissions[i].submissionId) {",
          "coverage": 0
        },
        "138": {
          "source": "            if (submissions[i].submissionId === remoteId) {",
          "coverage": 0
        },
        "139": {
          "source": "                return obj;",
          "coverage": 0
        },
        "140": {
          "source": "            }",
          "coverage": ""
        },
        "141": {
          "source": "        }",
          "coverage": ""
        },
        "142": {
          "source": "    }",
          "coverage": ""
        },
        "143": {
          "source": "",
          "coverage": ""
        },
        "144": {
          "source": "    return null;",
          "coverage": 0
        },
        "145": {
          "source": "};",
          "coverage": ""
        },
        "146": {
          "source": "Submissions.prototype.pruneSubmission = function(submission) {",
          "coverage": 1
        },
        "147": {
          "source": "    log.d(\"Submissions pruneSubmission\");",
          "coverage": 0
        },
        "148": {
          "source": "    var fields = [",
          "coverage": 0
        },
        "149": {
          "source": "        '_id',",
          "coverage": ""
        },
        "150": {
          "source": "        '_ludid',",
          "coverage": ""
        },
        "151": {
          "source": "        'status',",
          "coverage": ""
        },
        "152": {
          "source": "        'formName',",
          "coverage": ""
        },
        "153": {
          "source": "        'formId',",
          "coverage": ""
        },
        "154": {
          "source": "        '_localLastUpdate',",
          "coverage": ""
        },
        "155": {
          "source": "        'createDate',",
          "coverage": ""
        },
        "156": {
          "source": "        'submitDate',",
          "coverage": ""
        },
        "157": {
          "source": "        'deviceFormTimestamp',",
          "coverage": ""
        },
        "158": {
          "source": "        'errorMessage',",
          "coverage": ""
        },
        "159": {
          "source": "        'submissionStartedTimestamp',",
          "coverage": ""
        },
        "160": {
          "source": "        'submittedDate',",
          "coverage": ""
        },
        "161": {
          "source": "        'submissionId',",
          "coverage": ""
        },
        "162": {
          "source": "        'saveDate',",
          "coverage": ""
        },
        "163": {
          "source": "        'uploadStartDate'",
          "coverage": ""
        },
        "164": {
          "source": "    ];",
          "coverage": ""
        },
        "165": {
          "source": "    var data = submission.getProps();",
          "coverage": 0
        },
        "166": {
          "source": "    var rtn = {};",
          "coverage": 0
        },
        "167": {
          "source": "    for (var i = 0; i &lt; fields.length; i++) {",
          "coverage": 0
        },
        "168": {
          "source": "        var key = fields[i];",
          "coverage": 0
        },
        "169": {
          "source": "        rtn[key] = data[key];",
          "coverage": 0
        },
        "170": {
          "source": "    }",
          "coverage": ""
        },
        "171": {
          "source": "    return rtn;",
          "coverage": 0
        },
        "172": {
          "source": "};",
          "coverage": ""
        },
        "173": {
          "source": "",
          "coverage": ""
        },
        "174": {
          "source": "Submissions.prototype.clear = function(cb) {",
          "coverage": 1
        },
        "175": {
          "source": "    log.d(\"Submissions clear\");",
          "coverage": 0
        },
        "176": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "177": {
          "source": "    this.clearLocal(function(err) {",
          "coverage": 0
        },
        "178": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "179": {
          "source": "            log.e(err);",
          "coverage": 0
        },
        "180": {
          "source": "            cb(err);",
          "coverage": 0
        },
        "181": {
          "source": "        } else {",
          "coverage": ""
        },
        "182": {
          "source": "            that.set(\"submissions\", []);",
          "coverage": 0
        },
        "183": {
          "source": "            cb(null, null);",
          "coverage": 0
        },
        "184": {
          "source": "        }",
          "coverage": ""
        },
        "185": {
          "source": "    });",
          "coverage": ""
        },
        "186": {
          "source": "};",
          "coverage": ""
        },
        "187": {
          "source": "Submissions.prototype.getDrafts = function(params) {",
          "coverage": 1
        },
        "188": {
          "source": "    log.d(\"Submissions getDrafts: \", params);",
          "coverage": 0
        },
        "189": {
          "source": "    if (!params) {",
          "coverage": 0
        },
        "190": {
          "source": "        params = {};",
          "coverage": 0
        },
        "191": {
          "source": "    }",
          "coverage": ""
        },
        "192": {
          "source": "    params.status = \"draft\";",
          "coverage": 0
        },
        "193": {
          "source": "    return this.findByStatus(params);",
          "coverage": 0
        },
        "194": {
          "source": "};",
          "coverage": ""
        },
        "195": {
          "source": "Submissions.prototype.getPending = function(params) {",
          "coverage": 1
        },
        "196": {
          "source": "    log.d(\"Submissions getPending: \", params);",
          "coverage": 0
        },
        "197": {
          "source": "    if (!params) {",
          "coverage": 0
        },
        "198": {
          "source": "        params = {};",
          "coverage": 0
        },
        "199": {
          "source": "    }",
          "coverage": ""
        },
        "200": {
          "source": "    params.status = \"pending\";",
          "coverage": 0
        },
        "201": {
          "source": "    return this.findByStatus(params);",
          "coverage": 0
        },
        "202": {
          "source": "};",
          "coverage": ""
        },
        "203": {
          "source": "Submissions.prototype.getSubmitted = function(params) {",
          "coverage": 1
        },
        "204": {
          "source": "    log.d(\"Submissions getSubmitted: \", params);",
          "coverage": 0
        },
        "205": {
          "source": "    if (!params) {",
          "coverage": 0
        },
        "206": {
          "source": "        params = {};",
          "coverage": 0
        },
        "207": {
          "source": "    }",
          "coverage": ""
        },
        "208": {
          "source": "    params.status = \"submitted\";",
          "coverage": 0
        },
        "209": {
          "source": "    return this.findByStatus(params);",
          "coverage": 0
        },
        "210": {
          "source": "};",
          "coverage": ""
        },
        "211": {
          "source": "Submissions.prototype.getError = function(params) {",
          "coverage": 1
        },
        "212": {
          "source": "    log.d(\"Submissions getError: \", params);",
          "coverage": 0
        },
        "213": {
          "source": "    if (!params) {",
          "coverage": 0
        },
        "214": {
          "source": "        params = {};",
          "coverage": 0
        },
        "215": {
          "source": "    }",
          "coverage": ""
        },
        "216": {
          "source": "    params.status = \"error\";",
          "coverage": 0
        },
        "217": {
          "source": "    return this.findByStatus(params);",
          "coverage": 0
        },
        "218": {
          "source": "};",
          "coverage": ""
        },
        "219": {
          "source": "Submissions.prototype.getInProgress = function(params) {",
          "coverage": 1
        },
        "220": {
          "source": "    log.d(\"Submissions getInProgress: \", params);",
          "coverage": 0
        },
        "221": {
          "source": "    if (!params) {",
          "coverage": 0
        },
        "222": {
          "source": "        params = {};",
          "coverage": 0
        },
        "223": {
          "source": "    }",
          "coverage": ""
        },
        "224": {
          "source": "    params.status = \"inprogress\";",
          "coverage": 0
        },
        "225": {
          "source": "    return this.findByStatus(params);",
          "coverage": 0
        },
        "226": {
          "source": "};",
          "coverage": ""
        },
        "227": {
          "source": "Submissions.prototype.getDownloaded = function(params) {",
          "coverage": 1
        },
        "228": {
          "source": "    log.d(\"Submissions getDownloaded: \", params);",
          "coverage": 0
        },
        "229": {
          "source": "    if (!params) {",
          "coverage": 0
        },
        "230": {
          "source": "        params = {};",
          "coverage": 0
        },
        "231": {
          "source": "    }",
          "coverage": ""
        },
        "232": {
          "source": "    params.status = \"downloaded\";",
          "coverage": 0
        },
        "233": {
          "source": "    return this.findByStatus(params);",
          "coverage": 0
        },
        "234": {
          "source": "};",
          "coverage": ""
        },
        "235": {
          "source": "Submissions.prototype.findByStatus = function(params) {",
          "coverage": 1
        },
        "236": {
          "source": "    log.d(\"Submissions findByStatus: \", params);",
          "coverage": 0
        },
        "237": {
          "source": "    if (!params) {",
          "coverage": 0
        },
        "238": {
          "source": "        params = {};",
          "coverage": 0
        },
        "239": {
          "source": "    }",
          "coverage": ""
        },
        "240": {
          "source": "    if (typeof params === \"string\") {",
          "coverage": 0
        },
        "241": {
          "source": "        params = {",
          "coverage": 0
        },
        "242": {
          "source": "            status: params",
          "coverage": ""
        },
        "243": {
          "source": "        };",
          "coverage": ""
        },
        "244": {
          "source": "    }",
          "coverage": ""
        },
        "245": {
          "source": "    if (params.status === null) {",
          "coverage": 0
        },
        "246": {
          "source": "        return [];",
          "coverage": 0
        },
        "247": {
          "source": "    }",
          "coverage": ""
        },
        "248": {
          "source": "",
          "coverage": ""
        },
        "249": {
          "source": "    var status = params.status;",
          "coverage": 0
        },
        "250": {
          "source": "    var formId = params.formId;",
          "coverage": 0
        },
        "251": {
          "source": "    var sortField = params.sortField || \"createDate\";",
          "coverage": 0
        },
        "252": {
          "source": "",
          "coverage": ""
        },
        "253": {
          "source": "    var submissions = this.get(\"submissions\", []);",
          "coverage": 0
        },
        "254": {
          "source": "    var rtn = [];",
          "coverage": 0
        },
        "255": {
          "source": "    for (var i = 0; i &lt; submissions.length; i++) {",
          "coverage": 0
        },
        "256": {
          "source": "        if (status.indexOf(submissions[i].status) &gt; -1) {",
          "coverage": 0
        },
        "257": {
          "source": "            if (formId != null) {",
          "coverage": 0
        },
        "258": {
          "source": "                if (submissions[i].formId === formId) {",
          "coverage": 0
        },
        "259": {
          "source": "                    rtn.push(submissions[i]);",
          "coverage": 0
        },
        "260": {
          "source": "                }",
          "coverage": ""
        },
        "261": {
          "source": "            } else {",
          "coverage": ""
        },
        "262": {
          "source": "                rtn.push(submissions[i]);",
          "coverage": 0
        },
        "263": {
          "source": "            }",
          "coverage": ""
        },
        "264": {
          "source": "",
          "coverage": ""
        },
        "265": {
          "source": "        }",
          "coverage": ""
        },
        "266": {
          "source": "    }",
          "coverage": ""
        },
        "267": {
          "source": "",
          "coverage": ""
        },
        "268": {
          "source": "    rtn = rtn.sort(function(a, b) {",
          "coverage": 0
        },
        "269": {
          "source": "        if (Date(a[sortField]) &lt; Date(b[sortField])) {",
          "coverage": 0
        },
        "270": {
          "source": "            return -1;",
          "coverage": 0
        },
        "271": {
          "source": "        } else {",
          "coverage": ""
        },
        "272": {
          "source": "            return 1;",
          "coverage": 0
        },
        "273": {
          "source": "        }",
          "coverage": ""
        },
        "274": {
          "source": "    });",
          "coverage": ""
        },
        "275": {
          "source": "",
          "coverage": ""
        },
        "276": {
          "source": "    return rtn;",
          "coverage": 0
        },
        "277": {
          "source": "};",
          "coverage": ""
        },
        "278": {
          "source": "/**",
          "coverage": ""
        },
        "279": {
          "source": " * return a submission model object by the meta data passed in.",
          "coverage": ""
        },
        "280": {
          "source": " * @param  {[type]}   meta [description]",
          "coverage": ""
        },
        "281": {
          "source": " * @param  {Function} cb   [description]",
          "coverage": ""
        },
        "282": {
          "source": " * @return {[type]}        [description]",
          "coverage": ""
        },
        "283": {
          "source": " */",
          "coverage": ""
        },
        "284": {
          "source": "Submissions.prototype.getSubmissionByMeta = function(meta, cb) {",
          "coverage": 1
        },
        "285": {
          "source": "    log.d(\"Submissions getSubmissionByMeta: \", meta);",
          "coverage": 0
        },
        "286": {
          "source": "    var localId = meta._ludid;",
          "coverage": 0
        },
        "287": {
          "source": "    if (localId) {",
          "coverage": 0
        },
        "288": {
          "source": "        submission.fromLocal(localId, cb);",
          "coverage": 0
        },
        "289": {
          "source": "    } else {",
          "coverage": ""
        },
        "290": {
          "source": "        log.e(\"Submissions getSubmissionByMeta: local id not found for retrieving submission.\", localId, meta);",
          "coverage": 0
        },
        "291": {
          "source": "        cb(\"local id not found for retrieving submission\");",
          "coverage": 0
        },
        "292": {
          "source": "    }",
          "coverage": ""
        },
        "293": {
          "source": "};",
          "coverage": ""
        },
        "294": {
          "source": "Submissions.prototype.removeSubmission = function(localId, cb) {",
          "coverage": 1
        },
        "295": {
          "source": "    log.d(\"Submissions removeSubmission: \", localId);",
          "coverage": 0
        },
        "296": {
          "source": "    var index = this.indexOf(localId);",
          "coverage": 0
        },
        "297": {
          "source": "    if (index &gt; -1) {",
          "coverage": 0
        },
        "298": {
          "source": "        this.get('submissions').splice(index, 1);",
          "coverage": 0
        },
        "299": {
          "source": "    }",
          "coverage": ""
        },
        "300": {
          "source": "    this.saveLocal(cb);",
          "coverage": 0
        },
        "301": {
          "source": "};",
          "coverage": ""
        },
        "302": {
          "source": "Submissions.prototype.indexOf = function(localId, cb) {",
          "coverage": 1
        },
        "303": {
          "source": "    log.d(\"Submissions indexOf: \", localId);",
          "coverage": 0
        },
        "304": {
          "source": "    var submissions = this.get('submissions');",
          "coverage": 0
        },
        "305": {
          "source": "    for (var i = 0; i &lt; submissions.length; i++) {",
          "coverage": 0
        },
        "306": {
          "source": "        var obj = submissions[i];",
          "coverage": 0
        },
        "307": {
          "source": "        if (submissions[i]._ludid === localId) {",
          "coverage": 0
        },
        "308": {
          "source": "            return i;",
          "coverage": 0
        },
        "309": {
          "source": "        }",
          "coverage": ""
        },
        "310": {
          "source": "    }",
          "coverage": ""
        },
        "311": {
          "source": "    return -1;",
          "coverage": 0
        },
        "312": {
          "source": "};",
          "coverage": ""
        },
        "313": {
          "source": "",
          "coverage": ""
        },
        "314": {
          "source": "module.exports = new Submissions();",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/theme.js",
      "coverage": 88.88888888888889,
      "hits": 8,
      "misses": 1,
      "sloc": 9,
      "source": {
        "1": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "2": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "function Theme() {",
          "coverage": 1
        },
        "5": {
          "source": "    Model.call(this, {",
          "coverage": 1
        },
        "6": {
          "source": "        '_type': 'theme',",
          "coverage": ""
        },
        "7": {
          "source": "        '_ludid': 'theme_object'",
          "coverage": ""
        },
        "8": {
          "source": "    });",
          "coverage": ""
        },
        "9": {
          "source": "};",
          "coverage": 1
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "utils.extend(Theme, Model);",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "Theme.prototype.getCSS = function() {",
          "coverage": 1
        },
        "14": {
          "source": "    return this.get('css', '');",
          "coverage": 0
        },
        "15": {
          "source": "};",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "module.exports = new Theme();",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/uploadManager.js",
      "coverage": 22.22222222222222,
      "hits": 28,
      "misses": 98,
      "sloc": 126,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Manages submission uploading tasks",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "5": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "6": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "7": {
          "source": "var dataAgent = require(\"./dataAgent\");",
          "coverage": 1
        },
        "8": {
          "source": "var uploadTask = require(\"./uploadTask\");",
          "coverage": 1
        },
        "9": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "function UploadManager() {",
          "coverage": 1
        },
        "12": {
          "source": "    var self = this;",
          "coverage": 1
        },
        "13": {
          "source": "    Model.call(self, {",
          "coverage": 1
        },
        "14": {
          "source": "        '_type': 'uploadManager',",
          "coverage": ""
        },
        "15": {
          "source": "        '_ludid': 'uploadManager_queue'",
          "coverage": ""
        },
        "16": {
          "source": "    });",
          "coverage": ""
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "    self.set('taskQueue', []);",
          "coverage": 1
        },
        "19": {
          "source": "    self.sending = false;",
          "coverage": 1
        },
        "20": {
          "source": "    self.timerInterval = 200;",
          "coverage": 1
        },
        "21": {
          "source": "    self.sendingStart = utils.getTime();",
          "coverage": 1
        },
        "22": {
          "source": "}",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "utils.extend(UploadManager, Model);",
          "coverage": 1
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "/**",
          "coverage": ""
        },
        "27": {
          "source": " * Queue a submission to uploading tasks queue",
          "coverage": ""
        },
        "28": {
          "source": " * @param  {[type]} submissionModel [description]",
          "coverage": ""
        },
        "29": {
          "source": " * @param {Function} cb callback once finished",
          "coverage": ""
        },
        "30": {
          "source": " * @return {[type]}                 [description]",
          "coverage": ""
        },
        "31": {
          "source": " */",
          "coverage": ""
        },
        "32": {
          "source": "UploadManager.prototype.queueSubmission = function(submissionModel, cb) {",
          "coverage": 1
        },
        "33": {
          "source": "    config.d(\"Queueing Submission for uploadManager\");",
          "coverage": 0
        },
        "34": {
          "source": "    var utId;",
          "coverage": 0
        },
        "35": {
          "source": "    var uploadTask = null;",
          "coverage": 0
        },
        "36": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "    self.checkOnlineStatus(function() {",
          "coverage": 0
        },
        "39": {
          "source": "        if ($fh.forms.config.isOnline()) {",
          "coverage": 0
        },
        "40": {
          "source": "            if (submissionModel.getUploadTaskId()) {",
          "coverage": 0
        },
        "41": {
          "source": "                utId = submissionModel.getUploadTaskId();",
          "coverage": 0
        },
        "42": {
          "source": "            } else {",
          "coverage": ""
        },
        "43": {
          "source": "                uploadTask = uploadTask.newInstance(submissionModel);",
          "coverage": 0
        },
        "44": {
          "source": "                utId = uploadTask.getLocalId();",
          "coverage": 0
        },
        "45": {
          "source": "            }",
          "coverage": ""
        },
        "46": {
          "source": "            self.push(utId);",
          "coverage": 0
        },
        "47": {
          "source": "            if (!self.timer) {",
          "coverage": 0
        },
        "48": {
          "source": "                config.d(\"Starting timer for uploadManager\");",
          "coverage": 0
        },
        "49": {
          "source": "                self.start();",
          "coverage": 0
        },
        "50": {
          "source": "            }",
          "coverage": ""
        },
        "51": {
          "source": "            if (uploadTask) {",
          "coverage": 0
        },
        "52": {
          "source": "                uploadTask.saveLocal(function(err) {",
          "coverage": 0
        },
        "53": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "54": {
          "source": "                        config.e(err);",
          "coverage": 0
        },
        "55": {
          "source": "                    }",
          "coverage": ""
        },
        "56": {
          "source": "                    self.saveLocal(function(err) {",
          "coverage": 0
        },
        "57": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "58": {
          "source": "                            config.e(\"Error saving upload manager: \" + err);",
          "coverage": 0
        },
        "59": {
          "source": "                        }",
          "coverage": ""
        },
        "60": {
          "source": "                        cb(null, uploadTask);",
          "coverage": 0
        },
        "61": {
          "source": "                    });",
          "coverage": ""
        },
        "62": {
          "source": "                });",
          "coverage": ""
        },
        "63": {
          "source": "            } else {",
          "coverage": ""
        },
        "64": {
          "source": "                self.saveLocal(function(err) {",
          "coverage": 0
        },
        "65": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "66": {
          "source": "                        config.e(\"Error saving upload manager: \" + err);",
          "coverage": 0
        },
        "67": {
          "source": "                    }",
          "coverage": ""
        },
        "68": {
          "source": "                    self.getTaskById(utId, cb);",
          "coverage": 0
        },
        "69": {
          "source": "                });",
          "coverage": ""
        },
        "70": {
          "source": "            }",
          "coverage": ""
        },
        "71": {
          "source": "        } else {",
          "coverage": ""
        },
        "72": {
          "source": "            return cb(\"Working offline cannot submit form.\");",
          "coverage": 0
        },
        "73": {
          "source": "        }",
          "coverage": ""
        },
        "74": {
          "source": "    });",
          "coverage": ""
        },
        "75": {
          "source": "};",
          "coverage": ""
        },
        "76": {
          "source": "",
          "coverage": ""
        },
        "77": {
          "source": "/**",
          "coverage": ""
        },
        "78": {
          "source": " * cancel a submission uploading",
          "coverage": ""
        },
        "79": {
          "source": " * @param  {[type]}   submissionsModel [description]",
          "coverage": ""
        },
        "80": {
          "source": " * @param  {Function} cb               [description]",
          "coverage": ""
        },
        "81": {
          "source": " * @return {[type]}                    [description]",
          "coverage": ""
        },
        "82": {
          "source": " */",
          "coverage": ""
        },
        "83": {
          "source": "UploadManager.prototype.cancelSubmission = function(submissionsModel, cb) {",
          "coverage": 1
        },
        "84": {
          "source": "    var uploadTId = submissionsModel.getUploadTaskId();",
          "coverage": 0
        },
        "85": {
          "source": "    var queue = this.get('taskQueue');",
          "coverage": 0
        },
        "86": {
          "source": "    if (uploadTId) {",
          "coverage": 0
        },
        "87": {
          "source": "        var index = queue.indexOf(uploadTId);",
          "coverage": 0
        },
        "88": {
          "source": "        if (index &gt; -1) {",
          "coverage": 0
        },
        "89": {
          "source": "            queue.splice(index, 1);",
          "coverage": 0
        },
        "90": {
          "source": "        }",
          "coverage": ""
        },
        "91": {
          "source": "        this.getTaskById(uploadTId, function(err, task) {",
          "coverage": 0
        },
        "92": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "93": {
          "source": "                config.e(err);",
          "coverage": 0
        },
        "94": {
          "source": "                cb(err, task);",
          "coverage": 0
        },
        "95": {
          "source": "            } else {",
          "coverage": ""
        },
        "96": {
          "source": "                if (task) {",
          "coverage": 0
        },
        "97": {
          "source": "                    task.clearLocal(cb);",
          "coverage": 0
        },
        "98": {
          "source": "                } else {",
          "coverage": ""
        },
        "99": {
          "source": "                    cb(null, null);",
          "coverage": 0
        },
        "100": {
          "source": "                }",
          "coverage": ""
        },
        "101": {
          "source": "            }",
          "coverage": ""
        },
        "102": {
          "source": "        });",
          "coverage": ""
        },
        "103": {
          "source": "        this.saveLocal(function(err) {",
          "coverage": 0
        },
        "104": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "105": {
          "source": "                config.e(err);",
          "coverage": 0
        },
        "106": {
          "source": "            }",
          "coverage": ""
        },
        "107": {
          "source": "        });",
          "coverage": ""
        },
        "108": {
          "source": "    } else {",
          "coverage": ""
        },
        "109": {
          "source": "        cb(null, null);",
          "coverage": 0
        },
        "110": {
          "source": "    }",
          "coverage": ""
        },
        "111": {
          "source": "};",
          "coverage": ""
        },
        "112": {
          "source": "",
          "coverage": ""
        },
        "113": {
          "source": "UploadManager.prototype.getTaskQueue = function() {",
          "coverage": 1
        },
        "114": {
          "source": "    return this.get('taskQueue', []);",
          "coverage": 0
        },
        "115": {
          "source": "};",
          "coverage": ""
        },
        "116": {
          "source": "/**",
          "coverage": ""
        },
        "117": {
          "source": " * start a timer",
          "coverage": ""
        },
        "118": {
          "source": " * @param  {} interval ms",
          "coverage": ""
        },
        "119": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "120": {
          "source": " */",
          "coverage": ""
        },
        "121": {
          "source": "UploadManager.prototype.start = function() {",
          "coverage": 1
        },
        "122": {
          "source": "    var that = this;",
          "coverage": 0
        },
        "123": {
          "source": "    that.stop();",
          "coverage": 0
        },
        "124": {
          "source": "    that.timer = setInterval(function() {",
          "coverage": 0
        },
        "125": {
          "source": "        that.tick();",
          "coverage": 0
        },
        "126": {
          "source": "    }, this.timerInterval);",
          "coverage": ""
        },
        "127": {
          "source": "};",
          "coverage": ""
        },
        "128": {
          "source": "/**",
          "coverage": ""
        },
        "129": {
          "source": " * stop uploading",
          "coverage": ""
        },
        "130": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "131": {
          "source": " */",
          "coverage": ""
        },
        "132": {
          "source": "UploadManager.prototype.stop = function() {",
          "coverage": 1
        },
        "133": {
          "source": "    if (this.timer) {",
          "coverage": 0
        },
        "134": {
          "source": "        clearInterval(this.timer);",
          "coverage": 0
        },
        "135": {
          "source": "        this.timer = null;",
          "coverage": 0
        },
        "136": {
          "source": "    }",
          "coverage": ""
        },
        "137": {
          "source": "};",
          "coverage": ""
        },
        "138": {
          "source": "UploadManager.prototype.push = function(uploadTaskId) {",
          "coverage": 1
        },
        "139": {
          "source": "    this.get('taskQueue').push(uploadTaskId);",
          "coverage": 0
        },
        "140": {
          "source": "    this.saveLocal(function(err) {",
          "coverage": 0
        },
        "141": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "142": {
          "source": "            config.e(\"Error saving local Upload manager\", err);",
          "coverage": 0
        },
        "143": {
          "source": "        }",
          "coverage": ""
        },
        "144": {
          "source": "    });",
          "coverage": ""
        },
        "145": {
          "source": "};",
          "coverage": ""
        },
        "146": {
          "source": "UploadManager.prototype.shift = function() {",
          "coverage": 1
        },
        "147": {
          "source": "    var shiftedTask = this.get('taskQueue').shift();",
          "coverage": 0
        },
        "148": {
          "source": "    this.saveLocal(function(err) {",
          "coverage": 0
        },
        "149": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "150": {
          "source": "            config.e(err);",
          "coverage": 0
        },
        "151": {
          "source": "        }",
          "coverage": ""
        },
        "152": {
          "source": "    });",
          "coverage": ""
        },
        "153": {
          "source": "    return shiftedTask;",
          "coverage": 0
        },
        "154": {
          "source": "};",
          "coverage": ""
        },
        "155": {
          "source": "UploadManager.prototype.rollTask = function() {",
          "coverage": 1
        },
        "156": {
          "source": "    this.push(this.shift());",
          "coverage": 0
        },
        "157": {
          "source": "};",
          "coverage": ""
        },
        "158": {
          "source": "UploadManager.prototype.tick = function() {",
          "coverage": 1
        },
        "159": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "160": {
          "source": "    if (self.sending) {",
          "coverage": 0
        },
        "161": {
          "source": "        var now = utils.getTime();",
          "coverage": 0
        },
        "162": {
          "source": "        var timePassed = now.getTime() - self.sendingStart.getTime();",
          "coverage": 0
        },
        "163": {
          "source": "        if (timePassed &gt; $fh.forms.config.get(\"timeout\") * 1000) {",
          "coverage": 0
        },
        "164": {
          "source": "            //time expired. roll current task to the end of queue",
          "coverage": ""
        },
        "165": {
          "source": "            config.e('Uploading content timeout. it will try to reupload.');",
          "coverage": 0
        },
        "166": {
          "source": "            self.sending = false;",
          "coverage": 0
        },
        "167": {
          "source": "            self.rollTask();",
          "coverage": 0
        },
        "168": {
          "source": "        }",
          "coverage": ""
        },
        "169": {
          "source": "    } else {",
          "coverage": ""
        },
        "170": {
          "source": "        if (self.hasTask()) {",
          "coverage": 0
        },
        "171": {
          "source": "            self.sending = true;",
          "coverage": 0
        },
        "172": {
          "source": "            self.sendingStart = utils.getTime();",
          "coverage": 0
        },
        "173": {
          "source": "",
          "coverage": ""
        },
        "174": {
          "source": "            self.getCurrentTask(function(err, task) {",
          "coverage": 0
        },
        "175": {
          "source": "                if (err || !task) {",
          "coverage": 0
        },
        "176": {
          "source": "                    config.e(err);",
          "coverage": 0
        },
        "177": {
          "source": "                    self.sending = false;",
          "coverage": 0
        },
        "178": {
          "source": "                } else {",
          "coverage": ""
        },
        "179": {
          "source": "                    if (task.isCompleted() || task.isError()) {",
          "coverage": 0
        },
        "180": {
          "source": "                        //current task uploaded or aborted by error. shift it from queue",
          "coverage": ""
        },
        "181": {
          "source": "                        self.shift();",
          "coverage": 0
        },
        "182": {
          "source": "                        self.sending = false;",
          "coverage": 0
        },
        "183": {
          "source": "                        self.saveLocal(function(err) {",
          "coverage": 0
        },
        "184": {
          "source": "                            if (err) {",
          "coverage": 0
        },
        "185": {
          "source": "                                config.e(\"Error saving upload manager: \", err);",
          "coverage": 0
        },
        "186": {
          "source": "                            }",
          "coverage": ""
        },
        "187": {
          "source": "                        });",
          "coverage": ""
        },
        "188": {
          "source": "                    } else {",
          "coverage": ""
        },
        "189": {
          "source": "                        self.checkOnlineStatus(function() {",
          "coverage": 0
        },
        "190": {
          "source": "                            if ($fh.forms.config.isOnline()) {",
          "coverage": 0
        },
        "191": {
          "source": "                                task.uploadTick(function(err) {",
          "coverage": 0
        },
        "192": {
          "source": "                                    if (err) {",
          "coverage": 0
        },
        "193": {
          "source": "                                        config.e(\"Error on upload tick: \", err, task);",
          "coverage": 0
        },
        "194": {
          "source": "                                    }",
          "coverage": ""
        },
        "195": {
          "source": "",
          "coverage": ""
        },
        "196": {
          "source": "                                    //callback when finished. ready for next upload command",
          "coverage": ""
        },
        "197": {
          "source": "                                    self.sending = false;",
          "coverage": 0
        },
        "198": {
          "source": "                                });",
          "coverage": ""
        },
        "199": {
          "source": "                            } else {",
          "coverage": ""
        },
        "200": {
          "source": "                                config.d(\"Upload Manager: Tick: Not online.\");",
          "coverage": 0
        },
        "201": {
          "source": "                            }",
          "coverage": ""
        },
        "202": {
          "source": "                        });",
          "coverage": ""
        },
        "203": {
          "source": "                    }",
          "coverage": ""
        },
        "204": {
          "source": "                }",
          "coverage": ""
        },
        "205": {
          "source": "            });",
          "coverage": ""
        },
        "206": {
          "source": "        } else {",
          "coverage": ""
        },
        "207": {
          "source": "            //no task . stop timer.",
          "coverage": ""
        },
        "208": {
          "source": "            self.stop();",
          "coverage": 0
        },
        "209": {
          "source": "        }",
          "coverage": ""
        },
        "210": {
          "source": "    }",
          "coverage": ""
        },
        "211": {
          "source": "};",
          "coverage": ""
        },
        "212": {
          "source": "UploadManager.prototype.hasTask = function() {",
          "coverage": 1
        },
        "213": {
          "source": "    return this.get('taskQueue').length &gt; 0;",
          "coverage": 0
        },
        "214": {
          "source": "};",
          "coverage": ""
        },
        "215": {
          "source": "UploadManager.prototype.getCurrentTask = function(cb) {",
          "coverage": 1
        },
        "216": {
          "source": "    var taskId = this.getTaskQueue()[0];",
          "coverage": 0
        },
        "217": {
          "source": "    if (taskId) {",
          "coverage": 0
        },
        "218": {
          "source": "        this.getTaskById(taskId, cb);",
          "coverage": 0
        },
        "219": {
          "source": "    } else {",
          "coverage": ""
        },
        "220": {
          "source": "        cb(null, null);",
          "coverage": 0
        },
        "221": {
          "source": "    }",
          "coverage": ""
        },
        "222": {
          "source": "};",
          "coverage": ""
        },
        "223": {
          "source": "UploadManager.prototype.checkOnlineStatus = function(cb) {",
          "coverage": 1
        },
        "224": {
          "source": "    return dataAgent.checkOnlineStatus(cb);",
          "coverage": 0
        },
        "225": {
          "source": "};",
          "coverage": ""
        },
        "226": {
          "source": "UploadManager.prototype.getTaskById = function(taskId, cb) {",
          "coverage": 1
        },
        "227": {
          "source": "    return uploadTask.fromLocal(taskId, cb);",
          "coverage": 0
        },
        "228": {
          "source": "};",
          "coverage": ""
        },
        "229": {
          "source": "",
          "coverage": ""
        },
        "230": {
          "source": "module.exports = new UploadManager();",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/forms/uploadTask.js",
      "coverage": 10.995850622406639,
      "hits": 53,
      "misses": 429,
      "sloc": 482,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Uploading task for each submission",
          "coverage": ""
        },
        "3": {
          "source": " */",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var Model = require(\"./model\");",
          "coverage": 1
        },
        "6": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "7": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "8": {
          "source": "var dataAgent = require(\"./dataAgent\");",
          "coverage": 1
        },
        "9": {
          "source": "var FormSubmission = require(\"./formSubmission\");",
          "coverage": 1
        },
        "10": {
          "source": "var FormSubmissionDownload = require(\"./formSubmissionDownload\");",
          "coverage": 1
        },
        "11": {
          "source": "var FormSubmissionStatus = require(\"./formSubmissionStatus\");",
          "coverage": 1
        },
        "12": {
          "source": "var Base64FileSubmission = require(\"./fileSubmissionBase64\");",
          "coverage": 1
        },
        "13": {
          "source": "var FileSubmission = require(\"./fileSubmission\");",
          "coverage": 1
        },
        "14": {
          "source": "var FileSubmissionDownload = require(\"./fileSubmissionDownload\");",
          "coverage": 1
        },
        "15": {
          "source": "var FormSubmissionComplete = require(\"./formSubmissionComplete\");",
          "coverage": 1
        },
        "16": {
          "source": "var Form = require(\"./form\");",
          "coverage": 1
        },
        "17": {
          "source": "var submission = require(\"./submission\");",
          "coverage": 1
        },
        "18": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "19": {
          "source": "",
          "coverage": ""
        },
        "20": {
          "source": "var _uploadTasks = {};",
          "coverage": 1
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "function newInstance(submissionModel) {",
          "coverage": 1
        },
        "23": {
          "source": "    if (submissionModel) {",
          "coverage": 0
        },
        "24": {
          "source": "        var utObj = new UploadTask();",
          "coverage": 0
        },
        "25": {
          "source": "        utObj.init(submissionModel);",
          "coverage": 0
        },
        "26": {
          "source": "        _uploadTasks[utObj.getLocalId()] = utObj;",
          "coverage": 0
        },
        "27": {
          "source": "        return utObj;",
          "coverage": 0
        },
        "28": {
          "source": "    } else {",
          "coverage": ""
        },
        "29": {
          "source": "        return {};",
          "coverage": 0
        },
        "30": {
          "source": "    }",
          "coverage": ""
        },
        "31": {
          "source": "}",
          "coverage": ""
        },
        "32": {
          "source": "",
          "coverage": ""
        },
        "33": {
          "source": "",
          "coverage": ""
        },
        "34": {
          "source": "function fromLocal(localId, cb) {",
          "coverage": 1
        },
        "35": {
          "source": "    if (_uploadTasks[localId]) {",
          "coverage": 0
        },
        "36": {
          "source": "        return cb(null, _uploadTasks[localId]);",
          "coverage": 0
        },
        "37": {
          "source": "    }",
          "coverage": ""
        },
        "38": {
          "source": "    var utObj = new UploadTask();",
          "coverage": 0
        },
        "39": {
          "source": "    utObj.setLocalId(localId);",
          "coverage": 0
        },
        "40": {
          "source": "    _uploadTasks[localId] = utObj;",
          "coverage": 0
        },
        "41": {
          "source": "    utObj.loadLocal(cb);",
          "coverage": 0
        },
        "42": {
          "source": "}",
          "coverage": ""
        },
        "43": {
          "source": "",
          "coverage": ""
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "function UploadTask() {",
          "coverage": 1
        },
        "46": {
          "source": "    Model.call(this, {",
          "coverage": 0
        },
        "47": {
          "source": "        '_type': 'uploadTask'",
          "coverage": ""
        },
        "48": {
          "source": "    });",
          "coverage": ""
        },
        "49": {
          "source": "}",
          "coverage": ""
        },
        "50": {
          "source": "",
          "coverage": ""
        },
        "51": {
          "source": "utils.extend(UploadTask, Model);",
          "coverage": 1
        },
        "52": {
          "source": "",
          "coverage": ""
        },
        "53": {
          "source": "UploadTask.prototype.init = function(submissionModel) {",
          "coverage": 1
        },
        "54": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "55": {
          "source": "    var submissionLocalId = submissionModel.getLocalId();",
          "coverage": 0
        },
        "56": {
          "source": "    self.setLocalId(submissionLocalId + '_' + 'uploadTask');",
          "coverage": 0
        },
        "57": {
          "source": "    self.set('submissionLocalId', submissionLocalId);",
          "coverage": 0
        },
        "58": {
          "source": "    self.set('fileTasks', []);",
          "coverage": 0
        },
        "59": {
          "source": "    self.set('currentTask', null);",
          "coverage": 0
        },
        "60": {
          "source": "    self.set('completed', false);",
          "coverage": 0
        },
        "61": {
          "source": "    self.set('retryAttempts', 0);",
          "coverage": 0
        },
        "62": {
          "source": "    self.set('retryNeeded', false);",
          "coverage": 0
        },
        "63": {
          "source": "    self.set('mbaasCompleted', false);",
          "coverage": 0
        },
        "64": {
          "source": "    self.set('submissionTransferType', 'upload');",
          "coverage": 0
        },
        "65": {
          "source": "    submissionModel.setUploadTaskId(self.getLocalId());",
          "coverage": 0
        },
        "66": {
          "source": "",
          "coverage": ""
        },
        "67": {
          "source": "    function initSubmissionUpload() {",
          "coverage": 0
        },
        "68": {
          "source": "        var json = submissionModel.getProps();",
          "coverage": 0
        },
        "69": {
          "source": "        self.set('jsonTask', json);",
          "coverage": 0
        },
        "70": {
          "source": "        self.set('formId', submissionModel.get('formId'));",
          "coverage": 0
        },
        "71": {
          "source": "",
          "coverage": ""
        },
        "72": {
          "source": "    }",
          "coverage": ""
        },
        "73": {
          "source": "",
          "coverage": ""
        },
        "74": {
          "source": "    function initSubmissionDownload() {",
          "coverage": 0
        },
        "75": {
          "source": "        self.set('submissionId', submissionModel.getRemoteSubmissionId());",
          "coverage": 0
        },
        "76": {
          "source": "        self.set('jsonTask', {});",
          "coverage": 0
        },
        "77": {
          "source": "        self.set('submissionTransferType', 'download');",
          "coverage": 0
        },
        "78": {
          "source": "    }",
          "coverage": ""
        },
        "79": {
          "source": "",
          "coverage": ""
        },
        "80": {
          "source": "    if (submissionModel.isDownloadSubmission()) {",
          "coverage": 0
        },
        "81": {
          "source": "        initSubmissionDownload();",
          "coverage": 0
        },
        "82": {
          "source": "    } else {",
          "coverage": ""
        },
        "83": {
          "source": "        initSubmissionUpload();",
          "coverage": 0
        },
        "84": {
          "source": "    }",
          "coverage": ""
        },
        "85": {
          "source": "};",
          "coverage": ""
        },
        "86": {
          "source": "UploadTask.prototype.getTotalSize = function() {",
          "coverage": 1
        },
        "87": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "88": {
          "source": "    var jsonSize = JSON.stringify(self.get('jsonTask')).length;",
          "coverage": 0
        },
        "89": {
          "source": "    var fileTasks = self.get('fileTasks');",
          "coverage": 0
        },
        "90": {
          "source": "    var fileSize = 0;",
          "coverage": 0
        },
        "91": {
          "source": "    var fileTask;",
          "coverage": 0
        },
        "92": {
          "source": "    for (var i = 0; i &lt; fileTasks.length; i++) {",
          "coverage": 0
        },
        "93": {
          "source": "        fileTask = fileTasks[i];",
          "coverage": 0
        },
        "94": {
          "source": "        fileSize += fileTask.fileSize;",
          "coverage": 0
        },
        "95": {
          "source": "    }",
          "coverage": ""
        },
        "96": {
          "source": "    return jsonSize + fileSize;",
          "coverage": 0
        },
        "97": {
          "source": "};",
          "coverage": ""
        },
        "98": {
          "source": "UploadTask.prototype.getUploadedSize = function() {",
          "coverage": 1
        },
        "99": {
          "source": "    var currentTask = this.getCurrentTask();",
          "coverage": 0
        },
        "100": {
          "source": "    if (currentTask === null) {",
          "coverage": 0
        },
        "101": {
          "source": "        return 0;",
          "coverage": 0
        },
        "102": {
          "source": "    } else {",
          "coverage": ""
        },
        "103": {
          "source": "        var jsonSize = JSON.stringify(this.get('jsonTask')).length;",
          "coverage": 0
        },
        "104": {
          "source": "        var fileTasks = this.get('fileTasks');",
          "coverage": 0
        },
        "105": {
          "source": "        var fileSize = 0;",
          "coverage": 0
        },
        "106": {
          "source": "        for (var i = 0, fileTask;",
          "coverage": 0
        },
        "107": {
          "source": "            (fileTask = fileTasks[i]) &amp;&amp; i &lt; currentTask; i++) {",
          "coverage": ""
        },
        "108": {
          "source": "            fileSize += fileTask.fileSize;",
          "coverage": 0
        },
        "109": {
          "source": "        }",
          "coverage": ""
        },
        "110": {
          "source": "        return jsonSize + fileSize;",
          "coverage": 0
        },
        "111": {
          "source": "    }",
          "coverage": ""
        },
        "112": {
          "source": "};",
          "coverage": ""
        },
        "113": {
          "source": "UploadTask.prototype.getRemoteStore = function() {",
          "coverage": 1
        },
        "114": {
          "source": "    return dataAgent.remoteStore;",
          "coverage": 0
        },
        "115": {
          "source": "};",
          "coverage": ""
        },
        "116": {
          "source": "UploadTask.prototype.addFileTasks = function(submissionModel, cb) {",
          "coverage": 1
        },
        "117": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "118": {
          "source": "    submissionModel.getFileInputValues(function(err, files) {",
          "coverage": 0
        },
        "119": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "120": {
          "source": "            $fh.forms.log.e(\"Error getting file Input values: \" + err);",
          "coverage": 0
        },
        "121": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "122": {
          "source": "        }",
          "coverage": ""
        },
        "123": {
          "source": "        for (var i = 0; i &lt; files.length; i++) {",
          "coverage": 0
        },
        "124": {
          "source": "            var file = files[i];",
          "coverage": 0
        },
        "125": {
          "source": "            self.addFileTask(file);",
          "coverage": 0
        },
        "126": {
          "source": "        }",
          "coverage": ""
        },
        "127": {
          "source": "        cb();",
          "coverage": 0
        },
        "128": {
          "source": "    });",
          "coverage": ""
        },
        "129": {
          "source": "};",
          "coverage": ""
        },
        "130": {
          "source": "UploadTask.prototype.addFileTask = function(fileDef) {",
          "coverage": 1
        },
        "131": {
          "source": "    this.get('fileTasks').push(fileDef);",
          "coverage": 0
        },
        "132": {
          "source": "};",
          "coverage": ""
        },
        "133": {
          "source": "/**",
          "coverage": ""
        },
        "134": {
          "source": " * get current uploading task",
          "coverage": ""
        },
        "135": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "136": {
          "source": " */",
          "coverage": ""
        },
        "137": {
          "source": "UploadTask.prototype.getCurrentTask = function() {",
          "coverage": 1
        },
        "138": {
          "source": "    return this.get('currentTask', null);",
          "coverage": 0
        },
        "139": {
          "source": "};",
          "coverage": ""
        },
        "140": {
          "source": "UploadTask.prototype.getRetryAttempts = function() {",
          "coverage": 1
        },
        "141": {
          "source": "    return this.get('retryAttempts');",
          "coverage": 0
        },
        "142": {
          "source": "};",
          "coverage": ""
        },
        "143": {
          "source": "UploadTask.prototype.increRetryAttempts = function() {",
          "coverage": 1
        },
        "144": {
          "source": "    this.set('retryAttempts', this.get('retryAttempts') + 1);",
          "coverage": 0
        },
        "145": {
          "source": "};",
          "coverage": ""
        },
        "146": {
          "source": "UploadTask.prototype.resetRetryAttempts = function() {",
          "coverage": 1
        },
        "147": {
          "source": "    this.set('retryAttempts', 0);",
          "coverage": 0
        },
        "148": {
          "source": "};",
          "coverage": ""
        },
        "149": {
          "source": "UploadTask.prototype.isStarted = function() {",
          "coverage": 1
        },
        "150": {
          "source": "    return this.getCurrentTask() === null ? false : true;",
          "coverage": 0
        },
        "151": {
          "source": "};",
          "coverage": ""
        },
        "152": {
          "source": "",
          "coverage": ""
        },
        "153": {
          "source": "",
          "coverage": ""
        },
        "154": {
          "source": "UploadTask.prototype.setSubmissionQueued = function(cb) {",
          "coverage": 1
        },
        "155": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "156": {
          "source": "    self.submissionModel(function(err, submission) {",
          "coverage": 0
        },
        "157": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "158": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "159": {
          "source": "        }",
          "coverage": ""
        },
        "160": {
          "source": "",
          "coverage": ""
        },
        "161": {
          "source": "        if (self.get(\"submissionId\")) {",
          "coverage": 0
        },
        "162": {
          "source": "            submission.setRemoteSubmissionId(self.get(\"submissionId\"));",
          "coverage": 0
        },
        "163": {
          "source": "        }",
          "coverage": ""
        },
        "164": {
          "source": "",
          "coverage": ""
        },
        "165": {
          "source": "        submission.queued(cb);",
          "coverage": 0
        },
        "166": {
          "source": "    });",
          "coverage": ""
        },
        "167": {
          "source": "};",
          "coverage": ""
        },
        "168": {
          "source": "/**",
          "coverage": ""
        },
        "169": {
          "source": " * upload/download form submission",
          "coverage": ""
        },
        "170": {
          "source": " * @param  {Function} cb [description]",
          "coverage": ""
        },
        "171": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "172": {
          "source": " */",
          "coverage": ""
        },
        "173": {
          "source": "UploadTask.prototype.uploadForm = function(cb) {",
          "coverage": 1
        },
        "174": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "175": {
          "source": "",
          "coverage": ""
        },
        "176": {
          "source": "    function processUploadDataResult(res) {",
          "coverage": 0
        },
        "177": {
          "source": "        $fh.forms.log.d(\"In processUploadDataResult\");",
          "coverage": 0
        },
        "178": {
          "source": "        var formSub = self.get(\"jsonTask\");",
          "coverage": 0
        },
        "179": {
          "source": "        if (res.error) {",
          "coverage": 0
        },
        "180": {
          "source": "            $fh.forms.log.e(\"Error submitting form \" + res.error);",
          "coverage": 0
        },
        "181": {
          "source": "            return cb(\"Error submitting form \" + res.error);",
          "coverage": 0
        },
        "182": {
          "source": "        } else {",
          "coverage": ""
        },
        "183": {
          "source": "            var submissionId = res.submissionId;",
          "coverage": 0
        },
        "184": {
          "source": "            // form data submitted successfully.",
          "coverage": ""
        },
        "185": {
          "source": "            formSub.lastUpdate = utils.getTime();",
          "coverage": 0
        },
        "186": {
          "source": "            self.set('submissionId', submissionId);",
          "coverage": 0
        },
        "187": {
          "source": "",
          "coverage": ""
        },
        "188": {
          "source": "            self.setSubmissionQueued(function(err) {",
          "coverage": 0
        },
        "189": {
          "source": "                self.increProgress();",
          "coverage": 0
        },
        "190": {
          "source": "                self.saveLocal(function(err) {",
          "coverage": 0
        },
        "191": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "192": {
          "source": "                        $fh.forms.log.e(\"Error saving uploadTask to local storage\" + err);",
          "coverage": 0
        },
        "193": {
          "source": "                    }",
          "coverage": ""
        },
        "194": {
          "source": "                });",
          "coverage": ""
        },
        "195": {
          "source": "                self.emit('progress', self.getProgress());",
          "coverage": 0
        },
        "196": {
          "source": "                return cb(null);",
          "coverage": 0
        },
        "197": {
          "source": "            });",
          "coverage": ""
        },
        "198": {
          "source": "        }",
          "coverage": ""
        },
        "199": {
          "source": "    }",
          "coverage": ""
        },
        "200": {
          "source": "",
          "coverage": ""
        },
        "201": {
          "source": "    function processDownloadDataResult(err, res) {",
          "coverage": 0
        },
        "202": {
          "source": "        $fh.forms.log.d(\"In processDownloadDataResult\");",
          "coverage": 0
        },
        "203": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "204": {
          "source": "            $fh.forms.log.e(\"Error downloading submission data\" + err);",
          "coverage": 0
        },
        "205": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "206": {
          "source": "        }",
          "coverage": ""
        },
        "207": {
          "source": "",
          "coverage": ""
        },
        "208": {
          "source": "        //Have the definition of the submission",
          "coverage": ""
        },
        "209": {
          "source": "        self.submissionModel(function(err, submissionModel) {",
          "coverage": 0
        },
        "210": {
          "source": "            $fh.forms.log.d(\"Got SubmissionModel\", err, submissionModel);",
          "coverage": 0
        },
        "211": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "212": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "213": {
          "source": "            }",
          "coverage": ""
        },
        "214": {
          "source": "            var JSONRes = {};",
          "coverage": 0
        },
        "215": {
          "source": "",
          "coverage": ""
        },
        "216": {
          "source": "            //Instantiate the model from the json definition",
          "coverage": ""
        },
        "217": {
          "source": "            if (typeof(res) === \"string\") {",
          "coverage": 0
        },
        "218": {
          "source": "                try {",
          "coverage": 0
        },
        "219": {
          "source": "                    JSONRes = JSON.parse(res);",
          "coverage": 0
        },
        "220": {
          "source": "                } catch (e) {",
          "coverage": ""
        },
        "221": {
          "source": "                    $fh.forms.log.e(\"processDownloadDataResult Invalid JSON Object Returned\", res);",
          "coverage": 0
        },
        "222": {
          "source": "                    return cb(\"Invalid JSON Object Returned\");",
          "coverage": 0
        },
        "223": {
          "source": "                }",
          "coverage": ""
        },
        "224": {
          "source": "            } else {",
          "coverage": ""
        },
        "225": {
          "source": "                JSONRes = res;",
          "coverage": 0
        },
        "226": {
          "source": "            }",
          "coverage": ""
        },
        "227": {
          "source": "",
          "coverage": ""
        },
        "228": {
          "source": "            if (JSONRes.status) {",
          "coverage": 0
        },
        "229": {
          "source": "                delete JSONRes.status;",
          "coverage": 0
        },
        "230": {
          "source": "            }",
          "coverage": ""
        },
        "231": {
          "source": "",
          "coverage": ""
        },
        "232": {
          "source": "            submissionModel.fromJSON(JSONRes);",
          "coverage": 0
        },
        "233": {
          "source": "            self.set('jsonTask', res);",
          "coverage": 0
        },
        "234": {
          "source": "            submissionModel.saveLocal(function(err) {",
          "coverage": 0
        },
        "235": {
          "source": "                $fh.forms.log.d(\"Saved SubmissionModel\", err, submissionModel);",
          "coverage": 0
        },
        "236": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "237": {
          "source": "                    $fh.forms.log.e(\"Error saving updated submission from download submission: \" + err);",
          "coverage": 0
        },
        "238": {
          "source": "                }",
          "coverage": ""
        },
        "239": {
          "source": "",
          "coverage": ""
        },
        "240": {
          "source": "                //Submission Model is now populated with all the fields in the submission",
          "coverage": ""
        },
        "241": {
          "source": "                self.addFileTasks(submissionModel, function(err) {",
          "coverage": 0
        },
        "242": {
          "source": "                    $fh.forms.log.d(\"addFileTasks called\", err, submissionModel);",
          "coverage": 0
        },
        "243": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "244": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "245": {
          "source": "                    }",
          "coverage": ""
        },
        "246": {
          "source": "                    self.increProgress();",
          "coverage": 0
        },
        "247": {
          "source": "                    self.saveLocal(function(err) {",
          "coverage": 0
        },
        "248": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "249": {
          "source": "                            $fh.forms.log.e(\"Error saving downloadTask to local storage\" + err);",
          "coverage": 0
        },
        "250": {
          "source": "                        }",
          "coverage": ""
        },
        "251": {
          "source": "",
          "coverage": ""
        },
        "252": {
          "source": "                        self.emit('progress', self.getProgress());",
          "coverage": 0
        },
        "253": {
          "source": "                        return cb();",
          "coverage": 0
        },
        "254": {
          "source": "                    });",
          "coverage": ""
        },
        "255": {
          "source": "                });",
          "coverage": ""
        },
        "256": {
          "source": "            });",
          "coverage": ""
        },
        "257": {
          "source": "        });",
          "coverage": ""
        },
        "258": {
          "source": "    }",
          "coverage": ""
        },
        "259": {
          "source": "",
          "coverage": ""
        },
        "260": {
          "source": "    function uploadSubmissionJSON() {",
          "coverage": 0
        },
        "261": {
          "source": "        $fh.forms.log.d(\"In uploadSubmissionJSON\");",
          "coverage": 0
        },
        "262": {
          "source": "        var formSub = self.get('jsonTask');",
          "coverage": 0
        },
        "263": {
          "source": "        self.submissionModel(function(err, submissionModel) {",
          "coverage": 0
        },
        "264": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "265": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "266": {
          "source": "            }",
          "coverage": ""
        },
        "267": {
          "source": "            self.addFileTasks(submissionModel, function(err) {",
          "coverage": 0
        },
        "268": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "269": {
          "source": "                    $fh.forms.log.e(\"Error adding file tasks for submission upload\");",
          "coverage": 0
        },
        "270": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "271": {
          "source": "                }",
          "coverage": ""
        },
        "272": {
          "source": "",
          "coverage": ""
        },
        "273": {
          "source": "                var formSubmissionModel = new FormSubmission(formSub);",
          "coverage": 0
        },
        "274": {
          "source": "                self.getRemoteStore().create(formSubmissionModel, function(err, res) {",
          "coverage": 0
        },
        "275": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "276": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "277": {
          "source": "                    } else {",
          "coverage": ""
        },
        "278": {
          "source": "                        var updatedFormDefinition = res.updatedFormDefinition;",
          "coverage": 0
        },
        "279": {
          "source": "                        if (updatedFormDefinition) {",
          "coverage": 0
        },
        "280": {
          "source": "                            // remote form definition is updated",
          "coverage": ""
        },
        "281": {
          "source": "                            self.refreshForm(updatedFormDefinition, function(err) {",
          "coverage": 0
        },
        "282": {
          "source": "                                //refresh form def in parallel. maybe not needed.",
          "coverage": ""
        },
        "283": {
          "source": "                                $fh.forms.log.d(\"Form Updated, refreshed\");",
          "coverage": 0
        },
        "284": {
          "source": "                                if (err) {",
          "coverage": 0
        },
        "285": {
          "source": "                                    $fh.forms.log.e(err);",
          "coverage": 0
        },
        "286": {
          "source": "                                }",
          "coverage": ""
        },
        "287": {
          "source": "                                processUploadDataResult(res);",
          "coverage": 0
        },
        "288": {
          "source": "                            });",
          "coverage": ""
        },
        "289": {
          "source": "                        } else {",
          "coverage": ""
        },
        "290": {
          "source": "                            processUploadDataResult(res);",
          "coverage": 0
        },
        "291": {
          "source": "                        }",
          "coverage": ""
        },
        "292": {
          "source": "                    }",
          "coverage": ""
        },
        "293": {
          "source": "                });",
          "coverage": ""
        },
        "294": {
          "source": "            });",
          "coverage": ""
        },
        "295": {
          "source": "        });",
          "coverage": ""
        },
        "296": {
          "source": "",
          "coverage": ""
        },
        "297": {
          "source": "    }",
          "coverage": ""
        },
        "298": {
          "source": "",
          "coverage": ""
        },
        "299": {
          "source": "    function downloadSubmissionJSON() {",
          "coverage": 0
        },
        "300": {
          "source": "        var formSubmissionDownload = new FormSubmissionDownload(self);",
          "coverage": 0
        },
        "301": {
          "source": "        self.getRemoteStore().read(formSubmissionDownload, processDownloadDataResult);",
          "coverage": 0
        },
        "302": {
          "source": "    }",
          "coverage": ""
        },
        "303": {
          "source": "",
          "coverage": ""
        },
        "304": {
          "source": "    if (self.isDownloadTask()) {",
          "coverage": 0
        },
        "305": {
          "source": "        downloadSubmissionJSON();",
          "coverage": 0
        },
        "306": {
          "source": "    } else {",
          "coverage": ""
        },
        "307": {
          "source": "        uploadSubmissionJSON();",
          "coverage": 0
        },
        "308": {
          "source": "    }",
          "coverage": ""
        },
        "309": {
          "source": "};",
          "coverage": ""
        },
        "310": {
          "source": "",
          "coverage": ""
        },
        "311": {
          "source": "/**",
          "coverage": ""
        },
        "312": {
          "source": " * Handles the case where a call to completeSubmission returns a status other than \"completed\".",
          "coverage": ""
        },
        "313": {
          "source": " * Will only ever get to this function when a call is made to the completeSubmission server.",
          "coverage": ""
        },
        "314": {
          "source": " *",
          "coverage": ""
        },
        "315": {
          "source": " *",
          "coverage": ""
        },
        "316": {
          "source": " * @param err (String) Error message associated with the error returned",
          "coverage": ""
        },
        "317": {
          "source": " * @param res {\"status\" : &lt;pending/error&gt;, \"pendingFiles\" : [&lt;any pending files not yet uploaded&gt;]}",
          "coverage": ""
        },
        "318": {
          "source": " * @param cb Function callback",
          "coverage": ""
        },
        "319": {
          "source": " */",
          "coverage": ""
        },
        "320": {
          "source": "UploadTask.prototype.handleCompletionError = function(err, res, cb) {",
          "coverage": 1
        },
        "321": {
          "source": "    $fh.forms.log.d(\"handleCompletionError Called\");",
          "coverage": 0
        },
        "322": {
          "source": "    var errorMessage = err;",
          "coverage": 0
        },
        "323": {
          "source": "    if (res.status === 'pending') {",
          "coverage": 0
        },
        "324": {
          "source": "        //The submission is not yet complete, there are files waiting to upload. This is an unexpected state as all of the files should have been uploaded.",
          "coverage": ""
        },
        "325": {
          "source": "        errorMessage = 'Submission Still Pending.';",
          "coverage": 0
        },
        "326": {
          "source": "    } else if (res.status === 'error') {",
          "coverage": 0
        },
        "327": {
          "source": "        //There was an error completing the submission.",
          "coverage": ""
        },
        "328": {
          "source": "        errorMessage = 'Error completing submission';",
          "coverage": 0
        },
        "329": {
          "source": "    } else {",
          "coverage": ""
        },
        "330": {
          "source": "        errorMessage = 'Invalid return type from complete submission';",
          "coverage": 0
        },
        "331": {
          "source": "    }",
          "coverage": ""
        },
        "332": {
          "source": "    cb(errorMessage);",
          "coverage": 0
        },
        "333": {
          "source": "};",
          "coverage": ""
        },
        "334": {
          "source": "",
          "coverage": ""
        },
        "335": {
          "source": "/**",
          "coverage": ""
        },
        "336": {
          "source": " * Handles the case where the current submission status is required from the server.",
          "coverage": ""
        },
        "337": {
          "source": " * Based on the files waiting to be uploaded, the upload task is re-built with pendingFiles from the server.",
          "coverage": ""
        },
        "338": {
          "source": " *",
          "coverage": ""
        },
        "339": {
          "source": " * @param cb",
          "coverage": ""
        },
        "340": {
          "source": " */",
          "coverage": ""
        },
        "341": {
          "source": "UploadTask.prototype.handleIncompleteSubmission = function(cb) {",
          "coverage": 1
        },
        "342": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "343": {
          "source": "",
          "coverage": ""
        },
        "344": {
          "source": "    function processUploadIncompleteSubmission() {",
          "coverage": 0
        },
        "345": {
          "source": "",
          "coverage": ""
        },
        "346": {
          "source": "        var remoteStore = self.getRemoteStore();",
          "coverage": 0
        },
        "347": {
          "source": "        var submissionStatus = new FormSubmissionStatus(self);",
          "coverage": 0
        },
        "348": {
          "source": "",
          "coverage": ""
        },
        "349": {
          "source": "        remoteStore.submissionStatus(submissionStatus, function(err, res) {",
          "coverage": 0
        },
        "350": {
          "source": "            var errMessage = \"\";",
          "coverage": 0
        },
        "351": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "352": {
          "source": "                cb(err);",
          "coverage": 0
        },
        "353": {
          "source": "            } else if (res.status === 'error') {",
          "coverage": 0
        },
        "354": {
          "source": "                //The server had an error submitting the form, finish with an error",
          "coverage": ""
        },
        "355": {
          "source": "                errMessage = 'Error submitting form.';",
          "coverage": 0
        },
        "356": {
          "source": "                cb(errMessage);",
          "coverage": 0
        },
        "357": {
          "source": "            } else if (res.status === 'complete') {",
          "coverage": 0
        },
        "358": {
          "source": "                //Submission is complete, make uploading progress further",
          "coverage": ""
        },
        "359": {
          "source": "                self.increProgress();",
          "coverage": 0
        },
        "360": {
          "source": "                cb();",
          "coverage": 0
        },
        "361": {
          "source": "            } else if (res.status === 'pending') {",
          "coverage": 0
        },
        "362": {
          "source": "                //Submission is still pending, check for files not uploaded yet.",
          "coverage": ""
        },
        "363": {
          "source": "                var pendingFiles = res.pendingFiles || [];",
          "coverage": 0
        },
        "364": {
          "source": "                if (pendingFiles.length &gt; 0) {",
          "coverage": 0
        },
        "365": {
          "source": "                    self.resetUploadTask(pendingFiles, function() {",
          "coverage": 0
        },
        "366": {
          "source": "                        cb();",
          "coverage": 0
        },
        "367": {
          "source": "                    });",
          "coverage": ""
        },
        "368": {
          "source": "                } else {",
          "coverage": ""
        },
        "369": {
          "source": "                    //No files pending on the server, make the progress further",
          "coverage": ""
        },
        "370": {
          "source": "                    self.increProgress();",
          "coverage": 0
        },
        "371": {
          "source": "                    cb();",
          "coverage": 0
        },
        "372": {
          "source": "                }",
          "coverage": ""
        },
        "373": {
          "source": "            } else {",
          "coverage": ""
        },
        "374": {
          "source": "                //Should not get to this point. Only valid status responses are error, pending and complete.",
          "coverage": ""
        },
        "375": {
          "source": "                errMessage = 'Invalid submission status response.';",
          "coverage": 0
        },
        "376": {
          "source": "                cb(errMessage);",
          "coverage": 0
        },
        "377": {
          "source": "            }",
          "coverage": ""
        },
        "378": {
          "source": "        });",
          "coverage": ""
        },
        "379": {
          "source": "    }",
          "coverage": ""
        },
        "380": {
          "source": "",
          "coverage": ""
        },
        "381": {
          "source": "    function processDownloadIncompleteSubmission() {",
          "coverage": 0
        },
        "382": {
          "source": "        //No need to go the the server to get submission details -- The current progress status is valid locally",
          "coverage": ""
        },
        "383": {
          "source": "        cb();",
          "coverage": 0
        },
        "384": {
          "source": "    }",
          "coverage": ""
        },
        "385": {
          "source": "",
          "coverage": ""
        },
        "386": {
          "source": "    if (self.isDownloadTask()) {",
          "coverage": 0
        },
        "387": {
          "source": "        processDownloadIncompleteSubmission();",
          "coverage": 0
        },
        "388": {
          "source": "    } else {",
          "coverage": ""
        },
        "389": {
          "source": "        processUploadIncompleteSubmission();",
          "coverage": 0
        },
        "390": {
          "source": "    }",
          "coverage": ""
        },
        "391": {
          "source": "};",
          "coverage": ""
        },
        "392": {
          "source": "",
          "coverage": ""
        },
        "393": {
          "source": "/**",
          "coverage": ""
        },
        "394": {
          "source": " * Resetting the upload task based on the response from getSubmissionStatus",
          "coverage": ""
        },
        "395": {
          "source": " * @param pendingFiles -- Array of files still waiting to upload",
          "coverage": ""
        },
        "396": {
          "source": " * @param cb",
          "coverage": ""
        },
        "397": {
          "source": " */",
          "coverage": ""
        },
        "398": {
          "source": "UploadTask.prototype.resetUploadTask = function(pendingFiles, cb) {",
          "coverage": 1
        },
        "399": {
          "source": "    var filesToUpload = this.get('fileTasks');",
          "coverage": 0
        },
        "400": {
          "source": "    var resetFilesToUpload = [];",
          "coverage": 0
        },
        "401": {
          "source": "    var fileIndex;",
          "coverage": 0
        },
        "402": {
          "source": "    //Adding the already completed files to the reset array.",
          "coverage": ""
        },
        "403": {
          "source": "    for (fileIndex = 0; fileIndex &lt; filesToUpload.length; fileIndex++) {",
          "coverage": 0
        },
        "404": {
          "source": "        if (pendingFiles.indexOf(filesToUpload[fileIndex].hashName) &lt; 0) {",
          "coverage": 0
        },
        "405": {
          "source": "            resetFilesToUpload.push(filesToUpload[fileIndex]);",
          "coverage": 0
        },
        "406": {
          "source": "        }",
          "coverage": ""
        },
        "407": {
          "source": "    }",
          "coverage": ""
        },
        "408": {
          "source": "    //Adding the pending files to the end of the array.",
          "coverage": ""
        },
        "409": {
          "source": "    for (fileIndex = 0; fileIndex &lt; filesToUpload.length; fileIndex++) {",
          "coverage": 0
        },
        "410": {
          "source": "        if (pendingFiles.indexOf(filesToUpload[fileIndex].hashName) &gt; -1) {",
          "coverage": 0
        },
        "411": {
          "source": "            resetFilesToUpload.push(filesToUpload[fileIndex]);",
          "coverage": 0
        },
        "412": {
          "source": "        }",
          "coverage": ""
        },
        "413": {
          "source": "    }",
          "coverage": ""
        },
        "414": {
          "source": "    var resetFileIndex = filesToUpload.length - pendingFiles.length - 1;",
          "coverage": 0
        },
        "415": {
          "source": "    var resetCurrentTask = 0;",
          "coverage": 0
        },
        "416": {
          "source": "    if (resetFileIndex &gt; 0) {",
          "coverage": 0
        },
        "417": {
          "source": "        resetCurrentTask = resetFileIndex;",
          "coverage": 0
        },
        "418": {
          "source": "    }",
          "coverage": ""
        },
        "419": {
          "source": "    //Reset current task",
          "coverage": ""
        },
        "420": {
          "source": "    this.set('currentTask', resetCurrentTask);",
          "coverage": 0
        },
        "421": {
          "source": "    this.set('fileTasks', resetFilesToUpload);",
          "coverage": 0
        },
        "422": {
          "source": "    this.saveLocal(cb); //Saving the reset files list to local",
          "coverage": 0
        },
        "423": {
          "source": "};",
          "coverage": ""
        },
        "424": {
          "source": "UploadTask.prototype.uploadFile = function(cb) {",
          "coverage": 1
        },
        "425": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "426": {
          "source": "    var progress = self.getCurrentTask();",
          "coverage": 0
        },
        "427": {
          "source": "",
          "coverage": ""
        },
        "428": {
          "source": "    if (progress === null) {",
          "coverage": 0
        },
        "429": {
          "source": "        progress = 0;",
          "coverage": 0
        },
        "430": {
          "source": "        self.set('currentTask', progress);",
          "coverage": 0
        },
        "431": {
          "source": "    }",
          "coverage": ""
        },
        "432": {
          "source": "    var fileTask = self.get('fileTasks', [])[progress];",
          "coverage": 0
        },
        "433": {
          "source": "    var submissionId = self.get('submissionId');",
          "coverage": 0
        },
        "434": {
          "source": "    var fileSubmissionModel;",
          "coverage": 0
        },
        "435": {
          "source": "    if (!fileTask) {",
          "coverage": 0
        },
        "436": {
          "source": "        $fh.forms.log.e(\"No file task found when trying to transfer a file.\");",
          "coverage": 0
        },
        "437": {
          "source": "        return cb('cannot find file task');",
          "coverage": 0
        },
        "438": {
          "source": "    }",
          "coverage": ""
        },
        "439": {
          "source": "",
          "coverage": ""
        },
        "440": {
          "source": "    if (!submissionId) {",
          "coverage": 0
        },
        "441": {
          "source": "        $fh.forms.log.e(\"No submission id found when trying to transfer a file.\");",
          "coverage": 0
        },
        "442": {
          "source": "        return cb(\"No submission Id found\");",
          "coverage": 0
        },
        "443": {
          "source": "    }",
          "coverage": ""
        },
        "444": {
          "source": "",
          "coverage": ""
        },
        "445": {
          "source": "    function processUploadFile() {",
          "coverage": 0
        },
        "446": {
          "source": "        $fh.forms.log.d(\"processUploadFile for submissionId: \");",
          "coverage": 0
        },
        "447": {
          "source": "        if (fileTask.contentType === 'base64') {",
          "coverage": 0
        },
        "448": {
          "source": "            fileSubmissionModel = new Base64FileSubmission(fileTask);",
          "coverage": 0
        },
        "449": {
          "source": "        } else {",
          "coverage": ""
        },
        "450": {
          "source": "            fileSubmissionModel = new FileSubmission(fileTask);",
          "coverage": 0
        },
        "451": {
          "source": "        }",
          "coverage": ""
        },
        "452": {
          "source": "        fileSubmissionModel.setSubmissionId(submissionId);",
          "coverage": 0
        },
        "453": {
          "source": "        fileSubmissionModel.loadFile(function(err) {",
          "coverage": 0
        },
        "454": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "455": {
          "source": "                $fh.forms.log.e(\"Error loading file for upload: \" + err);",
          "coverage": 0
        },
        "456": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "457": {
          "source": "            } else {",
          "coverage": ""
        },
        "458": {
          "source": "                self.getRemoteStore().create(fileSubmissionModel, function(err, res) {",
          "coverage": 0
        },
        "459": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "460": {
          "source": "                        cb(err);",
          "coverage": 0
        },
        "461": {
          "source": "                    } else {",
          "coverage": ""
        },
        "462": {
          "source": "                        if (res.status === 'ok' || res.status === 200 || res.status === '200') {",
          "coverage": 0
        },
        "463": {
          "source": "                            fileTask.updateDate = utils.getTime();",
          "coverage": 0
        },
        "464": {
          "source": "                            self.increProgress();",
          "coverage": 0
        },
        "465": {
          "source": "                            self.saveLocal(function(err) {",
          "coverage": 0
        },
        "466": {
          "source": "                                //save current status.",
          "coverage": ""
        },
        "467": {
          "source": "                                if (err) {",
          "coverage": 0
        },
        "468": {
          "source": "                                    $fh.forms.log.e(\"Error saving upload task\" + err);",
          "coverage": 0
        },
        "469": {
          "source": "                                }",
          "coverage": ""
        },
        "470": {
          "source": "                            });",
          "coverage": ""
        },
        "471": {
          "source": "                            self.emit('progress', self.getProgress());",
          "coverage": 0
        },
        "472": {
          "source": "                            cb(null);",
          "coverage": 0
        },
        "473": {
          "source": "                        } else {",
          "coverage": ""
        },
        "474": {
          "source": "                            var errorMessage = 'File upload failed for file: ' + fileTask.fileName;",
          "coverage": 0
        },
        "475": {
          "source": "                            cb(errorMessage);",
          "coverage": 0
        },
        "476": {
          "source": "                        }",
          "coverage": ""
        },
        "477": {
          "source": "                    }",
          "coverage": ""
        },
        "478": {
          "source": "                });",
          "coverage": ""
        },
        "479": {
          "source": "            }",
          "coverage": ""
        },
        "480": {
          "source": "        });",
          "coverage": ""
        },
        "481": {
          "source": "    }",
          "coverage": ""
        },
        "482": {
          "source": "",
          "coverage": ""
        },
        "483": {
          "source": "    function processDownloadFile() {",
          "coverage": 0
        },
        "484": {
          "source": "        $fh.forms.log.d(\"processDownloadFile called\");",
          "coverage": 0
        },
        "485": {
          "source": "        fileSubmissionModel = new FileSubmissionDownload(fileTask);",
          "coverage": 0
        },
        "486": {
          "source": "        fileSubmissionModel.setSubmissionId(submissionId);",
          "coverage": 0
        },
        "487": {
          "source": "        self.getRemoteStore().read(fileSubmissionModel, function(err, localFilePath) {",
          "coverage": 0
        },
        "488": {
          "source": "            if (err) {",
          "coverage": 0
        },
        "489": {
          "source": "                $fh.forms.log.e(\"Error downloading a file from remote: \" + err);",
          "coverage": 0
        },
        "490": {
          "source": "                return cb(err);",
          "coverage": 0
        },
        "491": {
          "source": "            }",
          "coverage": ""
        },
        "492": {
          "source": "",
          "coverage": ""
        },
        "493": {
          "source": "            $fh.forms.log.d(\"processDownloadFile called. Local File Path: \" + localFilePath);",
          "coverage": 0
        },
        "494": {
          "source": "",
          "coverage": ""
        },
        "495": {
          "source": "            //Update the submission model to add local file uri to a file submission object",
          "coverage": ""
        },
        "496": {
          "source": "            self.submissionModel(function(err, submissionModel) {",
          "coverage": 0
        },
        "497": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "498": {
          "source": "                    $fh.forms.log.e(\"Error Loading submission model for processDownloadFile \" + err);",
          "coverage": 0
        },
        "499": {
          "source": "                    return cb(err);",
          "coverage": 0
        },
        "500": {
          "source": "                }",
          "coverage": ""
        },
        "501": {
          "source": "",
          "coverage": ""
        },
        "502": {
          "source": "                submissionModel.updateFileLocalURI(fileTask, localFilePath, function(err) {",
          "coverage": 0
        },
        "503": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "504": {
          "source": "                        $fh.forms.log.e(\"Error updating file local url for fileTask \" + JSON.stringify(fileTask));",
          "coverage": 0
        },
        "505": {
          "source": "                        return cb(err);",
          "coverage": 0
        },
        "506": {
          "source": "                    }",
          "coverage": ""
        },
        "507": {
          "source": "",
          "coverage": ""
        },
        "508": {
          "source": "                    self.increProgress();",
          "coverage": 0
        },
        "509": {
          "source": "                    self.saveLocal(function(err) {",
          "coverage": 0
        },
        "510": {
          "source": "                        //save current status.",
          "coverage": ""
        },
        "511": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "512": {
          "source": "                            $fh.forms.log.e(\"Error saving download task\");",
          "coverage": 0
        },
        "513": {
          "source": "                        }",
          "coverage": ""
        },
        "514": {
          "source": "                    });",
          "coverage": ""
        },
        "515": {
          "source": "                    self.emit('progress', self.getProgress());",
          "coverage": 0
        },
        "516": {
          "source": "                    return cb();",
          "coverage": 0
        },
        "517": {
          "source": "                });",
          "coverage": ""
        },
        "518": {
          "source": "            });",
          "coverage": ""
        },
        "519": {
          "source": "        });",
          "coverage": ""
        },
        "520": {
          "source": "    }",
          "coverage": ""
        },
        "521": {
          "source": "",
          "coverage": ""
        },
        "522": {
          "source": "    if (self.isDownloadTask()) {",
          "coverage": 0
        },
        "523": {
          "source": "        processDownloadFile();",
          "coverage": 0
        },
        "524": {
          "source": "    } else {",
          "coverage": ""
        },
        "525": {
          "source": "        processUploadFile();",
          "coverage": 0
        },
        "526": {
          "source": "    }",
          "coverage": ""
        },
        "527": {
          "source": "};",
          "coverage": ""
        },
        "528": {
          "source": "UploadTask.prototype.isDownloadTask = function() {",
          "coverage": 1
        },
        "529": {
          "source": "    return this.get(\"submissionTransferType\") === \"download\";",
          "coverage": 0
        },
        "530": {
          "source": "};",
          "coverage": ""
        },
        "531": {
          "source": "//The upload task needs to be retried",
          "coverage": ""
        },
        "532": {
          "source": "UploadTask.prototype.setRetryNeeded = function(retryNeeded) {",
          "coverage": 1
        },
        "533": {
          "source": "    //If there is a submissionId, then a retry is needed. If not, then the current task should be set to null to retry the submission.",
          "coverage": ""
        },
        "534": {
          "source": "    if (this.get('submissionId', null) != null) {",
          "coverage": 0
        },
        "535": {
          "source": "        this.set('retryNeeded', retryNeeded);",
          "coverage": 0
        },
        "536": {
          "source": "    } else {",
          "coverage": ""
        },
        "537": {
          "source": "        this.set('retryNeeded', false);",
          "coverage": 0
        },
        "538": {
          "source": "        this.set('currentTask', null);",
          "coverage": 0
        },
        "539": {
          "source": "    }",
          "coverage": ""
        },
        "540": {
          "source": "};",
          "coverage": ""
        },
        "541": {
          "source": "UploadTask.prototype.retryNeeded = function() {",
          "coverage": 1
        },
        "542": {
          "source": "    return this.get('retryNeeded');",
          "coverage": 0
        },
        "543": {
          "source": "};",
          "coverage": ""
        },
        "544": {
          "source": "UploadTask.prototype.uploadTick = function(cb) {",
          "coverage": 1
        },
        "545": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "546": {
          "source": "",
          "coverage": ""
        },
        "547": {
          "source": "    function _handler(err) {",
          "coverage": 0
        },
        "548": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "549": {
          "source": "            $fh.forms.log.d('Err, retrying transfer: ' + self.getLocalId());",
          "coverage": 0
        },
        "550": {
          "source": "            //If the upload has encountered an error -- flag the submission as needing a retry on the next tick -- User should be insulated from an error until the retries are finished.",
          "coverage": ""
        },
        "551": {
          "source": "            self.increRetryAttempts();",
          "coverage": 0
        },
        "552": {
          "source": "            if (self.getRetryAttempts() &lt;= $fh.forms.config.get('max_retries')) {",
          "coverage": 0
        },
        "553": {
          "source": "                self.setRetryNeeded(true);",
          "coverage": 0
        },
        "554": {
          "source": "                self.saveLocal(function(err) {",
          "coverage": 0
        },
        "555": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "556": {
          "source": "                        $fh.forms.log.e(\"Error saving upload taskL \" + err);",
          "coverage": 0
        },
        "557": {
          "source": "                    }",
          "coverage": ""
        },
        "558": {
          "source": "",
          "coverage": ""
        },
        "559": {
          "source": "                    cb();",
          "coverage": 0
        },
        "560": {
          "source": "                });",
          "coverage": ""
        },
        "561": {
          "source": "            } else {",
          "coverage": ""
        },
        "562": {
          "source": "                //The number of retry attempts exceeds the maximum number of retry attempts allowed, flag the upload as an error.",
          "coverage": ""
        },
        "563": {
          "source": "                self.setRetryNeeded(true);",
          "coverage": 0
        },
        "564": {
          "source": "                self.resetRetryAttempts();",
          "coverage": 0
        },
        "565": {
          "source": "                self.error(err, function() {",
          "coverage": 0
        },
        "566": {
          "source": "                    cb(err);",
          "coverage": 0
        },
        "567": {
          "source": "                });",
          "coverage": ""
        },
        "568": {
          "source": "            }",
          "coverage": ""
        },
        "569": {
          "source": "        } else {",
          "coverage": ""
        },
        "570": {
          "source": "            //no error.",
          "coverage": ""
        },
        "571": {
          "source": "            self.setRetryNeeded(false);",
          "coverage": 0
        },
        "572": {
          "source": "            self.saveLocal(function(_err) {",
          "coverage": 0
        },
        "573": {
          "source": "                if (_err) {",
          "coverage": 0
        },
        "574": {
          "source": "                    $fh.forms.log.e(\"Error saving upload task to local memory\" + _err);",
          "coverage": 0
        },
        "575": {
          "source": "                }",
          "coverage": ""
        },
        "576": {
          "source": "            });",
          "coverage": ""
        },
        "577": {
          "source": "            self.submissionModel(function(err, submission) {",
          "coverage": 0
        },
        "578": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "579": {
          "source": "                    cb(err);",
          "coverage": 0
        },
        "580": {
          "source": "                } else {",
          "coverage": ""
        },
        "581": {
          "source": "                    var status = submission.get('status');",
          "coverage": 0
        },
        "582": {
          "source": "                    if (status !== 'inprogress' &amp;&amp; status !== 'submitted' &amp;&amp; status !== 'downloaded' &amp;&amp; status !== 'queued') {",
          "coverage": 0
        },
        "583": {
          "source": "                        $fh.forms.log.e('Submission status is incorrect. Upload task should be started by submission object\\'s upload method.' + status);",
          "coverage": 0
        },
        "584": {
          "source": "                        cb('Submission status is incorrect. Upload task should be started by submission object\\'s upload method.');",
          "coverage": 0
        },
        "585": {
          "source": "                    } else {",
          "coverage": ""
        },
        "586": {
          "source": "                        cb();",
          "coverage": 0
        },
        "587": {
          "source": "                    }",
          "coverage": ""
        },
        "588": {
          "source": "                }",
          "coverage": ""
        },
        "589": {
          "source": "            });",
          "coverage": ""
        },
        "590": {
          "source": "        }",
          "coverage": ""
        },
        "591": {
          "source": "    }",
          "coverage": ""
        },
        "592": {
          "source": "    if (!this.isFormCompleted()) {",
          "coverage": 0
        },
        "593": {
          "source": "        // No current task, send the form json",
          "coverage": ""
        },
        "594": {
          "source": "        this.uploadForm(_handler);",
          "coverage": 0
        },
        "595": {
          "source": "    } else if (this.retryNeeded()) {",
          "coverage": 0
        },
        "596": {
          "source": "        //If a retry is needed, this tick gets the current status of the submission from the server and resets the submission.",
          "coverage": ""
        },
        "597": {
          "source": "        this.handleIncompleteSubmission(_handler);",
          "coverage": 0
        },
        "598": {
          "source": "    } else if (!this.isFileCompleted()) {",
          "coverage": 0
        },
        "599": {
          "source": "        //files to be uploaded",
          "coverage": ""
        },
        "600": {
          "source": "        this.uploadFile(_handler);",
          "coverage": 0
        },
        "601": {
          "source": "    } else if (!this.isMBaaSCompleted()) {",
          "coverage": 0
        },
        "602": {
          "source": "        //call mbaas to complete upload",
          "coverage": ""
        },
        "603": {
          "source": "        this.uploadComplete(_handler);",
          "coverage": 0
        },
        "604": {
          "source": "    } else if (!this.isCompleted()) {",
          "coverage": 0
        },
        "605": {
          "source": "        //complete the upload task",
          "coverage": ""
        },
        "606": {
          "source": "        this.success(_handler);",
          "coverage": 0
        },
        "607": {
          "source": "    } else {",
          "coverage": ""
        },
        "608": {
          "source": "        //task is already completed.",
          "coverage": ""
        },
        "609": {
          "source": "        _handler(null, null);",
          "coverage": 0
        },
        "610": {
          "source": "    }",
          "coverage": ""
        },
        "611": {
          "source": "};",
          "coverage": ""
        },
        "612": {
          "source": "UploadTask.prototype.increProgress = function() {",
          "coverage": 1
        },
        "613": {
          "source": "    var curTask = this.getCurrentTask();",
          "coverage": 0
        },
        "614": {
          "source": "    if (curTask === null) {",
          "coverage": 0
        },
        "615": {
          "source": "        curTask = 0;",
          "coverage": 0
        },
        "616": {
          "source": "    } else {",
          "coverage": ""
        },
        "617": {
          "source": "        curTask++;",
          "coverage": 0
        },
        "618": {
          "source": "    }",
          "coverage": ""
        },
        "619": {
          "source": "    this.set('currentTask', curTask);",
          "coverage": 0
        },
        "620": {
          "source": "};",
          "coverage": ""
        },
        "621": {
          "source": "UploadTask.prototype.uploadComplete = function(cb) {",
          "coverage": 1
        },
        "622": {
          "source": "    $fh.forms.log.d(\"UploadComplete Called\");",
          "coverage": 0
        },
        "623": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "624": {
          "source": "    var submissionId = self.get('submissionId', null);",
          "coverage": 0
        },
        "625": {
          "source": "",
          "coverage": ""
        },
        "626": {
          "source": "    if (submissionId === null) {",
          "coverage": 0
        },
        "627": {
          "source": "        return cb('Failed to complete submission. Submission Id not found.');",
          "coverage": 0
        },
        "628": {
          "source": "    }",
          "coverage": ""
        },
        "629": {
          "source": "",
          "coverage": ""
        },
        "630": {
          "source": "    function processDownloadComplete() {",
          "coverage": 0
        },
        "631": {
          "source": "        $fh.forms.log.d(\"processDownloadComplete Called\");",
          "coverage": 0
        },
        "632": {
          "source": "        self.increProgress();",
          "coverage": 0
        },
        "633": {
          "source": "        cb(null);",
          "coverage": 0
        },
        "634": {
          "source": "    }",
          "coverage": ""
        },
        "635": {
          "source": "",
          "coverage": ""
        },
        "636": {
          "source": "    function processUploadComplete() {",
          "coverage": 0
        },
        "637": {
          "source": "        $fh.forms.log.d(\"processUploadComplete Called\");",
          "coverage": 0
        },
        "638": {
          "source": "        var remoteStore = self.getRemoteStore();",
          "coverage": 0
        },
        "639": {
          "source": "        var completeSubmission = new FormSubmissionComplete(self);",
          "coverage": 0
        },
        "640": {
          "source": "        remoteStore.create(completeSubmission, function(err, res) {",
          "coverage": 0
        },
        "641": {
          "source": "            //if status is not \"completed\", then handle the completion err",
          "coverage": ""
        },
        "642": {
          "source": "            res = res || {};",
          "coverage": 0
        },
        "643": {
          "source": "            if (res.status !== 'complete') {",
          "coverage": 0
        },
        "644": {
          "source": "                return self.handleCompletionError(err, res, cb);",
          "coverage": 0
        },
        "645": {
          "source": "            }",
          "coverage": ""
        },
        "646": {
          "source": "            //Completion is now completed sucessfully.. we can make the progress further.",
          "coverage": ""
        },
        "647": {
          "source": "            self.increProgress();",
          "coverage": 0
        },
        "648": {
          "source": "            cb(null);",
          "coverage": 0
        },
        "649": {
          "source": "        });",
          "coverage": ""
        },
        "650": {
          "source": "    }",
          "coverage": ""
        },
        "651": {
          "source": "",
          "coverage": ""
        },
        "652": {
          "source": "    if (self.isDownloadTask()) {",
          "coverage": 0
        },
        "653": {
          "source": "        processDownloadComplete();",
          "coverage": 0
        },
        "654": {
          "source": "    } else {",
          "coverage": ""
        },
        "655": {
          "source": "        processUploadComplete();",
          "coverage": 0
        },
        "656": {
          "source": "    }",
          "coverage": ""
        },
        "657": {
          "source": "};",
          "coverage": ""
        },
        "658": {
          "source": "/**",
          "coverage": ""
        },
        "659": {
          "source": " * the upload task is successfully completed. This will be called when all uploading process finished successfully.",
          "coverage": ""
        },
        "660": {
          "source": " * @return {[type]} [description]",
          "coverage": ""
        },
        "661": {
          "source": " */",
          "coverage": ""
        },
        "662": {
          "source": "UploadTask.prototype.success = function(cb) {",
          "coverage": 1
        },
        "663": {
          "source": "    $fh.forms.log.d(\"Transfer Sucessful. Success Called.\");",
          "coverage": 0
        },
        "664": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "665": {
          "source": "    var submissionId = self.get('submissionId', null);",
          "coverage": 0
        },
        "666": {
          "source": "    self.set('completed', true);",
          "coverage": 0
        },
        "667": {
          "source": "",
          "coverage": ""
        },
        "668": {
          "source": "",
          "coverage": ""
        },
        "669": {
          "source": "    function processUploadSuccess(cb) {",
          "coverage": 0
        },
        "670": {
          "source": "        $fh.forms.log.d(\"processUploadSuccess Called\");",
          "coverage": 0
        },
        "671": {
          "source": "        self.submissionModel(function(_err, model) {",
          "coverage": 0
        },
        "672": {
          "source": "            if (_err) {",
          "coverage": 0
        },
        "673": {
          "source": "                return cb(_err);",
          "coverage": 0
        },
        "674": {
          "source": "            }",
          "coverage": ""
        },
        "675": {
          "source": "            model.set('submissionId', submissionId);",
          "coverage": 0
        },
        "676": {
          "source": "            model.submitted(cb);",
          "coverage": 0
        },
        "677": {
          "source": "        });",
          "coverage": ""
        },
        "678": {
          "source": "    }",
          "coverage": ""
        },
        "679": {
          "source": "",
          "coverage": ""
        },
        "680": {
          "source": "    function processDownloadSuccess(cb) {",
          "coverage": 0
        },
        "681": {
          "source": "        $fh.forms.log.d(\"processDownloadSuccess Called\");",
          "coverage": 0
        },
        "682": {
          "source": "        self.submissionModel(function(_err, model) {",
          "coverage": 0
        },
        "683": {
          "source": "            if (_err) {",
          "coverage": 0
        },
        "684": {
          "source": "                return cb(_err);",
          "coverage": 0
        },
        "685": {
          "source": "            } else {",
          "coverage": ""
        },
        "686": {
          "source": "                model.populateFilesInSubmission();",
          "coverage": 0
        },
        "687": {
          "source": "                model.downloaded(cb);",
          "coverage": 0
        },
        "688": {
          "source": "            }",
          "coverage": ""
        },
        "689": {
          "source": "        });",
          "coverage": ""
        },
        "690": {
          "source": "    }",
          "coverage": ""
        },
        "691": {
          "source": "",
          "coverage": ""
        },
        "692": {
          "source": "    self.saveLocal(function(err) {",
          "coverage": 0
        },
        "693": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "694": {
          "source": "            $fh.forms.log.e(\"Error Clearing Upload Task\");",
          "coverage": 0
        },
        "695": {
          "source": "        }",
          "coverage": ""
        },
        "696": {
          "source": "",
          "coverage": ""
        },
        "697": {
          "source": "        if (self.isDownloadTask()) {",
          "coverage": 0
        },
        "698": {
          "source": "            processDownloadSuccess(function(err) {",
          "coverage": 0
        },
        "699": {
          "source": "                self.clearLocal(cb);",
          "coverage": 0
        },
        "700": {
          "source": "            });",
          "coverage": ""
        },
        "701": {
          "source": "        } else {",
          "coverage": ""
        },
        "702": {
          "source": "            processUploadSuccess(function(err) {",
          "coverage": 0
        },
        "703": {
          "source": "                self.clearLocal(cb);",
          "coverage": 0
        },
        "704": {
          "source": "            });",
          "coverage": ""
        },
        "705": {
          "source": "        }",
          "coverage": ""
        },
        "706": {
          "source": "    });",
          "coverage": ""
        },
        "707": {
          "source": "};",
          "coverage": ""
        },
        "708": {
          "source": "/**",
          "coverage": ""
        },
        "709": {
          "source": " * the upload task is failed. It will not complete the task but will set error with error returned.",
          "coverage": ""
        },
        "710": {
          "source": " * @param  {[type]}   err [description]",
          "coverage": ""
        },
        "711": {
          "source": " * @param  {Function} cb  [description]",
          "coverage": ""
        },
        "712": {
          "source": " * @return {[type]}       [description]",
          "coverage": ""
        },
        "713": {
          "source": " */",
          "coverage": ""
        },
        "714": {
          "source": "UploadTask.prototype.error = function(uploadErrorMessage, cb) {",
          "coverage": 1
        },
        "715": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "716": {
          "source": "    $fh.forms.log.e(\"Error uploading submission: \", uploadErrorMessage);",
          "coverage": 0
        },
        "717": {
          "source": "    self.set('error', uploadErrorMessage);",
          "coverage": 0
        },
        "718": {
          "source": "    self.saveLocal(function(err) {",
          "coverage": 0
        },
        "719": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "720": {
          "source": "            $fh.forms.log.e('Upload task save failed: ' + err);",
          "coverage": 0
        },
        "721": {
          "source": "        }",
          "coverage": ""
        },
        "722": {
          "source": "",
          "coverage": ""
        },
        "723": {
          "source": "        self.submissionModel(function(_err, model) {",
          "coverage": 0
        },
        "724": {
          "source": "            if (_err) {",
          "coverage": 0
        },
        "725": {
          "source": "                cb(_err);",
          "coverage": 0
        },
        "726": {
          "source": "            } else {",
          "coverage": ""
        },
        "727": {
          "source": "                model.setUploadTaskId(null);",
          "coverage": 0
        },
        "728": {
          "source": "                model.error(uploadErrorMessage, function(err) {",
          "coverage": 0
        },
        "729": {
          "source": "                    if (err) {",
          "coverage": 0
        },
        "730": {
          "source": "                        $fh.forms.log.e(\"Error updating submission model to error status \", err);",
          "coverage": 0
        },
        "731": {
          "source": "                    }",
          "coverage": ""
        },
        "732": {
          "source": "                    self.clearLocal(function(err) {",
          "coverage": 0
        },
        "733": {
          "source": "                        if (err) {",
          "coverage": 0
        },
        "734": {
          "source": "                            $fh.forms.log.e(\"Error clearing upload task local storage: \", err);",
          "coverage": 0
        },
        "735": {
          "source": "                        }",
          "coverage": ""
        },
        "736": {
          "source": "                        cb(err);",
          "coverage": 0
        },
        "737": {
          "source": "                    });",
          "coverage": ""
        },
        "738": {
          "source": "                });",
          "coverage": ""
        },
        "739": {
          "source": "            }",
          "coverage": ""
        },
        "740": {
          "source": "        });",
          "coverage": ""
        },
        "741": {
          "source": "    });",
          "coverage": ""
        },
        "742": {
          "source": "};",
          "coverage": ""
        },
        "743": {
          "source": "UploadTask.prototype.isFormCompleted = function() {",
          "coverage": 1
        },
        "744": {
          "source": "    var curTask = this.getCurrentTask();",
          "coverage": 0
        },
        "745": {
          "source": "    if (curTask === null) {",
          "coverage": 0
        },
        "746": {
          "source": "        return false;",
          "coverage": 0
        },
        "747": {
          "source": "    } else {",
          "coverage": ""
        },
        "748": {
          "source": "        return true;",
          "coverage": 0
        },
        "749": {
          "source": "    }",
          "coverage": ""
        },
        "750": {
          "source": "};",
          "coverage": ""
        },
        "751": {
          "source": "UploadTask.prototype.isFileCompleted = function() {",
          "coverage": 1
        },
        "752": {
          "source": "    var curTask = this.getCurrentTask();",
          "coverage": 0
        },
        "753": {
          "source": "    if (curTask === null) {",
          "coverage": 0
        },
        "754": {
          "source": "        return false;",
          "coverage": 0
        },
        "755": {
          "source": "    } else if (curTask &lt; this.get('fileTasks', []).length) {",
          "coverage": 0
        },
        "756": {
          "source": "        return false;",
          "coverage": 0
        },
        "757": {
          "source": "    } else {",
          "coverage": ""
        },
        "758": {
          "source": "        return true;",
          "coverage": 0
        },
        "759": {
          "source": "    }",
          "coverage": ""
        },
        "760": {
          "source": "};",
          "coverage": ""
        },
        "761": {
          "source": "UploadTask.prototype.isError = function() {",
          "coverage": 1
        },
        "762": {
          "source": "    var error = this.get('error', null);",
          "coverage": 0
        },
        "763": {
          "source": "    if (error) {",
          "coverage": 0
        },
        "764": {
          "source": "        return true;",
          "coverage": 0
        },
        "765": {
          "source": "    } else {",
          "coverage": ""
        },
        "766": {
          "source": "        return false;",
          "coverage": 0
        },
        "767": {
          "source": "    }",
          "coverage": ""
        },
        "768": {
          "source": "};",
          "coverage": ""
        },
        "769": {
          "source": "UploadTask.prototype.isCompleted = function() {",
          "coverage": 1
        },
        "770": {
          "source": "    return this.get('completed', false);",
          "coverage": 0
        },
        "771": {
          "source": "};",
          "coverage": ""
        },
        "772": {
          "source": "UploadTask.prototype.isMBaaSCompleted = function() {",
          "coverage": 1
        },
        "773": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "774": {
          "source": "    if (!self.isFileCompleted()) {",
          "coverage": 0
        },
        "775": {
          "source": "        return false;",
          "coverage": 0
        },
        "776": {
          "source": "    } else {",
          "coverage": ""
        },
        "777": {
          "source": "        var curTask = self.getCurrentTask();",
          "coverage": 0
        },
        "778": {
          "source": "        if (curTask &gt; self.get('fileTasks', []).length) {",
          "coverage": 0
        },
        "779": {
          "source": "            //change offset if completion bit is changed",
          "coverage": ""
        },
        "780": {
          "source": "            self.set(\"mbaasCompleted\", true);",
          "coverage": 0
        },
        "781": {
          "source": "            self.saveLocal(function(err) {",
          "coverage": 0
        },
        "782": {
          "source": "                if (err) {",
          "coverage": 0
        },
        "783": {
          "source": "                    $fh.forms.log.e(\"Error saving upload task: \", err);",
          "coverage": 0
        },
        "784": {
          "source": "                }",
          "coverage": ""
        },
        "785": {
          "source": "            });",
          "coverage": ""
        },
        "786": {
          "source": "            return true;",
          "coverage": 0
        },
        "787": {
          "source": "        } else {",
          "coverage": ""
        },
        "788": {
          "source": "            return false;",
          "coverage": 0
        },
        "789": {
          "source": "        }",
          "coverage": ""
        },
        "790": {
          "source": "    }",
          "coverage": ""
        },
        "791": {
          "source": "};",
          "coverage": ""
        },
        "792": {
          "source": "UploadTask.prototype.getProgress = function() {",
          "coverage": 1
        },
        "793": {
          "source": "    var self = this;",
          "coverage": 0
        },
        "794": {
          "source": "    var rtn = {",
          "coverage": 0
        },
        "795": {
          "source": "        'formJSON': false,",
          "coverage": ""
        },
        "796": {
          "source": "        'currentFileIndex': 0,",
          "coverage": ""
        },
        "797": {
          "source": "        'totalFiles': self.get('fileTasks').length,",
          "coverage": ""
        },
        "798": {
          "source": "        'totalSize': self.getTotalSize(),",
          "coverage": ""
        },
        "799": {
          "source": "        'uploaded': self.getUploadedSize(),",
          "coverage": ""
        },
        "800": {
          "source": "        'retryAttempts': self.getRetryAttempts(),",
          "coverage": ""
        },
        "801": {
          "source": "        'submissionTransferType': self.get('submissionTransferType')",
          "coverage": ""
        },
        "802": {
          "source": "    };",
          "coverage": ""
        },
        "803": {
          "source": "    var progress = self.getCurrentTask();",
          "coverage": 0
        },
        "804": {
          "source": "    if (progress === null) {",
          "coverage": 0
        },
        "805": {
          "source": "        return rtn;",
          "coverage": 0
        },
        "806": {
          "source": "    } else {",
          "coverage": ""
        },
        "807": {
          "source": "        rtn.formJSON = true;",
          "coverage": 0
        },
        "808": {
          "source": "        rtn.currentFileIndex = progress;",
          "coverage": 0
        },
        "809": {
          "source": "    }",
          "coverage": ""
        },
        "810": {
          "source": "    return rtn;",
          "coverage": 0
        },
        "811": {
          "source": "};",
          "coverage": ""
        },
        "812": {
          "source": "/**",
          "coverage": ""
        },
        "813": {
          "source": " * Refresh related form definition.",
          "coverage": ""
        },
        "814": {
          "source": " * @param  {Function} cb [description]",
          "coverage": ""
        },
        "815": {
          "source": " * @return {[type]}      [description]",
          "coverage": ""
        },
        "816": {
          "source": " */",
          "coverage": ""
        },
        "817": {
          "source": "UploadTask.prototype.refreshForm = function(updatedForm, cb) {",
          "coverage": 1
        },
        "818": {
          "source": "    var formId = this.get('formId');",
          "coverage": 0
        },
        "819": {
          "source": "    new Form({",
          "coverage": 0
        },
        "820": {
          "source": "        'formId': formId,",
          "coverage": ""
        },
        "821": {
          "source": "        'rawMode': true,",
          "coverage": ""
        },
        "822": {
          "source": "        'rawData': updatedForm",
          "coverage": ""
        },
        "823": {
          "source": "    }, function(err, form) {",
          "coverage": ""
        },
        "824": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "825": {
          "source": "            $fh.forms.log.e(err);",
          "coverage": 0
        },
        "826": {
          "source": "        }",
          "coverage": ""
        },
        "827": {
          "source": "",
          "coverage": ""
        },
        "828": {
          "source": "        $fh.forms.log.l('successfully updated form the form with id ' + updatedForm._id);",
          "coverage": 0
        },
        "829": {
          "source": "        cb();",
          "coverage": 0
        },
        "830": {
          "source": "    });",
          "coverage": ""
        },
        "831": {
          "source": "};",
          "coverage": ""
        },
        "832": {
          "source": "UploadTask.prototype.submissionModel = function(cb) {",
          "coverage": 1
        },
        "833": {
          "source": "    submission.fromLocal(this.get('submissionLocalId'), function(err, submission) {",
          "coverage": 0
        },
        "834": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "835": {
          "source": "            $fh.forms.log.e(\"Error getting submission model from local memory \" + err);",
          "coverage": 0
        },
        "836": {
          "source": "        }",
          "coverage": ""
        },
        "837": {
          "source": "        cb(err, submission);",
          "coverage": 0
        },
        "838": {
          "source": "    });",
          "coverage": ""
        },
        "839": {
          "source": "};",
          "coverage": ""
        },
        "840": {
          "source": "",
          "coverage": ""
        },
        "841": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "842": {
          "source": "    'newInstance': newInstance,",
          "coverage": ""
        },
        "843": {
          "source": "    'fromLocal': fromLocal",
          "coverage": ""
        },
        "844": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/utils.js",
      "coverage": 34.21052631578947,
      "hits": 13,
      "misses": 25,
      "sloc": 38,
      "source": {
        "1": {
          "source": "var hash = require('../api_hash');",
          "coverage": 2
        },
        "2": {
          "source": "var _ = require('../../../libs/underscore.js');",
          "coverage": 2
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "function isPhoneGap() {",
          "coverage": 2
        },
        "5": {
          "source": "    return (typeof window.Phonegap !== \"undefined\" || typeof window.cordova !== \"undefined\");",
          "coverage": 0
        },
        "6": {
          "source": "}",
          "coverage": ""
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "function extend(child, parent) {",
          "coverage": 2
        },
        "9": {
          "source": "    return _.extend(child.prototype, parent.prototype);",
          "coverage": 26
        },
        "10": {
          "source": "}",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "function getTime(timezoneOffset) {",
          "coverage": 2
        },
        "13": {
          "source": "    var now = new Date();",
          "coverage": 1
        },
        "14": {
          "source": "    if (timezoneOffset) {",
          "coverage": 1
        },
        "15": {
          "source": "        return now.getTimezoneOffset();",
          "coverage": 0
        },
        "16": {
          "source": "    } else {",
          "coverage": ""
        },
        "17": {
          "source": "        return now;",
          "coverage": 1
        },
        "18": {
          "source": "    }",
          "coverage": ""
        },
        "19": {
          "source": "}",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "function localId(model) {",
          "coverage": 2
        },
        "22": {
          "source": "    var props = model.getProps();",
          "coverage": 0
        },
        "23": {
          "source": "    var _id = props._id;",
          "coverage": 0
        },
        "24": {
          "source": "    var _type = props._type;",
          "coverage": 0
        },
        "25": {
          "source": "    var ts = getTime().getTime();",
          "coverage": 0
        },
        "26": {
          "source": "    if (_id &amp;&amp; _type) {",
          "coverage": 0
        },
        "27": {
          "source": "        return _id + '_' + _type + '_' + ts;",
          "coverage": 0
        },
        "28": {
          "source": "    } else if (_id) {",
          "coverage": 0
        },
        "29": {
          "source": "        return _id + '_' + ts;",
          "coverage": 0
        },
        "30": {
          "source": "    } else if (_type) {",
          "coverage": 0
        },
        "31": {
          "source": "        return _type + '_' + ts;",
          "coverage": 0
        },
        "32": {
          "source": "    } else {",
          "coverage": ""
        },
        "33": {
          "source": "        return ts;",
          "coverage": 0
        },
        "34": {
          "source": "    }",
          "coverage": ""
        },
        "35": {
          "source": "}",
          "coverage": ""
        },
        "36": {
          "source": "/**",
          "coverage": ""
        },
        "37": {
          "source": " * md5 hash a string",
          "coverage": ""
        },
        "38": {
          "source": " * @param  {[type]}   str [description]",
          "coverage": ""
        },
        "39": {
          "source": " * @param  {Function} cb  (err,md5str)",
          "coverage": ""
        },
        "40": {
          "source": " * @return {[type]}       [description]",
          "coverage": ""
        },
        "41": {
          "source": " */",
          "coverage": ""
        },
        "42": {
          "source": "function md5(str, cb) {",
          "coverage": 2
        },
        "43": {
          "source": "    hash({",
          "coverage": 0
        },
        "44": {
          "source": "        algorithm: 'MD5',",
          "coverage": ""
        },
        "45": {
          "source": "        text: str",
          "coverage": ""
        },
        "46": {
          "source": "    }, function(result) {",
          "coverage": ""
        },
        "47": {
          "source": "        if (result &amp;&amp; result.hashvalue) {",
          "coverage": 0
        },
        "48": {
          "source": "            cb(null, result.hashvalue);",
          "coverage": 0
        },
        "49": {
          "source": "        } else {",
          "coverage": ""
        },
        "50": {
          "source": "            cb('Crypto failed.');",
          "coverage": 0
        },
        "51": {
          "source": "        }",
          "coverage": ""
        },
        "52": {
          "source": "    });",
          "coverage": ""
        },
        "53": {
          "source": "}",
          "coverage": ""
        },
        "54": {
          "source": "",
          "coverage": ""
        },
        "55": {
          "source": "function send(params, cb) {",
          "coverage": 2
        },
        "56": {
          "source": "    log.d(\"Sending mail: \", params);",
          "coverage": 0
        },
        "57": {
          "source": "    if (isPhoneGap() &amp;&amp; window.plugin.email) {",
          "coverage": 0
        },
        "58": {
          "source": "        window.plugin.email.isServiceAvailable(function(emailAvailable) {",
          "coverage": 0
        },
        "59": {
          "source": "            if (emailAvailable) {",
          "coverage": 0
        },
        "60": {
          "source": "                window.plugin.email.open(params);",
          "coverage": 0
        },
        "61": {
          "source": "                return cb();",
          "coverage": 0
        },
        "62": {
          "source": "            } else {",
          "coverage": ""
        },
        "63": {
          "source": "                return cb(\"Email Not Available\");",
          "coverage": 0
        },
        "64": {
          "source": "            }",
          "coverage": ""
        },
        "65": {
          "source": "        });",
          "coverage": ""
        },
        "66": {
          "source": "    } else {",
          "coverage": ""
        },
        "67": {
          "source": "        return cb(\"Email Not Supported\");",
          "coverage": 0
        },
        "68": {
          "source": "    }",
          "coverage": ""
        },
        "69": {
          "source": "}",
          "coverage": ""
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "72": {
          "source": "    extend: extend,",
          "coverage": ""
        },
        "73": {
          "source": "    localId: localId,",
          "coverage": ""
        },
        "74": {
          "source": "    md5: md5,",
          "coverage": ""
        },
        "75": {
          "source": "    getTime: getTime,",
          "coverage": ""
        },
        "76": {
          "source": "    send: send,",
          "coverage": ""
        },
        "77": {
          "source": "    isPhoneGap: isPhoneGap",
          "coverage": ""
        },
        "78": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/forms/web.js",
      "coverage": 14.117647058823529,
      "hits": 12,
      "misses": 73,
      "sloc": 85,
      "source": {
        "1": {
          "source": "var log = require(\"./log\");",
          "coverage": 1
        },
        "2": {
          "source": "var config = require(\"./config\");",
          "coverage": 1
        },
        "3": {
          "source": "var utils = require(\"./utils\");",
          "coverage": 1
        },
        "4": {
          "source": "var _ajax = require(\"../ajax\");",
          "coverage": 1
        },
        "5": {
          "source": "var fileSystem = require(\"./fileSystem\");",
          "coverage": 1
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "function get(url, cb) {",
          "coverage": 1
        },
        "8": {
          "source": "    log.d(\"Ajax get \", url);",
          "coverage": 0
        },
        "9": {
          "source": "    _ajax({",
          "coverage": 0
        },
        "10": {
          "source": "        url: url,",
          "coverage": ""
        },
        "11": {
          "source": "        type: 'GET',",
          "coverage": ""
        },
        "12": {
          "source": "        dataType: 'json',",
          "coverage": ""
        },
        "13": {
          "source": "        timeout: config.get(\"timeout\"),",
          "coverage": ""
        },
        "14": {
          "source": "        success: function(data, text) {",
          "coverage": ""
        },
        "15": {
          "source": "            log.d(\"Ajax get\", url, \"Success\");",
          "coverage": 0
        },
        "16": {
          "source": "            cb(null, data);",
          "coverage": 0
        },
        "17": {
          "source": "        },",
          "coverage": ""
        },
        "18": {
          "source": "        error: function(xhr, status, err) {",
          "coverage": ""
        },
        "19": {
          "source": "            log.e(\"Ajax get\", url, \"Fail\", xhr, status, err);",
          "coverage": 0
        },
        "20": {
          "source": "            cb(xhr);",
          "coverage": 0
        },
        "21": {
          "source": "        }",
          "coverage": ""
        },
        "22": {
          "source": "    });",
          "coverage": ""
        },
        "23": {
          "source": "}",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "function post(url, body, cb) {",
          "coverage": 1
        },
        "26": {
          "source": "    log.d(\"Ajax post \", url, body);",
          "coverage": 0
        },
        "27": {
          "source": "    var file = false;",
          "coverage": 0
        },
        "28": {
          "source": "    var formData;",
          "coverage": 0
        },
        "29": {
          "source": "    if (typeof body === 'object') {",
          "coverage": 0
        },
        "30": {
          "source": "        if (body instanceof File) {",
          "coverage": 0
        },
        "31": {
          "source": "            file = true;",
          "coverage": 0
        },
        "32": {
          "source": "            formData = new FormData();",
          "coverage": 0
        },
        "33": {
          "source": "            var name = body.name;",
          "coverage": 0
        },
        "34": {
          "source": "            formData.append(name, body);",
          "coverage": 0
        },
        "35": {
          "source": "            body = formData;",
          "coverage": 0
        },
        "36": {
          "source": "        } else {",
          "coverage": ""
        },
        "37": {
          "source": "            body = JSON.stringify(body);",
          "coverage": 0
        },
        "38": {
          "source": "        }",
          "coverage": ""
        },
        "39": {
          "source": "    }",
          "coverage": ""
        },
        "40": {
          "source": "    var param = {",
          "coverage": 0
        },
        "41": {
          "source": "        url: url,",
          "coverage": ""
        },
        "42": {
          "source": "        type: 'POST',",
          "coverage": ""
        },
        "43": {
          "source": "        data: body,",
          "coverage": ""
        },
        "44": {
          "source": "        dataType: 'json',",
          "coverage": ""
        },
        "45": {
          "source": "        timeout: config.get(\"timeout\"),",
          "coverage": ""
        },
        "46": {
          "source": "        success: function(data, text) {",
          "coverage": ""
        },
        "47": {
          "source": "            log.d(\"Ajax post \", url, \" Success\");",
          "coverage": 0
        },
        "48": {
          "source": "            cb(null, data);",
          "coverage": 0
        },
        "49": {
          "source": "        },",
          "coverage": ""
        },
        "50": {
          "source": "        error: function(xhr, status, err) {",
          "coverage": ""
        },
        "51": {
          "source": "            log.e(\"Ajax post \", url, \" Fail \", xhr, status, err);",
          "coverage": 0
        },
        "52": {
          "source": "            cb(xhr);",
          "coverage": 0
        },
        "53": {
          "source": "        }",
          "coverage": ""
        },
        "54": {
          "source": "    };",
          "coverage": ""
        },
        "55": {
          "source": "    if (file === false) {",
          "coverage": 0
        },
        "56": {
          "source": "        param.contentType = 'application/json';",
          "coverage": 0
        },
        "57": {
          "source": "    } else {",
          "coverage": ""
        },
        "58": {
          "source": "        param.contentType = 'multipart/form-data'",
          "coverage": 0
        },
        "59": {
          "source": "    }",
          "coverage": ""
        },
        "60": {
          "source": "    _ajax(param);",
          "coverage": 0
        },
        "61": {
          "source": "}",
          "coverage": ""
        },
        "62": {
          "source": "",
          "coverage": ""
        },
        "63": {
          "source": "function uploadFile(url, fileProps, cb) {",
          "coverage": 1
        },
        "64": {
          "source": "    log.d(\"Phonegap uploadFile \", url, fileProps);",
          "coverage": 0
        },
        "65": {
          "source": "    var filePath = fileProps.fullPath;",
          "coverage": 0
        },
        "66": {
          "source": "",
          "coverage": ""
        },
        "67": {
          "source": "    if (!config.isOnline()) {",
          "coverage": 0
        },
        "68": {
          "source": "        log.e(\"Phonegap uploadFile. Not Online.\", url, fileProps);",
          "coverage": 0
        },
        "69": {
          "source": "        return cb(\"No Internet Connection Available.\");",
          "coverage": 0
        },
        "70": {
          "source": "    }",
          "coverage": ""
        },
        "71": {
          "source": "",
          "coverage": ""
        },
        "72": {
          "source": "    var success = function(r) {",
          "coverage": 0
        },
        "73": {
          "source": "        log.d(\"upload to url \", url, \" sucessful\");",
          "coverage": 0
        },
        "74": {
          "source": "        r.response = r.response || {};",
          "coverage": 0
        },
        "75": {
          "source": "        if (typeof r.response === \"string\") {",
          "coverage": 0
        },
        "76": {
          "source": "            r.response = JSON.parse(r.response);",
          "coverage": 0
        },
        "77": {
          "source": "        }",
          "coverage": ""
        },
        "78": {
          "source": "        cb(null, r.response);",
          "coverage": 0
        },
        "79": {
          "source": "    };",
          "coverage": ""
        },
        "80": {
          "source": "",
          "coverage": ""
        },
        "81": {
          "source": "    var fail = function(error) {",
          "coverage": 0
        },
        "82": {
          "source": "        log.e(\"An error uploading a file has occurred: Code = \" + error.code);",
          "coverage": 0
        },
        "83": {
          "source": "        log.d(\"upload error source \" + error.source);",
          "coverage": 0
        },
        "84": {
          "source": "        log.d(\"upload error target \" + error.target);",
          "coverage": 0
        },
        "85": {
          "source": "        cb(error);",
          "coverage": 0
        },
        "86": {
          "source": "    };",
          "coverage": ""
        },
        "87": {
          "source": "",
          "coverage": ""
        },
        "88": {
          "source": "    var options = new FileUploadOptions();",
          "coverage": 0
        },
        "89": {
          "source": "    //important - empty fileName will cause file upload fail on WP!!",
          "coverage": ""
        },
        "90": {
          "source": "    options.fileName = (null == fileProps.name || \"\" === fileProps.name) ? \"image.png\" : fileProps.name;",
          "coverage": 0
        },
        "91": {
          "source": "    options.mimeType = fileProps.contentType ? fileProps.contentType : \"application/octet-stream\";",
          "coverage": 0
        },
        "92": {
          "source": "    options.httpMethod = \"https\";",
          "coverage": 0
        },
        "93": {
          "source": "    options.chunkedMode = true;",
          "coverage": 0
        },
        "94": {
          "source": "    options.fileKey = \"file\";",
          "coverage": 0
        },
        "95": {
          "source": "",
          "coverage": ""
        },
        "96": {
          "source": "    //http://grandiz.com/phonegap-development/phonegap-file-transfer-error-code-3-solved/",
          "coverage": ""
        },
        "97": {
          "source": "    options.headers = {",
          "coverage": 0
        },
        "98": {
          "source": "        \"Connection\": \"close\"",
          "coverage": ""
        },
        "99": {
          "source": "    };",
          "coverage": ""
        },
        "100": {
          "source": "",
          "coverage": ""
        },
        "101": {
          "source": "    log.d(\"Beginning file upload \", url, options);",
          "coverage": 0
        },
        "102": {
          "source": "    var ft = new FileTransfer();",
          "coverage": 0
        },
        "103": {
          "source": "    ft.upload(filePath, encodeURI(url), success, fail, options);",
          "coverage": 0
        },
        "104": {
          "source": "};",
          "coverage": 1
        },
        "105": {
          "source": "",
          "coverage": ""
        },
        "106": {
          "source": "function downloadFile(url, fileMetaData, cb) {",
          "coverage": 1
        },
        "107": {
          "source": "    log.d(\"Phonegap downloadFile \", url, fileMetaData);",
          "coverage": 0
        },
        "108": {
          "source": "    var ft = new FileTransfer();",
          "coverage": 0
        },
        "109": {
          "source": "",
          "coverage": ""
        },
        "110": {
          "source": "    if (!config.isOnline()) {",
          "coverage": 0
        },
        "111": {
          "source": "        log.e(\"Phonegap downloadFile. Not Online.\", url, fileMetaData);",
          "coverage": 0
        },
        "112": {
          "source": "        return cb(\"No Internet Connection Available.\");",
          "coverage": 0
        },
        "113": {
          "source": "    }",
          "coverage": ""
        },
        "114": {
          "source": "",
          "coverage": ""
        },
        "115": {
          "source": "    fileSystem.getBasePath(function(err, basePath) {",
          "coverage": 0
        },
        "116": {
          "source": "        if (err) {",
          "coverage": 0
        },
        "117": {
          "source": "            log.e(\"Error getting base path for file download: \" + url);",
          "coverage": 0
        },
        "118": {
          "source": "            return cb(err);",
          "coverage": 0
        },
        "119": {
          "source": "        }",
          "coverage": ""
        },
        "120": {
          "source": "",
          "coverage": ""
        },
        "121": {
          "source": "        function success(fileEntry) {",
          "coverage": 0
        },
        "122": {
          "source": "            log.d(\"File Download Completed Successfully. FilePath: \" + fileEntry.fullPath);",
          "coverage": 0
        },
        "123": {
          "source": "            return cb(null, fileEntry.toURL());",
          "coverage": 0
        },
        "124": {
          "source": "        }",
          "coverage": ""
        },
        "125": {
          "source": "",
          "coverage": ""
        },
        "126": {
          "source": "        function fail(error) {",
          "coverage": 0
        },
        "127": {
          "source": "            log.e(\"Error downloading file \" + fileMetaData.fileName + \" code: \" + error.code);",
          "coverage": 0
        },
        "128": {
          "source": "            return cb(\"Error downloading file \" + fileMetaData.fileName + \" code: \" + error.code);",
          "coverage": 0
        },
        "129": {
          "source": "        }",
          "coverage": ""
        },
        "130": {
          "source": "",
          "coverage": ""
        },
        "131": {
          "source": "        if (fileMetaData.fileName) {",
          "coverage": 0
        },
        "132": {
          "source": "            log.d(\"File name for file \" + fileMetaData.fileName + \" found. Starting download\");",
          "coverage": 0
        },
        "133": {
          "source": "            var fullPath = basePath + fileMetaData.fileName;",
          "coverage": 0
        },
        "134": {
          "source": "            ft.download(encodeURI(url), fullPath, success, fail, false, {",
          "coverage": 0
        },
        "135": {
          "source": "                headers: {",
          "coverage": ""
        },
        "136": {
          "source": "                    \"Connection\": \"close\"",
          "coverage": ""
        },
        "137": {
          "source": "                }",
          "coverage": ""
        },
        "138": {
          "source": "            });",
          "coverage": ""
        },
        "139": {
          "source": "        } else {",
          "coverage": ""
        },
        "140": {
          "source": "            log.e(\"No file name associated with the file to download\");",
          "coverage": 0
        },
        "141": {
          "source": "            return cb(\"No file name associated with the file to download\");",
          "coverage": 0
        },
        "142": {
          "source": "        }",
          "coverage": ""
        },
        "143": {
          "source": "    });",
          "coverage": ""
        },
        "144": {
          "source": "};",
          "coverage": 1
        },
        "145": {
          "source": "",
          "coverage": ""
        },
        "146": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "147": {
          "source": "    get: get,",
          "coverage": ""
        },
        "148": {
          "source": "    post: post,",
          "coverage": ""
        },
        "149": {
          "source": "    uploadFile: uploadFile,",
          "coverage": ""
        },
        "150": {
          "source": "    downloadFile: downloadFile",
          "coverage": ""
        },
        "151": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/handleError.js",
      "coverage": 78.57142857142857,
      "hits": 11,
      "misses": 3,
      "sloc": 14,
      "source": {
        "1": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "module.exports = function(fail, req, resStatus, error){",
          "coverage": 2
        },
        "4": {
          "source": "  var errraw;",
          "coverage": 16
        },
        "5": {
          "source": "  var statusCode = 0;",
          "coverage": 16
        },
        "6": {
          "source": "  if(req){",
          "coverage": 16
        },
        "7": {
          "source": "    try{",
          "coverage": 12
        },
        "8": {
          "source": "      statusCode = req.status;",
          "coverage": 12
        },
        "9": {
          "source": "      var res = JSON.parse(req.responseText);",
          "coverage": 12
        },
        "10": {
          "source": "      errraw = res.error || res.msg;",
          "coverage": 0
        },
        "11": {
          "source": "      if (errraw instanceof Array) {",
          "coverage": 0
        },
        "12": {
          "source": "        errraw = errraw.join('\\n');",
          "coverage": 0
        },
        "13": {
          "source": "      }",
          "coverage": ""
        },
        "14": {
          "source": "    } catch(e){",
          "coverage": ""
        },
        "15": {
          "source": "      errraw = req.responseText;",
          "coverage": 12
        },
        "16": {
          "source": "    }",
          "coverage": ""
        },
        "17": {
          "source": "  }",
          "coverage": ""
        },
        "18": {
          "source": "  if(fail){",
          "coverage": 16
        },
        "19": {
          "source": "    fail(errraw, {",
          "coverage": 16
        },
        "20": {
          "source": "      status: statusCode,",
          "coverage": ""
        },
        "21": {
          "source": "      message: resStatus,",
          "coverage": ""
        },
        "22": {
          "source": "      error: error",
          "coverage": ""
        },
        "23": {
          "source": "    });",
          "coverage": ""
        },
        "24": {
          "source": "  }",
          "coverage": ""
        },
        "25": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/hosts.js",
      "coverage": 77.35849056603774,
      "hits": 41,
      "misses": 12,
      "sloc": 53,
      "source": {
        "1": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 2
        },
        "2": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "function removeEndSlash(input){",
          "coverage": 2
        },
        "5": {
          "source": "  var ret = input;",
          "coverage": 9
        },
        "6": {
          "source": "  if(ret.charAt(ret.length - 1) === \"/\"){",
          "coverage": 9
        },
        "7": {
          "source": "    ret = ret.substring(0, ret.length-1);",
          "coverage": 0
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "  return ret;",
          "coverage": 9
        },
        "10": {
          "source": "}",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "function removeStartSlash(input){",
          "coverage": 2
        },
        "13": {
          "source": "  var ret = input;",
          "coverage": 38
        },
        "14": {
          "source": "  if(ret.length &gt; 1 &amp;&amp; ret.charAt(0) === \"/\"){",
          "coverage": 38
        },
        "15": {
          "source": "    ret = ret.substring(1, ret.length);",
          "coverage": 37
        },
        "16": {
          "source": "  }",
          "coverage": ""
        },
        "17": {
          "source": "  return ret;",
          "coverage": 38
        },
        "18": {
          "source": "}",
          "coverage": ""
        },
        "19": {
          "source": "",
          "coverage": ""
        },
        "20": {
          "source": "function CloudHost(cloud_props){",
          "coverage": 2
        },
        "21": {
          "source": "  this.cloud_props = cloud_props;",
          "coverage": 9
        },
        "22": {
          "source": "  this.cloud_host = undefined;",
          "coverage": 9
        },
        "23": {
          "source": "  this.isLegacy = false;",
          "coverage": 9
        },
        "24": {
          "source": "}",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "CloudHost.prototype.getHost = function(appType){",
          "coverage": 2
        },
        "27": {
          "source": "  if(this.cloud_host){",
          "coverage": 65
        },
        "28": {
          "source": "    return this.cloud_host;",
          "coverage": 56
        },
        "29": {
          "source": "  } else {",
          "coverage": ""
        },
        "30": {
          "source": "    var url;",
          "coverage": 9
        },
        "31": {
          "source": "    var app_type;",
          "coverage": 9
        },
        "32": {
          "source": "    if(this.cloud_props &amp;&amp; this.cloud_props.hosts){",
          "coverage": 9
        },
        "33": {
          "source": "      url = this.cloud_props.hosts.url;",
          "coverage": 9
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "      if (typeof url === 'undefined') {",
          "coverage": 9
        },
        "36": {
          "source": "        // resolve url the old way i.e. depending on",
          "coverage": ""
        },
        "37": {
          "source": "        // -burnt in app mode",
          "coverage": ""
        },
        "38": {
          "source": "        // -returned dev or live url",
          "coverage": ""
        },
        "39": {
          "source": "        // -returned dev or live type (node or fh(rhino or proxying))",
          "coverage": ""
        },
        "40": {
          "source": "        var cloud_host = this.cloud_props.hosts.releaseCloudUrl;",
          "coverage": 0
        },
        "41": {
          "source": "        app_type = this.cloud_props.hosts.releaseCloudType;",
          "coverage": 0
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "        if(typeof appType !== \"undefined\" &amp;&amp; appType.indexOf(\"dev\") &gt; -1){",
          "coverage": 0
        },
        "44": {
          "source": "          cloud_host = this.cloud_props.hosts.debugCloudUrl;",
          "coverage": 0
        },
        "45": {
          "source": "          app_type = this.cloud_props.hosts.debugCloudType;",
          "coverage": 0
        },
        "46": {
          "source": "        }",
          "coverage": ""
        },
        "47": {
          "source": "        url = cloud_host;",
          "coverage": 0
        },
        "48": {
          "source": "      }",
          "coverage": ""
        },
        "49": {
          "source": "    }",
          "coverage": ""
        },
        "50": {
          "source": "    url = removeEndSlash(url);",
          "coverage": 9
        },
        "51": {
          "source": "    this.cloud_host = url;",
          "coverage": 9
        },
        "52": {
          "source": "    if(app_type === \"fh\"){",
          "coverage": 9
        },
        "53": {
          "source": "      this.isLegacy = true;",
          "coverage": 0
        },
        "54": {
          "source": "    }",
          "coverage": ""
        },
        "55": {
          "source": "    return url;",
          "coverage": 9
        },
        "56": {
          "source": "  }",
          "coverage": ""
        },
        "57": {
          "source": "}",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "CloudHost.prototype.getActUrl = function(act){",
          "coverage": 2
        },
        "60": {
          "source": "  var app_props = appProps.getAppProps() || {};",
          "coverage": 8
        },
        "61": {
          "source": "  if(typeof this.cloud_host === \"undefined\"){",
          "coverage": 8
        },
        "62": {
          "source": "    this.getHost(app_props.mode);",
          "coverage": 0
        },
        "63": {
          "source": "  }",
          "coverage": ""
        },
        "64": {
          "source": "  if(this.isLegacy){",
          "coverage": 8
        },
        "65": {
          "source": "    return this.cloud_host + constants.boxprefix + \"act/\" + this.cloud_props.domain + \"/\" + app_props.appid + \"/\" + act + \"/\" + app_props.appid;",
          "coverage": 0
        },
        "66": {
          "source": "  } else {",
          "coverage": ""
        },
        "67": {
          "source": "    return this.cloud_host + \"/cloud/\" + act;",
          "coverage": 8
        },
        "68": {
          "source": "  }",
          "coverage": ""
        },
        "69": {
          "source": "}",
          "coverage": ""
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "CloudHost.prototype.getMBAASUrl = function(service){",
          "coverage": 2
        },
        "72": {
          "source": "  var app_props = appProps.getAppProps() || {};",
          "coverage": 1
        },
        "73": {
          "source": "  if(typeof this.cloud_host === \"undefined\"){",
          "coverage": 1
        },
        "74": {
          "source": "    this.getHost(app_props.mode);",
          "coverage": 0
        },
        "75": {
          "source": "  }",
          "coverage": ""
        },
        "76": {
          "source": "  return this.cloud_host + \"/mbaas/\" + service;",
          "coverage": 1
        },
        "77": {
          "source": "}",
          "coverage": ""
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "CloudHost.prototype.getCloudUrl = function(path){",
          "coverage": 2
        },
        "80": {
          "source": "  var app_props = appProps.getAppProps() || {};",
          "coverage": 38
        },
        "81": {
          "source": "  if(typeof this.cloud_host === \"undefined\"){",
          "coverage": 38
        },
        "82": {
          "source": "    this.getHost(app_props.mode);",
          "coverage": 0
        },
        "83": {
          "source": "  }",
          "coverage": ""
        },
        "84": {
          "source": "  return this.cloud_host + \"/\" + removeStartSlash(path);",
          "coverage": 38
        },
        "85": {
          "source": "}",
          "coverage": ""
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "",
          "coverage": ""
        },
        "88": {
          "source": "",
          "coverage": ""
        },
        "89": {
          "source": "module.exports = CloudHost;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/initializer.js",
      "coverage": 36.36363636363637,
      "hits": 24,
      "misses": 42,
      "sloc": 66,
      "source": {
        "1": {
          "source": "var loadScript = require(\"./loadScript\");",
          "coverage": 2
        },
        "2": {
          "source": "var Lawnchair = require('../../libs/generated/lawnchair');",
          "coverage": 2
        },
        "3": {
          "source": "var lawnchairext = require('./lawnchair-ext');",
          "coverage": 2
        },
        "4": {
          "source": "var consts = require(\"./constants\");",
          "coverage": 2
        },
        "5": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 2
        },
        "6": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "7": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 2
        },
        "8": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "9": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "10": {
          "source": "var hashFunc = require(\"./security/hash\");",
          "coverage": 2
        },
        "11": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "12": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 2
        },
        "13": {
          "source": "var events = require(\"./events\");",
          "coverage": 2
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "var init = function(cb) {",
          "coverage": 2
        },
        "16": {
          "source": "  appProps.load(function(err, data) {",
          "coverage": 9
        },
        "17": {
          "source": "    if (err) return cb(err);",
          "coverage": 9
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "    // Emit internal config loaded event - SDK will now set appprops",
          "coverage": ""
        },
        "20": {
          "source": "    events.emit(constants.INTERNAL_CONFIG_LOADED_EVENT, null, data);",
          "coverage": 9
        },
        "21": {
          "source": "    return loadCloudProps(data, cb);",
          "coverage": 9
        },
        "22": {
          "source": "  });",
          "coverage": ""
        },
        "23": {
          "source": "};",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "var loadCloudProps = function(app_props, callback) {",
          "coverage": 2
        },
        "26": {
          "source": "  if (app_props.loglevel) {",
          "coverage": 9
        },
        "27": {
          "source": "    logger.setLevel(app_props.loglevel);",
          "coverage": 0
        },
        "28": {
          "source": "  }",
          "coverage": ""
        },
        "29": {
          "source": "  // If local - shortcircuit the init - just return the host",
          "coverage": ""
        },
        "30": {
          "source": "  if (app_props.local) {",
          "coverage": 9
        },
        "31": {
          "source": "    var res = {",
          "coverage": 9
        },
        "32": {
          "source": "      \"domain\": \"local\",",
          "coverage": ""
        },
        "33": {
          "source": "      \"firstTime\": false,",
          "coverage": ""
        },
        "34": {
          "source": "      \"hosts\": {",
          "coverage": ""
        },
        "35": {
          "source": "        \"debugCloudType\": \"node\",",
          "coverage": ""
        },
        "36": {
          "source": "        \"debugCloudUrl\": app_props.host,",
          "coverage": ""
        },
        "37": {
          "source": "        \"releaseCloudType\": \"node\",",
          "coverage": ""
        },
        "38": {
          "source": "        \"releaseCloudUrl\": app_props.host,",
          "coverage": ""
        },
        "39": {
          "source": "        \"type\": \"cloud_nodejs\",",
          "coverage": ""
        },
        "40": {
          "source": "        \"url\": app_props.host",
          "coverage": ""
        },
        "41": {
          "source": "      },",
          "coverage": ""
        },
        "42": {
          "source": "      \"init\": {",
          "coverage": ""
        },
        "43": {
          "source": "        \"trackId\": \"000000000000000000000000\"",
          "coverage": ""
        },
        "44": {
          "source": "      },",
          "coverage": ""
        },
        "45": {
          "source": "      \"status\": \"ok\"",
          "coverage": ""
        },
        "46": {
          "source": "    };",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "    return callback(null, {",
          "coverage": 9
        },
        "49": {
          "source": "      cloud: res",
          "coverage": ""
        },
        "50": {
          "source": "    });",
          "coverage": ""
        },
        "51": {
          "source": "  }",
          "coverage": ""
        },
        "52": {
          "source": "",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "  //now we have app props, add the fileStorageAdapter",
          "coverage": ""
        },
        "55": {
          "source": "  lawnchairext.addAdapter(app_props, hashFunc);",
          "coverage": 0
        },
        "56": {
          "source": "  //dom adapter doens't work on windows phone, so don't specify the adapter if the dom one failed",
          "coverage": ""
        },
        "57": {
          "source": "  //we specify the order of lawnchair adapters to use, lawnchair will find the right one to use, to keep backward compatibility, keep the order",
          "coverage": ""
        },
        "58": {
          "source": "  //as dom, webkit-sqlite, localFileStorage, window-name",
          "coverage": ""
        },
        "59": {
          "source": "  var lcConf = {",
          "coverage": 0
        },
        "60": {
          "source": "    name: \"fh_init_storage\",",
          "coverage": ""
        },
        "61": {
          "source": "    adapter: [\"dom\", \"webkit-sqlite\", \"window-name\"],",
          "coverage": ""
        },
        "62": {
          "source": "    fail: function(msg, err) {",
          "coverage": ""
        },
        "63": {
          "source": "      var error_message = 'read/save from/to local storage failed  msg:' + msg + ' err:' + err;",
          "coverage": 0
        },
        "64": {
          "source": "      return fail(error_message, {});",
          "coverage": 0
        },
        "65": {
          "source": "    }",
          "coverage": ""
        },
        "66": {
          "source": "  };",
          "coverage": ""
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "  if (typeof Titanium !== \"undefined\") {",
          "coverage": 0
        },
        "69": {
          "source": "    lcConf.adapter = ['titanium'];",
          "coverage": 0
        },
        "70": {
          "source": "  }",
          "coverage": ""
        },
        "71": {
          "source": "",
          "coverage": ""
        },
        "72": {
          "source": "  var doInit = function(path, appProps, savedHost, storage) {",
          "coverage": 0
        },
        "73": {
          "source": "    var data = fhparams.buildFHParams();",
          "coverage": 0
        },
        "74": {
          "source": "",
          "coverage": ""
        },
        "75": {
          "source": "    ajax({",
          "coverage": 0
        },
        "76": {
          "source": "      \"url\": path,",
          "coverage": ""
        },
        "77": {
          "source": "      \"type\": \"POST\",",
          "coverage": ""
        },
        "78": {
          "source": "      \"tryJSONP\": true,",
          "coverage": ""
        },
        "79": {
          "source": "      \"dataType\": \"json\",",
          "coverage": ""
        },
        "80": {
          "source": "      \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "81": {
          "source": "      \"data\": JSON.stringify(data),",
          "coverage": ""
        },
        "82": {
          "source": "      \"timeout\": appProps.timeout,",
          "coverage": ""
        },
        "83": {
          "source": "      \"success\": function(initRes) {",
          "coverage": ""
        },
        "84": {
          "source": "        if (storage) {",
          "coverage": 0
        },
        "85": {
          "source": "          storage.save({",
          "coverage": 0
        },
        "86": {
          "source": "            key: \"fh_init\",",
          "coverage": ""
        },
        "87": {
          "source": "            value: initRes",
          "coverage": ""
        },
        "88": {
          "source": "          }, function() {});",
          "coverage": ""
        },
        "89": {
          "source": "        }",
          "coverage": ""
        },
        "90": {
          "source": "        if (callback) {",
          "coverage": 0
        },
        "91": {
          "source": "          callback(null, {",
          "coverage": 0
        },
        "92": {
          "source": "            cloud: initRes",
          "coverage": ""
        },
        "93": {
          "source": "          });",
          "coverage": ""
        },
        "94": {
          "source": "        }",
          "coverage": ""
        },
        "95": {
          "source": "      },",
          "coverage": ""
        },
        "96": {
          "source": "      \"error\": function(req, statusText, error) {",
          "coverage": ""
        },
        "97": {
          "source": "        var errormsg = \"unknown\";",
          "coverage": 0
        },
        "98": {
          "source": "        if (req) {",
          "coverage": 0
        },
        "99": {
          "source": "          errormsg = req.status + \" - \" + req.responseText;",
          "coverage": 0
        },
        "100": {
          "source": "        }",
          "coverage": ""
        },
        "101": {
          "source": "        logger.error(\"App init returned error : \" + errormsg);",
          "coverage": 0
        },
        "102": {
          "source": "        //use the cached host if we have a copy",
          "coverage": ""
        },
        "103": {
          "source": "        if (savedHost) {",
          "coverage": 0
        },
        "104": {
          "source": "          logger.info(\"Using cached host: \" + JSON.stringify(savedHost));",
          "coverage": 0
        },
        "105": {
          "source": "          if (callback) {",
          "coverage": 0
        },
        "106": {
          "source": "            callback(null, {",
          "coverage": 0
        },
        "107": {
          "source": "              cloud: savedHost",
          "coverage": ""
        },
        "108": {
          "source": "            });",
          "coverage": ""
        },
        "109": {
          "source": "          }",
          "coverage": ""
        },
        "110": {
          "source": "        } else {",
          "coverage": ""
        },
        "111": {
          "source": "          logger.error(\"No cached host found. Init failed.\");",
          "coverage": 0
        },
        "112": {
          "source": "          handleError(function(msg, err) {",
          "coverage": 0
        },
        "113": {
          "source": "            if (callback) {",
          "coverage": 0
        },
        "114": {
          "source": "              callback({",
          "coverage": 0
        },
        "115": {
          "source": "                error: err,",
          "coverage": ""
        },
        "116": {
          "source": "                message: msg",
          "coverage": ""
        },
        "117": {
          "source": "              });",
          "coverage": ""
        },
        "118": {
          "source": "            }",
          "coverage": ""
        },
        "119": {
          "source": "          }, req, statusText, error);",
          "coverage": ""
        },
        "120": {
          "source": "        }",
          "coverage": ""
        },
        "121": {
          "source": "      }",
          "coverage": ""
        },
        "122": {
          "source": "    });",
          "coverage": ""
        },
        "123": {
          "source": "  };",
          "coverage": ""
        },
        "124": {
          "source": "",
          "coverage": ""
        },
        "125": {
          "source": "  var storage = null;",
          "coverage": 0
        },
        "126": {
          "source": "  var path = app_props.host + consts.boxprefix + \"app/init\";",
          "coverage": 0
        },
        "127": {
          "source": "  try {",
          "coverage": 0
        },
        "128": {
          "source": "    storage = new Lawnchair(lcConf, function() {});",
          "coverage": 0
        },
        "129": {
          "source": "    storage.get('fh_init', function(storage_res) {",
          "coverage": 0
        },
        "130": {
          "source": "      var savedHost = null;",
          "coverage": 0
        },
        "131": {
          "source": "      if (storage_res &amp;&amp; storage_res.value !== null &amp;&amp; typeof(storage_res.value) !== \"undefined\" &amp;&amp; storage_res !== \"\") {",
          "coverage": 0
        },
        "132": {
          "source": "        storage_res = typeof(storage_res) === \"string\" ? JSON.parse(storage_res) : storage_res;",
          "coverage": 0
        },
        "133": {
          "source": "        storage_res.value = typeof(storage_res.value) === \"string\" ? JSON.parse(storage_res.value) : storage_res.value;",
          "coverage": 0
        },
        "134": {
          "source": "        if (storage_res.value.init) {",
          "coverage": 0
        },
        "135": {
          "source": "          app_props.init = storage_res.value.init;",
          "coverage": 0
        },
        "136": {
          "source": "        } else {",
          "coverage": ""
        },
        "137": {
          "source": "          //keep it backward compatible.",
          "coverage": ""
        },
        "138": {
          "source": "          app_props.init = typeof(storage_res.value) === \"string\" ? JSON.parse(storage_res.value) : storage_res.value;",
          "coverage": 0
        },
        "139": {
          "source": "        }",
          "coverage": ""
        },
        "140": {
          "source": "        if (storage_res.value.hosts) {",
          "coverage": 0
        },
        "141": {
          "source": "          savedHost = storage_res.value;",
          "coverage": 0
        },
        "142": {
          "source": "        }",
          "coverage": ""
        },
        "143": {
          "source": "      }",
          "coverage": ""
        },
        "144": {
          "source": "",
          "coverage": ""
        },
        "145": {
          "source": "      doInit(path, app_props, savedHost, storage);",
          "coverage": 0
        },
        "146": {
          "source": "    });",
          "coverage": ""
        },
        "147": {
          "source": "  } catch (e) {",
          "coverage": ""
        },
        "148": {
          "source": "    //for whatever reason (e.g. localStorage is disabled) Lawnchair is failed to init, just do the init",
          "coverage": ""
        },
        "149": {
          "source": "    doInit(path, app_props, null, null);",
          "coverage": 0
        },
        "150": {
          "source": "  }",
          "coverage": ""
        },
        "151": {
          "source": "};",
          "coverage": ""
        },
        "152": {
          "source": "",
          "coverage": ""
        },
        "153": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "154": {
          "source": "  \"init\": init,",
          "coverage": ""
        },
        "155": {
          "source": "  \"loadCloudProps\": loadCloudProps",
          "coverage": ""
        },
        "156": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/lawnchair-ext.js",
      "coverage": 5.333333333333334,
      "hits": 4,
      "misses": 71,
      "sloc": 75,
      "source": {
        "1": {
          "source": "var Lawnchair = require('../../libs/generated/lawnchair');",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var fileStorageAdapter = function (app_props, hashFunc) {",
          "coverage": 2
        },
        "4": {
          "source": "  // private methods",
          "coverage": ""
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "  function doLog(mess){",
          "coverage": 0
        },
        "7": {
          "source": "    if(console){",
          "coverage": 0
        },
        "8": {
          "source": "      console.log(mess);",
          "coverage": 0
        },
        "9": {
          "source": "    }",
          "coverage": ""
        },
        "10": {
          "source": "  }",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "  var fail = function (e, i) {",
          "coverage": 0
        },
        "13": {
          "source": "    if(console) console.log('error in file system adapter !', e, i);",
          "coverage": 0
        },
        "14": {
          "source": "    else throw e;",
          "coverage": 0
        },
        "15": {
          "source": "  };",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "  function filenameForKey(key, cb) {",
          "coverage": 0
        },
        "19": {
          "source": "    key = app_props.appid + key;",
          "coverage": 0
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "    hashFunc({",
          "coverage": 0
        },
        "22": {
          "source": "      algorithm: \"MD5\",",
          "coverage": ""
        },
        "23": {
          "source": "      text: key",
          "coverage": ""
        },
        "24": {
          "source": "    }, function(result) {",
          "coverage": ""
        },
        "25": {
          "source": "      var filename = result.hashvalue + '.txt';",
          "coverage": 0
        },
        "26": {
          "source": "      if (typeof navigator.externalstorage !== \"undefined\") {",
          "coverage": 0
        },
        "27": {
          "source": "        navigator.externalstorage.enable(function handleSuccess(res){",
          "coverage": 0
        },
        "28": {
          "source": "          var path = filename;",
          "coverage": 0
        },
        "29": {
          "source": "          if(res.path ) {",
          "coverage": 0
        },
        "30": {
          "source": "            path = res.path;",
          "coverage": 0
        },
        "31": {
          "source": "            if(!path.match(/\\/$/)) {",
          "coverage": 0
        },
        "32": {
          "source": "              path += '/';",
          "coverage": 0
        },
        "33": {
          "source": "            }",
          "coverage": ""
        },
        "34": {
          "source": "            path += filename;",
          "coverage": 0
        },
        "35": {
          "source": "          }",
          "coverage": ""
        },
        "36": {
          "source": "          filename = path;",
          "coverage": 0
        },
        "37": {
          "source": "          return cb(filename);",
          "coverage": 0
        },
        "38": {
          "source": "        },function handleError(err){",
          "coverage": ""
        },
        "39": {
          "source": "          return cb(filename);",
          "coverage": 0
        },
        "40": {
          "source": "        })",
          "coverage": ""
        },
        "41": {
          "source": "      } else {",
          "coverage": ""
        },
        "42": {
          "source": "        doLog('filenameForKey key=' + key+ ' , Filename: ' + filename);",
          "coverage": 0
        },
        "43": {
          "source": "        return cb(filename);",
          "coverage": 0
        },
        "44": {
          "source": "      }",
          "coverage": ""
        },
        "45": {
          "source": "    });",
          "coverage": ""
        },
        "46": {
          "source": "  }",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "  return {",
          "coverage": 0
        },
        "49": {
          "source": "",
          "coverage": ""
        },
        "50": {
          "source": "    valid: function () { return !!(window.requestFileSystem) },",
          "coverage": 0
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "    init : function (options, callback){",
          "coverage": ""
        },
        "53": {
          "source": "      //calls the parent function fn and applies this scope",
          "coverage": ""
        },
        "54": {
          "source": "      if(options &amp;&amp; 'function' === typeof options.fail ) fail = options.fail;",
          "coverage": 0
        },
        "55": {
          "source": "      if (callback) this.fn(this.name, callback).call(this, this);",
          "coverage": 0
        },
        "56": {
          "source": "    },",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "    keys: function (callback){",
          "coverage": ""
        },
        "59": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "60": {
          "source": "    },",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "    save : function (obj, callback){",
          "coverage": ""
        },
        "63": {
          "source": "      var key = obj.key;",
          "coverage": 0
        },
        "64": {
          "source": "      var value = obj.val||obj.value;",
          "coverage": 0
        },
        "65": {
          "source": "      filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "66": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "          fileSystem.root.getFile(hash, {",
          "coverage": 0
        },
        "69": {
          "source": "            create: true",
          "coverage": ""
        },
        "70": {
          "source": "          }, function gotFileEntry(fileEntry) {",
          "coverage": ""
        },
        "71": {
          "source": "            fileEntry.createWriter(function gotFileWriter(writer) {",
          "coverage": 0
        },
        "72": {
          "source": "              writer.onwrite = function() {",
          "coverage": 0
        },
        "73": {
          "source": "                return callback({",
          "coverage": 0
        },
        "74": {
          "source": "                  key: key,",
          "coverage": ""
        },
        "75": {
          "source": "                  val: value",
          "coverage": ""
        },
        "76": {
          "source": "                });",
          "coverage": ""
        },
        "77": {
          "source": "              };",
          "coverage": ""
        },
        "78": {
          "source": "              writer.write(value);",
          "coverage": 0
        },
        "79": {
          "source": "            }, function() {",
          "coverage": ""
        },
        "80": {
          "source": "              fail('[save] Failed to create file writer');",
          "coverage": 0
        },
        "81": {
          "source": "            });",
          "coverage": ""
        },
        "82": {
          "source": "          }, function() {",
          "coverage": ""
        },
        "83": {
          "source": "            fail('[save] Failed to getFile');",
          "coverage": 0
        },
        "84": {
          "source": "          });",
          "coverage": ""
        },
        "85": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "86": {
          "source": "          fail('[save] Failed to requestFileSystem');",
          "coverage": 0
        },
        "87": {
          "source": "        });",
          "coverage": ""
        },
        "88": {
          "source": "      });",
          "coverage": ""
        },
        "89": {
          "source": "    },",
          "coverage": ""
        },
        "90": {
          "source": "",
          "coverage": ""
        },
        "91": {
          "source": "    batch : function (records, callback){",
          "coverage": ""
        },
        "92": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "93": {
          "source": "    },",
          "coverage": ""
        },
        "94": {
          "source": "",
          "coverage": ""
        },
        "95": {
          "source": "    get : function (key, callback){",
          "coverage": ""
        },
        "96": {
          "source": "      filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "97": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "98": {
          "source": "          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {",
          "coverage": 0
        },
        "99": {
          "source": "            fileEntry.file(function gotFile(file) {",
          "coverage": 0
        },
        "100": {
          "source": "              var reader = new FileReader();",
          "coverage": 0
        },
        "101": {
          "source": "              reader.onloadend = function (evt) {",
          "coverage": 0
        },
        "102": {
          "source": "                var text = evt.target.result;",
          "coverage": 0
        },
        "103": {
          "source": "                // Check for URLencoded",
          "coverage": ""
        },
        "104": {
          "source": "                // PG 2.2 bug in readAsText()",
          "coverage": ""
        },
        "105": {
          "source": "                try {",
          "coverage": 0
        },
        "106": {
          "source": "                  text = decodeURIComponent(text);",
          "coverage": 0
        },
        "107": {
          "source": "                } catch (e) {",
          "coverage": ""
        },
        "108": {
          "source": "                  // Swallow exception if not URLencoded",
          "coverage": ""
        },
        "109": {
          "source": "                  // Just use the result",
          "coverage": ""
        },
        "110": {
          "source": "                }",
          "coverage": ""
        },
        "111": {
          "source": "                return callback({",
          "coverage": 0
        },
        "112": {
          "source": "                  key: key,",
          "coverage": ""
        },
        "113": {
          "source": "                  val: text",
          "coverage": ""
        },
        "114": {
          "source": "                });",
          "coverage": ""
        },
        "115": {
          "source": "              };",
          "coverage": ""
        },
        "116": {
          "source": "              reader.readAsText(file);",
          "coverage": 0
        },
        "117": {
          "source": "            }, function() {",
          "coverage": ""
        },
        "118": {
          "source": "              fail('[load] Failed to getFile');",
          "coverage": 0
        },
        "119": {
          "source": "            });",
          "coverage": ""
        },
        "120": {
          "source": "          }, function() {",
          "coverage": ""
        },
        "121": {
          "source": "            // Success callback on key load failure",
          "coverage": ""
        },
        "122": {
          "source": "            callback({",
          "coverage": 0
        },
        "123": {
          "source": "              key: key,",
          "coverage": ""
        },
        "124": {
          "source": "              val: null",
          "coverage": ""
        },
        "125": {
          "source": "            });",
          "coverage": ""
        },
        "126": {
          "source": "          });",
          "coverage": ""
        },
        "127": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "128": {
          "source": "          fail('[load] Failed to get fileSystem');",
          "coverage": 0
        },
        "129": {
          "source": "        });",
          "coverage": ""
        },
        "130": {
          "source": "      });",
          "coverage": ""
        },
        "131": {
          "source": "    },",
          "coverage": ""
        },
        "132": {
          "source": "",
          "coverage": ""
        },
        "133": {
          "source": "    exists : function (key, callback){",
          "coverage": ""
        },
        "134": {
          "source": "      filenameForKey(key,function (hash){",
          "coverage": 0
        },
        "135": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "136": {
          "source": "          fileSystem.root.getFile(hash, {},",
          "coverage": 0
        },
        "137": {
          "source": "            function gotFileEntry(fileEntry) {",
          "coverage": ""
        },
        "138": {
          "source": "              return callback(true);",
          "coverage": 0
        },
        "139": {
          "source": "            }, function (err){",
          "coverage": ""
        },
        "140": {
          "source": "              return callback(false);",
          "coverage": 0
        },
        "141": {
          "source": "            });",
          "coverage": ""
        },
        "142": {
          "source": "        });",
          "coverage": ""
        },
        "143": {
          "source": "      });",
          "coverage": ""
        },
        "144": {
          "source": "    },",
          "coverage": ""
        },
        "145": {
          "source": "",
          "coverage": ""
        },
        "146": {
          "source": "    all : function (callback){",
          "coverage": ""
        },
        "147": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "148": {
          "source": "    },",
          "coverage": ""
        },
        "149": {
          "source": "",
          "coverage": ""
        },
        "150": {
          "source": "    remove : function (key, callback){",
          "coverage": ""
        },
        "151": {
          "source": "      filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "152": {
          "source": "",
          "coverage": ""
        },
        "153": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "154": {
          "source": "          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {",
          "coverage": 0
        },
        "155": {
          "source": "",
          "coverage": ""
        },
        "156": {
          "source": "            fileEntry.remove(function() {",
          "coverage": 0
        },
        "157": {
          "source": "              return callback({",
          "coverage": 0
        },
        "158": {
          "source": "                key: key,",
          "coverage": ""
        },
        "159": {
          "source": "                val: null",
          "coverage": ""
        },
        "160": {
          "source": "              });",
          "coverage": ""
        },
        "161": {
          "source": "            }, function() {",
          "coverage": ""
        },
        "162": {
          "source": "              fail('[remove] Failed to remove file');",
          "coverage": 0
        },
        "163": {
          "source": "            });",
          "coverage": ""
        },
        "164": {
          "source": "          }, function() {",
          "coverage": ""
        },
        "165": {
          "source": "            fail('[remove] Failed to getFile');",
          "coverage": 0
        },
        "166": {
          "source": "          });",
          "coverage": ""
        },
        "167": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "168": {
          "source": "          fail('[remove] Failed to get fileSystem');",
          "coverage": 0
        },
        "169": {
          "source": "        });",
          "coverage": ""
        },
        "170": {
          "source": "      });",
          "coverage": ""
        },
        "171": {
          "source": "    },",
          "coverage": ""
        },
        "172": {
          "source": "",
          "coverage": ""
        },
        "173": {
          "source": "    nuke : function (callback){",
          "coverage": ""
        },
        "174": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "175": {
          "source": "    }",
          "coverage": ""
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "",
          "coverage": ""
        },
        "178": {
          "source": "  };",
          "coverage": ""
        },
        "179": {
          "source": "}",
          "coverage": ""
        },
        "180": {
          "source": "",
          "coverage": ""
        },
        "181": {
          "source": "var addAdapter = function(app_props, hashFunc){",
          "coverage": 2
        },
        "182": {
          "source": "  Lawnchair.adapter('localFileStorage', fileStorageAdapter(app_props, hashFunc));",
          "coverage": 0
        },
        "183": {
          "source": "}",
          "coverage": ""
        },
        "184": {
          "source": "",
          "coverage": ""
        },
        "185": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "186": {
          "source": "  addAdapter: addAdapter",
          "coverage": ""
        },
        "187": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/loadScript.js",
      "coverage": 6.25,
      "hits": 1,
      "misses": 15,
      "sloc": 16,
      "source": {
        "1": {
          "source": "module.exports = function (url, callback) {",
          "coverage": 2
        },
        "2": {
          "source": "  var script;",
          "coverage": 0
        },
        "3": {
          "source": "  var head = document.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;",
          "coverage": 0
        },
        "4": {
          "source": "  script = document.createElement(\"script\");",
          "coverage": 0
        },
        "5": {
          "source": "  script.async = \"async\";",
          "coverage": 0
        },
        "6": {
          "source": "  script.src = url;",
          "coverage": 0
        },
        "7": {
          "source": "  script.type = \"text/javascript\";",
          "coverage": 0
        },
        "8": {
          "source": "  script.onload = script.onreadystatechange = function () {",
          "coverage": 0
        },
        "9": {
          "source": "    if (!script.readyState || /loaded|complete/.test(script.readyState)) {",
          "coverage": 0
        },
        "10": {
          "source": "      script.onload = script.onreadystatechange = null;",
          "coverage": 0
        },
        "11": {
          "source": "      if (head &amp;&amp; script.parentNode) {",
          "coverage": 0
        },
        "12": {
          "source": "        head.removeChild(script);",
          "coverage": 0
        },
        "13": {
          "source": "      }",
          "coverage": ""
        },
        "14": {
          "source": "      script = undefined;",
          "coverage": 0
        },
        "15": {
          "source": "      if (callback &amp;&amp; typeof callback === \"function\") {",
          "coverage": 0
        },
        "16": {
          "source": "        callback();",
          "coverage": 0
        },
        "17": {
          "source": "      }",
          "coverage": ""
        },
        "18": {
          "source": "    }",
          "coverage": ""
        },
        "19": {
          "source": "  };",
          "coverage": ""
        },
        "20": {
          "source": "  head.insertBefore(script, head.firstChild);",
          "coverage": 0
        },
        "21": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/logger.js",
      "coverage": 100,
      "hits": 4,
      "misses": 0,
      "sloc": 4,
      "source": {
        "1": {
          "source": "var console = require('console');",
          "coverage": 2
        },
        "2": {
          "source": "var log = require('loglevel');",
          "coverage": 2
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "log.setLevel('info');",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "/**",
          "coverage": ""
        },
        "7": {
          "source": " * APIs:",
          "coverage": ""
        },
        "8": {
          "source": " * see https://github.com/pimterry/loglevel.",
          "coverage": ""
        },
        "9": {
          "source": " * In short, you can use:",
          "coverage": ""
        },
        "10": {
          "source": " * log.setLevel(loglevel) - default to info",
          "coverage": ""
        },
        "11": {
          "source": " * log.enableAll() - enable all log messages",
          "coverage": ""
        },
        "12": {
          "source": " * log.disableAll() - disable all log messages",
          "coverage": ""
        },
        "13": {
          "source": " *",
          "coverage": ""
        },
        "14": {
          "source": " * log.trace(msg)",
          "coverage": ""
        },
        "15": {
          "source": " * log.debug(msg)",
          "coverage": ""
        },
        "16": {
          "source": " * log.info(msg)",
          "coverage": ""
        },
        "17": {
          "source": " * log.warn(msg)",
          "coverage": ""
        },
        "18": {
          "source": " * log.error(msg)",
          "coverage": ""
        },
        "19": {
          "source": " *",
          "coverage": ""
        },
        "20": {
          "source": " * Available levels: { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3, \"ERROR\": 4, \"SILENT\": 5}",
          "coverage": ""
        },
        "21": {
          "source": " * Use either string or integer value",
          "coverage": ""
        },
        "22": {
          "source": " */",
          "coverage": ""
        },
        "23": {
          "source": "module.exports = log;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/platformsMap.js",
      "coverage": 100,
      "hits": 1,
      "misses": 0,
      "sloc": 1,
      "source": {
        "1": {
          "source": "module.exports = [",
          "coverage": 2
        },
        "2": {
          "source": "  {",
          "coverage": ""
        },
        "3": {
          "source": "    \"destination\" :\"ipad\",",
          "coverage": ""
        },
        "4": {
          "source": "    \"test\": [\"iPad\"]",
          "coverage": ""
        },
        "5": {
          "source": "  },",
          "coverage": ""
        },
        "6": {
          "source": "  {",
          "coverage": ""
        },
        "7": {
          "source": "    \"destination\" :\"iphone\",",
          "coverage": ""
        },
        "8": {
          "source": "    \"test\": [\"iPhone\"]",
          "coverage": ""
        },
        "9": {
          "source": "  },",
          "coverage": ""
        },
        "10": {
          "source": "  {",
          "coverage": ""
        },
        "11": {
          "source": "    \"destination\" :\"android\",",
          "coverage": ""
        },
        "12": {
          "source": "    \"test\": [\"Android\"]",
          "coverage": ""
        },
        "13": {
          "source": "  },",
          "coverage": ""
        },
        "14": {
          "source": "  {",
          "coverage": ""
        },
        "15": {
          "source": "    \"destination\" :\"blackberry\",",
          "coverage": ""
        },
        "16": {
          "source": "    \"test\": [\"BlackBerry\", \"BB10\", \"RIM Tablet OS\"]//Blackberry 10 does not contain \"Blackberry\"",
          "coverage": ""
        },
        "17": {
          "source": "  },",
          "coverage": ""
        },
        "18": {
          "source": "  {",
          "coverage": ""
        },
        "19": {
          "source": "    \"destination\" :\"windowsphone\",",
          "coverage": ""
        },
        "20": {
          "source": "    \"test\": [\"Windows Phone 8\"]",
          "coverage": ""
        },
        "21": {
          "source": "  },",
          "coverage": ""
        },
        "22": {
          "source": "  {",
          "coverage": ""
        },
        "23": {
          "source": "    \"destination\" :\"windowsphone7\",",
          "coverage": ""
        },
        "24": {
          "source": "    \"test\": [\"Windows Phone OS 7\"]",
          "coverage": ""
        },
        "25": {
          "source": "  }",
          "coverage": ""
        },
        "26": {
          "source": "];",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/queryMap.js",
      "coverage": 100,
      "hits": 12,
      "misses": 0,
      "sloc": 12,
      "source": {
        "1": {
          "source": "module.exports = function(url) {",
          "coverage": 2
        },
        "2": {
          "source": "  var qmap = {};",
          "coverage": 11
        },
        "3": {
          "source": "  var i = url.split(\"?\");",
          "coverage": 11
        },
        "4": {
          "source": "  if (i.length === 2) {",
          "coverage": 11
        },
        "5": {
          "source": "    var queryString = i[1];",
          "coverage": 11
        },
        "6": {
          "source": "    var pairs = queryString.split(\"&amp;\");",
          "coverage": 11
        },
        "7": {
          "source": "    qmap = {};",
          "coverage": 11
        },
        "8": {
          "source": "    for (var p = 0; p &lt; pairs.length; p++) {",
          "coverage": 11
        },
        "9": {
          "source": "      var q = pairs[p];",
          "coverage": 22
        },
        "10": {
          "source": "      var qp = q.split(\"=\");",
          "coverage": 22
        },
        "11": {
          "source": "      qmap[qp[0]] = qp[1];",
          "coverage": 22
        },
        "12": {
          "source": "    }",
          "coverage": ""
        },
        "13": {
          "source": "  }",
          "coverage": ""
        },
        "14": {
          "source": "  return qmap;",
          "coverage": 11
        },
        "15": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/sdkversion.js",
      "coverage": 75,
      "hits": 6,
      "misses": 2,
      "sloc": 8,
      "source": {
        "1": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "module.exports = function() {",
          "coverage": 2
        },
        "4": {
          "source": "  var type = \"FH_JS_SDK\";",
          "coverage": 2
        },
        "5": {
          "source": "  if (typeof window.fh_destination_code !== 'undefined') {",
          "coverage": 2
        },
        "6": {
          "source": "    type = \"FH_HYBRID_SDK\";",
          "coverage": 0
        },
        "7": {
          "source": "  } else if(window.PhoneGap || window.cordova) {",
          "coverage": 2
        },
        "8": {
          "source": "    type = \"FH_PHONEGAP_SDK\";",
          "coverage": 0
        },
        "9": {
          "source": "  }",
          "coverage": ""
        },
        "10": {
          "source": "  return type + \"/\" + constants.sdk_version;",
          "coverage": 2
        },
        "11": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/security/aes-keygen.js",
      "coverage": 80,
      "hits": 20,
      "misses": 5,
      "sloc": 25,
      "source": {
        "1": {
          "source": "var rsa = require(\"../../../libs/rsa\");",
          "coverage": 1
        },
        "2": {
          "source": "var SecureRandom = rsa.SecureRandom;",
          "coverage": 1
        },
        "3": {
          "source": "var byte2Hex = rsa.byte2Hex;",
          "coverage": 1
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var generateRandomKey = function(keysize){",
          "coverage": 1
        },
        "6": {
          "source": "  var r = new SecureRandom();",
          "coverage": 2
        },
        "7": {
          "source": "  var key = new Array(keysize);",
          "coverage": 2
        },
        "8": {
          "source": "  r.nextBytes(key);",
          "coverage": 2
        },
        "9": {
          "source": "  var result = \"\";",
          "coverage": 2
        },
        "10": {
          "source": "  for(var i=0;i&lt;key.length;i++){",
          "coverage": 2
        },
        "11": {
          "source": "    result += byte2Hex(key[i]);",
          "coverage": 32
        },
        "12": {
          "source": "  }",
          "coverage": ""
        },
        "13": {
          "source": "  return result;",
          "coverage": 2
        },
        "14": {
          "source": "};",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "var aes_keygen = function(p, s, f){",
          "coverage": 1
        },
        "17": {
          "source": "  if (!p.params.keysize) {",
          "coverage": 1
        },
        "18": {
          "source": "    f('no_params_keysize', {}, p);",
          "coverage": 0
        },
        "19": {
          "source": "    return;",
          "coverage": 0
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "  if (p.params.algorithm.toLowerCase() !== \"aes\") {",
          "coverage": 1
        },
        "22": {
          "source": "    f('keygen_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "23": {
          "source": "    return;",
          "coverage": 0
        },
        "24": {
          "source": "  }",
          "coverage": ""
        },
        "25": {
          "source": "  var keysize = parseInt(p.params.keysize, 10);",
          "coverage": 1
        },
        "26": {
          "source": "  //keysize is in bit, need to convert to bytes to generate random key",
          "coverage": ""
        },
        "27": {
          "source": "  //but the legacy code has a bug, it doesn't do the convert, so if the keysize is less than 100, don't convert",
          "coverage": ""
        },
        "28": {
          "source": "  if(keysize &gt; 100){",
          "coverage": 1
        },
        "29": {
          "source": "    keysize = keysize/8;",
          "coverage": 1
        },
        "30": {
          "source": "  }",
          "coverage": ""
        },
        "31": {
          "source": "  if(typeof SecureRandom === \"undefined\"){",
          "coverage": 1
        },
        "32": {
          "source": "    return f(\"security library is not loaded.\");",
          "coverage": 0
        },
        "33": {
          "source": "  }",
          "coverage": ""
        },
        "34": {
          "source": "  return s({",
          "coverage": 1
        },
        "35": {
          "source": "    'algorithm': 'AES',",
          "coverage": ""
        },
        "36": {
          "source": "    'secretkey': generateRandomKey(keysize),",
          "coverage": ""
        },
        "37": {
          "source": "    'iv': generateRandomKey(keysize)",
          "coverage": ""
        },
        "38": {
          "source": "  });",
          "coverage": ""
        },
        "39": {
          "source": "}",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "module.exports = aes_keygen;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/security/aes-node.js",
      "coverage": 69.23076923076923,
      "hits": 18,
      "misses": 8,
      "sloc": 26,
      "source": {
        "1": {
          "source": "var CryptoJS = require(\"../../../libs/generated/crypto\");",
          "coverage": 1
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var encrypt = function(p, s, f){",
          "coverage": 1
        },
        "4": {
          "source": "  var fields = ['key', 'plaintext', 'iv'];",
          "coverage": 1
        },
        "5": {
          "source": "  if(p.params.algorithm.toLowerCase() !== \"aes\"){",
          "coverage": 1
        },
        "6": {
          "source": "    return f('encrypt_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "7": {
          "source": "  }",
          "coverage": ""
        },
        "8": {
          "source": "  for (var i = 0; i &lt; fields; i++) {",
          "coverage": 1
        },
        "9": {
          "source": "    var field = fields[i];",
          "coverage": 0
        },
        "10": {
          "source": "    if (!p.params[field]) {",
          "coverage": 0
        },
        "11": {
          "source": "      return f('no_params_' + field, {}, p);",
          "coverage": 0
        },
        "12": {
          "source": "    }",
          "coverage": ""
        },
        "13": {
          "source": "  }",
          "coverage": ""
        },
        "14": {
          "source": "  var encrypted = CryptoJS.AES.encrypt(p.params.plaintext, CryptoJS.enc.Hex.parse(p.params.key), {iv: CryptoJS.enc.Hex.parse(p.params.iv)});",
          "coverage": 1
        },
        "15": {
          "source": "  cipher_text = CryptoJS.enc.Hex.stringify(encrypted.ciphertext);",
          "coverage": 1
        },
        "16": {
          "source": "  return s({ciphertext: cipher_text});",
          "coverage": 1
        },
        "17": {
          "source": "}",
          "coverage": ""
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "var decrypt = function(p, s, f){",
          "coverage": 1
        },
        "20": {
          "source": "  var fields = ['key', 'ciphertext', 'iv'];",
          "coverage": 1
        },
        "21": {
          "source": "  if(p.params.algorithm.toLowerCase() !== \"aes\"){",
          "coverage": 1
        },
        "22": {
          "source": "    return f('decrypt_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "23": {
          "source": "  }",
          "coverage": ""
        },
        "24": {
          "source": "  for (var i = 0; i &lt; fields; i++) {",
          "coverage": 1
        },
        "25": {
          "source": "    var field = fields[i];",
          "coverage": 0
        },
        "26": {
          "source": "    if (!p.params[field]) {",
          "coverage": 0
        },
        "27": {
          "source": "      return f('no_params_' + field, {}, p);",
          "coverage": 0
        },
        "28": {
          "source": "    }",
          "coverage": ""
        },
        "29": {
          "source": "  }",
          "coverage": ""
        },
        "30": {
          "source": "  var data = CryptoJS.enc.Hex.parse(p.params.ciphertext);",
          "coverage": 1
        },
        "31": {
          "source": "  var encodeData = CryptoJS.enc.Base64.stringify(data);",
          "coverage": 1
        },
        "32": {
          "source": "  var decrypted = CryptoJS.AES.decrypt(encodeData, CryptoJS.enc.Hex.parse(p.params.key), {iv: CryptoJS.enc.Hex.parse(p.params.iv)});",
          "coverage": 1
        },
        "33": {
          "source": "  plain_text = decrypted.toString(CryptoJS.enc.Utf8);",
          "coverage": 1
        },
        "34": {
          "source": "  return s({plaintext:plain_text});",
          "coverage": 1
        },
        "35": {
          "source": "}",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "38": {
          "source": "  encrypt: encrypt,",
          "coverage": ""
        },
        "39": {
          "source": "  decrypt: decrypt",
          "coverage": ""
        },
        "40": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/security/hash.js",
      "coverage": 82.35294117647058,
      "hits": 14,
      "misses": 3,
      "sloc": 17,
      "source": {
        "1": {
          "source": "var CryptoJS = require(\"../../../libs/generated/crypto\");",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "var hash = function(p, s, f){",
          "coverage": 2
        },
        "5": {
          "source": "  if (!p.params.text) {",
          "coverage": 4
        },
        "6": {
          "source": "    f('hash_no_text', {}, p);",
          "coverage": 0
        },
        "7": {
          "source": "    return;",
          "coverage": 0
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "  var hashValue;",
          "coverage": 4
        },
        "10": {
          "source": "  if (p.params.algorithm.toLowerCase() === \"md5\") {",
          "coverage": 4
        },
        "11": {
          "source": "    hashValue = CryptoJS.MD5(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "12": {
          "source": "  } else if(p.params.algorithm.toLowerCase() === \"sha1\"){",
          "coverage": 3
        },
        "13": {
          "source": "    hashValue = CryptoJS.SHA1(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "14": {
          "source": "  } else if(p.params.algorithm.toLowerCase() === \"sha256\"){",
          "coverage": 2
        },
        "15": {
          "source": "    hashValue = CryptoJS.SHA256(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "16": {
          "source": "  } else if(p.params.algorithm.toLowerCase() === \"sha512\"){",
          "coverage": 1
        },
        "17": {
          "source": "    hashValue = CryptoJS.SHA512(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "18": {
          "source": "  } else {",
          "coverage": ""
        },
        "19": {
          "source": "    return f(\"hash_unsupported_algorithm: \" + p.params.algorithm);",
          "coverage": 0
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "  return s({\"hashvalue\": hashValue});",
          "coverage": 4
        },
        "22": {
          "source": "}",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "module.exports = hash;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/security/rsa-node.js",
      "coverage": 75,
      "hits": 12,
      "misses": 4,
      "sloc": 16,
      "source": {
        "1": {
          "source": "var rsa = require(\"../../../libs/rsa\");",
          "coverage": 1
        },
        "2": {
          "source": "var RSAKey = rsa.RSAKey;",
          "coverage": 1
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "var encrypt = function(p, s, f){",
          "coverage": 1
        },
        "5": {
          "source": "  var fields = ['modulu', 'plaintext'];",
          "coverage": 1
        },
        "6": {
          "source": "  if(p.params.algorithm.toLowerCase() !== \"rsa\"){",
          "coverage": 1
        },
        "7": {
          "source": "    return f('encrypt_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "  for (var i = 0; i &lt; fields; i++) {",
          "coverage": 1
        },
        "10": {
          "source": "    var field = fields[i];",
          "coverage": 0
        },
        "11": {
          "source": "    if (!p.params[field]) {",
          "coverage": 0
        },
        "12": {
          "source": "      return f('no_params_' + field, {}, p);",
          "coverage": 0
        },
        "13": {
          "source": "    }",
          "coverage": ""
        },
        "14": {
          "source": "  }",
          "coverage": ""
        },
        "15": {
          "source": "  var key = new RSAKey();",
          "coverage": 1
        },
        "16": {
          "source": "  key.setPublic(p.params.modulu, \"10001\");",
          "coverage": 1
        },
        "17": {
          "source": "  var ori_text = p.params.plaintext;",
          "coverage": 1
        },
        "18": {
          "source": "  cipher_text = key.encrypt(ori_text);",
          "coverage": 1
        },
        "19": {
          "source": "  return s({ciphertext:cipher_text});",
          "coverage": 1
        },
        "20": {
          "source": "}",
          "coverage": ""
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "23": {
          "source": "  encrypt: encrypt",
          "coverage": ""
        },
        "24": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/sync-cli.js",
      "coverage": 94.55128205128204,
      "hits": 590,
      "misses": 34,
      "sloc": 624,
      "source": {
        "1": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "2": {
          "source": "var actAPI = require(\"./api_act\");",
          "coverage": 2
        },
        "3": {
          "source": "var cloudAPI = require(\"./api_cloud\");",
          "coverage": 2
        },
        "4": {
          "source": "var CryptoJS = require(\"../../libs/generated/crypto\");",
          "coverage": 2
        },
        "5": {
          "source": "var Lawnchair = require('../../libs/generated/lawnchair');",
          "coverage": 2
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "var self = {",
          "coverage": 2
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "  // CONFIG",
          "coverage": ""
        },
        "10": {
          "source": "  defaults: {",
          "coverage": ""
        },
        "11": {
          "source": "    \"sync_frequency\": 10,",
          "coverage": ""
        },
        "12": {
          "source": "    // How often to synchronise data with the cloud in seconds.",
          "coverage": ""
        },
        "13": {
          "source": "    \"auto_sync_local_updates\": true,",
          "coverage": ""
        },
        "14": {
          "source": "    // Should local chages be syned to the cloud immediately, or should they wait for the next sync interval",
          "coverage": ""
        },
        "15": {
          "source": "    \"notify_client_storage_failed\": true,",
          "coverage": ""
        },
        "16": {
          "source": "    // Should a notification event be triggered when loading/saving to client storage fails",
          "coverage": ""
        },
        "17": {
          "source": "    \"notify_sync_started\": true,",
          "coverage": ""
        },
        "18": {
          "source": "    // Should a notification event be triggered when a sync cycle with the server has been started",
          "coverage": ""
        },
        "19": {
          "source": "    \"notify_sync_complete\": true,",
          "coverage": ""
        },
        "20": {
          "source": "    // Should a notification event be triggered when a sync cycle with the server has been completed",
          "coverage": ""
        },
        "21": {
          "source": "    \"notify_offline_update\": true,",
          "coverage": ""
        },
        "22": {
          "source": "    // Should a notification event be triggered when an attempt was made to update a record while offline",
          "coverage": ""
        },
        "23": {
          "source": "    \"notify_collision_detected\": true,",
          "coverage": ""
        },
        "24": {
          "source": "    // Should a notification event be triggered when an update failed due to data collision",
          "coverage": ""
        },
        "25": {
          "source": "    \"notify_remote_update_failed\": true,",
          "coverage": ""
        },
        "26": {
          "source": "    // Should a notification event be triggered when an update failed for a reason other than data collision",
          "coverage": ""
        },
        "27": {
          "source": "    \"notify_local_update_applied\": true,",
          "coverage": ""
        },
        "28": {
          "source": "    // Should a notification event be triggered when an update was applied to the local data store",
          "coverage": ""
        },
        "29": {
          "source": "    \"notify_remote_update_applied\": true,",
          "coverage": ""
        },
        "30": {
          "source": "    // Should a notification event be triggered when an update was applied to the remote data store",
          "coverage": ""
        },
        "31": {
          "source": "    \"notify_delta_received\": true,",
          "coverage": ""
        },
        "32": {
          "source": "    // Should a notification event be triggered when a delta was received from the remote data store for the dataset ",
          "coverage": ""
        },
        "33": {
          "source": "    \"notify_record_delta_received\": true,",
          "coverage": ""
        },
        "34": {
          "source": "    // Should a notification event be triggered when a delta was received from the remote data store for a record",
          "coverage": ""
        },
        "35": {
          "source": "    \"notify_sync_failed\": true,",
          "coverage": ""
        },
        "36": {
          "source": "    // Should a notification event be triggered when the sync loop failed to complete",
          "coverage": ""
        },
        "37": {
          "source": "    \"do_console_log\": false,",
          "coverage": ""
        },
        "38": {
          "source": "    // Should log statements be written to console.log",
          "coverage": ""
        },
        "39": {
          "source": "    \"crashed_count_wait\" : 10,",
          "coverage": ""
        },
        "40": {
          "source": "    // How many syncs should we check for updates on crashed in flight updates before we give up searching",
          "coverage": ""
        },
        "41": {
          "source": "    \"resend_crashed_updates\" : true,",
          "coverage": ""
        },
        "42": {
          "source": "    // If we have reached the crashed_count_wait limit, should we re-try sending the crashed in flight pending record",
          "coverage": ""
        },
        "43": {
          "source": "    \"sync_active\" : true,",
          "coverage": ""
        },
        "44": {
          "source": "    // Is the background sync with the cloud currently active",
          "coverage": ""
        },
        "45": {
          "source": "    \"storage_strategy\" : \"html5-filesystem\",",
          "coverage": ""
        },
        "46": {
          "source": "    // Storage strategy to use for Lawnchair - supported strategies are 'html5-filesystem' and 'dom'",
          "coverage": ""
        },
        "47": {
          "source": "    \"file_system_quota\" : 50 * 1024 * 1204,",
          "coverage": ""
        },
        "48": {
          "source": "    // Amount of space to request from the HTML5 filesystem API when running in browser",
          "coverage": ""
        },
        "49": {
          "source": "    \"has_custom_sync\" : null,",
          "coverage": ""
        },
        "50": {
          "source": "    //If the app has custom cloud sync function, it should be set to true. If set to false, the default mbaas sync implementation will be used. When set to null or undefined, ",
          "coverage": ""
        },
        "51": {
          "source": "    //a check will be performed to determine which implementation to use",
          "coverage": ""
        },
        "52": {
          "source": "    \"icloud_backup\" : false //ios only. If set to true, the file will be backed by icloud",
          "coverage": ""
        },
        "53": {
          "source": "  },",
          "coverage": ""
        },
        "54": {
          "source": "",
          "coverage": ""
        },
        "55": {
          "source": "  notifications: {",
          "coverage": ""
        },
        "56": {
          "source": "    \"CLIENT_STORAGE_FAILED\": \"client_storage_failed\",",
          "coverage": ""
        },
        "57": {
          "source": "    // loading/saving to client storage failed",
          "coverage": ""
        },
        "58": {
          "source": "    \"SYNC_STARTED\": \"sync_started\",",
          "coverage": ""
        },
        "59": {
          "source": "    // A sync cycle with the server has been started",
          "coverage": ""
        },
        "60": {
          "source": "    \"SYNC_COMPLETE\": \"sync_complete\",",
          "coverage": ""
        },
        "61": {
          "source": "    // A sync cycle with the server has been completed",
          "coverage": ""
        },
        "62": {
          "source": "    \"OFFLINE_UPDATE\": \"offline_update\",",
          "coverage": ""
        },
        "63": {
          "source": "    // An attempt was made to update a record while offline",
          "coverage": ""
        },
        "64": {
          "source": "    \"COLLISION_DETECTED\": \"collision_detected\",",
          "coverage": ""
        },
        "65": {
          "source": "    //Update Failed due to data collision",
          "coverage": ""
        },
        "66": {
          "source": "    \"REMOTE_UPDATE_FAILED\": \"remote_update_failed\",",
          "coverage": ""
        },
        "67": {
          "source": "    // Update Failed for a reason other than data collision",
          "coverage": ""
        },
        "68": {
          "source": "    \"REMOTE_UPDATE_APPLIED\": \"remote_update_applied\",",
          "coverage": ""
        },
        "69": {
          "source": "    // An update was applied to the remote data store",
          "coverage": ""
        },
        "70": {
          "source": "    \"LOCAL_UPDATE_APPLIED\": \"local_update_applied\",",
          "coverage": ""
        },
        "71": {
          "source": "    // An update was applied to the local data store",
          "coverage": ""
        },
        "72": {
          "source": "    \"DELTA_RECEIVED\": \"delta_received\",",
          "coverage": ""
        },
        "73": {
          "source": "    // A delta was received from the remote data store for the dataset ",
          "coverage": ""
        },
        "74": {
          "source": "    \"RECORD_DELTA_RECEIVED\": \"record_delta_received\",",
          "coverage": ""
        },
        "75": {
          "source": "    // A delta was received from the remote data store for the record ",
          "coverage": ""
        },
        "76": {
          "source": "    \"SYNC_FAILED\": \"sync_failed\"",
          "coverage": ""
        },
        "77": {
          "source": "    // Sync loop failed to complete",
          "coverage": ""
        },
        "78": {
          "source": "  },",
          "coverage": ""
        },
        "79": {
          "source": "",
          "coverage": ""
        },
        "80": {
          "source": "  datasets: {},",
          "coverage": ""
        },
        "81": {
          "source": "",
          "coverage": ""
        },
        "82": {
          "source": "  // Initialise config to default values;",
          "coverage": ""
        },
        "83": {
          "source": "  config: undefined,",
          "coverage": ""
        },
        "84": {
          "source": "",
          "coverage": ""
        },
        "85": {
          "source": "  //TODO: deprecate this",
          "coverage": ""
        },
        "86": {
          "source": "  notify_callback: undefined,",
          "coverage": ""
        },
        "87": {
          "source": "",
          "coverage": ""
        },
        "88": {
          "source": "  notify_callback_map : {},",
          "coverage": ""
        },
        "89": {
          "source": "",
          "coverage": ""
        },
        "90": {
          "source": "  init_is_called: false,",
          "coverage": ""
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "  // PUBLIC FUNCTION IMPLEMENTATIONS",
          "coverage": ""
        },
        "93": {
          "source": "  init: function(options) {",
          "coverage": ""
        },
        "94": {
          "source": "    self.consoleLog('sync - init called');",
          "coverage": 2
        },
        "95": {
          "source": "",
          "coverage": ""
        },
        "96": {
          "source": "    self.config = JSON.parse(JSON.stringify(self.defaults));",
          "coverage": 2
        },
        "97": {
          "source": "    for (var i in options) {",
          "coverage": 2
        },
        "98": {
          "source": "      self.config[i] = options[i];",
          "coverage": 10
        },
        "99": {
          "source": "    }",
          "coverage": ""
        },
        "100": {
          "source": "",
          "coverage": ""
        },
        "101": {
          "source": "    //prevent multiple monitors from created if init is called multiple times",
          "coverage": ""
        },
        "102": {
          "source": "    if(!self.init_is_called){",
          "coverage": 2
        },
        "103": {
          "source": "      self.init_is_called = true;",
          "coverage": 1
        },
        "104": {
          "source": "      self.datasetMonitor();",
          "coverage": 1
        },
        "105": {
          "source": "    }",
          "coverage": ""
        },
        "106": {
          "source": "  },",
          "coverage": ""
        },
        "107": {
          "source": "",
          "coverage": ""
        },
        "108": {
          "source": "  notify: function(datasetId, callback) {",
          "coverage": ""
        },
        "109": {
          "source": "    if(arguments.length === 1 &amp;&amp; typeof datasetId === 'function'){",
          "coverage": 40
        },
        "110": {
          "source": "      self.notify_callback = datasetId;",
          "coverage": 6
        },
        "111": {
          "source": "    } else {",
          "coverage": ""
        },
        "112": {
          "source": "      self.notify_callback_map[datasetId] = callback;",
          "coverage": 34
        },
        "113": {
          "source": "    }",
          "coverage": ""
        },
        "114": {
          "source": "  },",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "  manage: function(dataset_id, options, query_params, meta_data, cb) {",
          "coverage": ""
        },
        "117": {
          "source": "    self.consoleLog('manage - START');",
          "coverage": 22
        },
        "118": {
          "source": "",
          "coverage": ""
        },
        "119": {
          "source": "    var options = options || {};",
          "coverage": 22
        },
        "120": {
          "source": "",
          "coverage": ""
        },
        "121": {
          "source": "    var doManage = function(dataset) {",
          "coverage": 22
        },
        "122": {
          "source": "      self.consoleLog('doManage dataset :: initialised = ' + dataset.initialised + \" :: \" + dataset_id + ' :: ' + JSON.stringify(options));",
          "coverage": 22
        },
        "123": {
          "source": "",
          "coverage": ""
        },
        "124": {
          "source": "      var datasetConfig = self.setOptions(options);",
          "coverage": 22
        },
        "125": {
          "source": "",
          "coverage": ""
        },
        "126": {
          "source": "      dataset.query_params = query_params || dataset.query_params || {};",
          "coverage": 22
        },
        "127": {
          "source": "      dataset.meta_data = meta_data || dataset.meta_data || {};",
          "coverage": 22
        },
        "128": {
          "source": "      dataset.config = datasetConfig;",
          "coverage": 22
        },
        "129": {
          "source": "      dataset.syncRunning = false;",
          "coverage": 22
        },
        "130": {
          "source": "      dataset.syncPending = true;",
          "coverage": 22
        },
        "131": {
          "source": "      dataset.initialised = true;",
          "coverage": 22
        },
        "132": {
          "source": "      if(typeof dataset.meta === \"undefined\"){",
          "coverage": 22
        },
        "133": {
          "source": "        dataset.meta = {};",
          "coverage": 0
        },
        "134": {
          "source": "      }",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "      self.saveDataSet(dataset_id, function() {",
          "coverage": 22
        },
        "137": {
          "source": "",
          "coverage": ""
        },
        "138": {
          "source": "        if( cb ) {",
          "coverage": 22
        },
        "139": {
          "source": "          cb();",
          "coverage": 22
        },
        "140": {
          "source": "        }",
          "coverage": ""
        },
        "141": {
          "source": "      });",
          "coverage": ""
        },
        "142": {
          "source": "    };",
          "coverage": ""
        },
        "143": {
          "source": "",
          "coverage": ""
        },
        "144": {
          "source": "    // Check if the dataset is already loaded",
          "coverage": ""
        },
        "145": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 22
        },
        "146": {
          "source": "      self.consoleLog('manage - dataset already loaded');",
          "coverage": 20
        },
        "147": {
          "source": "      doManage(dataset);",
          "coverage": 20
        },
        "148": {
          "source": "    }, function(err) {",
          "coverage": ""
        },
        "149": {
          "source": "      self.consoleLog('manage - dataset not loaded... trying to load');",
          "coverage": 2
        },
        "150": {
          "source": "",
          "coverage": ""
        },
        "151": {
          "source": "      // Not already loaded, try to load from local storage",
          "coverage": ""
        },
        "152": {
          "source": "      self.loadDataSet(dataset_id, function(dataset) {",
          "coverage": 2
        },
        "153": {
          "source": "          self.consoleLog('manage - dataset loaded from local storage');",
          "coverage": 0
        },
        "154": {
          "source": "",
          "coverage": ""
        },
        "155": {
          "source": "          // Loading from local storage worked",
          "coverage": ""
        },
        "156": {
          "source": "",
          "coverage": ""
        },
        "157": {
          "source": "          // Fire the local update event to indicate that dataset was loaded from local storage",
          "coverage": ""
        },
        "158": {
          "source": "          self.doNotify(dataset_id, null, self.notifications.LOCAL_UPDATE_APPLIED, \"load\");",
          "coverage": 0
        },
        "159": {
          "source": "",
          "coverage": ""
        },
        "160": {
          "source": "          // Put the dataet under the management of the sync service",
          "coverage": ""
        },
        "161": {
          "source": "          doManage(dataset);",
          "coverage": 0
        },
        "162": {
          "source": "        },",
          "coverage": ""
        },
        "163": {
          "source": "        function(err) {",
          "coverage": ""
        },
        "164": {
          "source": "          // No dataset in memory or local storage - create a new one and put it in memory",
          "coverage": ""
        },
        "165": {
          "source": "          self.consoleLog('manage - Creating new dataset for id ' + dataset_id);",
          "coverage": 2
        },
        "166": {
          "source": "          var dataset = {};",
          "coverage": 2
        },
        "167": {
          "source": "          dataset.data = {};",
          "coverage": 2
        },
        "168": {
          "source": "          dataset.pending = {};",
          "coverage": 2
        },
        "169": {
          "source": "          dataset.meta = {};",
          "coverage": 2
        },
        "170": {
          "source": "          self.datasets[dataset_id] = dataset;",
          "coverage": 2
        },
        "171": {
          "source": "          doManage(dataset);",
          "coverage": 2
        },
        "172": {
          "source": "        });",
          "coverage": ""
        },
        "173": {
          "source": "    });",
          "coverage": ""
        },
        "174": {
          "source": "  },",
          "coverage": ""
        },
        "175": {
          "source": "",
          "coverage": ""
        },
        "176": {
          "source": "  setOptions: function(options) {",
          "coverage": ""
        },
        "177": {
          "source": "    // Make sure config is initialised",
          "coverage": ""
        },
        "178": {
          "source": "    if( ! self.config ) {",
          "coverage": 63
        },
        "179": {
          "source": "      self.config = JSON.parse(JSON.stringify(self.defaults));",
          "coverage": 0
        },
        "180": {
          "source": "    }",
          "coverage": ""
        },
        "181": {
          "source": "",
          "coverage": ""
        },
        "182": {
          "source": "    var datasetConfig = JSON.parse(JSON.stringify(self.config));",
          "coverage": 63
        },
        "183": {
          "source": "    var optionsIn = JSON.parse(JSON.stringify(options));",
          "coverage": 63
        },
        "184": {
          "source": "    for (var k in optionsIn) {",
          "coverage": 63
        },
        "185": {
          "source": "      datasetConfig[k] = optionsIn[k];",
          "coverage": 68
        },
        "186": {
          "source": "    }",
          "coverage": ""
        },
        "187": {
          "source": "",
          "coverage": ""
        },
        "188": {
          "source": "    return datasetConfig;",
          "coverage": 63
        },
        "189": {
          "source": "  },",
          "coverage": ""
        },
        "190": {
          "source": "",
          "coverage": ""
        },
        "191": {
          "source": "  list: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "192": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 4
        },
        "193": {
          "source": "      if (dataset &amp;&amp; dataset.data) {",
          "coverage": 1
        },
        "194": {
          "source": "        // Return a copy of the dataset so updates will not automatically make it back into the dataset",
          "coverage": ""
        },
        "195": {
          "source": "        var res = JSON.parse(JSON.stringify(dataset.data));",
          "coverage": 1
        },
        "196": {
          "source": "        success(res);",
          "coverage": 1
        },
        "197": {
          "source": "      } else {",
          "coverage": ""
        },
        "198": {
          "source": "        if(failure) failure('no_data');",
          "coverage": 0
        },
        "199": {
          "source": "      }",
          "coverage": ""
        },
        "200": {
          "source": "    }, function(code, msg) {",
          "coverage": ""
        },
        "201": {
          "source": "      if(failure) failure(code, msg);",
          "coverage": 5
        },
        "202": {
          "source": "    });",
          "coverage": ""
        },
        "203": {
          "source": "  },",
          "coverage": ""
        },
        "204": {
          "source": "",
          "coverage": ""
        },
        "205": {
          "source": "  create: function(dataset_id, data, success, failure) {",
          "coverage": ""
        },
        "206": {
          "source": "    if(data == null){",
          "coverage": 11
        },
        "207": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "208": {
          "source": "        return failure(\"null_data\");",
          "coverage": 1
        },
        "209": {
          "source": "      }",
          "coverage": ""
        },
        "210": {
          "source": "    }",
          "coverage": ""
        },
        "211": {
          "source": "    self.addPendingObj(dataset_id, null, data, \"create\", success, failure);",
          "coverage": 10
        },
        "212": {
          "source": "  },",
          "coverage": ""
        },
        "213": {
          "source": "",
          "coverage": ""
        },
        "214": {
          "source": "  read: function(dataset_id, uid, success, failure) {",
          "coverage": ""
        },
        "215": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 20
        },
        "216": {
          "source": "      var rec = dataset.data[uid];",
          "coverage": 14
        },
        "217": {
          "source": "      if (!rec) {",
          "coverage": 14
        },
        "218": {
          "source": "        failure(\"unknown_uid\");",
          "coverage": 1
        },
        "219": {
          "source": "      } else {",
          "coverage": ""
        },
        "220": {
          "source": "        // Return a copy of the record so updates will not automatically make it back into the dataset",
          "coverage": ""
        },
        "221": {
          "source": "        var res = JSON.parse(JSON.stringify(rec));",
          "coverage": 13
        },
        "222": {
          "source": "        success(res);",
          "coverage": 13
        },
        "223": {
          "source": "      }",
          "coverage": ""
        },
        "224": {
          "source": "    }, function(code, msg) {",
          "coverage": ""
        },
        "225": {
          "source": "      if(failure) failure(code, msg);",
          "coverage": 11
        },
        "226": {
          "source": "    });",
          "coverage": ""
        },
        "227": {
          "source": "  },",
          "coverage": ""
        },
        "228": {
          "source": "",
          "coverage": ""
        },
        "229": {
          "source": "  update: function(dataset_id, uid, data, success, failure) {",
          "coverage": ""
        },
        "230": {
          "source": "    self.addPendingObj(dataset_id, uid, data, \"update\", success, failure);",
          "coverage": 9
        },
        "231": {
          "source": "  },",
          "coverage": ""
        },
        "232": {
          "source": "",
          "coverage": ""
        },
        "233": {
          "source": "  'delete': function(dataset_id, uid, success, failure) {",
          "coverage": ""
        },
        "234": {
          "source": "    self.addPendingObj(dataset_id, uid, null, \"delete\", success, failure);",
          "coverage": 7
        },
        "235": {
          "source": "  },",
          "coverage": ""
        },
        "236": {
          "source": "",
          "coverage": ""
        },
        "237": {
          "source": "  getPending: function(dataset_id, cb) {",
          "coverage": ""
        },
        "238": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 1
        },
        "239": {
          "source": "      var res;",
          "coverage": 1
        },
        "240": {
          "source": "      if( dataset ) {",
          "coverage": 1
        },
        "241": {
          "source": "        res = dataset.pending;",
          "coverage": 1
        },
        "242": {
          "source": "      }",
          "coverage": ""
        },
        "243": {
          "source": "      cb(res);",
          "coverage": 1
        },
        "244": {
          "source": "    }, function(err, datatset_id) {",
          "coverage": ""
        },
        "245": {
          "source": "        self.consoleLog(err);",
          "coverage": 0
        },
        "246": {
          "source": "    });",
          "coverage": ""
        },
        "247": {
          "source": "  },",
          "coverage": ""
        },
        "248": {
          "source": "",
          "coverage": ""
        },
        "249": {
          "source": "  clearPending: function(dataset_id, cb) {",
          "coverage": ""
        },
        "250": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 19
        },
        "251": {
          "source": "      dataset.pending = {};",
          "coverage": 19
        },
        "252": {
          "source": "      self.saveDataSet(dataset_id, cb);",
          "coverage": 19
        },
        "253": {
          "source": "    });",
          "coverage": ""
        },
        "254": {
          "source": "  },",
          "coverage": ""
        },
        "255": {
          "source": "",
          "coverage": ""
        },
        "256": {
          "source": "  listCollisions : function(dataset_id, success, failure){",
          "coverage": ""
        },
        "257": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 2
        },
        "258": {
          "source": "      self.doCloudCall({",
          "coverage": 2
        },
        "259": {
          "source": "        \"dataset_id\": dataset_id,",
          "coverage": ""
        },
        "260": {
          "source": "        \"req\": {",
          "coverage": ""
        },
        "261": {
          "source": "          \"fn\": \"listCollisions\",",
          "coverage": ""
        },
        "262": {
          "source": "          \"meta_data\" : dataset.meta_data",
          "coverage": ""
        },
        "263": {
          "source": "        }",
          "coverage": ""
        },
        "264": {
          "source": "      }, success, failure);",
          "coverage": ""
        },
        "265": {
          "source": "    }, failure);",
          "coverage": ""
        },
        "266": {
          "source": "  },",
          "coverage": ""
        },
        "267": {
          "source": "",
          "coverage": ""
        },
        "268": {
          "source": "  removeCollision: function(dataset_id, colissionHash, success, failure) {",
          "coverage": ""
        },
        "269": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 2
        },
        "270": {
          "source": "      self.doCloudCall({",
          "coverage": 2
        },
        "271": {
          "source": "        \"dataset_id\" : dataset_id,",
          "coverage": ""
        },
        "272": {
          "source": "        \"req\": {",
          "coverage": ""
        },
        "273": {
          "source": "          \"fn\": \"removeCollision\",",
          "coverage": ""
        },
        "274": {
          "source": "          \"hash\": colissionHash,",
          "coverage": ""
        },
        "275": {
          "source": "          meta_data: dataset.meta_data",
          "coverage": ""
        },
        "276": {
          "source": "        }",
          "coverage": ""
        },
        "277": {
          "source": "      }, success, failure);",
          "coverage": ""
        },
        "278": {
          "source": "    });",
          "coverage": ""
        },
        "279": {
          "source": "  },",
          "coverage": ""
        },
        "280": {
          "source": "",
          "coverage": ""
        },
        "281": {
          "source": "",
          "coverage": ""
        },
        "282": {
          "source": "  // PRIVATE FUNCTIONS",
          "coverage": ""
        },
        "283": {
          "source": "  isOnline: function(callback) {",
          "coverage": ""
        },
        "284": {
          "source": "    var online = true;",
          "coverage": 55
        },
        "285": {
          "source": "",
          "coverage": ""
        },
        "286": {
          "source": "    // first, check if navigator.online is available",
          "coverage": ""
        },
        "287": {
          "source": "    if(typeof navigator.onLine !== \"undefined\"){",
          "coverage": 55
        },
        "288": {
          "source": "      online = navigator.onLine;",
          "coverage": 55
        },
        "289": {
          "source": "    }",
          "coverage": ""
        },
        "290": {
          "source": "",
          "coverage": ""
        },
        "291": {
          "source": "    // second, check if Phonegap is available and has online info",
          "coverage": ""
        },
        "292": {
          "source": "    if(online){",
          "coverage": 55
        },
        "293": {
          "source": "      //use phonegap to determin if the network is available",
          "coverage": ""
        },
        "294": {
          "source": "      if(typeof navigator.network !== \"undefined\" &amp;&amp; typeof navigator.network.connection !== \"undefined\"){",
          "coverage": 55
        },
        "295": {
          "source": "        var networkType = navigator.network.connection.type;",
          "coverage": 55
        },
        "296": {
          "source": "        if(networkType === \"none\" || networkType === null) {",
          "coverage": 55
        },
        "297": {
          "source": "          online = false;",
          "coverage": 0
        },
        "298": {
          "source": "        }",
          "coverage": ""
        },
        "299": {
          "source": "      }",
          "coverage": ""
        },
        "300": {
          "source": "    }",
          "coverage": ""
        },
        "301": {
          "source": "",
          "coverage": ""
        },
        "302": {
          "source": "    return callback(online);",
          "coverage": 55
        },
        "303": {
          "source": "  },",
          "coverage": ""
        },
        "304": {
          "source": "",
          "coverage": ""
        },
        "305": {
          "source": "  doNotify: function(dataset_id, uid, code, message) {",
          "coverage": ""
        },
        "306": {
          "source": "",
          "coverage": ""
        },
        "307": {
          "source": "    if( self.notify_callback || self.notify_callback_map[dataset_id]) {",
          "coverage": 103
        },
        "308": {
          "source": "      var notifyFunc = self.notify_callback_map[dataset_id] || self.notify_callback;",
          "coverage": 103
        },
        "309": {
          "source": "      if ( self.config['notify_' + code] ) {",
          "coverage": 103
        },
        "310": {
          "source": "        var notification = {",
          "coverage": 103
        },
        "311": {
          "source": "          \"dataset_id\" : dataset_id,",
          "coverage": ""
        },
        "312": {
          "source": "          \"uid\" : uid,",
          "coverage": ""
        },
        "313": {
          "source": "          \"code\" : code,",
          "coverage": ""
        },
        "314": {
          "source": "          \"message\" : message",
          "coverage": ""
        },
        "315": {
          "source": "        };",
          "coverage": ""
        },
        "316": {
          "source": "        // make sure user doesn't block",
          "coverage": ""
        },
        "317": {
          "source": "        setTimeout(function () {",
          "coverage": 103
        },
        "318": {
          "source": "          notifyFunc(notification);",
          "coverage": 103
        },
        "319": {
          "source": "        }, 0);",
          "coverage": ""
        },
        "320": {
          "source": "      }",
          "coverage": ""
        },
        "321": {
          "source": "    }",
          "coverage": ""
        },
        "322": {
          "source": "  },",
          "coverage": ""
        },
        "323": {
          "source": "",
          "coverage": ""
        },
        "324": {
          "source": "  getDataSet: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "325": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 335
        },
        "326": {
          "source": "",
          "coverage": ""
        },
        "327": {
          "source": "    if (dataset) {",
          "coverage": 335
        },
        "328": {
          "source": "      success(dataset);",
          "coverage": 323
        },
        "329": {
          "source": "    } else {",
          "coverage": ""
        },
        "330": {
          "source": "      if(failure){",
          "coverage": 12
        },
        "331": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 12
        },
        "332": {
          "source": "      }",
          "coverage": ""
        },
        "333": {
          "source": "    }",
          "coverage": ""
        },
        "334": {
          "source": "  },",
          "coverage": ""
        },
        "335": {
          "source": "",
          "coverage": ""
        },
        "336": {
          "source": "  getQueryParams: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "337": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "338": {
          "source": "",
          "coverage": ""
        },
        "339": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "340": {
          "source": "      success(dataset.query_params);",
          "coverage": 1
        },
        "341": {
          "source": "    } else {",
          "coverage": ""
        },
        "342": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "343": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "344": {
          "source": "      }",
          "coverage": ""
        },
        "345": {
          "source": "    }",
          "coverage": ""
        },
        "346": {
          "source": "  },",
          "coverage": ""
        },
        "347": {
          "source": "",
          "coverage": ""
        },
        "348": {
          "source": "  setQueryParams: function(dataset_id, queryParams, success, failure) {",
          "coverage": ""
        },
        "349": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "350": {
          "source": "",
          "coverage": ""
        },
        "351": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "352": {
          "source": "      dataset.query_params = queryParams;",
          "coverage": 1
        },
        "353": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 1
        },
        "354": {
          "source": "      if( success ) {",
          "coverage": 1
        },
        "355": {
          "source": "        success(dataset.query_params);",
          "coverage": 1
        },
        "356": {
          "source": "      }",
          "coverage": ""
        },
        "357": {
          "source": "    } else {",
          "coverage": ""
        },
        "358": {
          "source": "      if ( failure ) {",
          "coverage": 2
        },
        "359": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "360": {
          "source": "      }",
          "coverage": ""
        },
        "361": {
          "source": "    }",
          "coverage": ""
        },
        "362": {
          "source": "  },",
          "coverage": ""
        },
        "363": {
          "source": "",
          "coverage": ""
        },
        "364": {
          "source": "  getMetaData: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "365": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "366": {
          "source": "",
          "coverage": ""
        },
        "367": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "368": {
          "source": "      success(dataset.meta_data);",
          "coverage": 1
        },
        "369": {
          "source": "    } else {",
          "coverage": ""
        },
        "370": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "371": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "372": {
          "source": "      }",
          "coverage": ""
        },
        "373": {
          "source": "    }",
          "coverage": ""
        },
        "374": {
          "source": "  },",
          "coverage": ""
        },
        "375": {
          "source": "",
          "coverage": ""
        },
        "376": {
          "source": "  setMetaData: function(dataset_id, metaData, success, failure) {",
          "coverage": ""
        },
        "377": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "378": {
          "source": "",
          "coverage": ""
        },
        "379": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "380": {
          "source": "      dataset.meta_data = metaData;",
          "coverage": 1
        },
        "381": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 1
        },
        "382": {
          "source": "      if( success ) {",
          "coverage": 1
        },
        "383": {
          "source": "        success(dataset.meta_data);",
          "coverage": 1
        },
        "384": {
          "source": "      }",
          "coverage": ""
        },
        "385": {
          "source": "    } else {",
          "coverage": ""
        },
        "386": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "387": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "388": {
          "source": "      }",
          "coverage": ""
        },
        "389": {
          "source": "    }",
          "coverage": ""
        },
        "390": {
          "source": "  },",
          "coverage": ""
        },
        "391": {
          "source": "",
          "coverage": ""
        },
        "392": {
          "source": "  getConfig: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "393": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "394": {
          "source": "",
          "coverage": ""
        },
        "395": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "396": {
          "source": "      success(dataset.config);",
          "coverage": 1
        },
        "397": {
          "source": "    } else {",
          "coverage": ""
        },
        "398": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "399": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "400": {
          "source": "      }",
          "coverage": ""
        },
        "401": {
          "source": "    }",
          "coverage": ""
        },
        "402": {
          "source": "  },",
          "coverage": ""
        },
        "403": {
          "source": "",
          "coverage": ""
        },
        "404": {
          "source": "  setConfig: function(dataset_id, config, success, failure) {",
          "coverage": ""
        },
        "405": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 43
        },
        "406": {
          "source": "",
          "coverage": ""
        },
        "407": {
          "source": "    if (dataset) {",
          "coverage": 43
        },
        "408": {
          "source": "      var fullConfig = self.setOptions(config);",
          "coverage": 41
        },
        "409": {
          "source": "      dataset.config = fullConfig;",
          "coverage": 41
        },
        "410": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 41
        },
        "411": {
          "source": "      if( success ) {",
          "coverage": 41
        },
        "412": {
          "source": "        success(dataset.config);",
          "coverage": 41
        },
        "413": {
          "source": "      }",
          "coverage": ""
        },
        "414": {
          "source": "    } else {",
          "coverage": ""
        },
        "415": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "416": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "417": {
          "source": "      }",
          "coverage": ""
        },
        "418": {
          "source": "    }",
          "coverage": ""
        },
        "419": {
          "source": "  },",
          "coverage": ""
        },
        "420": {
          "source": "",
          "coverage": ""
        },
        "421": {
          "source": "  stopSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "422": {
          "source": "    self.setConfig(dataset_id, {\"sync_active\" : false}, function() {",
          "coverage": 35
        },
        "423": {
          "source": "      if( success ) {",
          "coverage": 35
        },
        "424": {
          "source": "        success();",
          "coverage": 34
        },
        "425": {
          "source": "      }",
          "coverage": ""
        },
        "426": {
          "source": "    }, failure);",
          "coverage": ""
        },
        "427": {
          "source": "  },",
          "coverage": ""
        },
        "428": {
          "source": "",
          "coverage": ""
        },
        "429": {
          "source": "  startSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "430": {
          "source": "    self.setConfig(dataset_id, {\"sync_active\" : true}, function() {",
          "coverage": 3
        },
        "431": {
          "source": "      if( success ) {",
          "coverage": 3
        },
        "432": {
          "source": "        success();",
          "coverage": 3
        },
        "433": {
          "source": "      }",
          "coverage": ""
        },
        "434": {
          "source": "    }, failure);",
          "coverage": ""
        },
        "435": {
          "source": "  },",
          "coverage": ""
        },
        "436": {
          "source": "",
          "coverage": ""
        },
        "437": {
          "source": "  doSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "438": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "439": {
          "source": "",
          "coverage": ""
        },
        "440": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "441": {
          "source": "      dataset.syncPending = true;",
          "coverage": 1
        },
        "442": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 1
        },
        "443": {
          "source": "      if( success ) {",
          "coverage": 1
        },
        "444": {
          "source": "        success();",
          "coverage": 1
        },
        "445": {
          "source": "      }",
          "coverage": ""
        },
        "446": {
          "source": "    } else {",
          "coverage": ""
        },
        "447": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "448": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "449": {
          "source": "      }",
          "coverage": ""
        },
        "450": {
          "source": "    }",
          "coverage": ""
        },
        "451": {
          "source": "  },",
          "coverage": ""
        },
        "452": {
          "source": "",
          "coverage": ""
        },
        "453": {
          "source": "  forceSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "454": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 28
        },
        "455": {
          "source": "",
          "coverage": ""
        },
        "456": {
          "source": "    if (dataset) {",
          "coverage": 28
        },
        "457": {
          "source": "      dataset.syncForced = true;",
          "coverage": 26
        },
        "458": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 26
        },
        "459": {
          "source": "      if( success ) {",
          "coverage": 26
        },
        "460": {
          "source": "        success();",
          "coverage": 26
        },
        "461": {
          "source": "      }",
          "coverage": ""
        },
        "462": {
          "source": "    } else {",
          "coverage": ""
        },
        "463": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "464": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "465": {
          "source": "      }",
          "coverage": ""
        },
        "466": {
          "source": "    }",
          "coverage": ""
        },
        "467": {
          "source": "  },",
          "coverage": ""
        },
        "468": {
          "source": "",
          "coverage": ""
        },
        "469": {
          "source": "  sortObject : function(object) {",
          "coverage": ""
        },
        "470": {
          "source": "    if (typeof object !== \"object\" || object === null) {",
          "coverage": 288
        },
        "471": {
          "source": "      return object;",
          "coverage": 208
        },
        "472": {
          "source": "    }",
          "coverage": ""
        },
        "473": {
          "source": "",
          "coverage": ""
        },
        "474": {
          "source": "    var result = [];",
          "coverage": 80
        },
        "475": {
          "source": "",
          "coverage": ""
        },
        "476": {
          "source": "    Object.keys(object).sort().forEach(function(key) {",
          "coverage": 80
        },
        "477": {
          "source": "      result.push({",
          "coverage": 226
        },
        "478": {
          "source": "        key: key,",
          "coverage": ""
        },
        "479": {
          "source": "        value: self.sortObject(object[key])",
          "coverage": ""
        },
        "480": {
          "source": "      });",
          "coverage": ""
        },
        "481": {
          "source": "    });",
          "coverage": ""
        },
        "482": {
          "source": "",
          "coverage": ""
        },
        "483": {
          "source": "    return result;",
          "coverage": 80
        },
        "484": {
          "source": "  },",
          "coverage": ""
        },
        "485": {
          "source": "",
          "coverage": ""
        },
        "486": {
          "source": "  sortedStringify : function(obj) {",
          "coverage": ""
        },
        "487": {
          "source": "",
          "coverage": ""
        },
        "488": {
          "source": "    var str = '';",
          "coverage": 62
        },
        "489": {
          "source": "",
          "coverage": ""
        },
        "490": {
          "source": "    try {",
          "coverage": 62
        },
        "491": {
          "source": "      str = JSON.stringify(self.sortObject(obj));",
          "coverage": 62
        },
        "492": {
          "source": "    } catch (e) {",
          "coverage": ""
        },
        "493": {
          "source": "      console.error('Error stringifying sorted object:' + e);",
          "coverage": 0
        },
        "494": {
          "source": "    }",
          "coverage": ""
        },
        "495": {
          "source": "",
          "coverage": ""
        },
        "496": {
          "source": "    return str;",
          "coverage": 62
        },
        "497": {
          "source": "  },",
          "coverage": ""
        },
        "498": {
          "source": "",
          "coverage": ""
        },
        "499": {
          "source": "  generateHash: function(object) {",
          "coverage": ""
        },
        "500": {
          "source": "    var hash = CryptoJS.SHA1(self.sortedStringify(object));",
          "coverage": 62
        },
        "501": {
          "source": "    return hash.toString();",
          "coverage": 62
        },
        "502": {
          "source": "  },",
          "coverage": ""
        },
        "503": {
          "source": "",
          "coverage": ""
        },
        "504": {
          "source": "  addPendingObj: function(dataset_id, uid, data, action, success, failure) {",
          "coverage": ""
        },
        "505": {
          "source": "    self.isOnline(function (online) {",
          "coverage": 26
        },
        "506": {
          "source": "      if (!online) {",
          "coverage": 26
        },
        "507": {
          "source": "        self.doNotify(dataset_id, uid, self.notifications.OFFLINE_UPDATE, action);",
          "coverage": 0
        },
        "508": {
          "source": "      }",
          "coverage": ""
        },
        "509": {
          "source": "    });",
          "coverage": ""
        },
        "510": {
          "source": "",
          "coverage": ""
        },
        "511": {
          "source": "    function storePendingObject(obj) {",
          "coverage": 26
        },
        "512": {
          "source": "      obj.hash = self.generateHash(obj);",
          "coverage": 22
        },
        "513": {
          "source": "",
          "coverage": ""
        },
        "514": {
          "source": "      self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 22
        },
        "515": {
          "source": "",
          "coverage": ""
        },
        "516": {
          "source": "        dataset.pending[obj.hash] = obj;",
          "coverage": 21
        },
        "517": {
          "source": "",
          "coverage": ""
        },
        "518": {
          "source": "        self.updateDatasetFromLocal(dataset, obj);",
          "coverage": 21
        },
        "519": {
          "source": "",
          "coverage": ""
        },
        "520": {
          "source": "        if(self.config.auto_sync_local_updates) {",
          "coverage": 21
        },
        "521": {
          "source": "          dataset.syncPending = true;",
          "coverage": 21
        },
        "522": {
          "source": "        }",
          "coverage": ""
        },
        "523": {
          "source": "        self.saveDataSet(dataset_id);",
          "coverage": 21
        },
        "524": {
          "source": "        self.doNotify(dataset_id, uid, self.notifications.LOCAL_UPDATE_APPLIED, action);",
          "coverage": 21
        },
        "525": {
          "source": "",
          "coverage": ""
        },
        "526": {
          "source": "        success(obj);",
          "coverage": 21
        },
        "527": {
          "source": "      }, function(code, msg) {",
          "coverage": ""
        },
        "528": {
          "source": "        if(failure) failure(code, msg);",
          "coverage": 1
        },
        "529": {
          "source": "      });",
          "coverage": ""
        },
        "530": {
          "source": "    }",
          "coverage": ""
        },
        "531": {
          "source": "",
          "coverage": ""
        },
        "532": {
          "source": "    var pendingObj = {};",
          "coverage": 26
        },
        "533": {
          "source": "    pendingObj.inFlight = false;",
          "coverage": 26
        },
        "534": {
          "source": "    pendingObj.action = action;",
          "coverage": 26
        },
        "535": {
          "source": "    pendingObj.post = JSON.parse(JSON.stringify(data));",
          "coverage": 26
        },
        "536": {
          "source": "    pendingObj.postHash = self.generateHash(pendingObj.post);",
          "coverage": 26
        },
        "537": {
          "source": "    pendingObj.timestamp = new Date().getTime();",
          "coverage": 26
        },
        "538": {
          "source": "    if( \"create\" === action ) {",
          "coverage": 26
        },
        "539": {
          "source": "      pendingObj.uid = pendingObj.postHash;",
          "coverage": 10
        },
        "540": {
          "source": "      storePendingObject(pendingObj);",
          "coverage": 10
        },
        "541": {
          "source": "    } else {",
          "coverage": ""
        },
        "542": {
          "source": "      self.read(dataset_id, uid, function(rec) {",
          "coverage": 16
        },
        "543": {
          "source": "        pendingObj.uid = uid;",
          "coverage": 12
        },
        "544": {
          "source": "        pendingObj.pre = rec.data;",
          "coverage": 12
        },
        "545": {
          "source": "        pendingObj.preHash = self.generateHash(rec.data);",
          "coverage": 12
        },
        "546": {
          "source": "        storePendingObject(pendingObj);",
          "coverage": 12
        },
        "547": {
          "source": "      }, function(code, msg) {",
          "coverage": ""
        },
        "548": {
          "source": "        if(failure){",
          "coverage": 4
        },
        "549": {
          "source": "          failure(code, msg);",
          "coverage": 2
        },
        "550": {
          "source": "        }",
          "coverage": ""
        },
        "551": {
          "source": "      });",
          "coverage": ""
        },
        "552": {
          "source": "    }",
          "coverage": ""
        },
        "553": {
          "source": "  },",
          "coverage": ""
        },
        "554": {
          "source": "",
          "coverage": ""
        },
        "555": {
          "source": "  syncLoop: function(dataset_id) {",
          "coverage": ""
        },
        "556": {
          "source": "    self.getDataSet(dataset_id, function(dataSet) {",
          "coverage": 29
        },
        "557": {
          "source": "    ",
          "coverage": ""
        },
        "558": {
          "source": "      // The sync loop is currently active",
          "coverage": ""
        },
        "559": {
          "source": "      dataSet.syncPending = false;",
          "coverage": 29
        },
        "560": {
          "source": "      dataSet.syncRunning = true;",
          "coverage": 29
        },
        "561": {
          "source": "      dataSet.syncLoopStart = new Date().getTime();",
          "coverage": 29
        },
        "562": {
          "source": "      self.doNotify(dataset_id, null, self.notifications.SYNC_STARTED, null);",
          "coverage": 29
        },
        "563": {
          "source": "",
          "coverage": ""
        },
        "564": {
          "source": "      self.isOnline(function(online) {",
          "coverage": 29
        },
        "565": {
          "source": "        if (!online) {",
          "coverage": 29
        },
        "566": {
          "source": "          self.syncComplete(dataset_id, \"offline\", self.notifications.SYNC_FAILED);",
          "coverage": 0
        },
        "567": {
          "source": "        } else {",
          "coverage": ""
        },
        "568": {
          "source": "          self.checkHasCustomSync(dataset_id, function() {",
          "coverage": 29
        },
        "569": {
          "source": "",
          "coverage": ""
        },
        "570": {
          "source": "            var syncLoopParams = {};",
          "coverage": 29
        },
        "571": {
          "source": "            syncLoopParams.fn = 'sync';",
          "coverage": 29
        },
        "572": {
          "source": "            syncLoopParams.dataset_id = dataset_id;",
          "coverage": 29
        },
        "573": {
          "source": "            syncLoopParams.query_params = dataSet.query_params;",
          "coverage": 29
        },
        "574": {
          "source": "            syncLoopParams.config = dataSet.config;",
          "coverage": 29
        },
        "575": {
          "source": "            syncLoopParams.meta_data = dataSet.meta_data;",
          "coverage": 29
        },
        "576": {
          "source": "            //var datasetHash = self.generateLocalDatasetHash(dataSet);",
          "coverage": ""
        },
        "577": {
          "source": "            syncLoopParams.dataset_hash = dataSet.hash;",
          "coverage": 29
        },
        "578": {
          "source": "            syncLoopParams.acknowledgements = dataSet.acknowledgements || [];",
          "coverage": 29
        },
        "579": {
          "source": "",
          "coverage": ""
        },
        "580": {
          "source": "            var pending = dataSet.pending;",
          "coverage": 29
        },
        "581": {
          "source": "            var pendingArray = [];",
          "coverage": 29
        },
        "582": {
          "source": "            for(var i in pending ) {",
          "coverage": 29
        },
        "583": {
          "source": "              // Mark the pending records we are about to submit as inflight and add them to the array for submission",
          "coverage": ""
        },
        "584": {
          "source": "              // Don't re-add previous inFlight pending records who whave crashed - i.e. who's current state is unknown",
          "coverage": ""
        },
        "585": {
          "source": "              // Don't add delayed records",
          "coverage": ""
        },
        "586": {
          "source": "              if( !pending[i].inFlight &amp;&amp; !pending[i].crashed &amp;&amp; !pending[i].delayed) {",
          "coverage": 26
        },
        "587": {
          "source": "                pending[i].inFlight = true;",
          "coverage": 13
        },
        "588": {
          "source": "                pending[i].inFlightDate = new Date().getTime();",
          "coverage": 13
        },
        "589": {
          "source": "                pendingArray.push(pending[i]);",
          "coverage": 13
        },
        "590": {
          "source": "              }",
          "coverage": ""
        },
        "591": {
          "source": "            }",
          "coverage": ""
        },
        "592": {
          "source": "            syncLoopParams.pending = pendingArray;",
          "coverage": 29
        },
        "593": {
          "source": "",
          "coverage": ""
        },
        "594": {
          "source": "            if( pendingArray.length &gt; 0 ) {",
          "coverage": 29
        },
        "595": {
          "source": "              self.consoleLog('Starting sync loop - global hash = ' + dataSet.hash + ' :: params = ' + JSON.stringify(syncLoopParams, null, 2));",
          "coverage": 13
        },
        "596": {
          "source": "            }",
          "coverage": ""
        },
        "597": {
          "source": "            try {",
          "coverage": 29
        },
        "598": {
          "source": "              self.doCloudCall({",
          "coverage": 29
        },
        "599": {
          "source": "                'dataset_id': dataset_id,",
          "coverage": ""
        },
        "600": {
          "source": "                'req': syncLoopParams",
          "coverage": ""
        },
        "601": {
          "source": "              }, function(res) {",
          "coverage": ""
        },
        "602": {
          "source": "                var rec;",
          "coverage": 21
        },
        "603": {
          "source": "",
          "coverage": ""
        },
        "604": {
          "source": "                function processUpdates(updates, notification, acknowledgements) {",
          "coverage": 21
        },
        "605": {
          "source": "                  if( updates ) {",
          "coverage": 39
        },
        "606": {
          "source": "                    for (var up in updates) {",
          "coverage": 8
        },
        "607": {
          "source": "                      rec = updates[up];",
          "coverage": 6
        },
        "608": {
          "source": "                      acknowledgements.push(rec);",
          "coverage": 6
        },
        "609": {
          "source": "                      if( dataSet.pending[up] &amp;&amp; dataSet.pending[up].inFlight &amp;&amp; !dataSet.pending[up].crashed ) {",
          "coverage": 6
        },
        "610": {
          "source": "                        delete dataSet.pending[up];",
          "coverage": 5
        },
        "611": {
          "source": "                        self.doNotify(dataset_id, rec.uid, notification, rec);",
          "coverage": 5
        },
        "612": {
          "source": "                      }",
          "coverage": ""
        },
        "613": {
          "source": "                    }",
          "coverage": ""
        },
        "614": {
          "source": "                  }",
          "coverage": ""
        },
        "615": {
          "source": "                }",
          "coverage": ""
        },
        "616": {
          "source": "",
          "coverage": ""
        },
        "617": {
          "source": "                // Check to see if any new pending records need to be updated to reflect the current state of play.",
          "coverage": ""
        },
        "618": {
          "source": "                self.updatePendingFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "619": {
          "source": "",
          "coverage": ""
        },
        "620": {
          "source": "                // Check to see if any previously crashed inflight records can now be resolved",
          "coverage": ""
        },
        "621": {
          "source": "                self.updateCrashedInFlightFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "622": {
          "source": "",
          "coverage": ""
        },
        "623": {
          "source": "                //Check to see if any delayed pending records can now be set to ready",
          "coverage": ""
        },
        "624": {
          "source": "                self.updateDelayedFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "625": {
          "source": "",
          "coverage": ""
        },
        "626": {
          "source": "                //Check meta data as well to make sure it contains the correct info",
          "coverage": ""
        },
        "627": {
          "source": "                self.updateMetaFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "628": {
          "source": "",
          "coverage": ""
        },
        "629": {
          "source": "                // Update the new dataset with details of any inflight updates which we have not received a response on",
          "coverage": ""
        },
        "630": {
          "source": "                self.updateNewDataFromInFlight(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "631": {
          "source": "",
          "coverage": ""
        },
        "632": {
          "source": "                // Update the new dataset with details of any pending updates",
          "coverage": ""
        },
        "633": {
          "source": "                self.updateNewDataFromPending(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "634": {
          "source": "",
          "coverage": ""
        },
        "635": {
          "source": "",
          "coverage": ""
        },
        "636": {
          "source": "",
          "coverage": ""
        },
        "637": {
          "source": "                if (res.records) {",
          "coverage": 21
        },
        "638": {
          "source": "                  // Full Dataset returned",
          "coverage": ""
        },
        "639": {
          "source": "                  dataSet.data = res.records;",
          "coverage": 9
        },
        "640": {
          "source": "                  dataSet.hash = res.hash;",
          "coverage": 9
        },
        "641": {
          "source": "",
          "coverage": ""
        },
        "642": {
          "source": "                  self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'full dataset');",
          "coverage": 9
        },
        "643": {
          "source": "                }",
          "coverage": ""
        },
        "644": {
          "source": "",
          "coverage": ""
        },
        "645": {
          "source": "                if (res.updates) {",
          "coverage": 21
        },
        "646": {
          "source": "                  var acknowledgements = [];",
          "coverage": 13
        },
        "647": {
          "source": "                  processUpdates(res.updates.applied, self.notifications.REMOTE_UPDATE_APPLIED, acknowledgements);",
          "coverage": 13
        },
        "648": {
          "source": "                  processUpdates(res.updates.failed, self.notifications.REMOTE_UPDATE_FAILED, acknowledgements);",
          "coverage": 13
        },
        "649": {
          "source": "                  processUpdates(res.updates.collisions, self.notifications.COLLISION_DETECTED, acknowledgements);",
          "coverage": 13
        },
        "650": {
          "source": "                  dataSet.acknowledgements = acknowledgements;",
          "coverage": 13
        },
        "651": {
          "source": "                }",
          "coverage": ""
        },
        "652": {
          "source": "",
          "coverage": ""
        },
        "653": {
          "source": "                if (!res.records &amp;&amp; res.hash &amp;&amp; res.hash !== dataSet.hash) {",
          "coverage": 21
        },
        "654": {
          "source": "                  self.consoleLog(\"Local dataset stale - syncing records :: local hash= \" + dataSet.hash + \" - remoteHash=\" + res.hash);",
          "coverage": 4
        },
        "655": {
          "source": "                  // Different hash value returned - Sync individual records",
          "coverage": ""
        },
        "656": {
          "source": "                  self.syncRecords(dataset_id);",
          "coverage": 4
        },
        "657": {
          "source": "                } else {",
          "coverage": ""
        },
        "658": {
          "source": "                  self.consoleLog(\"Local dataset up to date\");",
          "coverage": 17
        },
        "659": {
          "source": "                  self.syncComplete(dataset_id,  \"online\", self.notifications.SYNC_COMPLETE);",
          "coverage": 17
        },
        "660": {
          "source": "                }",
          "coverage": ""
        },
        "661": {
          "source": "              }, function(msg, err) {",
          "coverage": ""
        },
        "662": {
          "source": "                // The AJAX call failed to complete succesfully, so the state of the current pending updates is unknown",
          "coverage": ""
        },
        "663": {
          "source": "                // Mark them as \"crashed\". The next time a syncLoop completets successfully, we will review the crashed",
          "coverage": ""
        },
        "664": {
          "source": "                // records to see if we can determine their current state.",
          "coverage": ""
        },
        "665": {
          "source": "                self.markInFlightAsCrashed(dataSet);",
          "coverage": 8
        },
        "666": {
          "source": "                self.consoleLog(\"syncLoop failed : msg=\" + msg + \" :: err = \" + err);",
          "coverage": 8
        },
        "667": {
          "source": "                self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);",
          "coverage": 8
        },
        "668": {
          "source": "              });",
          "coverage": ""
        },
        "669": {
          "source": "            }",
          "coverage": ""
        },
        "670": {
          "source": "            catch (e) {",
          "coverage": ""
        },
        "671": {
          "source": "              self.consoleLog('Error performing sync - ' + e);",
          "coverage": 0
        },
        "672": {
          "source": "              self.syncComplete(dataset_id, e, self.notifications.SYNC_FAILED);",
          "coverage": 0
        },
        "673": {
          "source": "            }",
          "coverage": ""
        },
        "674": {
          "source": "          });",
          "coverage": ""
        },
        "675": {
          "source": "        }",
          "coverage": ""
        },
        "676": {
          "source": "      });",
          "coverage": ""
        },
        "677": {
          "source": "    });",
          "coverage": ""
        },
        "678": {
          "source": "  },",
          "coverage": ""
        },
        "679": {
          "source": "",
          "coverage": ""
        },
        "680": {
          "source": "  syncRecords: function(dataset_id) {",
          "coverage": ""
        },
        "681": {
          "source": "",
          "coverage": ""
        },
        "682": {
          "source": "    self.getDataSet(dataset_id, function(dataSet) {",
          "coverage": 4
        },
        "683": {
          "source": "",
          "coverage": ""
        },
        "684": {
          "source": "      var localDataSet = dataSet.data || {};",
          "coverage": 4
        },
        "685": {
          "source": "",
          "coverage": ""
        },
        "686": {
          "source": "      var clientRecs = {};",
          "coverage": 4
        },
        "687": {
          "source": "      for (var i in localDataSet) {",
          "coverage": 4
        },
        "688": {
          "source": "        var uid = i;",
          "coverage": 4
        },
        "689": {
          "source": "        var hash = localDataSet[i].hash;",
          "coverage": 4
        },
        "690": {
          "source": "        clientRecs[uid] = hash;",
          "coverage": 4
        },
        "691": {
          "source": "      }",
          "coverage": ""
        },
        "692": {
          "source": "",
          "coverage": ""
        },
        "693": {
          "source": "      var syncRecParams = {};",
          "coverage": 4
        },
        "694": {
          "source": "",
          "coverage": ""
        },
        "695": {
          "source": "      syncRecParams.fn = 'syncRecords';",
          "coverage": 4
        },
        "696": {
          "source": "      syncRecParams.dataset_id = dataset_id;",
          "coverage": 4
        },
        "697": {
          "source": "      syncRecParams.query_params = dataSet.query_params;",
          "coverage": 4
        },
        "698": {
          "source": "      syncRecParams.clientRecs = clientRecs;",
          "coverage": 4
        },
        "699": {
          "source": "",
          "coverage": ""
        },
        "700": {
          "source": "      self.consoleLog(\"syncRecParams :: \" + JSON.stringify(syncRecParams));",
          "coverage": 4
        },
        "701": {
          "source": "",
          "coverage": ""
        },
        "702": {
          "source": "      self.doCloudCall({",
          "coverage": 4
        },
        "703": {
          "source": "        'dataset_id': dataset_id,",
          "coverage": ""
        },
        "704": {
          "source": "        'req': syncRecParams",
          "coverage": ""
        },
        "705": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "706": {
          "source": "        var i;",
          "coverage": 4
        },
        "707": {
          "source": "",
          "coverage": ""
        },
        "708": {
          "source": "        if (res.create) {",
          "coverage": 4
        },
        "709": {
          "source": "          for (i in res.create) {",
          "coverage": 4
        },
        "710": {
          "source": "            localDataSet[i] = {\"hash\" : res.create[i].hash, \"data\" : res.create[i].data};",
          "coverage": 2
        },
        "711": {
          "source": "            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"create\");",
          "coverage": 2
        },
        "712": {
          "source": "          }",
          "coverage": ""
        },
        "713": {
          "source": "        }",
          "coverage": ""
        },
        "714": {
          "source": "        if (res.update) {",
          "coverage": 4
        },
        "715": {
          "source": "          for (i in res.update) {",
          "coverage": 3
        },
        "716": {
          "source": "            localDataSet[i].hash = res.update[i].hash;",
          "coverage": 1
        },
        "717": {
          "source": "            localDataSet[i].data = res.update[i].data;",
          "coverage": 1
        },
        "718": {
          "source": "            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"update\");",
          "coverage": 1
        },
        "719": {
          "source": "          }",
          "coverage": ""
        },
        "720": {
          "source": "        }",
          "coverage": ""
        },
        "721": {
          "source": "        if (res['delete']) {",
          "coverage": 4
        },
        "722": {
          "source": "          for (i in res['delete']) {",
          "coverage": 3
        },
        "723": {
          "source": "            delete localDataSet[i];",
          "coverage": 1
        },
        "724": {
          "source": "            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"delete\");",
          "coverage": 1
        },
        "725": {
          "source": "          }",
          "coverage": ""
        },
        "726": {
          "source": "        }",
          "coverage": ""
        },
        "727": {
          "source": "",
          "coverage": ""
        },
        "728": {
          "source": "        self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'partial dataset');",
          "coverage": 4
        },
        "729": {
          "source": "",
          "coverage": ""
        },
        "730": {
          "source": "        dataSet.data = localDataSet;",
          "coverage": 4
        },
        "731": {
          "source": "        if(res.hash) {",
          "coverage": 4
        },
        "732": {
          "source": "          dataSet.hash = res.hash;",
          "coverage": 4
        },
        "733": {
          "source": "        }",
          "coverage": ""
        },
        "734": {
          "source": "        self.syncComplete(dataset_id, \"online\", self.notifications.SYNC_COMPLETE);",
          "coverage": 4
        },
        "735": {
          "source": "      }, function(msg, err) {",
          "coverage": ""
        },
        "736": {
          "source": "        self.consoleLog(\"syncRecords failed : msg=\" + msg + \" :: err=\" + err);",
          "coverage": 0
        },
        "737": {
          "source": "        self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);",
          "coverage": 0
        },
        "738": {
          "source": "      });",
          "coverage": ""
        },
        "739": {
          "source": "    });",
          "coverage": ""
        },
        "740": {
          "source": "  },",
          "coverage": ""
        },
        "741": {
          "source": "",
          "coverage": ""
        },
        "742": {
          "source": "  syncComplete: function(dataset_id, status, notification) {",
          "coverage": ""
        },
        "743": {
          "source": "",
          "coverage": ""
        },
        "744": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 29
        },
        "745": {
          "source": "      dataset.syncRunning = false;",
          "coverage": 29
        },
        "746": {
          "source": "      dataset.syncLoopEnd = new Date().getTime();",
          "coverage": 29
        },
        "747": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 29
        },
        "748": {
          "source": "      self.doNotify(dataset_id, dataset.hash, notification, status);",
          "coverage": 29
        },
        "749": {
          "source": "    });",
          "coverage": ""
        },
        "750": {
          "source": "  },",
          "coverage": ""
        },
        "751": {
          "source": "",
          "coverage": ""
        },
        "752": {
          "source": "  checkDatasets: function() {",
          "coverage": ""
        },
        "753": {
          "source": "    for( var dataset_id in self.datasets ) {",
          "coverage": 39
        },
        "754": {
          "source": "      if( self.datasets.hasOwnProperty(dataset_id) ) {",
          "coverage": 69
        },
        "755": {
          "source": "        var dataset = self.datasets[dataset_id];",
          "coverage": 69
        },
        "756": {
          "source": "        if(dataset &amp;&amp; !dataset.syncRunning &amp;&amp; (dataset.config.sync_active || dataset.syncForced)) {",
          "coverage": 69
        },
        "757": {
          "source": "          // Check to see if it is time for the sync loop to run again",
          "coverage": ""
        },
        "758": {
          "source": "          var lastSyncStart = dataset.syncLoopStart;",
          "coverage": 30
        },
        "759": {
          "source": "          var lastSyncCmp = dataset.syncLoopEnd;",
          "coverage": 30
        },
        "760": {
          "source": "          if(dataset.syncForced){",
          "coverage": 30
        },
        "761": {
          "source": "            dataset.syncPending = true;",
          "coverage": 26
        },
        "762": {
          "source": "          } else if( lastSyncStart == null ) {",
          "coverage": 4
        },
        "763": {
          "source": "            self.consoleLog(dataset_id +' - Performing initial sync');",
          "coverage": 1
        },
        "764": {
          "source": "            // Dataset has never been synced before - do initial sync",
          "coverage": ""
        },
        "765": {
          "source": "            dataset.syncPending = true;",
          "coverage": 1
        },
        "766": {
          "source": "          } else if (lastSyncCmp != null) {",
          "coverage": 3
        },
        "767": {
          "source": "            var timeSinceLastSync = new Date().getTime() - lastSyncCmp;",
          "coverage": 3
        },
        "768": {
          "source": "            var syncFrequency = dataset.config.sync_frequency * 1000;",
          "coverage": 3
        },
        "769": {
          "source": "            if( timeSinceLastSync &gt; syncFrequency ) {",
          "coverage": 3
        },
        "770": {
          "source": "              // Time between sync loops has passed - do another sync",
          "coverage": ""
        },
        "771": {
          "source": "              dataset.syncPending = true;",
          "coverage": 1
        },
        "772": {
          "source": "            }",
          "coverage": ""
        },
        "773": {
          "source": "          }",
          "coverage": ""
        },
        "774": {
          "source": "",
          "coverage": ""
        },
        "775": {
          "source": "          if( dataset.syncPending ) {",
          "coverage": 30
        },
        "776": {
          "source": "            // Reset syncForced in case it was what caused the sync cycle to run.",
          "coverage": ""
        },
        "777": {
          "source": "            dataset.syncForced = false;",
          "coverage": 29
        },
        "778": {
          "source": "",
          "coverage": ""
        },
        "779": {
          "source": "            // If the dataset requres syncing, run the sync loop. This may be because the sync interval has passed",
          "coverage": ""
        },
        "780": {
          "source": "            // or because the sync_frequency has been changed or because a change was made to the dataset and the",
          "coverage": ""
        },
        "781": {
          "source": "            // immediate_sync flag set to true",
          "coverage": ""
        },
        "782": {
          "source": "            self.syncLoop(dataset_id);",
          "coverage": 29
        },
        "783": {
          "source": "          }",
          "coverage": ""
        },
        "784": {
          "source": "        }",
          "coverage": ""
        },
        "785": {
          "source": "      }",
          "coverage": ""
        },
        "786": {
          "source": "    }",
          "coverage": ""
        },
        "787": {
          "source": "  },",
          "coverage": ""
        },
        "788": {
          "source": "",
          "coverage": ""
        },
        "789": {
          "source": "  checkHasCustomSync : function(dataset_id, cb) {",
          "coverage": ""
        },
        "790": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 32
        },
        "791": {
          "source": "    if(dataset &amp;&amp; dataset.config){",
          "coverage": 32
        },
        "792": {
          "source": "      self.consoleLog(\"dataset.config.has_custom_sync = \" + dataset.config.has_custom_sync);",
          "coverage": 32
        },
        "793": {
          "source": "      if(dataset.config.has_custom_sync != null) {",
          "coverage": 32
        },
        "794": {
          "source": "        return cb();",
          "coverage": 25
        },
        "795": {
          "source": "      }",
          "coverage": ""
        },
        "796": {
          "source": "      self.consoleLog('starting check has custom sync');",
          "coverage": 7
        },
        "797": {
          "source": "",
          "coverage": ""
        },
        "798": {
          "source": "      actAPI({",
          "coverage": 7
        },
        "799": {
          "source": "        'act' : dataset_id,",
          "coverage": ""
        },
        "800": {
          "source": "        'req': {",
          "coverage": ""
        },
        "801": {
          "source": "          'fn': 'sync'",
          "coverage": ""
        },
        "802": {
          "source": "        }",
          "coverage": ""
        },
        "803": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "804": {
          "source": "        //if the custom sync is defined in the cloud, this call should success.",
          "coverage": ""
        },
        "805": {
          "source": "        //if failed, we think this the custom sync is not defined",
          "coverage": ""
        },
        "806": {
          "source": "        self.consoleLog('check has_custom_sync - success - ', res);",
          "coverage": 1
        },
        "807": {
          "source": "        dataset.config.has_custom_sync = true;",
          "coverage": 1
        },
        "808": {
          "source": "        return cb();",
          "coverage": 1
        },
        "809": {
          "source": "      }, function(msg,err) {",
          "coverage": ""
        },
        "810": {
          "source": "        self.consoleLog('check has_custom_sync - failure - ', err);",
          "coverage": 6
        },
        "811": {
          "source": "        if(err.status &amp;&amp; err.status === 500){",
          "coverage": 6
        },
        "812": {
          "source": "          //if we receive 500, it could be that there is an error occured due to missing parameters or similar,",
          "coverage": ""
        },
        "813": {
          "source": "          //but the endpoint is defined.",
          "coverage": ""
        },
        "814": {
          "source": "          self.consoleLog('check has_custom_sync - failed with 500, endpoint does exists');",
          "coverage": 1
        },
        "815": {
          "source": "          dataset.config.has_custom_sync = true;",
          "coverage": 1
        },
        "816": {
          "source": "        } else {",
          "coverage": ""
        },
        "817": {
          "source": "          dataset.config.has_custom_sync = false;",
          "coverage": 5
        },
        "818": {
          "source": "        }",
          "coverage": ""
        },
        "819": {
          "source": "        return cb();",
          "coverage": 6
        },
        "820": {
          "source": "      });",
          "coverage": ""
        },
        "821": {
          "source": "    } else {",
          "coverage": ""
        },
        "822": {
          "source": "      return cb();",
          "coverage": 0
        },
        "823": {
          "source": "    }",
          "coverage": ""
        },
        "824": {
          "source": "  },",
          "coverage": ""
        },
        "825": {
          "source": "",
          "coverage": ""
        },
        "826": {
          "source": "  doCloudCall: function(params, success, failure) {",
          "coverage": ""
        },
        "827": {
          "source": "    var hasCustomSync = false;",
          "coverage": 37
        },
        "828": {
          "source": "    var dataset = self.datasets[params.dataset_id];",
          "coverage": 37
        },
        "829": {
          "source": "    if(dataset &amp;&amp; dataset.config){",
          "coverage": 37
        },
        "830": {
          "source": "      hasCustomSync = dataset.config.has_custom_sync;",
          "coverage": 37
        },
        "831": {
          "source": "    }",
          "coverage": ""
        },
        "832": {
          "source": "    if( hasCustomSync == true ) {",
          "coverage": 37
        },
        "833": {
          "source": "      actAPI({",
          "coverage": 0
        },
        "834": {
          "source": "        'act' : params.dataset_id,",
          "coverage": ""
        },
        "835": {
          "source": "        'req' : params.req",
          "coverage": ""
        },
        "836": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "837": {
          "source": "        success(res);",
          "coverage": 0
        },
        "838": {
          "source": "      }, function(msg, err) {",
          "coverage": ""
        },
        "839": {
          "source": "        failure(msg, err);",
          "coverage": 0
        },
        "840": {
          "source": "      });      ",
          "coverage": ""
        },
        "841": {
          "source": "    } else {",
          "coverage": ""
        },
        "842": {
          "source": "      cloudAPI({",
          "coverage": 37
        },
        "843": {
          "source": "        'path' : '/mbaas/sync/' + params.dataset_id,",
          "coverage": ""
        },
        "844": {
          "source": "        'method' : 'post',",
          "coverage": ""
        },
        "845": {
          "source": "        'data' : params.req",
          "coverage": ""
        },
        "846": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "847": {
          "source": "        success(res);",
          "coverage": 27
        },
        "848": {
          "source": "      }, function(msg, err) {",
          "coverage": ""
        },
        "849": {
          "source": "        failure(msg, err);",
          "coverage": 10
        },
        "850": {
          "source": "      });",
          "coverage": ""
        },
        "851": {
          "source": "    }",
          "coverage": ""
        },
        "852": {
          "source": "  },",
          "coverage": ""
        },
        "853": {
          "source": "",
          "coverage": ""
        },
        "854": {
          "source": "  datasetMonitor: function() {",
          "coverage": ""
        },
        "855": {
          "source": "    self.checkDatasets();",
          "coverage": 39
        },
        "856": {
          "source": "",
          "coverage": ""
        },
        "857": {
          "source": "    // Re-execute datasetMonitor every 500ms so we keep invoking checkDatasets();",
          "coverage": ""
        },
        "858": {
          "source": "    setTimeout(function() {",
          "coverage": 39
        },
        "859": {
          "source": "      self.datasetMonitor();",
          "coverage": 38
        },
        "860": {
          "source": "    }, 500);",
          "coverage": ""
        },
        "861": {
          "source": "  },",
          "coverage": ""
        },
        "862": {
          "source": "",
          "coverage": ""
        },
        "863": {
          "source": "  getStorageAdapter: function(dataset_id, isSave, cb){",
          "coverage": ""
        },
        "864": {
          "source": "    var onFail = function(msg, err){",
          "coverage": 164
        },
        "865": {
          "source": "      var errMsg = (isSave?'save to': 'load from' ) + ' local storage failed msg: ' + msg + ' err: ' + err;",
          "coverage": 0
        },
        "866": {
          "source": "      self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);",
          "coverage": 0
        },
        "867": {
          "source": "      self.consoleLog(errMsg);",
          "coverage": 0
        },
        "868": {
          "source": "    };",
          "coverage": ""
        },
        "869": {
          "source": "    Lawnchair({fail:onFail, adapter: self.config.storage_strategy, size:self.config.file_system_quota, backup: self.config.icloud_backup}, function(){",
          "coverage": 164
        },
        "870": {
          "source": "      return cb(null, this);",
          "coverage": 164
        },
        "871": {
          "source": "    });",
          "coverage": ""
        },
        "872": {
          "source": "  },",
          "coverage": ""
        },
        "873": {
          "source": "",
          "coverage": ""
        },
        "874": {
          "source": "  saveDataSet: function (dataset_id, cb) {",
          "coverage": ""
        },
        "875": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 161
        },
        "876": {
          "source": "      self.getStorageAdapter(dataset_id, true, function(err, storage){",
          "coverage": 161
        },
        "877": {
          "source": "        storage.save({key:\"dataset_\" + dataset_id, val:dataset}, function(){",
          "coverage": 161
        },
        "878": {
          "source": "          //save success",
          "coverage": ""
        },
        "879": {
          "source": "          if(cb) return cb();",
          "coverage": 202
        },
        "880": {
          "source": "        });",
          "coverage": ""
        },
        "881": {
          "source": "      });",
          "coverage": ""
        },
        "882": {
          "source": "    });",
          "coverage": ""
        },
        "883": {
          "source": "  },",
          "coverage": ""
        },
        "884": {
          "source": "",
          "coverage": ""
        },
        "885": {
          "source": "  loadDataSet: function (dataset_id, success, failure) {",
          "coverage": ""
        },
        "886": {
          "source": "    self.getStorageAdapter(dataset_id, false, function(err, storage){",
          "coverage": 3
        },
        "887": {
          "source": "      storage.get( \"dataset_\" + dataset_id, function (data){",
          "coverage": 3
        },
        "888": {
          "source": "        if (data &amp;&amp; data.val) {",
          "coverage": 3
        },
        "889": {
          "source": "          var dataset = data.val;",
          "coverage": 1
        },
        "890": {
          "source": "          if(typeof dataset === \"string\"){",
          "coverage": 1
        },
        "891": {
          "source": "            dataset = JSON.parse(dataset);",
          "coverage": 0
        },
        "892": {
          "source": "          }",
          "coverage": ""
        },
        "893": {
          "source": "          // Datasets should not be auto initialised when loaded - the mange function should be called for each dataset",
          "coverage": ""
        },
        "894": {
          "source": "          // the user wants sync",
          "coverage": ""
        },
        "895": {
          "source": "          dataset.initialised = false;",
          "coverage": 1
        },
        "896": {
          "source": "          self.datasets[dataset_id] = dataset; // TODO: do we need to handle binary data?",
          "coverage": 1
        },
        "897": {
          "source": "          self.consoleLog('load from local storage success for dataset_id :' + dataset_id);",
          "coverage": 1
        },
        "898": {
          "source": "          if(success) return success(dataset);",
          "coverage": 2
        },
        "899": {
          "source": "        } else {",
          "coverage": ""
        },
        "900": {
          "source": "          // no data yet, probably first time. failure calback should handle this",
          "coverage": ""
        },
        "901": {
          "source": "          if(failure) return failure();",
          "coverage": 4
        },
        "902": {
          "source": "        }",
          "coverage": ""
        },
        "903": {
          "source": "      });",
          "coverage": ""
        },
        "904": {
          "source": "    });",
          "coverage": ""
        },
        "905": {
          "source": "  },",
          "coverage": ""
        },
        "906": {
          "source": "",
          "coverage": ""
        },
        "907": {
          "source": "  clearCache: function(dataset_id, cb){",
          "coverage": ""
        },
        "908": {
          "source": "    delete self.datasets[dataset_id];",
          "coverage": 0
        },
        "909": {
          "source": "    self.notify_callback_map[dataset_id] === null;",
          "coverage": 0
        },
        "910": {
          "source": "    self.getStorageAdapter(dataset_id, true, function(err, storage){",
          "coverage": 0
        },
        "911": {
          "source": "      storage.remove(\"dataset_\" + dataset_id, function(){",
          "coverage": 0
        },
        "912": {
          "source": "        self.consoleLog('local cache is cleared for dataset : ' + dataset_id);",
          "coverage": 0
        },
        "913": {
          "source": "        if(cb){",
          "coverage": 0
        },
        "914": {
          "source": "          return cb();",
          "coverage": 0
        },
        "915": {
          "source": "        }",
          "coverage": ""
        },
        "916": {
          "source": "      });",
          "coverage": ""
        },
        "917": {
          "source": "    });",
          "coverage": ""
        },
        "918": {
          "source": "  },",
          "coverage": ""
        },
        "919": {
          "source": "",
          "coverage": ""
        },
        "920": {
          "source": "  updateDatasetFromLocal: function(dataset, pendingRec) {",
          "coverage": ""
        },
        "921": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "922": {
          "source": "    var previousPendingUid;",
          "coverage": 21
        },
        "923": {
          "source": "    var previousPending;",
          "coverage": 21
        },
        "924": {
          "source": "",
          "coverage": ""
        },
        "925": {
          "source": "    var uid = pendingRec.uid;",
          "coverage": 21
        },
        "926": {
          "source": "    self.consoleLog('updating local dataset for uid ' + uid + ' - action = ' + pendingRec.action);",
          "coverage": 21
        },
        "927": {
          "source": "",
          "coverage": ""
        },
        "928": {
          "source": "    dataset.meta[uid] = dataset.meta[uid] || {};",
          "coverage": 21
        },
        "929": {
          "source": "",
          "coverage": ""
        },
        "930": {
          "source": "    // Creating a new record",
          "coverage": ""
        },
        "931": {
          "source": "    if( pendingRec.action === \"create\" ) {",
          "coverage": 21
        },
        "932": {
          "source": "      if( dataset.data[uid] ) {",
          "coverage": 9
        },
        "933": {
          "source": "        self.consoleLog('dataset already exists for uid in create :: ' + JSON.stringify(dataset.data[uid]));",
          "coverage": 0
        },
        "934": {
          "source": "",
          "coverage": ""
        },
        "935": {
          "source": "        // We are trying to do a create using a uid which already exists",
          "coverage": ""
        },
        "936": {
          "source": "        if (dataset.meta[uid].fromPending) {",
          "coverage": 0
        },
        "937": {
          "source": "          // We are trying to create on top of an existing pending record",
          "coverage": ""
        },
        "938": {
          "source": "          // Remove the previous pending record and use this one instead",
          "coverage": ""
        },
        "939": {
          "source": "          previousPendingUid = dataset.meta[uid].pendingUid;",
          "coverage": 0
        },
        "940": {
          "source": "          delete pending[previousPendingUid];",
          "coverage": 0
        },
        "941": {
          "source": "        }",
          "coverage": ""
        },
        "942": {
          "source": "      }",
          "coverage": ""
        },
        "943": {
          "source": "      dataset.data[uid] = {};",
          "coverage": 9
        },
        "944": {
          "source": "    }",
          "coverage": ""
        },
        "945": {
          "source": "",
          "coverage": ""
        },
        "946": {
          "source": "    if( pendingRec.action === \"update\" ) {",
          "coverage": 21
        },
        "947": {
          "source": "      if( dataset.data[uid] ) {",
          "coverage": 7
        },
        "948": {
          "source": "        if (dataset.meta[uid].fromPending) {",
          "coverage": 7
        },
        "949": {
          "source": "          self.consoleLog('updating an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));",
          "coverage": 4
        },
        "950": {
          "source": "          // We are trying to update an existing pending record",
          "coverage": ""
        },
        "951": {
          "source": "          previousPendingUid = dataset.meta[uid].pendingUid;",
          "coverage": 4
        },
        "952": {
          "source": "          dataset.meta[uid].previousPendingUid = previousPendingUid;",
          "coverage": 4
        },
        "953": {
          "source": "          previousPending = pending[previousPendingUid];",
          "coverage": 4
        },
        "954": {
          "source": "          if(previousPending) {",
          "coverage": 4
        },
        "955": {
          "source": "            if(!previousPending.inFlight){",
          "coverage": 3
        },
        "956": {
          "source": "              self.consoleLog('existing pre-flight pending record = ' + JSON.stringify(previousPending));",
          "coverage": 1
        },
        "957": {
          "source": "              // We are trying to perform an update on an existing pending record",
          "coverage": ""
        },
        "958": {
          "source": "              // modify the original record to have the latest value and delete the pending update",
          "coverage": ""
        },
        "959": {
          "source": "              previousPending.post = pendingRec.post;",
          "coverage": 1
        },
        "960": {
          "source": "              previousPending.postHash = pendingRec.postHash;",
          "coverage": 1
        },
        "961": {
          "source": "              delete pending[pendingRec.hash];",
          "coverage": 1
        },
        "962": {
          "source": "              // Update the pending record to have the hash of the previous record as this is what is now being",
          "coverage": ""
        },
        "963": {
          "source": "              // maintained in the pending array &amp; is what we want in the meta record",
          "coverage": ""
        },
        "964": {
          "source": "              pendingRec.hash = previousPendingUid;",
          "coverage": 1
        },
        "965": {
          "source": "            } else {",
          "coverage": ""
        },
        "966": {
          "source": "              //we are performing changes to a pending record which is inFlight. Until the status of this pending record is resolved,",
          "coverage": ""
        },
        "967": {
          "source": "              //we should not submit this pending record to the cloud. Mark it as delayed.",
          "coverage": ""
        },
        "968": {
          "source": "              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));",
          "coverage": 2
        },
        "969": {
          "source": "              pendingRec.delayed = true;",
          "coverage": 2
        },
        "970": {
          "source": "              pendingRec.waiting = previousPending.hash;",
          "coverage": 2
        },
        "971": {
          "source": "            }",
          "coverage": ""
        },
        "972": {
          "source": "          }",
          "coverage": ""
        },
        "973": {
          "source": "        }",
          "coverage": ""
        },
        "974": {
          "source": "      }",
          "coverage": ""
        },
        "975": {
          "source": "    }",
          "coverage": ""
        },
        "976": {
          "source": "",
          "coverage": ""
        },
        "977": {
          "source": "    if( pendingRec.action === \"delete\" ) {",
          "coverage": 21
        },
        "978": {
          "source": "      if( dataset.data[uid] ) {",
          "coverage": 5
        },
        "979": {
          "source": "        if (dataset.meta[uid].fromPending) {",
          "coverage": 5
        },
        "980": {
          "source": "          self.consoleLog('Deleting an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));",
          "coverage": 5
        },
        "981": {
          "source": "          // We are trying to delete an existing pending record",
          "coverage": ""
        },
        "982": {
          "source": "          previousPendingUid = dataset.meta[uid].pendingUid;",
          "coverage": 5
        },
        "983": {
          "source": "          dataset.meta[uid].previousPendingUid = previousPendingUid;",
          "coverage": 5
        },
        "984": {
          "source": "          previousPending = pending[previousPendingUid];",
          "coverage": 5
        },
        "985": {
          "source": "          if( previousPending ) {",
          "coverage": 5
        },
        "986": {
          "source": "            if(!previousPending.inFlight){",
          "coverage": 3
        },
        "987": {
          "source": "              self.consoleLog('existing pending record = ' + JSON.stringify(previousPending));",
          "coverage": 2
        },
        "988": {
          "source": "              if( previousPending.action === \"create\" ) {",
          "coverage": 2
        },
        "989": {
          "source": "                // We are trying to perform a delete on an existing pending create",
          "coverage": ""
        },
        "990": {
          "source": "                // These cancel each other out so remove them both",
          "coverage": ""
        },
        "991": {
          "source": "                delete pending[pendingRec.hash];",
          "coverage": 1
        },
        "992": {
          "source": "                delete pending[previousPendingUid];",
          "coverage": 1
        },
        "993": {
          "source": "              }",
          "coverage": ""
        },
        "994": {
          "source": "              if( previousPending.action === \"update\" ) {",
          "coverage": 2
        },
        "995": {
          "source": "                // We are trying to perform a delete on an existing pending update",
          "coverage": ""
        },
        "996": {
          "source": "                // Use the pre value from the pending update for the delete and",
          "coverage": ""
        },
        "997": {
          "source": "                // get rid of the pending update",
          "coverage": ""
        },
        "998": {
          "source": "                pendingRec.pre = previousPending.pre;",
          "coverage": 1
        },
        "999": {
          "source": "                pendingRec.preHash = previousPending.preHash;",
          "coverage": 1
        },
        "1000": {
          "source": "                pendingRec.inFlight = false;",
          "coverage": 1
        },
        "1001": {
          "source": "                delete pending[previousPendingUid];",
          "coverage": 1
        },
        "1002": {
          "source": "              }",
          "coverage": ""
        },
        "1003": {
          "source": "            } else {",
          "coverage": ""
        },
        "1004": {
          "source": "              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));",
          "coverage": 1
        },
        "1005": {
          "source": "              pendingRec.delayed = true;",
          "coverage": 1
        },
        "1006": {
          "source": "              pendingRec.waiting = previousPending.hash;",
          "coverage": 1
        },
        "1007": {
          "source": "            }",
          "coverage": ""
        },
        "1008": {
          "source": "          }",
          "coverage": ""
        },
        "1009": {
          "source": "        }",
          "coverage": ""
        },
        "1010": {
          "source": "        delete dataset.data[uid];",
          "coverage": 5
        },
        "1011": {
          "source": "      }",
          "coverage": ""
        },
        "1012": {
          "source": "    }",
          "coverage": ""
        },
        "1013": {
          "source": "",
          "coverage": ""
        },
        "1014": {
          "source": "    if( dataset.data[uid] ) {",
          "coverage": 21
        },
        "1015": {
          "source": "      dataset.data[uid].data = pendingRec.post;",
          "coverage": 16
        },
        "1016": {
          "source": "      dataset.data[uid].hash = pendingRec.postHash;",
          "coverage": 16
        },
        "1017": {
          "source": "      dataset.meta[uid].fromPending = true;",
          "coverage": 16
        },
        "1018": {
          "source": "      dataset.meta[uid].pendingUid = pendingRec.hash;",
          "coverage": 16
        },
        "1019": {
          "source": "    }",
          "coverage": ""
        },
        "1020": {
          "source": "  },",
          "coverage": ""
        },
        "1021": {
          "source": "",
          "coverage": ""
        },
        "1022": {
          "source": "  updatePendingFromNewData: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1023": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1024": {
          "source": "    var newRec;",
          "coverage": 21
        },
        "1025": {
          "source": "",
          "coverage": ""
        },
        "1026": {
          "source": "    if( pending &amp;&amp; newData.records) {",
          "coverage": 21
        },
        "1027": {
          "source": "      for( var pendingHash in pending ) {",
          "coverage": 9
        },
        "1028": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 10
        },
        "1029": {
          "source": "          var pendingRec = pending[pendingHash];",
          "coverage": 10
        },
        "1030": {
          "source": "",
          "coverage": ""
        },
        "1031": {
          "source": "          dataset.meta[pendingRec.uid] = dataset.meta[pendingRec.uid] || {};",
          "coverage": 10
        },
        "1032": {
          "source": "",
          "coverage": ""
        },
        "1033": {
          "source": "          if( pendingRec.inFlight === false ) {",
          "coverage": 10
        },
        "1034": {
          "source": "            // Pending record that has not been submitted",
          "coverage": ""
        },
        "1035": {
          "source": "            self.consoleLog('updatePendingFromNewData - Found Non inFlight record -&gt; action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);",
          "coverage": 5
        },
        "1036": {
          "source": "            if( pendingRec.action === \"update\" || pendingRec.action === \"delete\") {",
          "coverage": 5
        },
        "1037": {
          "source": "              // Update the pre value of pending record to reflect the latest data returned from sync.",
          "coverage": ""
        },
        "1038": {
          "source": "              // This will prevent a collision being reported when the pending record is sent.",
          "coverage": ""
        },
        "1039": {
          "source": "              newRec = newData.records[pendingRec.uid];",
          "coverage": 3
        },
        "1040": {
          "source": "              if( newRec ) {",
          "coverage": 3
        },
        "1041": {
          "source": "                self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record ' + pendingRec.uid);",
          "coverage": 2
        },
        "1042": {
          "source": "                pendingRec.pre = newRec.data;",
          "coverage": 2
        },
        "1043": {
          "source": "                pendingRec.preHash = newRec.hash;",
          "coverage": 2
        },
        "1044": {
          "source": "              }",
          "coverage": ""
        },
        "1045": {
          "source": "              else {",
          "coverage": ""
        },
        "1046": {
          "source": "                // The update/delete may be for a newly created record in which case the uid will have changed.",
          "coverage": ""
        },
        "1047": {
          "source": "                var previousPendingUid = dataset.meta[pendingRec.uid].previousPendingUid;",
          "coverage": 1
        },
        "1048": {
          "source": "                var previousPending = pending[previousPendingUid];",
          "coverage": 1
        },
        "1049": {
          "source": "                if( previousPending ) {",
          "coverage": 1
        },
        "1050": {
          "source": "                  if( newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.applied &amp;&amp; newData.updates.applied[previousPending.hash] ) {",
          "coverage": 1
        },
        "1051": {
          "source": "                    // There is an update in from a previous pending action",
          "coverage": ""
        },
        "1052": {
          "source": "                    var newUid = newData.updates.applied[previousPending.hash].uid;",
          "coverage": 1
        },
        "1053": {
          "source": "                    newRec = newData.records[newUid];",
          "coverage": 1
        },
        "1054": {
          "source": "                    if( newRec ) {",
          "coverage": 1
        },
        "1055": {
          "source": "                      self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record which was previously a create ' + pendingRec.uid + ' ==&gt; ' + newUid);",
          "coverage": 1
        },
        "1056": {
          "source": "                      pendingRec.pre = newRec.data;",
          "coverage": 1
        },
        "1057": {
          "source": "                      pendingRec.preHash = newRec.hash;",
          "coverage": 1
        },
        "1058": {
          "source": "                      pendingRec.uid = newUid;",
          "coverage": 1
        },
        "1059": {
          "source": "                    }",
          "coverage": ""
        },
        "1060": {
          "source": "                  }",
          "coverage": ""
        },
        "1061": {
          "source": "                }",
          "coverage": ""
        },
        "1062": {
          "source": "              }",
          "coverage": ""
        },
        "1063": {
          "source": "            }",
          "coverage": ""
        },
        "1064": {
          "source": "",
          "coverage": ""
        },
        "1065": {
          "source": "            if( pendingRec.action === \"create\" ) {",
          "coverage": 5
        },
        "1066": {
          "source": "              if( newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.applied &amp;&amp; newData.updates.applied[pendingHash] ) {",
          "coverage": 2
        },
        "1067": {
          "source": "                self.consoleLog('updatePendingFromNewData - Found an update for a pending create ' + JSON.stringify(newData.updates.applied[pendingHash]));",
          "coverage": 1
        },
        "1068": {
          "source": "                newRec = newData.records[newData.updates.applied[pendingHash].uid];",
          "coverage": 1
        },
        "1069": {
          "source": "                if( newRec ) {",
          "coverage": 1
        },
        "1070": {
          "source": "                  self.consoleLog('updatePendingFromNewData - Changing pending create to an update based on new record  ' + JSON.stringify(newRec));",
          "coverage": 1
        },
        "1071": {
          "source": "",
          "coverage": ""
        },
        "1072": {
          "source": "                  // Set up the pending create as an update",
          "coverage": ""
        },
        "1073": {
          "source": "                  pendingRec.action = \"update\";",
          "coverage": 1
        },
        "1074": {
          "source": "                  pendingRec.pre = newRec.data;",
          "coverage": 1
        },
        "1075": {
          "source": "                  pendingRec.preHash = newRec.hash;",
          "coverage": 1
        },
        "1076": {
          "source": "                  pendingRec.uid = newData.updates.applied[pendingHash].uid;",
          "coverage": 1
        },
        "1077": {
          "source": "                }",
          "coverage": ""
        },
        "1078": {
          "source": "              }",
          "coverage": ""
        },
        "1079": {
          "source": "            }",
          "coverage": ""
        },
        "1080": {
          "source": "          }",
          "coverage": ""
        },
        "1081": {
          "source": "        }",
          "coverage": ""
        },
        "1082": {
          "source": "      }",
          "coverage": ""
        },
        "1083": {
          "source": "    }",
          "coverage": ""
        },
        "1084": {
          "source": "  },",
          "coverage": ""
        },
        "1085": {
          "source": "",
          "coverage": ""
        },
        "1086": {
          "source": "  updateNewDataFromInFlight: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1087": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1088": {
          "source": "",
          "coverage": ""
        },
        "1089": {
          "source": "    if( pending &amp;&amp; newData.records) {",
          "coverage": 21
        },
        "1090": {
          "source": "      for( var pendingHash in pending ) {",
          "coverage": 9
        },
        "1091": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 10
        },
        "1092": {
          "source": "          var pendingRec = pending[pendingHash];",
          "coverage": 10
        },
        "1093": {
          "source": "",
          "coverage": ""
        },
        "1094": {
          "source": "          if( pendingRec.inFlight ) {",
          "coverage": 10
        },
        "1095": {
          "source": "            var updateReceivedForPending = (newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.hashes &amp;&amp; newData.updates.hashes[pendingHash]) ? true : false;",
          "coverage": 5
        },
        "1096": {
          "source": "",
          "coverage": ""
        },
        "1097": {
          "source": "            self.consoleLog('updateNewDataFromInFlight - Found inflight pending Record - action = ' + pendingRec.action + ' :: hash = ' + pendingHash + ' :: updateReceivedForPending=' + updateReceivedForPending);",
          "coverage": 5
        },
        "1098": {
          "source": "",
          "coverage": ""
        },
        "1099": {
          "source": "            if( ! updateReceivedForPending ) {",
          "coverage": 5
        },
        "1100": {
          "source": "              var newRec = newData.records[pendingRec.uid];",
          "coverage": 3
        },
        "1101": {
          "source": "",
          "coverage": ""
        },
        "1102": {
          "source": "              if( pendingRec.action === \"update\" &amp;&amp; newRec) {",
          "coverage": 3
        },
        "1103": {
          "source": "                // Modify the new Record to have the updates from the pending record so the local dataset is consistent",
          "coverage": ""
        },
        "1104": {
          "source": "                newRec.data = pendingRec.post;",
          "coverage": 1
        },
        "1105": {
          "source": "                newRec.hash = pendingRec.postHash;",
          "coverage": 1
        },
        "1106": {
          "source": "              }",
          "coverage": ""
        },
        "1107": {
          "source": "              else if( pendingRec.action === \"delete\" &amp;&amp; newRec) {",
          "coverage": 2
        },
        "1108": {
          "source": "                // Remove the record from the new dataset so the local dataset is consistent",
          "coverage": ""
        },
        "1109": {
          "source": "                delete newData.records[pendingRec.uid];",
          "coverage": 1
        },
        "1110": {
          "source": "              }",
          "coverage": ""
        },
        "1111": {
          "source": "              else if( pendingRec.action === \"create\" ) {",
          "coverage": 1
        },
        "1112": {
          "source": "                // Add the pending create into the new dataset so it is not lost from the UI",
          "coverage": ""
        },
        "1113": {
          "source": "                self.consoleLog('updateNewDataFromInFlight - re adding pending create to incomming dataset');",
          "coverage": 1
        },
        "1114": {
          "source": "                var newPendingCreate = {",
          "coverage": 1
        },
        "1115": {
          "source": "                  data: pendingRec.post,",
          "coverage": ""
        },
        "1116": {
          "source": "                  hash: pendingRec.postHash",
          "coverage": ""
        },
        "1117": {
          "source": "                };",
          "coverage": ""
        },
        "1118": {
          "source": "                newData.records[pendingRec.uid] = newPendingCreate;",
          "coverage": 1
        },
        "1119": {
          "source": "              }",
          "coverage": ""
        },
        "1120": {
          "source": "            }",
          "coverage": ""
        },
        "1121": {
          "source": "          }",
          "coverage": ""
        },
        "1122": {
          "source": "        }",
          "coverage": ""
        },
        "1123": {
          "source": "      }",
          "coverage": ""
        },
        "1124": {
          "source": "    }",
          "coverage": ""
        },
        "1125": {
          "source": "  },",
          "coverage": ""
        },
        "1126": {
          "source": "",
          "coverage": ""
        },
        "1127": {
          "source": "  updateNewDataFromPending: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1128": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1129": {
          "source": "",
          "coverage": ""
        },
        "1130": {
          "source": "    if( pending &amp;&amp; newData.records) {",
          "coverage": 21
        },
        "1131": {
          "source": "      for( var pendingHash in pending ) {",
          "coverage": 9
        },
        "1132": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 10
        },
        "1133": {
          "source": "          var pendingRec = pending[pendingHash];",
          "coverage": 10
        },
        "1134": {
          "source": "",
          "coverage": ""
        },
        "1135": {
          "source": "          if( pendingRec.inFlight === false ) {",
          "coverage": 10
        },
        "1136": {
          "source": "            self.consoleLog('updateNewDataFromPending - Found Non inFlight record -&gt; action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);",
          "coverage": 5
        },
        "1137": {
          "source": "            var newRec = newData.records[pendingRec.uid];",
          "coverage": 5
        },
        "1138": {
          "source": "            if( pendingRec.action === \"update\" &amp;&amp; newRec) {",
          "coverage": 5
        },
        "1139": {
          "source": "              // Modify the new Record to have the updates from the pending record so the local dataset is consistent",
          "coverage": ""
        },
        "1140": {
          "source": "              newRec.data = pendingRec.post;",
          "coverage": 3
        },
        "1141": {
          "source": "              newRec.hash = pendingRec.postHash;",
          "coverage": 3
        },
        "1142": {
          "source": "            }",
          "coverage": ""
        },
        "1143": {
          "source": "            else if( pendingRec.action === \"delete\" &amp;&amp; newRec) {",
          "coverage": 2
        },
        "1144": {
          "source": "              // Remove the record from the new dataset so the local dataset is consistent",
          "coverage": ""
        },
        "1145": {
          "source": "              delete newData.records[pendingRec.uid];",
          "coverage": 1
        },
        "1146": {
          "source": "            }",
          "coverage": ""
        },
        "1147": {
          "source": "            else if( pendingRec.action === \"create\" ) {",
          "coverage": 1
        },
        "1148": {
          "source": "              // Add the pending create into the new dataset so it is not lost from the UI",
          "coverage": ""
        },
        "1149": {
          "source": "              self.consoleLog('updateNewDataFromPending - re adding pending create to incomming dataset');",
          "coverage": 1
        },
        "1150": {
          "source": "              var newPendingCreate = {",
          "coverage": 1
        },
        "1151": {
          "source": "                data: pendingRec.post,",
          "coverage": ""
        },
        "1152": {
          "source": "                hash: pendingRec.postHash",
          "coverage": ""
        },
        "1153": {
          "source": "              };",
          "coverage": ""
        },
        "1154": {
          "source": "              newData.records[pendingRec.uid] = newPendingCreate;",
          "coverage": 1
        },
        "1155": {
          "source": "            }",
          "coverage": ""
        },
        "1156": {
          "source": "          }",
          "coverage": ""
        },
        "1157": {
          "source": "        }",
          "coverage": ""
        },
        "1158": {
          "source": "      }",
          "coverage": ""
        },
        "1159": {
          "source": "    }",
          "coverage": ""
        },
        "1160": {
          "source": "  },",
          "coverage": ""
        },
        "1161": {
          "source": "",
          "coverage": ""
        },
        "1162": {
          "source": "  updateCrashedInFlightFromNewData: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1163": {
          "source": "    var updateNotifications = {",
          "coverage": 21
        },
        "1164": {
          "source": "      applied: self.notifications.REMOTE_UPDATE_APPLIED,",
          "coverage": ""
        },
        "1165": {
          "source": "      failed: self.notifications.REMOTE_UPDATE_FAILED,",
          "coverage": ""
        },
        "1166": {
          "source": "      collisions: self.notifications.COLLISION_DETECTED",
          "coverage": ""
        },
        "1167": {
          "source": "    };",
          "coverage": ""
        },
        "1168": {
          "source": "",
          "coverage": ""
        },
        "1169": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1170": {
          "source": "    var resolvedCrashes = {};",
          "coverage": 21
        },
        "1171": {
          "source": "    var pendingHash;",
          "coverage": 21
        },
        "1172": {
          "source": "    var pendingRec;",
          "coverage": 21
        },
        "1173": {
          "source": "",
          "coverage": ""
        },
        "1174": {
          "source": "",
          "coverage": ""
        },
        "1175": {
          "source": "    if( pending ) {",
          "coverage": 21
        },
        "1176": {
          "source": "      for( pendingHash in pending ) {",
          "coverage": 21
        },
        "1177": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 21
        },
        "1178": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 21
        },
        "1179": {
          "source": "",
          "coverage": ""
        },
        "1180": {
          "source": "          if( pendingRec.inFlight &amp;&amp; pendingRec.crashed) {",
          "coverage": 21
        },
        "1181": {
          "source": "            self.consoleLog('updateCrashedInFlightFromNewData - Found crashed inFlight pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash );",
          "coverage": 7
        },
        "1182": {
          "source": "            if( newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes) {",
          "coverage": 7
        },
        "1183": {
          "source": "",
          "coverage": ""
        },
        "1184": {
          "source": "              // Check if the updates received contain any info about the crashed in flight update",
          "coverage": ""
        },
        "1185": {
          "source": "              var crashedUpdate = newData.updates.hashes[pendingHash];",
          "coverage": 5
        },
        "1186": {
          "source": "              if( crashedUpdate ) {",
          "coverage": 5
        },
        "1187": {
          "source": "                // We have found an update on one of our in flight crashed records",
          "coverage": ""
        },
        "1188": {
          "source": "",
          "coverage": ""
        },
        "1189": {
          "source": "                resolvedCrashes[crashedUpdate.uid] = crashedUpdate;",
          "coverage": 2
        },
        "1190": {
          "source": "",
          "coverage": ""
        },
        "1191": {
          "source": "                self.consoleLog('updateCrashedInFlightFromNewData - Resolving status for crashed inflight pending record ' + JSON.stringify(crashedUpdate));",
          "coverage": 2
        },
        "1192": {
          "source": "",
          "coverage": ""
        },
        "1193": {
          "source": "                if( crashedUpdate.type === 'failed' ) {",
          "coverage": 2
        },
        "1194": {
          "source": "                  // Crashed update failed - revert local dataset",
          "coverage": ""
        },
        "1195": {
          "source": "                  if( crashedUpdate.action === 'create' ) {",
          "coverage": 2
        },
        "1196": {
          "source": "                    self.consoleLog('updateCrashedInFlightFromNewData - Deleting failed create from dataset');",
          "coverage": 1
        },
        "1197": {
          "source": "                    delete dataset.data[crashedUpdate.uid];",
          "coverage": 1
        },
        "1198": {
          "source": "                  }",
          "coverage": ""
        },
        "1199": {
          "source": "                  else if ( crashedUpdate.action === 'update' || crashedUpdate.action === 'delete' ) {",
          "coverage": 1
        },
        "1200": {
          "source": "                    self.consoleLog('updateCrashedInFlightFromNewData - Reverting failed ' + crashedUpdate.action + ' in dataset');",
          "coverage": 1
        },
        "1201": {
          "source": "                    dataset.data[crashedUpdate.uid] = {",
          "coverage": 1
        },
        "1202": {
          "source": "                      data : pendingRec.pre,",
          "coverage": ""
        },
        "1203": {
          "source": "                      hash : pendingRec.preHash",
          "coverage": ""
        },
        "1204": {
          "source": "                    };",
          "coverage": ""
        },
        "1205": {
          "source": "                  }",
          "coverage": ""
        },
        "1206": {
          "source": "                }",
          "coverage": ""
        },
        "1207": {
          "source": "",
          "coverage": ""
        },
        "1208": {
          "source": "                delete pending[pendingHash];",
          "coverage": 2
        },
        "1209": {
          "source": "                self.doNotify(dataset_id, crashedUpdate.uid, updateNotifications[crashedUpdate.type], crashedUpdate);",
          "coverage": 2
        },
        "1210": {
          "source": "              }",
          "coverage": ""
        },
        "1211": {
          "source": "              else {",
          "coverage": ""
        },
        "1212": {
          "source": "                // No word on our crashed update - increment a counter to reflect another sync that did not give us",
          "coverage": ""
        },
        "1213": {
          "source": "                // any update on our crashed record.",
          "coverage": ""
        },
        "1214": {
          "source": "                if( pendingRec.crashedCount ) {",
          "coverage": 3
        },
        "1215": {
          "source": "                  pendingRec.crashedCount++;",
          "coverage": 1
        },
        "1216": {
          "source": "                }",
          "coverage": ""
        },
        "1217": {
          "source": "                else {",
          "coverage": ""
        },
        "1218": {
          "source": "                  pendingRec.crashedCount = 1;",
          "coverage": 2
        },
        "1219": {
          "source": "                }",
          "coverage": ""
        },
        "1220": {
          "source": "              }",
          "coverage": ""
        },
        "1221": {
          "source": "            }",
          "coverage": ""
        },
        "1222": {
          "source": "            else {",
          "coverage": ""
        },
        "1223": {
          "source": "              // No word on our crashed update - increment a counter to reflect another sync that did not give us",
          "coverage": ""
        },
        "1224": {
          "source": "              // any update on our crashed record.",
          "coverage": ""
        },
        "1225": {
          "source": "              if( pendingRec.crashedCount ) {",
          "coverage": 2
        },
        "1226": {
          "source": "                pendingRec.crashedCount++;",
          "coverage": 1
        },
        "1227": {
          "source": "              }",
          "coverage": ""
        },
        "1228": {
          "source": "              else {",
          "coverage": ""
        },
        "1229": {
          "source": "                pendingRec.crashedCount = 1;",
          "coverage": 1
        },
        "1230": {
          "source": "              }",
          "coverage": ""
        },
        "1231": {
          "source": "            }",
          "coverage": ""
        },
        "1232": {
          "source": "          }",
          "coverage": ""
        },
        "1233": {
          "source": "        }",
          "coverage": ""
        },
        "1234": {
          "source": "      }",
          "coverage": ""
        },
        "1235": {
          "source": "",
          "coverage": ""
        },
        "1236": {
          "source": "      for( pendingHash in pending ) {",
          "coverage": 21
        },
        "1237": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 19
        },
        "1238": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 19
        },
        "1239": {
          "source": "",
          "coverage": ""
        },
        "1240": {
          "source": "          if( pendingRec.inFlight &amp;&amp; pendingRec.crashed) {",
          "coverage": 19
        },
        "1241": {
          "source": "            if( pendingRec.crashedCount &gt; dataset.config.crashed_count_wait ) {",
          "coverage": 5
        },
        "1242": {
          "source": "              self.consoleLog('updateCrashedInFlightFromNewData - Crashed inflight pending record has reached crashed_count_wait limit : ' + JSON.stringify(pendingRec));",
          "coverage": 2
        },
        "1243": {
          "source": "              if( dataset.config.resend_crashed_updates ) {",
          "coverage": 2
        },
        "1244": {
          "source": "                self.consoleLog('updateCrashedInFlightFromNewData - Retryig crashed inflight pending record');",
          "coverage": 1
        },
        "1245": {
          "source": "                pendingRec.crashed = false;",
          "coverage": 1
        },
        "1246": {
          "source": "                pendingRec.inFlight = false;",
          "coverage": 1
        },
        "1247": {
          "source": "              }",
          "coverage": ""
        },
        "1248": {
          "source": "              else {",
          "coverage": ""
        },
        "1249": {
          "source": "                self.consoleLog('updateCrashedInFlightFromNewData - Deleting crashed inflight pending record');",
          "coverage": 1
        },
        "1250": {
          "source": "                delete pending[pendingHash];",
          "coverage": 1
        },
        "1251": {
          "source": "              }",
          "coverage": ""
        },
        "1252": {
          "source": "            }",
          "coverage": ""
        },
        "1253": {
          "source": "          }",
          "coverage": ""
        },
        "1254": {
          "source": "        }",
          "coverage": ""
        },
        "1255": {
          "source": "      }",
          "coverage": ""
        },
        "1256": {
          "source": "    }",
          "coverage": ""
        },
        "1257": {
          "source": "  },",
          "coverage": ""
        },
        "1258": {
          "source": "",
          "coverage": ""
        },
        "1259": {
          "source": "  updateDelayedFromNewData: function(dataset_id, dataset, newData){",
          "coverage": ""
        },
        "1260": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1261": {
          "source": "    var pendingHash;",
          "coverage": 21
        },
        "1262": {
          "source": "    var pendingRec;",
          "coverage": 21
        },
        "1263": {
          "source": "    if(pending){",
          "coverage": 21
        },
        "1264": {
          "source": "      for( pendingHash in pending ){",
          "coverage": 21
        },
        "1265": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ){",
          "coverage": 18
        },
        "1266": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 18
        },
        "1267": {
          "source": "          if( pendingRec.delayed &amp;&amp; pendingRec.waiting ){",
          "coverage": 18
        },
        "1268": {
          "source": "            self.consoleLog('updateDelayedFromNewData - Found delayed pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash + ' :: waiting=' + pendingRec.waiting);",
          "coverage": 3
        },
        "1269": {
          "source": "            if( newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes ){",
          "coverage": 3
        },
        "1270": {
          "source": "              var waitingRec = newData.updates.hashes[pendingRec.waiting];",
          "coverage": 2
        },
        "1271": {
          "source": "              if(waitingRec){",
          "coverage": 2
        },
        "1272": {
          "source": "                self.consoleLog('updateDelayedFromNewData - Waiting pending record is resolved rec=' + JSON.stringify(waitingRec));",
          "coverage": 2
        },
        "1273": {
          "source": "                pendingRec.delayed = false;",
          "coverage": 2
        },
        "1274": {
          "source": "                pendingRec.waiting = undefined;",
          "coverage": 2
        },
        "1275": {
          "source": "              }",
          "coverage": ""
        },
        "1276": {
          "source": "            }",
          "coverage": ""
        },
        "1277": {
          "source": "          }",
          "coverage": ""
        },
        "1278": {
          "source": "        }",
          "coverage": ""
        },
        "1279": {
          "source": "      }",
          "coverage": ""
        },
        "1280": {
          "source": "    }",
          "coverage": ""
        },
        "1281": {
          "source": "  },",
          "coverage": ""
        },
        "1282": {
          "source": "",
          "coverage": ""
        },
        "1283": {
          "source": "  updateMetaFromNewData: function(dataset_id, dataset, newData){",
          "coverage": ""
        },
        "1284": {
          "source": "    var meta = dataset.meta;",
          "coverage": 21
        },
        "1285": {
          "source": "    if(meta &amp;&amp; newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes){",
          "coverage": 21
        },
        "1286": {
          "source": "      for(var uid in meta){",
          "coverage": 11
        },
        "1287": {
          "source": "        if(meta.hasOwnProperty(uid)){",
          "coverage": 42
        },
        "1288": {
          "source": "          var metadata = meta[uid];",
          "coverage": 42
        },
        "1289": {
          "source": "          var pendingHash = metadata.pendingUid;",
          "coverage": 42
        },
        "1290": {
          "source": "          var previousPendingHash = metadata.previousPendingUid;",
          "coverage": 42
        },
        "1291": {
          "source": "          self.consoleLog(\"updateMetaFromNewData - Found metadata with uid = \" + uid + \" :: pendingHash = \" + pendingHash + \" :: previousPendingHash =\" + previousPendingHash);",
          "coverage": 42
        },
        "1292": {
          "source": "          var previousPendingResolved = true;",
          "coverage": 42
        },
        "1293": {
          "source": "          var pendingResolved = true;",
          "coverage": 42
        },
        "1294": {
          "source": "          if(previousPendingHash){",
          "coverage": 42
        },
        "1295": {
          "source": "            //we have previous pending in meta data, see if it's resolved",
          "coverage": ""
        },
        "1296": {
          "source": "            previousPendingResolved = false;",
          "coverage": 28
        },
        "1297": {
          "source": "            var resolved = newData.updates.hashes[previousPendingHash];",
          "coverage": 28
        },
        "1298": {
          "source": "            if(resolved){",
          "coverage": 28
        },
        "1299": {
          "source": "              self.consoleLog(\"updateMetaFromNewData - Found previousPendingUid in meta data resolved - resolved = \" + JSON.stringify(resolved));",
          "coverage": 2
        },
        "1300": {
          "source": "              //the previous pending is resolved in the cloud",
          "coverage": ""
        },
        "1301": {
          "source": "              metadata.previousPendingUid = undefined;",
          "coverage": 2
        },
        "1302": {
          "source": "              previousPendingResolved = true;",
          "coverage": 2
        },
        "1303": {
          "source": "            }",
          "coverage": ""
        },
        "1304": {
          "source": "          }",
          "coverage": ""
        },
        "1305": {
          "source": "          if(pendingHash){",
          "coverage": 42
        },
        "1306": {
          "source": "            //we have current pending in meta data, see if it's resolved",
          "coverage": ""
        },
        "1307": {
          "source": "            pendingResolved = false;",
          "coverage": 42
        },
        "1308": {
          "source": "            var resolved = newData.updates.hashes[pendingHash];",
          "coverage": 42
        },
        "1309": {
          "source": "            if(resolved){",
          "coverage": 42
        },
        "1310": {
          "source": "              self.consoleLog(\"updateMetaFromNewData - Found pendingUid in meta data resolved - resolved = \" + JSON.stringify(resolved));",
          "coverage": 5
        },
        "1311": {
          "source": "              //the current pending is resolved in the cloud",
          "coverage": ""
        },
        "1312": {
          "source": "              metadata.pendingUid = undefined;",
          "coverage": 5
        },
        "1313": {
          "source": "              pendingResolved = true;",
          "coverage": 5
        },
        "1314": {
          "source": "            }",
          "coverage": ""
        },
        "1315": {
          "source": "          }",
          "coverage": ""
        },
        "1316": {
          "source": "",
          "coverage": ""
        },
        "1317": {
          "source": "          if(previousPendingResolved &amp;&amp; pendingResolved){",
          "coverage": 42
        },
        "1318": {
          "source": "            self.consoleLog(\"updateMetaFromNewData - both previous and current pendings are resolved for meta data with uid \" + uid + \". Delete it.\");",
          "coverage": 5
        },
        "1319": {
          "source": "            //all pendings are resolved, the entry can be removed from meta data",
          "coverage": ""
        },
        "1320": {
          "source": "            delete meta[uid];",
          "coverage": 5
        },
        "1321": {
          "source": "          }",
          "coverage": ""
        },
        "1322": {
          "source": "        }",
          "coverage": ""
        },
        "1323": {
          "source": "      }",
          "coverage": ""
        },
        "1324": {
          "source": "    }",
          "coverage": ""
        },
        "1325": {
          "source": "  },",
          "coverage": ""
        },
        "1326": {
          "source": "",
          "coverage": ""
        },
        "1327": {
          "source": "",
          "coverage": ""
        },
        "1328": {
          "source": "  markInFlightAsCrashed : function(dataset) {",
          "coverage": ""
        },
        "1329": {
          "source": "    var pending = dataset.pending;",
          "coverage": 8
        },
        "1330": {
          "source": "    var pendingHash;",
          "coverage": 8
        },
        "1331": {
          "source": "    var pendingRec;",
          "coverage": 8
        },
        "1332": {
          "source": "",
          "coverage": ""
        },
        "1333": {
          "source": "    if( pending ) {",
          "coverage": 8
        },
        "1334": {
          "source": "      var crashedRecords = {};",
          "coverage": 8
        },
        "1335": {
          "source": "      for( pendingHash in pending ) {",
          "coverage": 8
        },
        "1336": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 9
        },
        "1337": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 9
        },
        "1338": {
          "source": "",
          "coverage": ""
        },
        "1339": {
          "source": "          if( pendingRec.inFlight ) {",
          "coverage": 9
        },
        "1340": {
          "source": "            self.consoleLog('Marking in flight pending record as crashed : ' + pendingHash);",
          "coverage": 7
        },
        "1341": {
          "source": "            pendingRec.crashed = true;",
          "coverage": 7
        },
        "1342": {
          "source": "            crashedRecords[pendingRec.uid] = pendingRec;",
          "coverage": 7
        },
        "1343": {
          "source": "          }",
          "coverage": ""
        },
        "1344": {
          "source": "        }",
          "coverage": ""
        },
        "1345": {
          "source": "      }",
          "coverage": ""
        },
        "1346": {
          "source": "    }",
          "coverage": ""
        },
        "1347": {
          "source": "  },",
          "coverage": ""
        },
        "1348": {
          "source": "",
          "coverage": ""
        },
        "1349": {
          "source": "  consoleLog: function(msg) {",
          "coverage": ""
        },
        "1350": {
          "source": "    if( self.config.do_console_log ) {",
          "coverage": 304
        },
        "1351": {
          "source": "      console.log(msg);",
          "coverage": 303
        },
        "1352": {
          "source": "    }",
          "coverage": ""
        },
        "1353": {
          "source": "  }",
          "coverage": ""
        },
        "1354": {
          "source": "};",
          "coverage": ""
        },
        "1355": {
          "source": "",
          "coverage": ""
        },
        "1356": {
          "source": "(function() {",
          "coverage": 2
        },
        "1357": {
          "source": "  self.config = self.defaults;",
          "coverage": 2
        },
        "1358": {
          "source": "  //Initialse the sync service with default config",
          "coverage": ""
        },
        "1359": {
          "source": "  //self.init({});",
          "coverage": ""
        },
        "1360": {
          "source": "})();",
          "coverage": ""
        },
        "1361": {
          "source": "",
          "coverage": ""
        },
        "1362": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "1363": {
          "source": "  init: self.init,",
          "coverage": ""
        },
        "1364": {
          "source": "  manage: self.manage,",
          "coverage": ""
        },
        "1365": {
          "source": "  notify: self.notify,",
          "coverage": ""
        },
        "1366": {
          "source": "  doList: self.list,",
          "coverage": ""
        },
        "1367": {
          "source": "  doCreate: self.create,",
          "coverage": ""
        },
        "1368": {
          "source": "  doRead: self.read,",
          "coverage": ""
        },
        "1369": {
          "source": "  doUpdate: self.update,",
          "coverage": ""
        },
        "1370": {
          "source": "  doDelete: self['delete'],",
          "coverage": ""
        },
        "1371": {
          "source": "  listCollisions: self.listCollisions,",
          "coverage": ""
        },
        "1372": {
          "source": "  removeCollision: self.removeCollision,",
          "coverage": ""
        },
        "1373": {
          "source": "  getPending : self.getPending,",
          "coverage": ""
        },
        "1374": {
          "source": "  clearPending : self.clearPending,",
          "coverage": ""
        },
        "1375": {
          "source": "  getDataset : self.getDataSet,",
          "coverage": ""
        },
        "1376": {
          "source": "  getQueryParams: self.getQueryParams,",
          "coverage": ""
        },
        "1377": {
          "source": "  setQueryParams: self.setQueryParams,",
          "coverage": ""
        },
        "1378": {
          "source": "  getMetaData: self.getMetaData,",
          "coverage": ""
        },
        "1379": {
          "source": "  setMetaData: self.setMetaData,",
          "coverage": ""
        },
        "1380": {
          "source": "  getConfig: self.getConfig,",
          "coverage": ""
        },
        "1381": {
          "source": "  setConfig: self.setConfig,",
          "coverage": ""
        },
        "1382": {
          "source": "  startSync: self.startSync,",
          "coverage": ""
        },
        "1383": {
          "source": "  stopSync: self.stopSync,",
          "coverage": ""
        },
        "1384": {
          "source": "  doSync: self.doSync,",
          "coverage": ""
        },
        "1385": {
          "source": "  forceSync: self.forceSync,",
          "coverage": ""
        },
        "1386": {
          "source": "  generateHash: self.generateHash,",
          "coverage": ""
        },
        "1387": {
          "source": "  loadDataSet: self.loadDataSet,",
          "coverage": ""
        },
        "1388": {
          "source": "  checkHasCustomSync: self.checkHasCustomSync,",
          "coverage": ""
        },
        "1389": {
          "source": "  clearCache: self.clearCache",
          "coverage": ""
        },
        "1390": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/uuid.js",
      "coverage": 100,
      "hits": 9,
      "misses": 0,
      "sloc": 9,
      "source": {
        "1": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "2": {
          "source": "  createUUID : function () {",
          "coverage": ""
        },
        "3": {
          "source": "    //from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript",
          "coverage": ""
        },
        "4": {
          "source": "    //based on RFC 4122, section 4.4 (Algorithms for creating UUID from truely random pr pseudo-random number)",
          "coverage": ""
        },
        "5": {
          "source": "    var s = [];",
          "coverage": 1
        },
        "6": {
          "source": "    var hexDigitals = \"0123456789ABCDEF\";",
          "coverage": 1
        },
        "7": {
          "source": "    for (var i = 0; i &lt; 32; i++) {",
          "coverage": 1
        },
        "8": {
          "source": "      s[i] = hexDigitals.substr(Math.floor(Math.random() * 0x10), 1);",
          "coverage": 32
        },
        "9": {
          "source": "    }",
          "coverage": ""
        },
        "10": {
          "source": "    s[12] = \"4\";",
          "coverage": 1
        },
        "11": {
          "source": "    s[16] = hexDigitals.substr((s[16] &amp; 0x3) | 0x8, 1);",
          "coverage": 1
        },
        "12": {
          "source": "    var uuid = s.join(\"\");",
          "coverage": 1
        },
        "13": {
          "source": "    return uuid;",
          "coverage": 1
        },
        "14": {
          "source": "  }",
          "coverage": ""
        },
        "15": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/waitForCloud.js",
      "coverage": 84.90566037735849,
      "hits": 45,
      "misses": 8,
      "sloc": 53,
      "source": {
        "1": {
          "source": "var initializer = require(\"./initializer\");",
          "coverage": 2
        },
        "2": {
          "source": "var events = require(\"./events\");",
          "coverage": 2
        },
        "3": {
          "source": "var CloudHost = require(\"./hosts\");",
          "coverage": 2
        },
        "4": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 2
        },
        "5": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "//the cloud configurations",
          "coverage": ""
        },
        "9": {
          "source": "var cloud_host;",
          "coverage": 2
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "var is_initialising = false;",
          "coverage": 2
        },
        "12": {
          "source": "var is_cloud_ready = false;",
          "coverage": 2
        },
        "13": {
          "source": "var init_error = null;",
          "coverage": 2
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "var ready = function(cb){",
          "coverage": 2
        },
        "17": {
          "source": "  if(is_cloud_ready){",
          "coverage": 58
        },
        "18": {
          "source": "    return cb(null, {host: getCloudHostUrl()});",
          "coverage": 49
        },
        "19": {
          "source": "  } else {",
          "coverage": ""
        },
        "20": {
          "source": "    events.once(constants.INIT_EVENT, function(err, host){",
          "coverage": 9
        },
        "21": {
          "source": "      return cb(err, host);",
          "coverage": 9
        },
        "22": {
          "source": "    });",
          "coverage": ""
        },
        "23": {
          "source": "    if(!is_initialising){",
          "coverage": 9
        },
        "24": {
          "source": "      is_initialising = true;",
          "coverage": 9
        },
        "25": {
          "source": "      var fhinit = function(){",
          "coverage": 9
        },
        "26": {
          "source": "        initializer.init(function(err, initRes){",
          "coverage": 9
        },
        "27": {
          "source": "          is_initialising = false;",
          "coverage": 9
        },
        "28": {
          "source": "          if(err){",
          "coverage": 9
        },
        "29": {
          "source": "            init_error = err;",
          "coverage": 0
        },
        "30": {
          "source": "            return events.emit(constants.INIT_EVENT, err);",
          "coverage": 0
        },
        "31": {
          "source": "          } else {",
          "coverage": ""
        },
        "32": {
          "source": "            init_error = null;",
          "coverage": 9
        },
        "33": {
          "source": "            is_cloud_ready = true;",
          "coverage": 9
        },
        "34": {
          "source": "            cloud_host = new CloudHost(initRes.cloud);",
          "coverage": 9
        },
        "35": {
          "source": "            return events.emit(constants.INIT_EVENT, null, {host: getCloudHostUrl()});",
          "coverage": 9
        },
        "36": {
          "source": "          }",
          "coverage": ""
        },
        "37": {
          "source": "        });",
          "coverage": ""
        },
        "38": {
          "source": "      }",
          "coverage": ""
        },
        "39": {
          "source": "      if(typeof window.cordova !== \"undefined\" || typeof window.phonegap !== \"undefined\"){",
          "coverage": 9
        },
        "40": {
          "source": "        //if we are running inside cordova/phonegap, only init after device is ready to ensure the device id is the right one",
          "coverage": ""
        },
        "41": {
          "source": "        document.addEventListener(\"deviceready\", fhinit, false);",
          "coverage": 0
        },
        "42": {
          "source": "      } else {",
          "coverage": ""
        },
        "43": {
          "source": "        fhinit();",
          "coverage": 9
        },
        "44": {
          "source": "      }",
          "coverage": ""
        },
        "45": {
          "source": "    }",
          "coverage": ""
        },
        "46": {
          "source": "  }",
          "coverage": ""
        },
        "47": {
          "source": "}",
          "coverage": ""
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "var getCloudHost = function(){",
          "coverage": 2
        },
        "50": {
          "source": "  return cloud_host;",
          "coverage": 47
        },
        "51": {
          "source": "}",
          "coverage": ""
        },
        "52": {
          "source": "",
          "coverage": ""
        },
        "53": {
          "source": "var getCloudHostUrl = function(){",
          "coverage": 2
        },
        "54": {
          "source": "  if(typeof cloud_host !== \"undefined\"){",
          "coverage": 65
        },
        "55": {
          "source": "    var appProps = require(\"./appProps\").getAppProps();",
          "coverage": 65
        },
        "56": {
          "source": "    return cloud_host.getHost(appProps.mode);",
          "coverage": 65
        },
        "57": {
          "source": "  } else {",
          "coverage": ""
        },
        "58": {
          "source": "    return undefined;",
          "coverage": 0
        },
        "59": {
          "source": "  }",
          "coverage": ""
        },
        "60": {
          "source": "}",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "var isReady = function(){",
          "coverage": 2
        },
        "63": {
          "source": "  return is_cloud_ready;",
          "coverage": 4
        },
        "64": {
          "source": "}",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "var getInitError = function(){",
          "coverage": 2
        },
        "67": {
          "source": "  return init_error;",
          "coverage": 0
        },
        "68": {
          "source": "}",
          "coverage": ""
        },
        "69": {
          "source": "",
          "coverage": ""
        },
        "70": {
          "source": "//for test",
          "coverage": ""
        },
        "71": {
          "source": "var reset = function(){",
          "coverage": 2
        },
        "72": {
          "source": "  is_cloud_ready = false;",
          "coverage": 7
        },
        "73": {
          "source": "  is_initialising = false;",
          "coverage": 7
        },
        "74": {
          "source": "  cloud_host = undefined;",
          "coverage": 7
        },
        "75": {
          "source": "  init_error = undefined;",
          "coverage": 7
        },
        "76": {
          "source": "  ready(function(){",
          "coverage": 7
        },
        "77": {
          "source": "    ",
          "coverage": ""
        },
        "78": {
          "source": "  });",
          "coverage": ""
        },
        "79": {
          "source": "}",
          "coverage": ""
        },
        "80": {
          "source": "",
          "coverage": ""
        },
        "81": {
          "source": "ready(function(error, host){",
          "coverage": 2
        },
        "82": {
          "source": "  if(error){",
          "coverage": 2
        },
        "83": {
          "source": "    if(error.message !== \"app_config_missing\"){",
          "coverage": 0
        },
        "84": {
          "source": "      logger.error(\"Failed to initialise fh.\");",
          "coverage": 0
        },
        "85": {
          "source": "    } else {",
          "coverage": ""
        },
        "86": {
          "source": "      logger.info(\"No fh config file\");",
          "coverage": 0
        },
        "87": {
          "source": "    }",
          "coverage": ""
        },
        "88": {
          "source": "  } else {",
          "coverage": ""
        },
        "89": {
          "source": "    logger.info(\"fh cloud is ready\");",
          "coverage": 2
        },
        "90": {
          "source": "  }",
          "coverage": ""
        },
        "91": {
          "source": "});",
          "coverage": ""
        },
        "92": {
          "source": "",
          "coverage": ""
        },
        "93": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "94": {
          "source": "  ready: ready,",
          "coverage": ""
        },
        "95": {
          "source": "  isReady: isReady,",
          "coverage": ""
        },
        "96": {
          "source": "  getCloudHost: getCloudHost,",
          "coverage": ""
        },
        "97": {
          "source": "  getCloudHostUrl: getCloudHostUrl,",
          "coverage": ""
        },
        "98": {
          "source": "  getInitError: getInitError,",
          "coverage": ""
        },
        "99": {
          "source": "  reset: reset",
          "coverage": ""
        },
        "100": {
          "source": "}",
          "coverage": ""
        }
      }
    }
  ],
  "stats": {
    "suites": 13,
    "tests": 47,
    "passes": 47,
    "pending": 0,
    "failures": 0,
    "start": "2014-10-28T10:22:14.211Z",
    "end": "2014-10-28T10:22:33.587Z",
    "duration": 19376
  },
  "tests": [
    {
      "title": "should call the success callback",
      "fullTitle": "test ajax module should call the success callback",
      "duration": 30
    },
    {
      "title": "should call the error callback",
      "fullTitle": "test ajax module should call the error callback",
      "duration": 7
    },
    {
      "title": "AES keygen",
      "fullTitle": "test security APIs AES keygen",
      "duration": 4
    },
    {
      "title": "AES encrypt/decrypt",
      "fullTitle": "test security APIs AES encrypt/decrypt",
      "duration": 5
    },
    {
      "title": "RSA encrypt",
      "fullTitle": "test security APIs RSA encrypt",
      "duration": 22
    },
    {
      "title": "hash",
      "fullTitle": "test security APIs hash",
      "duration": 6
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test all cloud related test auto initialisation should emit fhinit events",
      "duration": 11
    },
    {
      "title": "act call should success",
      "fullTitle": "test all cloud related test act/cloud call act call should success",
      "duration": 16
    },
    {
      "title": "should work with cloud call",
      "fullTitle": "test all cloud related test act/cloud call should work with cloud call",
      "duration": 13
    },
    {
      "title": "auth call should work",
      "fullTitle": "test all cloud related test auth call auth call should work",
      "duration": 8
    },
    {
      "title": "mbaas call should call",
      "fullTitle": "test all cloud related test mbaas call mbaas call should call",
      "duration": 7
    },
    {
      "title": "$fh.init should initialise the app",
      "fullTitle": "test legacy app props/app init test legacy app init $fh.init should initialise the app",
      "duration": 6
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test legacy app props/app init test auto initialisation should emit fhinit events",
      "duration": 12
    },
    {
      "title": "sync.manage",
      "fullTitle": "test sync framework offline sync.manage",
      "duration": 1
    },
    {
      "title": "sync.setConfig/getConfig",
      "fullTitle": "test sync framework offline sync.setConfig/getConfig",
      "duration": 0
    },
    {
      "title": "sync.getQueryParams/setQueryParams",
      "fullTitle": "test sync framework offline sync.getQueryParams/setQueryParams",
      "duration": 1
    },
    {
      "title": "sync.getMetaData/setMetaData",
      "fullTitle": "test sync framework offline sync.getMetaData/setMetaData",
      "duration": 1
    },
    {
      "title": "sync.notify",
      "fullTitle": "test sync framework offline sync.notify",
      "duration": 604
    },
    {
      "title": "sync.doCreate",
      "fullTitle": "test sync framework offline sync.doCreate",
      "duration": 31
    },
    {
      "title": "sync.doUpdate",
      "fullTitle": "test sync framework offline sync.doUpdate",
      "duration": 38
    },
    {
      "title": "sync.doList success",
      "fullTitle": "test sync framework offline sync.doList success",
      "duration": 4
    },
    {
      "title": "sync.doList fail",
      "fullTitle": "test sync framework offline sync.doList fail",
      "duration": 1
    },
    {
      "title": "sync.doRead success",
      "fullTitle": "test sync framework offline sync.doRead success",
      "duration": 1
    },
    {
      "title": "sync.doRead fail",
      "fullTitle": "test sync framework offline sync.doRead fail",
      "duration": 0
    },
    {
      "title": "sync.getPending",
      "fullTitle": "test sync framework offline sync.getPending",
      "duration": 0
    },
    {
      "title": "sync.stopSync/startSync",
      "fullTitle": "test sync framework offline sync.stopSync/startSync",
      "duration": 2011
    },
    {
      "title": "sync.doDelete",
      "fullTitle": "test sync framework offline sync.doDelete",
      "duration": 5
    },
    {
      "title": "sync.doSync",
      "fullTitle": "test sync framework offline sync.doSync",
      "duration": 512
    },
    {
      "title": "sync.forceSync",
      "fullTitle": "test sync framework offline sync.forceSync",
      "duration": 507
    },
    {
      "title": "test failures",
      "fullTitle": "test sync framework offline test failures",
      "duration": 3
    },
    {
      "title": "load initial dataset from remote",
      "fullTitle": "test sync framework online with fake XMLHttpRequest load initial dataset from remote",
      "duration": 606
    },
    {
      "title": "try create a new record",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try create a new record",
      "duration": 1221
    },
    {
      "title": "try to update an existing record ",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try to update an existing record ",
      "duration": 2446
    },
    {
      "title": "test create & delete",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create & delete",
      "duration": 5
    },
    {
      "title": "test remote data change",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test remote data change",
      "duration": 604
    },
    {
      "title": "test delete existing data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test delete existing data",
      "duration": 608
    },
    {
      "title": "test update pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test update pending data",
      "duration": 608
    },
    {
      "title": "test create pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create pending data",
      "duration": 607
    },
    {
      "title": "test updateNewDataFromInFlight create/update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromInFlight create/update",
      "duration": 1823
    },
    {
      "title": "test updateNewDataFromPending",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromPending",
      "duration": 1212
    },
    {
      "title": "test updateCrashedInFlightFromNewData create",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData create",
      "duration": 3051
    },
    {
      "title": "test updateCrashedInFlightFromNewData update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData update",
      "duration": 1210
    },
    {
      "title": "test updateCrashedInFlightFromNewData resend",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData resend",
      "duration": 1217
    },
    {
      "title": "test listCollisions",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test listCollisions",
      "duration": 12
    },
    {
      "title": "test removeCollision",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test removeCollision",
      "duration": 6
    },
    {
      "title": "test checkHasCustomSync",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test checkHasCustomSync",
      "duration": 9
    },
    {
      "title": "should extend a function",
      "fullTitle": "test forms utils module should extend a function",
      "duration": 0
    }
  ],
  "failures": [],
  "passes": [
    {
      "title": "should call the success callback",
      "fullTitle": "test ajax module should call the success callback",
      "duration": 30
    },
    {
      "title": "should call the error callback",
      "fullTitle": "test ajax module should call the error callback",
      "duration": 7
    },
    {
      "title": "AES keygen",
      "fullTitle": "test security APIs AES keygen",
      "duration": 4
    },
    {
      "title": "AES encrypt/decrypt",
      "fullTitle": "test security APIs AES encrypt/decrypt",
      "duration": 5
    },
    {
      "title": "RSA encrypt",
      "fullTitle": "test security APIs RSA encrypt",
      "duration": 22
    },
    {
      "title": "hash",
      "fullTitle": "test security APIs hash",
      "duration": 6
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test all cloud related test auto initialisation should emit fhinit events",
      "duration": 11
    },
    {
      "title": "act call should success",
      "fullTitle": "test all cloud related test act/cloud call act call should success",
      "duration": 16
    },
    {
      "title": "should work with cloud call",
      "fullTitle": "test all cloud related test act/cloud call should work with cloud call",
      "duration": 13
    },
    {
      "title": "auth call should work",
      "fullTitle": "test all cloud related test auth call auth call should work",
      "duration": 8
    },
    {
      "title": "mbaas call should call",
      "fullTitle": "test all cloud related test mbaas call mbaas call should call",
      "duration": 7
    },
    {
      "title": "$fh.init should initialise the app",
      "fullTitle": "test legacy app props/app init test legacy app init $fh.init should initialise the app",
      "duration": 6
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test legacy app props/app init test auto initialisation should emit fhinit events",
      "duration": 12
    },
    {
      "title": "sync.manage",
      "fullTitle": "test sync framework offline sync.manage",
      "duration": 1
    },
    {
      "title": "sync.setConfig/getConfig",
      "fullTitle": "test sync framework offline sync.setConfig/getConfig",
      "duration": 0
    },
    {
      "title": "sync.getQueryParams/setQueryParams",
      "fullTitle": "test sync framework offline sync.getQueryParams/setQueryParams",
      "duration": 1
    },
    {
      "title": "sync.getMetaData/setMetaData",
      "fullTitle": "test sync framework offline sync.getMetaData/setMetaData",
      "duration": 1
    },
    {
      "title": "sync.notify",
      "fullTitle": "test sync framework offline sync.notify",
      "duration": 604
    },
    {
      "title": "sync.doCreate",
      "fullTitle": "test sync framework offline sync.doCreate",
      "duration": 31
    },
    {
      "title": "sync.doUpdate",
      "fullTitle": "test sync framework offline sync.doUpdate",
      "duration": 38
    },
    {
      "title": "sync.doList success",
      "fullTitle": "test sync framework offline sync.doList success",
      "duration": 4
    },
    {
      "title": "sync.doList fail",
      "fullTitle": "test sync framework offline sync.doList fail",
      "duration": 1
    },
    {
      "title": "sync.doRead success",
      "fullTitle": "test sync framework offline sync.doRead success",
      "duration": 1
    },
    {
      "title": "sync.doRead fail",
      "fullTitle": "test sync framework offline sync.doRead fail",
      "duration": 0
    },
    {
      "title": "sync.getPending",
      "fullTitle": "test sync framework offline sync.getPending",
      "duration": 0
    },
    {
      "title": "sync.stopSync/startSync",
      "fullTitle": "test sync framework offline sync.stopSync/startSync",
      "duration": 2011
    },
    {
      "title": "sync.doDelete",
      "fullTitle": "test sync framework offline sync.doDelete",
      "duration": 5
    },
    {
      "title": "sync.doSync",
      "fullTitle": "test sync framework offline sync.doSync",
      "duration": 512
    },
    {
      "title": "sync.forceSync",
      "fullTitle": "test sync framework offline sync.forceSync",
      "duration": 507
    },
    {
      "title": "test failures",
      "fullTitle": "test sync framework offline test failures",
      "duration": 3
    },
    {
      "title": "load initial dataset from remote",
      "fullTitle": "test sync framework online with fake XMLHttpRequest load initial dataset from remote",
      "duration": 606
    },
    {
      "title": "try create a new record",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try create a new record",
      "duration": 1221
    },
    {
      "title": "try to update an existing record ",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try to update an existing record ",
      "duration": 2446
    },
    {
      "title": "test create & delete",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create & delete",
      "duration": 5
    },
    {
      "title": "test remote data change",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test remote data change",
      "duration": 604
    },
    {
      "title": "test delete existing data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test delete existing data",
      "duration": 608
    },
    {
      "title": "test update pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test update pending data",
      "duration": 608
    },
    {
      "title": "test create pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create pending data",
      "duration": 607
    },
    {
      "title": "test updateNewDataFromInFlight create/update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromInFlight create/update",
      "duration": 1823
    },
    {
      "title": "test updateNewDataFromPending",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromPending",
      "duration": 1212
    },
    {
      "title": "test updateCrashedInFlightFromNewData create",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData create",
      "duration": 3051
    },
    {
      "title": "test updateCrashedInFlightFromNewData update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData update",
      "duration": 1210
    },
    {
      "title": "test updateCrashedInFlightFromNewData resend",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData resend",
      "duration": 1217
    },
    {
      "title": "test listCollisions",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test listCollisions",
      "duration": 12
    },
    {
      "title": "test removeCollision",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test removeCollision",
      "duration": 6
    },
    {
      "title": "test checkHasCustomSync",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test checkHasCustomSync",
      "duration": 9
    },
    {
      "title": "should extend a function",
      "fullTitle": "test forms utils module should extend a function",
      "duration": 0
    }
  ]
}