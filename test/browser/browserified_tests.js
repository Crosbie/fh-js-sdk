(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*
 CryptoJS v3.1.2
 core.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
/**
 * CryptoJS core components.
 */
var CryptoJS = CryptoJS || (function (Math, undefined) {
  /**
   * CryptoJS namespace.
   */
  var C = {};

  /**
   * Library namespace.
   */
  var C_lib = C.lib = {};

  /**
   * Base object for prototypal inheritance.
   */
  var Base = C_lib.Base = (function () {
    function F() {}

    return {
      /**
       * Creates a new object that inherits from this object.
       *
       * @param {Object} overrides Properties to copy into the new object.
       *
       * @return {Object} The new object.
       *
       * @static
       *
       * @example
       *
       *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
       */
      extend: function (overrides) {
        // Spawn
        F.prototype = this;
        var subtype = new F();

        // Augment
        if (overrides) {
          subtype.mixIn(overrides);
        }

        // Create default initializer
        if (!subtype.hasOwnProperty('init')) {
          subtype.init = function () {
            subtype.$super.init.apply(this, arguments);
          };
        }

        // Initializer's prototype is the subtype object
        subtype.init.prototype = subtype;

        // Reference supertype
        subtype.$super = this;

        return subtype;
      },

      /**
       * Extends this object and runs the init method.
       * Arguments to create() will be passed to init().
       *
       * @return {Object} The new object.
       *
       * @static
       *
       * @example
       *
       *     var instance = MyType.create();
       */
      create: function () {
        var instance = this.extend();
        instance.init.apply(instance, arguments);

        return instance;
      },

      /**
       * Initializes a newly created object.
       * Override this method to add some logic when your objects are created.
       *
       * @example
       *
       *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
       */
      init: function () {
      },

      /**
       * Copies properties into this object.
       *
       * @param {Object} properties The properties to mix in.
       *
       * @example
       *
       *     MyType.mixIn({
             *         field: 'value'
             *     });
       */
      mixIn: function (properties) {
        for (var propertyName in properties) {
          if (properties.hasOwnProperty(propertyName)) {
            this[propertyName] = properties[propertyName];
          }
        }

        // IE won't copy toString using the loop above
        if (properties.hasOwnProperty('toString')) {
          this.toString = properties.toString;
        }
      },

      /**
       * Creates a copy of this object.
       *
       * @return {Object} The clone.
       *
       * @example
       *
       *     var clone = instance.clone();
       */
      clone: function () {
        return this.init.prototype.extend(this);
      }
    };
  }());

  /**
   * An array of 32-bit words.
   *
   * @property {Array} words The array of 32-bit words.
   * @property {number} sigBytes The number of significant bytes in this word array.
   */
  var WordArray = C_lib.WordArray = Base.extend({
    /**
     * Initializes a newly created word array.
     *
     * @param {Array} words (Optional) An array of 32-bit words.
     * @param {number} sigBytes (Optional) The number of significant bytes in the words.
     *
     * @example
     *
     *     var wordArray = CryptoJS.lib.WordArray.create();
     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
     */
    init: function (words, sigBytes) {
      words = this.words = words || [];

      if (sigBytes != undefined) {
        this.sigBytes = sigBytes;
      } else {
        this.sigBytes = words.length * 4;
      }
    },

    /**
     * Converts this word array to a string.
     *
     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
     *
     * @return {string} The stringified word array.
     *
     * @example
     *
     *     var string = wordArray + '';
     *     var string = wordArray.toString();
     *     var string = wordArray.toString(CryptoJS.enc.Utf8);
     */
    toString: function (encoder) {
      return (encoder || Hex).stringify(this);
    },

    /**
     * Concatenates a word array to this word array.
     *
     * @param {WordArray} wordArray The word array to append.
     *
     * @return {WordArray} This word array.
     *
     * @example
     *
     *     wordArray1.concat(wordArray2);
     */
    concat: function (wordArray) {
      // Shortcuts
      var thisWords = this.words;
      var thatWords = wordArray.words;
      var thisSigBytes = this.sigBytes;
      var thatSigBytes = wordArray.sigBytes;

      // Clamp excess bits
      this.clamp();

      // Concat
      if (thisSigBytes % 4) {
        // Copy one byte at a time
        for (var i = 0; i < thatSigBytes; i++) {
          var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
          thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
        }
      } else if (thatWords.length > 0xffff) {
        // Copy one word at a time
        for (var i = 0; i < thatSigBytes; i += 4) {
          thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
        }
      } else {
        // Copy all words at once
        thisWords.push.apply(thisWords, thatWords);
      }
      this.sigBytes += thatSigBytes;

      // Chainable
      return this;
    },

    /**
     * Removes insignificant bits.
     *
     * @example
     *
     *     wordArray.clamp();
     */
    clamp: function () {
      // Shortcuts
      var words = this.words;
      var sigBytes = this.sigBytes;

      // Clamp
      words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
      words.length = Math.ceil(sigBytes / 4);
    },

    /**
     * Creates a copy of this word array.
     *
     * @return {WordArray} The clone.
     *
     * @example
     *
     *     var clone = wordArray.clone();
     */
    clone: function () {
      var clone = Base.clone.call(this);
      clone.words = this.words.slice(0);

      return clone;
    },

    /**
     * Creates a word array filled with random bytes.
     *
     * @param {number} nBytes The number of random bytes to generate.
     *
     * @return {WordArray} The random word array.
     *
     * @static
     *
     * @example
     *
     *     var wordArray = CryptoJS.lib.WordArray.random(16);
     */
    random: function (nBytes) {
      var words = [];
      for (var i = 0; i < nBytes; i += 4) {
        words.push((Math.random() * 0x100000000) | 0);
      }

      return new WordArray.init(words, nBytes);
    }
  });

  /**
   * Encoder namespace.
   */
  var C_enc = C.enc = {};

  /**
   * Hex encoding strategy.
   */
  var Hex = C_enc.Hex = {
    /**
     * Converts a word array to a hex string.
     *
     * @param {WordArray} wordArray The word array.
     *
     * @return {string} The hex string.
     *
     * @static
     *
     * @example
     *
     *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
     */
    stringify: function (wordArray) {
      // Shortcuts
      var words = wordArray.words;
      var sigBytes = wordArray.sigBytes;

      // Convert
      var hexChars = [];
      for (var i = 0; i < sigBytes; i++) {
        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
        hexChars.push((bite >>> 4).toString(16));
        hexChars.push((bite & 0x0f).toString(16));
      }

      return hexChars.join('');
    },

    /**
     * Converts a hex string to a word array.
     *
     * @param {string} hexStr The hex string.
     *
     * @return {WordArray} The word array.
     *
     * @static
     *
     * @example
     *
     *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
     */
    parse: function (hexStr) {
      // Shortcut
      var hexStrLength = hexStr.length;

      // Convert
      var words = [];
      for (var i = 0; i < hexStrLength; i += 2) {
        words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
      }

      return new WordArray.init(words, hexStrLength / 2);
    }
  };

  /**
   * Latin1 encoding strategy.
   */
  var Latin1 = C_enc.Latin1 = {
    /**
     * Converts a word array to a Latin1 string.
     *
     * @param {WordArray} wordArray The word array.
     *
     * @return {string} The Latin1 string.
     *
     * @static
     *
     * @example
     *
     *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
     */
    stringify: function (wordArray) {
      // Shortcuts
      var words = wordArray.words;
      var sigBytes = wordArray.sigBytes;

      // Convert
      var latin1Chars = [];
      for (var i = 0; i < sigBytes; i++) {
        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
        latin1Chars.push(String.fromCharCode(bite));
      }

      return latin1Chars.join('');
    },

    /**
     * Converts a Latin1 string to a word array.
     *
     * @param {string} latin1Str The Latin1 string.
     *
     * @return {WordArray} The word array.
     *
     * @static
     *
     * @example
     *
     *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
     */
    parse: function (latin1Str) {
      // Shortcut
      var latin1StrLength = latin1Str.length;

      // Convert
      var words = [];
      for (var i = 0; i < latin1StrLength; i++) {
        words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
      }

      return new WordArray.init(words, latin1StrLength);
    }
  };

  /**
   * UTF-8 encoding strategy.
   */
  var Utf8 = C_enc.Utf8 = {
    /**
     * Converts a word array to a UTF-8 string.
     *
     * @param {WordArray} wordArray The word array.
     *
     * @return {string} The UTF-8 string.
     *
     * @static
     *
     * @example
     *
     *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
     */
    stringify: function (wordArray) {
      try {
        return decodeURIComponent(escape(Latin1.stringify(wordArray)));
      } catch (e) {
        throw new Error('Malformed UTF-8 data');
      }
    },

    /**
     * Converts a UTF-8 string to a word array.
     *
     * @param {string} utf8Str The UTF-8 string.
     *
     * @return {WordArray} The word array.
     *
     * @static
     *
     * @example
     *
     *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
     */
    parse: function (utf8Str) {
      return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
    }
  };

  /**
   * Abstract buffered block algorithm template.
   *
   * The property blockSize must be implemented in a concrete subtype.
   *
   * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
   */
  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
    /**
     * Resets this block algorithm's data buffer to its initial state.
     *
     * @example
     *
     *     bufferedBlockAlgorithm.reset();
     */
    reset: function () {
      // Initial values
      this._data = new WordArray.init();
      this._nDataBytes = 0;
    },

    /**
     * Adds new data to this block algorithm's buffer.
     *
     * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
     *
     * @example
     *
     *     bufferedBlockAlgorithm._append('data');
     *     bufferedBlockAlgorithm._append(wordArray);
     */
    _append: function (data) {
      // Convert string to WordArray, else assume WordArray already
      if (typeof data == 'string') {
        data = Utf8.parse(data);
      }

      // Append
      this._data.concat(data);
      this._nDataBytes += data.sigBytes;
    },

    /**
     * Processes available data blocks.
     *
     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
     *
     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
     *
     * @return {WordArray} The processed data.
     *
     * @example
     *
     *     var processedData = bufferedBlockAlgorithm._process();
     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
     */
    _process: function (doFlush) {
      // Shortcuts
      var data = this._data;
      var dataWords = data.words;
      var dataSigBytes = data.sigBytes;
      var blockSize = this.blockSize;
      var blockSizeBytes = blockSize * 4;

      // Count blocks ready
      var nBlocksReady = dataSigBytes / blockSizeBytes;
      if (doFlush) {
        // Round up to include partial blocks
        nBlocksReady = Math.ceil(nBlocksReady);
      } else {
        // Round down to include only full blocks,
        // less the number of blocks that must remain in the buffer
        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
      }

      // Count words ready
      var nWordsReady = nBlocksReady * blockSize;

      // Count bytes ready
      var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

      // Process blocks
      if (nWordsReady) {
        for (var offset = 0; offset < nWordsReady; offset += blockSize) {
          // Perform concrete-algorithm logic
          this._doProcessBlock(dataWords, offset);
        }

        // Remove processed words
        var processedWords = dataWords.splice(0, nWordsReady);
        data.sigBytes -= nBytesReady;
      }

      // Return processed words
      return new WordArray.init(processedWords, nBytesReady);
    },

    /**
     * Creates a copy of this object.
     *
     * @return {Object} The clone.
     *
     * @example
     *
     *     var clone = bufferedBlockAlgorithm.clone();
     */
    clone: function () {
      var clone = Base.clone.call(this);
      clone._data = this._data.clone();

      return clone;
    },

    _minBufferSize: 0
  });

  /**
   * Abstract hasher template.
   *
   * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
   */
  var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
    /**
     * Configuration options.
     */
    cfg: Base.extend(),

    /**
     * Initializes a newly created hasher.
     *
     * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
     *
     * @example
     *
     *     var hasher = CryptoJS.algo.SHA256.create();
     */
    init: function (cfg) {
      // Apply config defaults
      this.cfg = this.cfg.extend(cfg);

      // Set initial values
      this.reset();
    },

    /**
     * Resets this hasher to its initial state.
     *
     * @example
     *
     *     hasher.reset();
     */
    reset: function () {
      // Reset data buffer
      BufferedBlockAlgorithm.reset.call(this);

      // Perform concrete-hasher logic
      this._doReset();
    },

    /**
     * Updates this hasher with a message.
     *
     * @param {WordArray|string} messageUpdate The message to append.
     *
     * @return {Hasher} This hasher.
     *
     * @example
     *
     *     hasher.update('message');
     *     hasher.update(wordArray);
     */
    update: function (messageUpdate) {
      // Append
      this._append(messageUpdate);

      // Update the hash
      this._process();

      // Chainable
      return this;
    },

    /**
     * Finalizes the hash computation.
     * Note that the finalize operation is effectively a destructive, read-once operation.
     *
     * @param {WordArray|string} messageUpdate (Optional) A final message update.
     *
     * @return {WordArray} The hash.
     *
     * @example
     *
     *     var hash = hasher.finalize();
     *     var hash = hasher.finalize('message');
     *     var hash = hasher.finalize(wordArray);
     */
    finalize: function (messageUpdate) {
      // Final message update
      if (messageUpdate) {
        this._append(messageUpdate);
      }

      // Perform concrete-hasher logic
      var hash = this._doFinalize();

      return hash;
    },

    blockSize: 512/32,

    /**
     * Creates a shortcut function to a hasher's object interface.
     *
     * @param {Hasher} hasher The hasher to create a helper for.
     *
     * @return {Function} The shortcut function.
     *
     * @static
     *
     * @example
     *
     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
     */
    _createHelper: function (hasher) {
      return function (message, cfg) {
        return new hasher.init(cfg).finalize(message);
      };
    },

    /**
     * Creates a shortcut function to the HMAC's object interface.
     *
     * @param {Hasher} hasher The hasher to use in this HMAC helper.
     *
     * @return {Function} The shortcut function.
     *
     * @static
     *
     * @example
     *
     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
     */
    _createHmacHelper: function (hasher) {
      return function (message, key) {
        return new C_algo.HMAC.init(hasher, key).finalize(message);
      };
    }
  });

  /**
   * Algorithm namespace.
   */
  var C_algo = C.algo = {};

  return C;
}(Math));
/*
 CryptoJS v3.1.2
 enc-base64.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function () {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var WordArray = C_lib.WordArray;
  var C_enc = C.enc;

  /**
   * Base64 encoding strategy.
   */
  var Base64 = C_enc.Base64 = {
    /**
     * Converts a word array to a Base64 string.
     *
     * @param {WordArray} wordArray The word array.
     *
     * @return {string} The Base64 string.
     *
     * @static
     *
     * @example
     *
     *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
     */
    stringify: function (wordArray) {
      // Shortcuts
      var words = wordArray.words;
      var sigBytes = wordArray.sigBytes;
      var map = this._map;

      // Clamp excess bits
      wordArray.clamp();

      // Convert
      var base64Chars = [];
      for (var i = 0; i < sigBytes; i += 3) {
        var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
        var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
        var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

        var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

        for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
          base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
        }
      }

      // Add padding
      var paddingChar = map.charAt(64);
      if (paddingChar) {
        while (base64Chars.length % 4) {
          base64Chars.push(paddingChar);
        }
      }

      return base64Chars.join('');
    },

    /**
     * Converts a Base64 string to a word array.
     *
     * @param {string} base64Str The Base64 string.
     *
     * @return {WordArray} The word array.
     *
     * @static
     *
     * @example
     *
     *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
     */
    parse: function (base64Str) {
      // Shortcuts
      var base64StrLength = base64Str.length;
      var map = this._map;

      // Ignore padding
      var paddingChar = map.charAt(64);
      if (paddingChar) {
        var paddingIndex = base64Str.indexOf(paddingChar);
        if (paddingIndex != -1) {
          base64StrLength = paddingIndex;
        }
      }

      // Convert
      var words = [];
      var nBytes = 0;
      for (var i = 0; i < base64StrLength; i++) {
        if (i % 4) {
          var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);
          var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);
          words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
          nBytes++;
        }
      }

      return WordArray.create(words, nBytes);
    },

    _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
  };
}());
/*
 CryptoJS v3.1.2
 cipher-core
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
/**
 * Cipher core components.
 */
CryptoJS.lib.Cipher || (function (undefined) {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var Base = C_lib.Base;
  var WordArray = C_lib.WordArray;
  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
  var C_enc = C.enc;
  var Utf8 = C_enc.Utf8;
  var Base64 = C_enc.Base64;
  var C_algo = C.algo;
  var EvpKDF = C_algo.EvpKDF;

  /**
   * Abstract base cipher template.
   *
   * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
   * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
   * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
   * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
   */
  var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
    /**
     * Configuration options.
     *
     * @property {WordArray} iv The IV to use for this operation.
     */
    cfg: Base.extend(),

    /**
     * Creates this cipher in encryption mode.
     *
     * @param {WordArray} key The key.
     * @param {Object} cfg (Optional) The configuration options to use for this operation.
     *
     * @return {Cipher} A cipher instance.
     *
     * @static
     *
     * @example
     *
     *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
     */
    createEncryptor: function (key, cfg) {
      return this.create(this._ENC_XFORM_MODE, key, cfg);
    },

    /**
     * Creates this cipher in decryption mode.
     *
     * @param {WordArray} key The key.
     * @param {Object} cfg (Optional) The configuration options to use for this operation.
     *
     * @return {Cipher} A cipher instance.
     *
     * @static
     *
     * @example
     *
     *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
     */
    createDecryptor: function (key, cfg) {
      return this.create(this._DEC_XFORM_MODE, key, cfg);
    },

    /**
     * Initializes a newly created cipher.
     *
     * @param {number} xformMode Either the encryption or decryption transormation mode constant.
     * @param {WordArray} key The key.
     * @param {Object} cfg (Optional) The configuration options to use for this operation.
     *
     * @example
     *
     *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
     */
    init: function (xformMode, key, cfg) {
      // Apply config defaults
      this.cfg = this.cfg.extend(cfg);

      // Store transform mode and key
      this._xformMode = xformMode;
      this._key = key;

      // Set initial values
      this.reset();
    },

    /**
     * Resets this cipher to its initial state.
     *
     * @example
     *
     *     cipher.reset();
     */
    reset: function () {
      // Reset data buffer
      BufferedBlockAlgorithm.reset.call(this);

      // Perform concrete-cipher logic
      this._doReset();
    },

    /**
     * Adds data to be encrypted or decrypted.
     *
     * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
     *
     * @return {WordArray} The data after processing.
     *
     * @example
     *
     *     var encrypted = cipher.process('data');
     *     var encrypted = cipher.process(wordArray);
     */
    process: function (dataUpdate) {
      // Append
      this._append(dataUpdate);

      // Process available blocks
      return this._process();
    },

    /**
     * Finalizes the encryption or decryption process.
     * Note that the finalize operation is effectively a destructive, read-once operation.
     *
     * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
     *
     * @return {WordArray} The data after final processing.
     *
     * @example
     *
     *     var encrypted = cipher.finalize();
     *     var encrypted = cipher.finalize('data');
     *     var encrypted = cipher.finalize(wordArray);
     */
    finalize: function (dataUpdate) {
      // Final data update
      if (dataUpdate) {
        this._append(dataUpdate);
      }

      // Perform concrete-cipher logic
      var finalProcessedData = this._doFinalize();

      return finalProcessedData;
    },

    keySize: 128/32,

    ivSize: 128/32,

    _ENC_XFORM_MODE: 1,

    _DEC_XFORM_MODE: 2,

    /**
     * Creates shortcut functions to a cipher's object interface.
     *
     * @param {Cipher} cipher The cipher to create a helper for.
     *
     * @return {Object} An object with encrypt and decrypt shortcut functions.
     *
     * @static
     *
     * @example
     *
     *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
     */
    _createHelper: (function () {
      function selectCipherStrategy(key) {
        if (typeof key == 'string') {
          return PasswordBasedCipher;
        } else {
          return SerializableCipher;
        }
      }

      return function (cipher) {
        return {
          encrypt: function (message, key, cfg) {
            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
          },

          decrypt: function (ciphertext, key, cfg) {
            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
          }
        };
      };
    }())
  });

  /**
   * Abstract base stream cipher template.
   *
   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
   */
  var StreamCipher = C_lib.StreamCipher = Cipher.extend({
    _doFinalize: function () {
      // Process partial blocks
      var finalProcessedBlocks = this._process(!!'flush');

      return finalProcessedBlocks;
    },

    blockSize: 1
  });

  /**
   * Mode namespace.
   */
  var C_mode = C.mode = {};

  /**
   * Abstract base block cipher mode template.
   */
  var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
    /**
     * Creates this mode for encryption.
     *
     * @param {Cipher} cipher A block cipher instance.
     * @param {Array} iv The IV words.
     *
     * @static
     *
     * @example
     *
     *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
     */
    createEncryptor: function (cipher, iv) {
      return this.Encryptor.create(cipher, iv);
    },

    /**
     * Creates this mode for decryption.
     *
     * @param {Cipher} cipher A block cipher instance.
     * @param {Array} iv The IV words.
     *
     * @static
     *
     * @example
     *
     *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
     */
    createDecryptor: function (cipher, iv) {
      return this.Decryptor.create(cipher, iv);
    },

    /**
     * Initializes a newly created mode.
     *
     * @param {Cipher} cipher A block cipher instance.
     * @param {Array} iv The IV words.
     *
     * @example
     *
     *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
     */
    init: function (cipher, iv) {
      this._cipher = cipher;
      this._iv = iv;
    }
  });

  /**
   * Cipher Block Chaining mode.
   */
  var CBC = C_mode.CBC = (function () {
    /**
     * Abstract base CBC mode.
     */
    var CBC = BlockCipherMode.extend();

    /**
     * CBC encryptor.
     */
    CBC.Encryptor = CBC.extend({
      /**
       * Processes the data block at offset.
       *
       * @param {Array} words The data words to operate on.
       * @param {number} offset The offset where the block starts.
       *
       * @example
       *
       *     mode.processBlock(data.words, offset);
       */
      processBlock: function (words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;

        // XOR and encrypt
        xorBlock.call(this, words, offset, blockSize);
        cipher.encryptBlock(words, offset);

        // Remember this block to use with next block
        this._prevBlock = words.slice(offset, offset + blockSize);
      }
    });

    /**
     * CBC decryptor.
     */
    CBC.Decryptor = CBC.extend({
      /**
       * Processes the data block at offset.
       *
       * @param {Array} words The data words to operate on.
       * @param {number} offset The offset where the block starts.
       *
       * @example
       *
       *     mode.processBlock(data.words, offset);
       */
      processBlock: function (words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;

        // Remember this block to use with next block
        var thisBlock = words.slice(offset, offset + blockSize);

        // Decrypt and XOR
        cipher.decryptBlock(words, offset);
        xorBlock.call(this, words, offset, blockSize);

        // This block becomes the previous block
        this._prevBlock = thisBlock;
      }
    });

    function xorBlock(words, offset, blockSize) {
      // Shortcut
      var iv = this._iv;

      // Choose mixing block
      if (iv) {
        var block = iv;

        // Remove IV for subsequent blocks
        this._iv = undefined;
      } else {
        var block = this._prevBlock;
      }

      // XOR blocks
      for (var i = 0; i < blockSize; i++) {
        words[offset + i] ^= block[i];
      }
    }

    return CBC;
  }());

  /**
   * Padding namespace.
   */
  var C_pad = C.pad = {};

  /**
   * PKCS #5/7 padding strategy.
   */
  var Pkcs7 = C_pad.Pkcs7 = {
    /**
     * Pads data using the algorithm defined in PKCS #5/7.
     *
     * @param {WordArray} data The data to pad.
     * @param {number} blockSize The multiple that the data should be padded to.
     *
     * @static
     *
     * @example
     *
     *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
     */
    pad: function (data, blockSize) {
      // Shortcut
      var blockSizeBytes = blockSize * 4;

      // Count padding bytes
      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

      // Create padding word
      var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

      // Create padding
      var paddingWords = [];
      for (var i = 0; i < nPaddingBytes; i += 4) {
        paddingWords.push(paddingWord);
      }
      var padding = WordArray.create(paddingWords, nPaddingBytes);

      // Add padding
      data.concat(padding);
    },

    /**
     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
     *
     * @param {WordArray} data The data to unpad.
     *
     * @static
     *
     * @example
     *
     *     CryptoJS.pad.Pkcs7.unpad(wordArray);
     */
    unpad: function (data) {
      // Get number of padding bytes from last byte
      var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

      // Remove padding
      data.sigBytes -= nPaddingBytes;
    }
  };

  /**
   * Abstract base block cipher template.
   *
   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
   */
  var BlockCipher = C_lib.BlockCipher = Cipher.extend({
    /**
     * Configuration options.
     *
     * @property {Mode} mode The block mode to use. Default: CBC
     * @property {Padding} padding The padding strategy to use. Default: Pkcs7
     */
    cfg: Cipher.cfg.extend({
      mode: CBC,
      padding: Pkcs7
    }),

    reset: function () {
      // Reset cipher
      Cipher.reset.call(this);

      // Shortcuts
      var cfg = this.cfg;
      var iv = cfg.iv;
      var mode = cfg.mode;

      // Reset block mode
      if (this._xformMode == this._ENC_XFORM_MODE) {
        var modeCreator = mode.createEncryptor;
      } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
        var modeCreator = mode.createDecryptor;

        // Keep at least one block in the buffer for unpadding
        this._minBufferSize = 1;
      }
      this._mode = modeCreator.call(mode, this, iv && iv.words);
    },

    _doProcessBlock: function (words, offset) {
      this._mode.processBlock(words, offset);
    },

    _doFinalize: function () {
      // Shortcut
      var padding = this.cfg.padding;

      // Finalize
      if (this._xformMode == this._ENC_XFORM_MODE) {
        // Pad data
        padding.pad(this._data, this.blockSize);

        // Process final blocks
        var finalProcessedBlocks = this._process(!!'flush');
      } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
        // Process final blocks
        var finalProcessedBlocks = this._process(!!'flush');

        // Unpad data
        padding.unpad(finalProcessedBlocks);
      }

      return finalProcessedBlocks;
    },

    blockSize: 128/32
  });

  /**
   * A collection of cipher parameters.
   *
   * @property {WordArray} ciphertext The raw ciphertext.
   * @property {WordArray} key The key to this ciphertext.
   * @property {WordArray} iv The IV used in the ciphering operation.
   * @property {WordArray} salt The salt used with a key derivation function.
   * @property {Cipher} algorithm The cipher algorithm.
   * @property {Mode} mode The block mode used in the ciphering operation.
   * @property {Padding} padding The padding scheme used in the ciphering operation.
   * @property {number} blockSize The block size of the cipher.
   * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
   */
  var CipherParams = C_lib.CipherParams = Base.extend({
    /**
     * Initializes a newly created cipher params object.
     *
     * @param {Object} cipherParams An object with any of the possible cipher parameters.
     *
     * @example
     *
     *     var cipherParams = CryptoJS.lib.CipherParams.create({
         *         ciphertext: ciphertextWordArray,
         *         key: keyWordArray,
         *         iv: ivWordArray,
         *         salt: saltWordArray,
         *         algorithm: CryptoJS.algo.AES,
         *         mode: CryptoJS.mode.CBC,
         *         padding: CryptoJS.pad.PKCS7,
         *         blockSize: 4,
         *         formatter: CryptoJS.format.OpenSSL
         *     });
     */
    init: function (cipherParams) {
      this.mixIn(cipherParams);
    },

    /**
     * Converts this cipher params object to a string.
     *
     * @param {Format} formatter (Optional) The formatting strategy to use.
     *
     * @return {string} The stringified cipher params.
     *
     * @throws Error If neither the formatter nor the default formatter is set.
     *
     * @example
     *
     *     var string = cipherParams + '';
     *     var string = cipherParams.toString();
     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
     */
    toString: function (formatter) {
      return (formatter || this.formatter).stringify(this);
    }
  });

  /**
   * Format namespace.
   */
  var C_format = C.format = {};

  /**
   * OpenSSL formatting strategy.
   */
  var OpenSSLFormatter = C_format.OpenSSL = {
    /**
     * Converts a cipher params object to an OpenSSL-compatible string.
     *
     * @param {CipherParams} cipherParams The cipher params object.
     *
     * @return {string} The OpenSSL-compatible string.
     *
     * @static
     *
     * @example
     *
     *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
     */
    stringify: function (cipherParams) {
      // Shortcuts
      var ciphertext = cipherParams.ciphertext;
      var salt = cipherParams.salt;

      // Format
      if (salt) {
        var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
      } else {
        var wordArray = ciphertext;
      }

      return wordArray.toString(Base64);
    },

    /**
     * Converts an OpenSSL-compatible string to a cipher params object.
     *
     * @param {string} openSSLStr The OpenSSL-compatible string.
     *
     * @return {CipherParams} The cipher params object.
     *
     * @static
     *
     * @example
     *
     *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
     */
    parse: function (openSSLStr) {
      // Parse base64
      var ciphertext = Base64.parse(openSSLStr);

      // Shortcut
      var ciphertextWords = ciphertext.words;

      // Test for salt
      if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
        // Extract salt
        var salt = WordArray.create(ciphertextWords.slice(2, 4));

        // Remove salt from ciphertext
        ciphertextWords.splice(0, 4);
        ciphertext.sigBytes -= 16;
      }

      return CipherParams.create({ ciphertext: ciphertext, salt: salt });
    }
  };

  /**
   * A cipher wrapper that returns ciphertext as a serializable cipher params object.
   */
  var SerializableCipher = C_lib.SerializableCipher = Base.extend({
    /**
     * Configuration options.
     *
     * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
     */
    cfg: Base.extend({
      format: OpenSSLFormatter
    }),

    /**
     * Encrypts a message.
     *
     * @param {Cipher} cipher The cipher algorithm to use.
     * @param {WordArray|string} message The message to encrypt.
     * @param {WordArray} key The key.
     * @param {Object} cfg (Optional) The configuration options to use for this operation.
     *
     * @return {CipherParams} A cipher params object.
     *
     * @static
     *
     * @example
     *
     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
     */
    encrypt: function (cipher, message, key, cfg) {
      // Apply config defaults
      cfg = this.cfg.extend(cfg);

      // Encrypt
      var encryptor = cipher.createEncryptor(key, cfg);
      var ciphertext = encryptor.finalize(message);

      // Shortcut
      var cipherCfg = encryptor.cfg;

      // Create and return serializable cipher params
      return CipherParams.create({
        ciphertext: ciphertext,
        key: key,
        iv: cipherCfg.iv,
        algorithm: cipher,
        mode: cipherCfg.mode,
        padding: cipherCfg.padding,
        blockSize: cipher.blockSize,
        formatter: cfg.format
      });
    },

    /**
     * Decrypts serialized ciphertext.
     *
     * @param {Cipher} cipher The cipher algorithm to use.
     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
     * @param {WordArray} key The key.
     * @param {Object} cfg (Optional) The configuration options to use for this operation.
     *
     * @return {WordArray} The plaintext.
     *
     * @static
     *
     * @example
     *
     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
     */
    decrypt: function (cipher, ciphertext, key, cfg) {
      // Apply config defaults
      cfg = this.cfg.extend(cfg);

      // Convert string to CipherParams
      ciphertext = this._parse(ciphertext, cfg.format);

      // Decrypt
      var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

      return plaintext;
    },

    /**
     * Converts serialized ciphertext to CipherParams,
     * else assumed CipherParams already and returns ciphertext unchanged.
     *
     * @param {CipherParams|string} ciphertext The ciphertext.
     * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
     *
     * @return {CipherParams} The unserialized ciphertext.
     *
     * @static
     *
     * @example
     *
     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
     */
    _parse: function (ciphertext, format) {
      if (typeof ciphertext == 'string') {
        return format.parse(ciphertext, this);
      } else {
        return ciphertext;
      }
    }
  });

  /**
   * Key derivation function namespace.
   */
  var C_kdf = C.kdf = {};

  /**
   * OpenSSL key derivation function.
   */
  var OpenSSLKdf = C_kdf.OpenSSL = {
    /**
     * Derives a key and IV from a password.
     *
     * @param {string} password The password to derive from.
     * @param {number} keySize The size in words of the key to generate.
     * @param {number} ivSize The size in words of the IV to generate.
     * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
     *
     * @return {CipherParams} A cipher params object with the key, IV, and salt.
     *
     * @static
     *
     * @example
     *
     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
     */
    execute: function (password, keySize, ivSize, salt) {
      // Generate random salt
      if (!salt) {
        salt = WordArray.random(64/8);
      }

      // Derive key and IV
      var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

      // Separate key and IV
      var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
      key.sigBytes = keySize * 4;

      // Return params
      return CipherParams.create({ key: key, iv: iv, salt: salt });
    }
  };

  /**
   * A serializable cipher wrapper that derives the key from a password,
   * and returns ciphertext as a serializable cipher params object.
   */
  var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
    /**
     * Configuration options.
     *
     * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
     */
    cfg: SerializableCipher.cfg.extend({
      kdf: OpenSSLKdf
    }),

    /**
     * Encrypts a message using a password.
     *
     * @param {Cipher} cipher The cipher algorithm to use.
     * @param {WordArray|string} message The message to encrypt.
     * @param {string} password The password.
     * @param {Object} cfg (Optional) The configuration options to use for this operation.
     *
     * @return {CipherParams} A cipher params object.
     *
     * @static
     *
     * @example
     *
     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
     */
    encrypt: function (cipher, message, password, cfg) {
      // Apply config defaults
      cfg = this.cfg.extend(cfg);

      // Derive key and other params
      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

      // Add IV to config
      cfg.iv = derivedParams.iv;

      // Encrypt
      var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

      // Mix in derived params
      ciphertext.mixIn(derivedParams);

      return ciphertext;
    },

    /**
     * Decrypts serialized ciphertext using a password.
     *
     * @param {Cipher} cipher The cipher algorithm to use.
     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
     * @param {string} password The password.
     * @param {Object} cfg (Optional) The configuration options to use for this operation.
     *
     * @return {WordArray} The plaintext.
     *
     * @static
     *
     * @example
     *
     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
     */
    decrypt: function (cipher, ciphertext, password, cfg) {
      // Apply config defaults
      cfg = this.cfg.extend(cfg);

      // Convert string to CipherParams
      ciphertext = this._parse(ciphertext, cfg.format);

      // Derive key and other params
      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

      // Add IV to config
      cfg.iv = derivedParams.iv;

      // Decrypt
      var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

      return plaintext;
    }
  });
}());
/*
 CryptoJS v3.1.2
 aes.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function () {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var BlockCipher = C_lib.BlockCipher;
  var C_algo = C.algo;

  // Lookup tables
  var SBOX = [];
  var INV_SBOX = [];
  var SUB_MIX_0 = [];
  var SUB_MIX_1 = [];
  var SUB_MIX_2 = [];
  var SUB_MIX_3 = [];
  var INV_SUB_MIX_0 = [];
  var INV_SUB_MIX_1 = [];
  var INV_SUB_MIX_2 = [];
  var INV_SUB_MIX_3 = [];

  // Compute lookup tables
  (function () {
    // Compute double table
    var d = [];
    for (var i = 0; i < 256; i++) {
      if (i < 128) {
        d[i] = i << 1;
      } else {
        d[i] = (i << 1) ^ 0x11b;
      }
    }

    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for (var i = 0; i < 256; i++) {
      // Compute sbox
      var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
      SBOX[x] = sx;
      INV_SBOX[sx] = x;

      // Compute multiplication
      var x2 = d[x];
      var x4 = d[x2];
      var x8 = d[x4];

      // Compute sub bytes, mix columns tables
      var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
      SUB_MIX_0[x] = (t << 24) | (t >>> 8);
      SUB_MIX_1[x] = (t << 16) | (t >>> 16);
      SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
      SUB_MIX_3[x] = t;

      // Compute inv sub bytes, inv mix columns tables
      var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
      INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
      INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
      INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
      INV_SUB_MIX_3[sx] = t;

      // Compute next counter
      if (!x) {
        x = xi = 1;
      } else {
        x = x2 ^ d[d[d[x8 ^ x2]]];
        xi ^= d[d[xi]];
      }
    }
  }());

  // Precomputed Rcon lookup
  var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

  /**
   * AES block cipher algorithm.
   */
  var AES = C_algo.AES = BlockCipher.extend({
    _doReset: function () {
      // Shortcuts
      var key = this._key;
      var keyWords = key.words;
      var keySize = key.sigBytes / 4;

      // Compute number of rounds
      var nRounds = this._nRounds = keySize + 6

      // Compute number of key schedule rows
      var ksRows = (nRounds + 1) * 4;

      // Compute key schedule
      var keySchedule = this._keySchedule = [];
      for (var ksRow = 0; ksRow < ksRows; ksRow++) {
        if (ksRow < keySize) {
          keySchedule[ksRow] = keyWords[ksRow];
        } else {
          var t = keySchedule[ksRow - 1];

          if (!(ksRow % keySize)) {
            // Rot word
            t = (t << 8) | (t >>> 24);

            // Sub word
            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

            // Mix Rcon
            t ^= RCON[(ksRow / keySize) | 0] << 24;
          } else if (keySize > 6 && ksRow % keySize == 4) {
            // Sub word
            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
          }

          keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
        }
      }

      // Compute inv key schedule
      var invKeySchedule = this._invKeySchedule = [];
      for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
        var ksRow = ksRows - invKsRow;

        if (invKsRow % 4) {
          var t = keySchedule[ksRow];
        } else {
          var t = keySchedule[ksRow - 4];
        }

        if (invKsRow < 4 || ksRow <= 4) {
          invKeySchedule[invKsRow] = t;
        } else {
          invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
              INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
        }
      }
    },

    encryptBlock: function (M, offset) {
      this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
    },

    decryptBlock: function (M, offset) {
      // Swap 2nd and 4th rows
      var t = M[offset + 1];
      M[offset + 1] = M[offset + 3];
      M[offset + 3] = t;

      this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

      // Inv swap 2nd and 4th rows
      var t = M[offset + 1];
      M[offset + 1] = M[offset + 3];
      M[offset + 3] = t;
    },

    _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
      // Shortcut
      var nRounds = this._nRounds;

      // Get input, add round key
      var s0 = M[offset]     ^ keySchedule[0];
      var s1 = M[offset + 1] ^ keySchedule[1];
      var s2 = M[offset + 2] ^ keySchedule[2];
      var s3 = M[offset + 3] ^ keySchedule[3];

      // Key schedule row counter
      var ksRow = 4;

      // Rounds
      for (var round = 1; round < nRounds; round++) {
        // Shift rows, sub bytes, mix columns, add round key
        var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
        var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
        var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
        var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

        // Update state
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }

      // Shift rows, sub bytes, add round key
      var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
      var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
      var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
      var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

      // Set output
      M[offset]     = t0;
      M[offset + 1] = t1;
      M[offset + 2] = t2;
      M[offset + 3] = t3;
    },

    keySize: 256/32
  });

  /**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
   */
  C.AES = BlockCipher._createHelper(AES);
}());
/*
 CryptoJS v3.1.2
 md5.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function (Math) {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var WordArray = C_lib.WordArray;
  var Hasher = C_lib.Hasher;
  var C_algo = C.algo;

  // Constants table
  var T = [];

  // Compute constants
  (function () {
    for (var i = 0; i < 64; i++) {
      T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
    }
  }());

  /**
   * MD5 hash algorithm.
   */
  var MD5 = C_algo.MD5 = Hasher.extend({
    _doReset: function () {
      this._hash = new WordArray.init([
        0x67452301, 0xefcdab89,
        0x98badcfe, 0x10325476
      ]);
    },

    _doProcessBlock: function (M, offset) {
      // Swap endian
      for (var i = 0; i < 16; i++) {
        // Shortcuts
        var offset_i = offset + i;
        var M_offset_i = M[offset_i];

        M[offset_i] = (
            (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
                (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
            );
      }

      // Shortcuts
      var H = this._hash.words;

      var M_offset_0  = M[offset + 0];
      var M_offset_1  = M[offset + 1];
      var M_offset_2  = M[offset + 2];
      var M_offset_3  = M[offset + 3];
      var M_offset_4  = M[offset + 4];
      var M_offset_5  = M[offset + 5];
      var M_offset_6  = M[offset + 6];
      var M_offset_7  = M[offset + 7];
      var M_offset_8  = M[offset + 8];
      var M_offset_9  = M[offset + 9];
      var M_offset_10 = M[offset + 10];
      var M_offset_11 = M[offset + 11];
      var M_offset_12 = M[offset + 12];
      var M_offset_13 = M[offset + 13];
      var M_offset_14 = M[offset + 14];
      var M_offset_15 = M[offset + 15];

      // Working varialbes
      var a = H[0];
      var b = H[1];
      var c = H[2];
      var d = H[3];

      // Computation
      a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
      d = FF(d, a, b, c, M_offset_1,  12, T[1]);
      c = FF(c, d, a, b, M_offset_2,  17, T[2]);
      b = FF(b, c, d, a, M_offset_3,  22, T[3]);
      a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
      d = FF(d, a, b, c, M_offset_5,  12, T[5]);
      c = FF(c, d, a, b, M_offset_6,  17, T[6]);
      b = FF(b, c, d, a, M_offset_7,  22, T[7]);
      a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
      d = FF(d, a, b, c, M_offset_9,  12, T[9]);
      c = FF(c, d, a, b, M_offset_10, 17, T[10]);
      b = FF(b, c, d, a, M_offset_11, 22, T[11]);
      a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
      d = FF(d, a, b, c, M_offset_13, 12, T[13]);
      c = FF(c, d, a, b, M_offset_14, 17, T[14]);
      b = FF(b, c, d, a, M_offset_15, 22, T[15]);

      a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
      d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
      c = GG(c, d, a, b, M_offset_11, 14, T[18]);
      b = GG(b, c, d, a, M_offset_0,  20, T[19]);
      a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
      d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
      c = GG(c, d, a, b, M_offset_15, 14, T[22]);
      b = GG(b, c, d, a, M_offset_4,  20, T[23]);
      a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
      d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
      c = GG(c, d, a, b, M_offset_3,  14, T[26]);
      b = GG(b, c, d, a, M_offset_8,  20, T[27]);
      a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
      d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
      c = GG(c, d, a, b, M_offset_7,  14, T[30]);
      b = GG(b, c, d, a, M_offset_12, 20, T[31]);

      a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
      d = HH(d, a, b, c, M_offset_8,  11, T[33]);
      c = HH(c, d, a, b, M_offset_11, 16, T[34]);
      b = HH(b, c, d, a, M_offset_14, 23, T[35]);
      a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
      d = HH(d, a, b, c, M_offset_4,  11, T[37]);
      c = HH(c, d, a, b, M_offset_7,  16, T[38]);
      b = HH(b, c, d, a, M_offset_10, 23, T[39]);
      a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
      d = HH(d, a, b, c, M_offset_0,  11, T[41]);
      c = HH(c, d, a, b, M_offset_3,  16, T[42]);
      b = HH(b, c, d, a, M_offset_6,  23, T[43]);
      a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
      d = HH(d, a, b, c, M_offset_12, 11, T[45]);
      c = HH(c, d, a, b, M_offset_15, 16, T[46]);
      b = HH(b, c, d, a, M_offset_2,  23, T[47]);

      a = II(a, b, c, d, M_offset_0,  6,  T[48]);
      d = II(d, a, b, c, M_offset_7,  10, T[49]);
      c = II(c, d, a, b, M_offset_14, 15, T[50]);
      b = II(b, c, d, a, M_offset_5,  21, T[51]);
      a = II(a, b, c, d, M_offset_12, 6,  T[52]);
      d = II(d, a, b, c, M_offset_3,  10, T[53]);
      c = II(c, d, a, b, M_offset_10, 15, T[54]);
      b = II(b, c, d, a, M_offset_1,  21, T[55]);
      a = II(a, b, c, d, M_offset_8,  6,  T[56]);
      d = II(d, a, b, c, M_offset_15, 10, T[57]);
      c = II(c, d, a, b, M_offset_6,  15, T[58]);
      b = II(b, c, d, a, M_offset_13, 21, T[59]);
      a = II(a, b, c, d, M_offset_4,  6,  T[60]);
      d = II(d, a, b, c, M_offset_11, 10, T[61]);
      c = II(c, d, a, b, M_offset_2,  15, T[62]);
      b = II(b, c, d, a, M_offset_9,  21, T[63]);

      // Intermediate hash value
      H[0] = (H[0] + a) | 0;
      H[1] = (H[1] + b) | 0;
      H[2] = (H[2] + c) | 0;
      H[3] = (H[3] + d) | 0;
    },

    _doFinalize: function () {
      // Shortcuts
      var data = this._data;
      var dataWords = data.words;

      var nBitsTotal = this._nDataBytes * 8;
      var nBitsLeft = data.sigBytes * 8;

      // Add padding
      dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

      var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
      var nBitsTotalL = nBitsTotal;
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
          (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
              (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
          );
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
          (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
              (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
          );

      data.sigBytes = (dataWords.length + 1) * 4;

      // Hash final blocks
      this._process();

      // Shortcuts
      var hash = this._hash;
      var H = hash.words;

      // Swap endian
      for (var i = 0; i < 4; i++) {
        // Shortcut
        var H_i = H[i];

        H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
            (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
      }

      // Return final computed hash
      return hash;
    },

    clone: function () {
      var clone = Hasher.clone.call(this);
      clone._hash = this._hash.clone();

      return clone;
    }
  });

  function FF(a, b, c, d, x, s, t) {
    var n = a + ((b & c) | (~b & d)) + x + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  }

  function GG(a, b, c, d, x, s, t) {
    var n = a + ((b & d) | (c & ~d)) + x + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  }

  function HH(a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + x + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  }

  function II(a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + x + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  }

  /**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.MD5('message');
   *     var hash = CryptoJS.MD5(wordArray);
   */
  C.MD5 = Hasher._createHelper(MD5);

  /**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacMD5(message, key);
   */
  C.HmacMD5 = Hasher._createHmacHelper(MD5);
}(Math));
/*
 CryptoJS v3.1.2
 sha1.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function () {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var WordArray = C_lib.WordArray;
  var Hasher = C_lib.Hasher;
  var C_algo = C.algo;

  // Reusable object
  var W = [];

  /**
   * SHA-1 hash algorithm.
   */
  var SHA1 = C_algo.SHA1 = Hasher.extend({
    _doReset: function () {
      this._hash = new WordArray.init([
        0x67452301, 0xefcdab89,
        0x98badcfe, 0x10325476,
        0xc3d2e1f0
      ]);
    },

    _doProcessBlock: function (M, offset) {
      // Shortcut
      var H = this._hash.words;

      // Working variables
      var a = H[0];
      var b = H[1];
      var c = H[2];
      var d = H[3];
      var e = H[4];

      // Computation
      for (var i = 0; i < 80; i++) {
        if (i < 16) {
          W[i] = M[offset + i] | 0;
        } else {
          var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
          W[i] = (n << 1) | (n >>> 31);
        }

        var t = ((a << 5) | (a >>> 27)) + e + W[i];
        if (i < 20) {
          t += ((b & c) | (~b & d)) + 0x5a827999;
        } else if (i < 40) {
          t += (b ^ c ^ d) + 0x6ed9eba1;
        } else if (i < 60) {
          t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
        } else /* if (i < 80) */ {
          t += (b ^ c ^ d) - 0x359d3e2a;
        }

        e = d;
        d = c;
        c = (b << 30) | (b >>> 2);
        b = a;
        a = t;
      }

      // Intermediate hash value
      H[0] = (H[0] + a) | 0;
      H[1] = (H[1] + b) | 0;
      H[2] = (H[2] + c) | 0;
      H[3] = (H[3] + d) | 0;
      H[4] = (H[4] + e) | 0;
    },

    _doFinalize: function () {
      // Shortcuts
      var data = this._data;
      var dataWords = data.words;

      var nBitsTotal = this._nDataBytes * 8;
      var nBitsLeft = data.sigBytes * 8;

      // Add padding
      dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
      data.sigBytes = dataWords.length * 4;

      // Hash final blocks
      this._process();

      // Return final computed hash
      return this._hash;
    },

    clone: function () {
      var clone = Hasher.clone.call(this);
      clone._hash = this._hash.clone();

      return clone;
    }
  });

  /**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA1('message');
   *     var hash = CryptoJS.SHA1(wordArray);
   */
  C.SHA1 = Hasher._createHelper(SHA1);

  /**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA1(message, key);
   */
  C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
}());
/*
 CryptoJS v3.1.2
 x64-core.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function (undefined) {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var Base = C_lib.Base;
  var X32WordArray = C_lib.WordArray;

  /**
   * x64 namespace.
   */
  var C_x64 = C.x64 = {};

  /**
   * A 64-bit word.
   */
  var X64Word = C_x64.Word = Base.extend({
    /**
     * Initializes a newly created 64-bit word.
     *
     * @param {number} high The high 32 bits.
     * @param {number} low The low 32 bits.
     *
     * @example
     *
     *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
     */
    init: function (high, low) {
      this.high = high;
      this.low = low;
    }

    /**
     * Bitwise NOTs this word.
     *
     * @return {X64Word} A new x64-Word object after negating.
     *
     * @example
     *
     *     var negated = x64Word.not();
     */
    // not: function () {
    // var high = ~this.high;
    // var low = ~this.low;

    // return X64Word.create(high, low);
    // },

    /**
     * Bitwise ANDs this word with the passed word.
     *
     * @param {X64Word} word The x64-Word to AND with this word.
     *
     * @return {X64Word} A new x64-Word object after ANDing.
     *
     * @example
     *
     *     var anded = x64Word.and(anotherX64Word);
     */
    // and: function (word) {
    // var high = this.high & word.high;
    // var low = this.low & word.low;

    // return X64Word.create(high, low);
    // },

    /**
     * Bitwise ORs this word with the passed word.
     *
     * @param {X64Word} word The x64-Word to OR with this word.
     *
     * @return {X64Word} A new x64-Word object after ORing.
     *
     * @example
     *
     *     var ored = x64Word.or(anotherX64Word);
     */
    // or: function (word) {
    // var high = this.high | word.high;
    // var low = this.low | word.low;

    // return X64Word.create(high, low);
    // },

    /**
     * Bitwise XORs this word with the passed word.
     *
     * @param {X64Word} word The x64-Word to XOR with this word.
     *
     * @return {X64Word} A new x64-Word object after XORing.
     *
     * @example
     *
     *     var xored = x64Word.xor(anotherX64Word);
     */
    // xor: function (word) {
    // var high = this.high ^ word.high;
    // var low = this.low ^ word.low;

    // return X64Word.create(high, low);
    // },

    /**
     * Shifts this word n bits to the left.
     *
     * @param {number} n The number of bits to shift.
     *
     * @return {X64Word} A new x64-Word object after shifting.
     *
     * @example
     *
     *     var shifted = x64Word.shiftL(25);
     */
    // shiftL: function (n) {
    // if (n < 32) {
    // var high = (this.high << n) | (this.low >>> (32 - n));
    // var low = this.low << n;
    // } else {
    // var high = this.low << (n - 32);
    // var low = 0;
    // }

    // return X64Word.create(high, low);
    // },

    /**
     * Shifts this word n bits to the right.
     *
     * @param {number} n The number of bits to shift.
     *
     * @return {X64Word} A new x64-Word object after shifting.
     *
     * @example
     *
     *     var shifted = x64Word.shiftR(7);
     */
    // shiftR: function (n) {
    // if (n < 32) {
    // var low = (this.low >>> n) | (this.high << (32 - n));
    // var high = this.high >>> n;
    // } else {
    // var low = this.high >>> (n - 32);
    // var high = 0;
    // }

    // return X64Word.create(high, low);
    // },

    /**
     * Rotates this word n bits to the left.
     *
     * @param {number} n The number of bits to rotate.
     *
     * @return {X64Word} A new x64-Word object after rotating.
     *
     * @example
     *
     *     var rotated = x64Word.rotL(25);
     */
    // rotL: function (n) {
    // return this.shiftL(n).or(this.shiftR(64 - n));
    // },

    /**
     * Rotates this word n bits to the right.
     *
     * @param {number} n The number of bits to rotate.
     *
     * @return {X64Word} A new x64-Word object after rotating.
     *
     * @example
     *
     *     var rotated = x64Word.rotR(7);
     */
    // rotR: function (n) {
    // return this.shiftR(n).or(this.shiftL(64 - n));
    // },

    /**
     * Adds this word with the passed word.
     *
     * @param {X64Word} word The x64-Word to add with this word.
     *
     * @return {X64Word} A new x64-Word object after adding.
     *
     * @example
     *
     *     var added = x64Word.add(anotherX64Word);
     */
    // add: function (word) {
    // var low = (this.low + word.low) | 0;
    // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
    // var high = (this.high + word.high + carry) | 0;

    // return X64Word.create(high, low);
    // }
  });

  /**
   * An array of 64-bit words.
   *
   * @property {Array} words The array of CryptoJS.x64.Word objects.
   * @property {number} sigBytes The number of significant bytes in this word array.
   */
  var X64WordArray = C_x64.WordArray = Base.extend({
    /**
     * Initializes a newly created word array.
     *
     * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
     * @param {number} sigBytes (Optional) The number of significant bytes in the words.
     *
     * @example
     *
     *     var wordArray = CryptoJS.x64.WordArray.create();
     *
     *     var wordArray = CryptoJS.x64.WordArray.create([
     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
     *     ]);
     *
     *     var wordArray = CryptoJS.x64.WordArray.create([
     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
     *     ], 10);
     */
    init: function (words, sigBytes) {
      words = this.words = words || [];

      if (sigBytes != undefined) {
        this.sigBytes = sigBytes;
      } else {
        this.sigBytes = words.length * 8;
      }
    },

    /**
     * Converts this 64-bit word array to a 32-bit word array.
     *
     * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
     *
     * @example
     *
     *     var x32WordArray = x64WordArray.toX32();
     */
    toX32: function () {
      // Shortcuts
      var x64Words = this.words;
      var x64WordsLength = x64Words.length;

      // Convert
      var x32Words = [];
      for (var i = 0; i < x64WordsLength; i++) {
        var x64Word = x64Words[i];
        x32Words.push(x64Word.high);
        x32Words.push(x64Word.low);
      }

      return X32WordArray.create(x32Words, this.sigBytes);
    },

    /**
     * Creates a copy of this word array.
     *
     * @return {X64WordArray} The clone.
     *
     * @example
     *
     *     var clone = x64WordArray.clone();
     */
    clone: function () {
      var clone = Base.clone.call(this);

      // Clone "words" array
      var words = clone.words = this.words.slice(0);

      // Clone each X64Word object
      var wordsLength = words.length;
      for (var i = 0; i < wordsLength; i++) {
        words[i] = words[i].clone();
      }

      return clone;
    }
  });
}());
/*
 CryptoJS v3.1.2
 sha256.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function (Math) {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var WordArray = C_lib.WordArray;
  var Hasher = C_lib.Hasher;
  var C_algo = C.algo;

  // Initialization and round constants tables
  var H = [];
  var K = [];

  // Compute constants
  (function () {
    function isPrime(n) {
      var sqrtN = Math.sqrt(n);
      for (var factor = 2; factor <= sqrtN; factor++) {
        if (!(n % factor)) {
          return false;
        }
      }

      return true;
    }

    function getFractionalBits(n) {
      return ((n - (n | 0)) * 0x100000000) | 0;
    }

    var n = 2;
    var nPrime = 0;
    while (nPrime < 64) {
      if (isPrime(n)) {
        if (nPrime < 8) {
          H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
        }
        K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

        nPrime++;
      }

      n++;
    }
  }());

  // Reusable object
  var W = [];

  /**
   * SHA-256 hash algorithm.
   */
  var SHA256 = C_algo.SHA256 = Hasher.extend({
    _doReset: function () {
      this._hash = new WordArray.init(H.slice(0));
    },

    _doProcessBlock: function (M, offset) {
      // Shortcut
      var H = this._hash.words;

      // Working variables
      var a = H[0];
      var b = H[1];
      var c = H[2];
      var d = H[3];
      var e = H[4];
      var f = H[5];
      var g = H[6];
      var h = H[7];

      // Computation
      for (var i = 0; i < 64; i++) {
        if (i < 16) {
          W[i] = M[offset + i] | 0;
        } else {
          var gamma0x = W[i - 15];
          var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
              ((gamma0x << 14) | (gamma0x >>> 18)) ^
              (gamma0x >>> 3);

          var gamma1x = W[i - 2];
          var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
              ((gamma1x << 13) | (gamma1x >>> 19)) ^
              (gamma1x >>> 10);

          W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
        }

        var ch  = (e & f) ^ (~e & g);
        var maj = (a & b) ^ (a & c) ^ (b & c);

        var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
        var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

        var t1 = h + sigma1 + ch + K[i] + W[i];
        var t2 = sigma0 + maj;

        h = g;
        g = f;
        f = e;
        e = (d + t1) | 0;
        d = c;
        c = b;
        b = a;
        a = (t1 + t2) | 0;
      }

      // Intermediate hash value
      H[0] = (H[0] + a) | 0;
      H[1] = (H[1] + b) | 0;
      H[2] = (H[2] + c) | 0;
      H[3] = (H[3] + d) | 0;
      H[4] = (H[4] + e) | 0;
      H[5] = (H[5] + f) | 0;
      H[6] = (H[6] + g) | 0;
      H[7] = (H[7] + h) | 0;
    },

    _doFinalize: function () {
      // Shortcuts
      var data = this._data;
      var dataWords = data.words;

      var nBitsTotal = this._nDataBytes * 8;
      var nBitsLeft = data.sigBytes * 8;

      // Add padding
      dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
      data.sigBytes = dataWords.length * 4;

      // Hash final blocks
      this._process();

      // Return final computed hash
      return this._hash;
    },

    clone: function () {
      var clone = Hasher.clone.call(this);
      clone._hash = this._hash.clone();

      return clone;
    }
  });

  /**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA256('message');
   *     var hash = CryptoJS.SHA256(wordArray);
   */
  C.SHA256 = Hasher._createHelper(SHA256);

  /**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA256(message, key);
   */
  C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
}(Math));
/*
 CryptoJS v3.1.2
 sha512.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function () {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var Hasher = C_lib.Hasher;
  var C_x64 = C.x64;
  var X64Word = C_x64.Word;
  var X64WordArray = C_x64.WordArray;
  var C_algo = C.algo;

  function X64Word_create() {
    return X64Word.create.apply(X64Word, arguments);
  }

  // Constants
  var K = [
    X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
    X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
    X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
    X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
    X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
    X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
    X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
    X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
    X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
    X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
    X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
    X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
    X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
    X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
    X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
    X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
    X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
    X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
    X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
    X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
    X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
    X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
    X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
    X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
    X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
    X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
    X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
    X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
    X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
    X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
    X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
    X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
    X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
    X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
    X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
    X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
    X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
    X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
    X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
    X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
  ];

  // Reusable objects
  var W = [];
  (function () {
    for (var i = 0; i < 80; i++) {
      W[i] = X64Word_create();
    }
  }());

  /**
   * SHA-512 hash algorithm.
   */
  var SHA512 = C_algo.SHA512 = Hasher.extend({
    _doReset: function () {
      this._hash = new X64WordArray.init([
        new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
        new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
        new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
        new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
      ]);
    },

    _doProcessBlock: function (M, offset) {
      // Shortcuts
      var H = this._hash.words;

      var H0 = H[0];
      var H1 = H[1];
      var H2 = H[2];
      var H3 = H[3];
      var H4 = H[4];
      var H5 = H[5];
      var H6 = H[6];
      var H7 = H[7];

      var H0h = H0.high;
      var H0l = H0.low;
      var H1h = H1.high;
      var H1l = H1.low;
      var H2h = H2.high;
      var H2l = H2.low;
      var H3h = H3.high;
      var H3l = H3.low;
      var H4h = H4.high;
      var H4l = H4.low;
      var H5h = H5.high;
      var H5l = H5.low;
      var H6h = H6.high;
      var H6l = H6.low;
      var H7h = H7.high;
      var H7l = H7.low;

      // Working variables
      var ah = H0h;
      var al = H0l;
      var bh = H1h;
      var bl = H1l;
      var ch = H2h;
      var cl = H2l;
      var dh = H3h;
      var dl = H3l;
      var eh = H4h;
      var el = H4l;
      var fh = H5h;
      var fl = H5l;
      var gh = H6h;
      var gl = H6l;
      var hh = H7h;
      var hl = H7l;

      // Rounds
      for (var i = 0; i < 80; i++) {
        // Shortcut
        var Wi = W[i];

        // Extend message
        if (i < 16) {
          var Wih = Wi.high = M[offset + i * 2]     | 0;
          var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
        } else {
          // Gamma0
          var gamma0x  = W[i - 15];
          var gamma0xh = gamma0x.high;
          var gamma0xl = gamma0x.low;
          var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
          var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

          // Gamma1
          var gamma1x  = W[i - 2];
          var gamma1xh = gamma1x.high;
          var gamma1xl = gamma1x.low;
          var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
          var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

          // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
          var Wi7  = W[i - 7];
          var Wi7h = Wi7.high;
          var Wi7l = Wi7.low;

          var Wi16  = W[i - 16];
          var Wi16h = Wi16.high;
          var Wi16l = Wi16.low;

          var Wil = gamma0l + Wi7l;
          var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
          var Wil = Wil + gamma1l;
          var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
          var Wil = Wil + Wi16l;
          var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

          Wi.high = Wih;
          Wi.low  = Wil;
        }

        var chh  = (eh & fh) ^ (~eh & gh);
        var chl  = (el & fl) ^ (~el & gl);
        var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
        var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

        var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
        var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
        var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
        var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

        // t1 = h + sigma1 + ch + K[i] + W[i]
        var Ki  = K[i];
        var Kih = Ki.high;
        var Kil = Ki.low;

        var t1l = hl + sigma1l;
        var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
        var t1l = t1l + chl;
        var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
        var t1l = t1l + Kil;
        var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
        var t1l = t1l + Wil;
        var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

        // t2 = sigma0 + maj
        var t2l = sigma0l + majl;
        var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

        // Update working variables
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = (dl + t1l) | 0;
        eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = (t1l + t2l) | 0;
        ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
      }

      // Intermediate hash value
      H0l = H0.low  = (H0l + al);
      H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
      H1l = H1.low  = (H1l + bl);
      H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
      H2l = H2.low  = (H2l + cl);
      H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
      H3l = H3.low  = (H3l + dl);
      H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
      H4l = H4.low  = (H4l + el);
      H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
      H5l = H5.low  = (H5l + fl);
      H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
      H6l = H6.low  = (H6l + gl);
      H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
      H7l = H7.low  = (H7l + hl);
      H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
    },

    _doFinalize: function () {
      // Shortcuts
      var data = this._data;
      var dataWords = data.words;

      var nBitsTotal = this._nDataBytes * 8;
      var nBitsLeft = data.sigBytes * 8;

      // Add padding
      dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
      dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
      dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
      data.sigBytes = dataWords.length * 4;

      // Hash final blocks
      this._process();

      // Convert hash to 32-bit word array before returning
      var hash = this._hash.toX32();

      // Return final computed hash
      return hash;
    },

    clone: function () {
      var clone = Hasher.clone.call(this);
      clone._hash = this._hash.clone();

      return clone;
    },

    blockSize: 1024/32
  });

  /**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA512('message');
   *     var hash = CryptoJS.SHA512(wordArray);
   */
  C.SHA512 = Hasher._createHelper(SHA512);

  /**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA512(message, key);
   */
  C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
}());
/*
 CryptoJS v3.1.2
 sha3.js
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
(function (Math) {
  // Shortcuts
  var C = CryptoJS;
  var C_lib = C.lib;
  var WordArray = C_lib.WordArray;
  var Hasher = C_lib.Hasher;
  var C_x64 = C.x64;
  var X64Word = C_x64.Word;
  var C_algo = C.algo;

  // Constants tables
  var RHO_OFFSETS = [];
  var PI_INDEXES  = [];
  var ROUND_CONSTANTS = [];

  // Compute Constants
  (function () {
    // Compute rho offset constants
    var x = 1, y = 0;
    for (var t = 0; t < 24; t++) {
      RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

      var newX = y % 5;
      var newY = (2 * x + 3 * y) % 5;
      x = newX;
      y = newY;
    }

    // Compute pi index constants
    for (var x = 0; x < 5; x++) {
      for (var y = 0; y < 5; y++) {
        PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
      }
    }

    // Compute round constants
    var LFSR = 0x01;
    for (var i = 0; i < 24; i++) {
      var roundConstantMsw = 0;
      var roundConstantLsw = 0;

      for (var j = 0; j < 7; j++) {
        if (LFSR & 0x01) {
          var bitPosition = (1 << j) - 1;
          if (bitPosition < 32) {
            roundConstantLsw ^= 1 << bitPosition;
          } else /* if (bitPosition >= 32) */ {
            roundConstantMsw ^= 1 << (bitPosition - 32);
          }
        }

        // Compute next LFSR
        if (LFSR & 0x80) {
          // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
          LFSR = (LFSR << 1) ^ 0x71;
        } else {
          LFSR <<= 1;
        }
      }

      ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
    }
  }());

  // Reusable objects for temporary values
  var T = [];
  (function () {
    for (var i = 0; i < 25; i++) {
      T[i] = X64Word.create();
    }
  }());

  /**
   * SHA-3 hash algorithm.
   */
  var SHA3 = C_algo.SHA3 = Hasher.extend({
    /**
     * Configuration options.
     *
     * @property {number} outputLength
     *   The desired number of bits in the output hash.
     *   Only values permitted are: 224, 256, 384, 512.
     *   Default: 512
     */
    cfg: Hasher.cfg.extend({
      outputLength: 512
    }),

    _doReset: function () {
      var state = this._state = []
      for (var i = 0; i < 25; i++) {
        state[i] = new X64Word.init();
      }

      this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
    },

    _doProcessBlock: function (M, offset) {
      // Shortcuts
      var state = this._state;
      var nBlockSizeLanes = this.blockSize / 2;

      // Absorb
      for (var i = 0; i < nBlockSizeLanes; i++) {
        // Shortcuts
        var M2i  = M[offset + 2 * i];
        var M2i1 = M[offset + 2 * i + 1];

        // Swap endian
        M2i = (
            (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
                (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
            );
        M2i1 = (
            (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
                (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
            );

        // Absorb message into state
        var lane = state[i];
        lane.high ^= M2i1;
        lane.low  ^= M2i;
      }

      // Rounds
      for (var round = 0; round < 24; round++) {
        // Theta
        for (var x = 0; x < 5; x++) {
          // Mix column lanes
          var tMsw = 0, tLsw = 0;
          for (var y = 0; y < 5; y++) {
            var lane = state[x + 5 * y];
            tMsw ^= lane.high;
            tLsw ^= lane.low;
          }

          // Temporary values
          var Tx = T[x];
          Tx.high = tMsw;
          Tx.low  = tLsw;
        }
        for (var x = 0; x < 5; x++) {
          // Shortcuts
          var Tx4 = T[(x + 4) % 5];
          var Tx1 = T[(x + 1) % 5];
          var Tx1Msw = Tx1.high;
          var Tx1Lsw = Tx1.low;

          // Mix surrounding columns
          var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
          var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
          for (var y = 0; y < 5; y++) {
            var lane = state[x + 5 * y];
            lane.high ^= tMsw;
            lane.low  ^= tLsw;
          }
        }

        // Rho Pi
        for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
          // Shortcuts
          var lane = state[laneIndex];
          var laneMsw = lane.high;
          var laneLsw = lane.low;
          var rhoOffset = RHO_OFFSETS[laneIndex];

          // Rotate lanes
          if (rhoOffset < 32) {
            var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
            var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
          } else /* if (rhoOffset >= 32) */ {
            var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
            var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
          }

          // Transpose lanes
          var TPiLane = T[PI_INDEXES[laneIndex]];
          TPiLane.high = tMsw;
          TPiLane.low  = tLsw;
        }

        // Rho pi at x = y = 0
        var T0 = T[0];
        var state0 = state[0];
        T0.high = state0.high;
        T0.low  = state0.low;

        // Chi
        for (var x = 0; x < 5; x++) {
          for (var y = 0; y < 5; y++) {
            // Shortcuts
            var laneIndex = x + 5 * y;
            var lane = state[laneIndex];
            var TLane = T[laneIndex];
            var Tx1Lane = T[((x + 1) % 5) + 5 * y];
            var Tx2Lane = T[((x + 2) % 5) + 5 * y];

            // Mix rows
            lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
            lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
          }
        }

        // Iota
        var lane = state[0];
        var roundConstant = ROUND_CONSTANTS[round];
        lane.high ^= roundConstant.high;
        lane.low  ^= roundConstant.low;;
      }
    },

    _doFinalize: function () {
      // Shortcuts
      var data = this._data;
      var dataWords = data.words;
      var nBitsTotal = this._nDataBytes * 8;
      var nBitsLeft = data.sigBytes * 8;
      var blockSizeBits = this.blockSize * 32;

      // Add padding
      dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
      dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
      data.sigBytes = dataWords.length * 4;

      // Hash final blocks
      this._process();

      // Shortcuts
      var state = this._state;
      var outputLengthBytes = this.cfg.outputLength / 8;
      var outputLengthLanes = outputLengthBytes / 8;

      // Squeeze
      var hashWords = [];
      for (var i = 0; i < outputLengthLanes; i++) {
        // Shortcuts
        var lane = state[i];
        var laneMsw = lane.high;
        var laneLsw = lane.low;

        // Swap endian
        laneMsw = (
            (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
                (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
            );
        laneLsw = (
            (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
                (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
            );

        // Squeeze state to retrieve hash
        hashWords.push(laneLsw);
        hashWords.push(laneMsw);
      }

      // Return final computed hash
      return new WordArray.init(hashWords, outputLengthBytes);
    },

    clone: function () {
      var clone = Hasher.clone.call(this);

      var state = clone._state = this._state.slice(0);
      for (var i = 0; i < 25; i++) {
        state[i] = state[i].clone();
      }

      return clone;
    }
  });

  /**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA3('message');
   *     var hash = CryptoJS.SHA3(wordArray);
   */
  C.SHA3 = Hasher._createHelper(SHA3);

  /**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA3(message, key);
   */
  C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
}(Math));

; browserify_shim__define__module__export__(typeof CryptoJS != "undefined" ? CryptoJS : window.CryptoJS);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/**
 * Lawnchair!
 * ---
 * clientside json store
 *
 */
var Lawnchair = function (options, callback) {
  // ensure Lawnchair was called as a constructor
  if (!(this instanceof Lawnchair)) return new Lawnchair(options, callback);

  // lawnchair requires json
  if (!JSON) throw 'JSON unavailable! Include http://www.json.org/json2.js to fix.'
  // options are optional; callback is not
  if (arguments.length <= 2 && arguments.length > 0) {
    callback = (typeof arguments[0] === 'function') ? arguments[0] : arguments[1];
    options  = (typeof arguments[0] === 'function') ? {} : arguments[0];
  } else {
    throw 'Incorrect # of ctor args!'
  }
  // TODO perhaps allow for pub/sub instead?
  if (typeof callback !== 'function') throw 'No callback was provided';

  // default configuration
  this.record = options.record || 'record'  // default for records
  this.name   = options.name   || 'records' // default name for underlying store

  // mixin first valid  adapter
  var adapter
  // if the adapter is passed in we try to load that only
  if (options.adapter) {

    // the argument passed should be an array of prefered adapters
    // if it is not, we convert it
    if(typeof(options.adapter) === 'string'){
      options.adapter = [options.adapter];
    }

    // iterates over the array of passed adapters
    for(var j = 0, k = options.adapter.length; j < k; j++){

      // itirates over the array of available adapters
      for (var i = Lawnchair.adapters.length-1; i >= 0; i--) {
        if (Lawnchair.adapters[i].adapter === options.adapter[j]) {
          adapter = Lawnchair.adapters[i].valid() ? Lawnchair.adapters[i] : undefined;
          if (adapter) break
        }
      }
      if (adapter) break
    }

    // otherwise find the first valid adapter for this env
  }
  else {
    for (var i = 0, l = Lawnchair.adapters.length; i < l; i++) {
      adapter = Lawnchair.adapters[i].valid() ? Lawnchair.adapters[i] : undefined
      if (adapter) break
    }
  }

  // we have failed
  if (!adapter) throw 'No valid adapter.'

  // yay! mixin the adapter
  for (var j in adapter)
    this[j] = adapter[j]

  // call init for each mixed in plugin
  for (var i = 0, l = Lawnchair.plugins.length; i < l; i++)
    Lawnchair.plugins[i].call(this)

  // init the adapter
  this.init(options, callback)
}

Lawnchair.adapters = []

/**
 * queues an adapter for mixin
 * ===
 * - ensures an adapter conforms to a specific interface
 *
 */
Lawnchair.adapter = function (id, obj) {
  // add the adapter id to the adapter obj
  // ugly here for a  cleaner dsl for implementing adapters
  obj['adapter'] = id
  // methods required to implement a lawnchair adapter
  var implementing = 'adapter valid init keys save batch get exists all remove nuke'.split(' ')
    ,   indexOf = this.prototype.indexOf
  // mix in the adapter
  for (var i in obj) {
    if (indexOf(implementing, i) === -1) throw 'Invalid adapter! Nonstandard method: ' + i
  }
  // if we made it this far the adapter interface is valid
  // insert the new adapter as the preferred adapter
  Lawnchair.adapters.splice(0,0,obj)
}

Lawnchair.plugins = []

/**
 * generic shallow extension for plugins
 * ===
 * - if an init method is found it registers it to be called when the lawnchair is inited
 * - yes we could use hasOwnProp but nobody here is an asshole
 */
Lawnchair.plugin = function (obj) {
  for (var i in obj)
    i === 'init' ? Lawnchair.plugins.push(obj[i]) : this.prototype[i] = obj[i]
}

/**
 * helpers
 *
 */
Lawnchair.prototype = {

  isArray: Array.isArray || function(o) { return Object.prototype.toString.call(o) === '[object Array]' },

  /**
   * this code exists for ie8... for more background see:
   * http://www.flickr.com/photos/westcoastlogic/5955365742/in/photostream
   */
  indexOf: function(ary, item, i, l) {
    if (ary.indexOf) return ary.indexOf(item)
    for (i = 0, l = ary.length; i < l; i++) if (ary[i] === item) return i
    return -1
  },

  // awesome shorthand callbacks as strings. this is shameless theft from dojo.
  lambda: function (callback) {
    return this.fn(this.record, callback)
  },

  // first stab at named parameters for terse callbacks; dojo: first != best // ;D
  fn: function (name, callback) {
    return typeof callback == 'string' ? new Function(name, callback) : callback
  },

  // returns a unique identifier (by way of Backbone.localStorage.js)
  // TODO investigate smaller UUIDs to cut on storage cost
  uuid: function () {
    var S4 = function () {
      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    }
    return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
  },

  // a classic iterator
  each: function (callback) {
    var cb = this.lambda(callback)
    // iterate from chain
    if (this.__results) {
      for (var i = 0, l = this.__results.length; i < l; i++) cb.call(this, this.__results[i], i)
    }
    // otherwise iterate the entire collection
    else {
      this.all(function(r) {
        for (var i = 0, l = r.length; i < l; i++) cb.call(this, r[i], i)
      })
    }
    return this
  }
// --
};
// window.name code courtesy Remy Sharp: http://24ways.org/2009/breaking-out-the-edges-of-the-browser
Lawnchair.adapter('window-name', (function() {
  if (typeof window==='undefined') {
    window = { top: { } }; // node/optimizer compatibility
  }

  // edited from the original here by elsigh
  // Some sites store JSON data in window.top.name, but some folks (twitter on iPad)
  // put simple strings in there - we should make sure not to cause a SyntaxError.
  var data = {}
  try {
    data = JSON.parse(window.top.name)
  } catch (e) {}


  return {

    valid: function () {
      return typeof window.top.name != 'undefined'
    },

    init: function (options, callback) {
      data[this.name] = data[this.name] || {index:[],store:{}}
      this.index = data[this.name].index
      this.store = data[this.name].store
      this.fn(this.name, callback).call(this, this)
      return this
    },

    keys: function (callback) {
      this.fn('keys', callback).call(this, this.index)
      return this
    },

    save: function (obj, cb) {
      // data[key] = value + ''; // force to string
      // window.top.name = JSON.stringify(data);
      var key = obj.key || this.uuid()
      this.exists(key, function(exists) {
        if (!exists) {
          if (obj.key) delete obj.key
          this.index.push(key)
        }
        this.store[key] = obj

        try {
          window.top.name = JSON.stringify(data) // TODO wow, this is the only diff from the memory adapter
        } catch(e) {
          // restore index/store to previous value before JSON exception
          if (!exists) {
            this.index.pop();
            delete this.store[key];
          }
          throw e;
        }

        if (cb) {
          obj.key = key
          this.lambda(cb).call(this, obj)
        }
      })
      return this
    },

    batch: function (objs, cb) {
      var r = []
      for (var i = 0, l = objs.length; i < l; i++) {
        this.save(objs[i], function(record) {
          r.push(record)
        })
      }
      if (cb) this.lambda(cb).call(this, r)
      return this
    },

    get: function (keyOrArray, cb) {
      var r;
      if (this.isArray(keyOrArray)) {
        r = []
        for (var i = 0, l = keyOrArray.length; i < l; i++) {
          r.push(this.store[keyOrArray[i]])
        }
      } else {
        r = this.store[keyOrArray]
        if (r) r.key = keyOrArray
      }
      if (cb) this.lambda(cb).call(this, r)
      return this
    },

    exists: function (key, cb) {
      this.lambda(cb).call(this, !!(this.store[key]))
      return this
    },

    all: function (cb) {
      var r = []
      for (var i = 0, l = this.index.length; i < l; i++) {
        var obj = this.store[this.index[i]]
        obj.key = this.index[i]
        r.push(obj)
      }
      this.fn(this.name, cb).call(this, r)
      return this
    },

    remove: function (keyOrArray, cb) {
      var del = this.isArray(keyOrArray) ? keyOrArray : [keyOrArray]
      for (var i = 0, l = del.length; i < l; i++) {
        var key = del[i].key ? del[i].key : del[i]
        var where = this.indexOf(this.index, key)
        if (where < 0) continue /* key not present */
        delete this.store[key]
        this.index.splice(where, 1)
      }
      window.top.name = JSON.stringify(data)
      if (cb) this.lambda(cb).call(this)
      return this
    },

    nuke: function (cb) {
      this.store = data[this.name].store = {}
      this.index = data[this.name].index = []
      window.top.name = JSON.stringify(data)
      if (cb) this.lambda(cb).call(this)
      return this
    }
  }
/////
})())
/**
 * dom storage adapter
 * ===
 * - originally authored by Joseph Pecoraro
 *
 */
//
// TODO does it make sense to be chainable all over the place?
// chainable: nuke, remove, all, get, save, all    
// not chainable: valid, keys
//
Lawnchair.adapter('dom', (function() {
  var storage = window.localStorage
  // the indexer is an encapsulation of the helpers needed to keep an ordered index of the keys
  var indexer = function(name) {
    return {
      // the key
      key: name + '._index_',
      // returns the index
      all: function() {
        var a  = storage.getItem(this.key)
        if (a) {
          a = JSON.parse(a)
        }
        if (a === null) storage.setItem(this.key, JSON.stringify([])) // lazy init
        return JSON.parse(storage.getItem(this.key))
      },
      // adds a key to the index
      add: function (key) {
        var a = this.all()
        a.push(key)
        storage.setItem(this.key, JSON.stringify(a))
      },
      // deletes a key from the index
      del: function (key) {
        var a = this.all(), r = []
        // FIXME this is crazy inefficient but I'm in a strata meeting and half concentrating
        for (var i = 0, l = a.length; i < l; i++) {
          if (a[i] != key) r.push(a[i])
        }
        storage.setItem(this.key, JSON.stringify(r))
      },
      // returns index for a key
      find: function (key) {
        var a = this.all()
        for (var i = 0, l = a.length; i < l; i++) {
          if (key === a[i]) return i
        }
        return false
      }
    }
  }

  // adapter api
  return {

    // ensure we are in an env with localStorage
    valid: function () {
      return !!storage && function() {
        // in mobile safari if safe browsing is enabled, window.storage
        // is defined but setItem calls throw exceptions.
        var success = true
        var value = Math.random()
        try {
          storage.setItem(value, value)
        } catch (e) {
          success = false
        }
        storage.removeItem(value)
        return success
      }()
    },

    init: function (options, callback) {
      this.indexer = indexer(this.name)
      if (callback) this.fn(this.name, callback).call(this, this)
    },

    save: function (obj, callback) {
      var key = obj.key ? this.name + '.' + obj.key : this.name + '.' + this.uuid()
      // now we kil the key and use it in the store colleciton
      delete obj.key;
      storage.setItem(key, JSON.stringify(obj))
      // if the key is not in the index push it on
      if (this.indexer.find(key) === false) this.indexer.add(key)
      obj.key = key.slice(this.name.length + 1)
      if (callback) {
        this.lambda(callback).call(this, obj)
      }
      return this
    },

    batch: function (ary, callback) {
      var saved = []
      // not particularily efficient but this is more for sqlite situations
      for (var i = 0, l = ary.length; i < l; i++) {
        this.save(ary[i], function(r){
          saved.push(r)
        })
      }
      if (callback) this.lambda(callback).call(this, saved)
      return this
    },

    // accepts [options], callback
    keys: function(callback) {
      if (callback) {
        var name = this.name
        var indices = this.indexer.all();
        var keys = [];
        //Checking for the support of map.
        if(Array.prototype.map) {
          keys = indices.map(function(r){ return r.replace(name + '.', '') })
        } else {
          for (var key in indices) {
            keys.push(key.replace(name + '.', ''));
          }
        }
        this.fn('keys', callback).call(this, keys)
      }
      return this // TODO options for limit/offset, return promise
    },

    get: function (key, callback) {
      if (this.isArray(key)) {
        var r = []
        for (var i = 0, l = key.length; i < l; i++) {
          var k = this.name + '.' + key[i]
          var obj = storage.getItem(k)
          if (obj) {
            obj = JSON.parse(obj)
            obj.key = key[i]
          }
          r.push(obj)
        }
        if (callback) this.lambda(callback).call(this, r)
      } else {
        var k = this.name + '.' + key
        var  obj = storage.getItem(k)
        if (obj) {
          obj = JSON.parse(obj)
          obj.key = key
        }
        if (callback) this.lambda(callback).call(this, obj)
      }
      return this
    },

    exists: function (key, cb) {
      var exists = this.indexer.find(this.name+'.'+key) === false ? false : true ;
      this.lambda(cb).call(this, exists);
      return this;
    },
    // NOTE adapters cannot set this.__results but plugins do
    // this probably should be reviewed
    all: function (callback) {
      var idx = this.indexer.all()
        ,   r   = []
        ,   o
        ,   k
      for (var i = 0, l = idx.length; i < l; i++) {
        k     = idx[i] //v
        o     = JSON.parse(storage.getItem(k))
        o.key = k.replace(this.name + '.', '')
        r.push(o)
      }
      if (callback) this.fn(this.name, callback).call(this, r)
      return this
    },

    remove: function (keyOrArray, callback) {
      var self = this;
      if (this.isArray(keyOrArray)) {
        // batch remove
        var i, done = keyOrArray.length;
        var removeOne = function(i) {
          self.remove(keyOrArray[i], function() {
            if ((--done) > 0) { return; }
            if (callback) {
              self.lambda(callback).call(self);
            }
          });
        };
        for (i=0; i < keyOrArray.length; i++)
          removeOne(i);
        return this;
      }
      var key = this.name + '.' +
        ((keyOrArray.key) ? keyOrArray.key : keyOrArray)
      this.indexer.del(key)
      storage.removeItem(key)
      if (callback) this.lambda(callback).call(this)
      return this
    },

    nuke: function (callback) {
      this.all(function(r) {
        for (var i = 0, l = r.length; i < l; i++) {
          this.remove(r[i]);
        }
        if (callback) this.lambda(callback).call(this)
      })
      return this
    }
  }})());
Lawnchair.adapter('webkit-sqlite', (function() {
  // private methods
  var fail = function(e, i) {
    if (console) {
      console.log('error in sqlite adaptor!', e, i)
    }
  }, now = function() {
      return new Date()
    } // FIXME need to use better date fn
    // not entirely sure if this is needed...

  // public methods
  return {

    valid: function() {
      return !!(window.openDatabase)
    },

    init: function(options, callback) {
      var that = this,
        cb = that.fn(that.name, callback),
        create = "CREATE TABLE IF NOT EXISTS " + this.record + " (id NVARCHAR(32) UNIQUE PRIMARY KEY, value TEXT, timestamp REAL)",
        win = function() {
          return cb.call(that, that);
        }
        // open a connection and create the db if it doesn't exist
        //FEEDHENRY CHANGE TO ALLOW ERROR CALLBACK
      if (options && 'function' === typeof options.fail) fail = options.fail
        //END CHANGE
      this.db = openDatabase(this.name, '1.0.0', this.name, 65536)
      this.db.transaction(function(t) {
        t.executeSql(create, [], win, fail)
      })
    },

    keys: function(callback) {
      var cb = this.lambda(callback),
        that = this,
        keys = "SELECT id FROM " + this.record + " ORDER BY timestamp DESC"

      this.db.readTransaction(function(t) {
        var win = function(xxx, results) {
          if (results.rows.length == 0) {
            cb.call(that, [])
          } else {
            var r = [];
            for (var i = 0, l = results.rows.length; i < l; i++) {
              r.push(results.rows.item(i).id);
            }
            cb.call(that, r)
          }
        }
        t.executeSql(keys, [], win, fail)
      })
      return this
    },
    // you think thats air you're breathing now?
    save: function(obj, callback, error) {
      var that = this
      objs = (this.isArray(obj) ? obj : [obj]).map(function(o) {
        if (!o.key) {
          o.key = that.uuid()
        }
        return o
      }),
        ins = "INSERT OR REPLACE INTO " + this.record + " (value, timestamp, id) VALUES (?,?,?)",
        win = function() {
          if (callback) {
            that.lambda(callback).call(that, that.isArray(obj) ? objs : objs[0])
          }
        }, error = error || function() {}, insvals = [],
        ts = now()

        try {
          for (var i = 0, l = objs.length; i < l; i++) {
            insvals[i] = [JSON.stringify(objs[i]), ts, objs[i].key];
          }
        } catch (e) {
          fail(e)
          throw e;
        }

      that.db.transaction(function(t) {
        for (var i = 0, l = objs.length; i < l; i++)
          t.executeSql(ins, insvals[i])
      }, function(e, i) {
        fail(e, i)
      }, win)

      return this
    },


    batch: function(objs, callback) {
      return this.save(objs, callback)
    },

    get: function(keyOrArray, cb) {
      var that = this,
        sql = '',
        args = this.isArray(keyOrArray) ? keyOrArray : [keyOrArray];
      // batch selects support
      sql = 'SELECT id, value FROM ' + this.record + " WHERE id IN (" +
        args.map(function() {
        return '?'
      }).join(",") + ")"
      // FIXME
      // will always loop the results but cleans it up if not a batch return at the end..
      // in other words, this could be faster
      var win = function(xxx, results) {
        var o, r, lookup = {}
          // map from results to keys
        for (var i = 0, l = results.rows.length; i < l; i++) {
          o = JSON.parse(results.rows.item(i).value)
          o.key = results.rows.item(i).id
          lookup[o.key] = o;
        }
        r = args.map(function(key) {
          return lookup[key];
        });
        if (!that.isArray(keyOrArray)) r = r.length ? r[0] : null
        if (cb) that.lambda(cb).call(that, r)
      }
      this.db.readTransaction(function(t) {
        t.executeSql(sql, args, win, fail)
      })
      return this
    },

    exists: function(key, cb) {
      var is = "SELECT * FROM " + this.record + " WHERE id = ?",
        that = this,
        win = function(xxx, results) {
          if (cb) that.fn('exists', cb).call(that, (results.rows.length > 0))
        }
      this.db.readTransaction(function(t) {
        t.executeSql(is, [key], win, fail)
      })
      return this
    },

    all: function(callback) {
      var that = this,
        all = "SELECT * FROM " + this.record,
        r = [],
        cb = this.fn(this.name, callback) || undefined,
        win = function(xxx, results) {
          if (results.rows.length != 0) {
            for (var i = 0, l = results.rows.length; i < l; i++) {
              var obj = JSON.parse(results.rows.item(i).value)
              obj.key = results.rows.item(i).id
              r.push(obj)
            }
          }
          if (cb) cb.call(that, r)
        }

      this.db.readTransaction(function(t) {
        t.executeSql(all, [], win, fail)
      })
      return this
    },

    remove: function(keyOrArray, cb) {
      var that = this,
        args, sql = "DELETE FROM " + this.record + " WHERE id ",
        win = function() {
          if (cb) that.lambda(cb).call(that)
        }
      if (!this.isArray(keyOrArray)) {
        sql += '= ?';
        args = [keyOrArray];
      } else {
        args = keyOrArray;
        sql += "IN (" +
          args.map(function() {
          return '?'
        }).join(',') +
          ")";
      }
      args = args.map(function(obj) {
        return obj.key ? obj.key : obj;
      });

      this.db.transaction(function(t) {
        t.executeSql(sql, args, win, fail);
      });

      return this;
    },

    nuke: function(cb) {
      var nuke = "DELETE FROM " + this.record,
        that = this,
        win = cb ? function() {
        that.lambda(cb).call(that)
      } : function() {}
      this.db.transaction(function(t) {
        t.executeSql(nuke, [], win, fail)
      })
      return this
    }
  }
})());
Lawnchair.adapter('html5-filesystem', (function(global){

  var FileError = global.FileError;

  var fail = function( e ) {
    var msg;
    var show = true;
    switch (e.code) {
      case FileError.QUOTA_EXCEEDED_ERR:
        msg = 'QUOTA_EXCEEDED_ERR';
        break;
      case FileError.NOT_FOUND_ERR:
        msg = 'NOT_FOUND_ERR';
        show = false;
        break;
      case FileError.SECURITY_ERR:
        msg = 'SECURITY_ERR';
        break;
      case FileError.INVALID_MODIFICATION_ERR:
        msg = 'INVALID_MODIFICATION_ERR';
        break;
      case FileError.INVALID_STATE_ERR:
        msg = 'INVALID_STATE_ERR';
        break;
      default:
        msg = 'Unknown Error';
        break;
    };
    if ( console && show ) console.error( e, msg );
  };

  var ls = function( reader, callback, entries ) {
    var result = entries || [];
    reader.readEntries(function( results ) {
      if ( !results.length ) {
        if ( callback ) callback( result.map(function(entry) { return entry.name; }) );
      } else {
        ls( reader, callback, result.concat( Array.prototype.slice.call( results ) ) );
      }
    }, fail );
  };

  var filesystems = {};

  var root = function( store, callback ) {
    var directory = filesystems[store.name];
    if ( directory ) {
      callback( directory );
    } else {
      setTimeout(function() {
        root( store, callback );
      }, 10 );
    }
  };

  var isPhoneGap = function() {
    //http://stackoverflow.com/questions/10347539/detect-between-a-mobile-browser-or-a-phonegap-application
    //may break.
    var app = document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1;
    if (app) {
      return true;
    } else {
      return false;
    }
  }

  var createBlobOrString = function(contentstr) {
    var retVal;
    if (isPhoneGap()) {  // phonegap filewriter works with strings, later versions also work with binary arrays, and if passed a blob will just convert to binary array anyway
      retVal = contentstr;
    } else {
      var targetContentType = 'application/json';
      try {
        retVal = new Blob( [contentstr], { type: targetContentType });  // Blob doesn't exist on all androids
      }
      catch (e){
        // TypeError old chrome and FF
        var blobBuilder = window.BlobBuilder ||
          window.WebKitBlobBuilder ||
          window.MozBlobBuilder ||
          window.MSBlobBuilder;
        if (e.name == 'TypeError' && blobBuilder) {
          var bb = new blobBuilder();
          bb.append([contentstr.buffer]);
          retVal = bb.getBlob(targetContentType);
        } else {
          // We can't make a Blob, so just return the stringified content
          retVal = contentstr;
        }
      }
    }
    return retVal;
  }

  return {
    // boolean; true if the adapter is valid for the current environment
    valid: function() {
      var fs = global.requestFileSystem || global.webkitRequestFileSystem || global.moz_requestFileSystem;
      return !!fs;
    },

    // constructor call and callback. 'name' is the most common option
    init: function( options, callback ) {
      var me = this;
      var error = function(e) { fail(e); if ( callback ) me.fn( me.name, callback ).call( me, me ); };
      var size = options.size || 100*1024*1024;
      var name = this.name;

      function requestFileSystem(amount) {
//        console.log('in requestFileSystem');
        var fs = global.requestFileSystem || global.webkitRequestFileSystem || global.moz_requestFileSystem;
        var mode = window.PERSISTENT;
        if(typeof LocalFileSystem !== "undefined" && typeof LocalFileSystem.PERSISTENT !== "undefined"){
          mode = LocalFileSystem.PERSISTENT;
        }      
        fs(mode, amount, function(fs) {
//          console.log('got FS ', fs);
          fs.root.getDirectory( name, {create:true}, function( directory ) {
//            console.log('got DIR ', directory);
            filesystems[name] = directory;
            if ( callback ) me.fn( me.name, callback ).call( me, me );
          }, function( e ) {
//            console.log('error getting dir :: ', e);
            error(e);
          });
        }, function( e ) {
//          console.log('error getting FS :: ', e);
          error(e);
        });
      };

      // When in the browser we need to use the html5 file system rather than
      // the one cordova supplies, but it needs to request a quota first.
      if (typeof navigator.webkitPersistentStorage !== 'undefined') {
        navigator.webkitPersistentStorage.requestQuota(size, requestFileSystem, function() {
          logger.warn('User declined file storage');
          error('User declined file storage');
        });
      } else {
        // Amount is 0 because we pretty much have free reign over the
        // amount of storage we use on an android device.
        requestFileSystem(0);
      }
    },

    // returns all the keys in the store
    keys: function( callback ) {
      var me = this;
      root( this, function( store ) {
        ls( store.createReader(), function( entries ) {
          if ( callback ) me.fn( 'keys', callback ).call( me, entries );
        });
      });
      return this;
    },

    // save an object
    save: function( obj, callback ) {
      var me = this;
      var key = obj.key || this.uuid();
      obj.key = key;
      var error = function(e) { fail(e); if ( callback ) me.lambda( callback ).call( me ); };
      root( this, function( store ) {
        store.getFile( key, {create:true}, function( file ) {
          file.createWriter(function( writer ) {
            writer.onerror = error;
            writer.onwriteend = function() {
              // Clear the onWriteEnd handler so the truncate does not call it and cause an infinite loop
              this.onwriteend = null;
              // Truncate the file at the end of the written contents. This ensures that if we are updating 
              // a file which was previously longer, we will not be left with old contents beyond the end of 
              // the current buffer.
              this.truncate(this.position);
              if ( callback ) me.lambda( callback ).call( me, obj );
            };
            var contentStr = JSON.stringify(obj);

            var writerContent = createBlobOrString(contentStr);
            writer.write(writerContent);
          }, error );
        }, error );
      });
      return this;
    },

    // batch save array of objs
    batch: function( objs, callback ) {
      var me = this;
      var saved = [];
      for ( var i = 0, il = objs.length; i < il; i++ ) {
        me.save( objs[i], function( obj ) {
          saved.push( obj );
          if ( saved.length === il && callback ) {
            me.lambda( callback ).call( me, saved );
          }
        });
      }
      return this;
    },

    // retrieve obj (or array of objs) and apply callback to each
    get: function( key /* or array */, callback ) {
      var me = this;
      if ( this.isArray( key ) ) {
        var values = [];
        for ( var i = 0, il = key.length; i < il; i++ ) {
          me.get( key[i], function( result ) {
            if ( result ) values.push( result );
            if ( values.length === il && callback ) {
              me.lambda( callback ).call( me, values );
            }
          });
        }
      } else {
        var error = function(e) {
          fail( e );
          if ( callback ) {
            me.lambda( callback ).call( me );
          }
        };
        root( this, function( store ) {
          store.getFile( key, {create:false}, function( entry ) {
            entry.file(function( file ) {
              var reader = new FileReader();

              reader.onerror = error;

              reader.onload = function(e) {
                var res = {};
                try {
                  res = JSON.parse( e.target.result);
                  res.key = key;
                } catch (e) {
                  res = {key:key};
                }
                if ( callback ) me.lambda( callback ).call( me, res );
              };

              reader.readAsText( file );
            }, error );
          }, error );
        });
      }
      return this;
    },

    // check if an obj exists in the collection
    exists: function( key, callback ) {
      var me = this;
      root( this, function( store ) {
        store.getFile( key, {create:false}, function() {
          if ( callback ) me.lambda( callback ).call( me, true );
        }, function() {
          if ( callback ) me.lambda( callback ).call( me, false );
        });
      });
      return this;
    },

    // returns all the objs to the callback as an array
    all: function( callback ) {
      var me = this;
      if ( callback ) {
        this.keys(function( keys ) {
          if ( !keys.length ) {
            me.fn( me.name, callback ).call( me, [] );
          } else {
            me.get( keys, function( values ) {
              me.fn( me.name, callback ).call( me, values );
            });
          }
        });
      }
      return this;
    },

    // remove a doc or collection of em
    remove: function( key /* or object */, callback ) {
      var me = this;
      var error = function(e) { fail( e ); if ( callback ) me.lambda( callback ).call( me ); };
      root( this, function( store ) {
        store.getFile( (typeof key === 'string' ? key : key.key ), {create:false}, function( file ) {
          file.remove(function() {
            if ( callback ) me.lambda( callback ).call( me );
          }, error );
        }, error );
      });
      return this;
    },

    // destroy everything
    nuke: function( callback ) {
      var me = this;
      var count = 0;
      this.keys(function( keys ) {
        if ( !keys.length ) {
          if ( callback ) me.lambda( callback ).call( me );
        } else {
          for ( var i = 0, il = keys.length; i < il; i++ ) {
            me.remove( keys[i], function() {
              count++;
              if ( count === il && callback ) {
                me.lambda( callback ).call( me );
              }
            });
          }
        }
      });
      return this;
    }
  };
}(this)));
Lawnchair.adapter('memory', (function(){

    var data = {}

    return {
        valid: function() { return true },

        init: function (options, callback) {
            data[this.name] = data[this.name] || {index:[],store:{}}
            this.index = data[this.name].index
            this.store = data[this.name].store
            var cb = this.fn(this.name, callback)
            if (cb) cb.call(this, this)
            return this
        },

        keys: function (callback) {
            this.fn('keys', callback).call(this, this.index)
            return this
        },

        save: function(obj, cb) {
            var key = obj.key || this.uuid()
            
            this.exists(key, function(exists) {
                if (!exists) {
                    if (obj.key) delete obj.key
                    this.index.push(key)
                }

                this.store[key] = obj
                
                if (cb) {
                    obj.key = key
                    this.lambda(cb).call(this, obj)
                }
            })

            return this
        },

        batch: function (objs, cb) {
            var r = []
            for (var i = 0, l = objs.length; i < l; i++) {
                this.save(objs[i], function(record) {
                    r.push(record)
                })
            }
            if (cb) this.lambda(cb).call(this, r)
            return this
        },

        get: function (keyOrArray, cb) {
            var r;
            if (this.isArray(keyOrArray)) {
                r = []
                for (var i = 0, l = keyOrArray.length; i < l; i++) {
                    r.push(this.store[keyOrArray[i]])
                }
            } else {
                r = this.store[keyOrArray]
                if (r) r.key = keyOrArray
            }
            if (cb) this.lambda(cb).call(this, r)
            return this 
        },

        exists: function (key, cb) {
            this.lambda(cb).call(this, !!(this.store[key]))
            return this
        },

        all: function (cb) {
            var r = []
            for (var i = 0, l = this.index.length; i < l; i++) {
                var obj = this.store[this.index[i]]
                obj.key = this.index[i]
                r.push(obj)
            }
            this.fn(this.name, cb).call(this, r)
            return this
        },

        remove: function (keyOrArray, cb) {
            var del = this.isArray(keyOrArray) ? keyOrArray : [keyOrArray]
            for (var i = 0, l = del.length; i < l; i++) {
                var key = del[i].key ? del[i].key : del[i]
                var where = this.indexOf(this.index, key)
                if (where < 0) continue /* key not present */
                delete this.store[key]
                this.index.splice(where, 1)
            }
            if (cb) this.lambda(cb).call(this)
            return this
        },

        nuke: function (cb) {
            this.store = data[this.name].store = {}
            this.index = data[this.name].index = []
            if (cb) this.lambda(cb).call(this)
            return this
        }
    }
/////
})());
; browserify_shim__define__module__export__(typeof Lawnchair != "undefined" ? Lawnchair : window.Lawnchair);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
(function (global){
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*
 json2.js
 2011-10-19

 Public Domain.

 NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

 See http://www.JSON.org/js.html


 This code should be minified before deployment.
 See http://javascript.crockford.com/jsmin.html

 USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
 NOT CONTROL.


 This file creates a global JSON object containing two methods: stringify
 and parse.

 JSON.stringify(value, replacer, space)
 value       any JavaScript value, usually an object or array.

 replacer    an optional parameter that determines how object
 values are stringified for objects. It can be a
 function or an array of strings.

 space       an optional parameter that specifies the indentation
 of nested structures. If it is omitted, the text will
 be packed without extra whitespace. If it is a number,
 it will specify the number of spaces to indent at each
 level. If it is a string (such as '\t' or '&nbsp;'),
 it contains the characters used to indent at each level.

 This method produces a JSON text from a JavaScript value.

 When an object value is found, if the object contains a toJSON
 method, its toJSON method will be called and the result will be
 stringified. A toJSON method does not serialize: it returns the
 value represented by the name/value pair that should be serialized,
 or undefined if nothing should be serialized. The toJSON method
 will be passed the key associated with the value, and this will be
 bound to the value

 For example, this would serialize Dates as ISO strings.

 Date.prototype.toJSON = function (key) {
 function f(n) {
 // Format integers to have at least two digits.
 return n < 10 ? '0' + n : n;
 }

 return this.getUTCFullYear()   + '-' +
 f(this.getUTCMonth() + 1) + '-' +
 f(this.getUTCDate())      + 'T' +
 f(this.getUTCHours())     + ':' +
 f(this.getUTCMinutes())   + ':' +
 f(this.getUTCSeconds())   + 'Z';
 };

 You can provide an optional replacer method. It will be passed the
 key and value of each member, with this bound to the containing
 object. The value that is returned from your method will be
 serialized. If your method returns undefined, then the member will
 be excluded from the serialization.

 If the replacer parameter is an array of strings, then it will be
 used to select the members to be serialized. It filters the results
 such that only members with keys listed in the replacer array are
 stringified.

 Values that do not have JSON representations, such as undefined or
 functions, will not be serialized. Such values in objects will be
 dropped; in arrays they will be replaced with null. You can use
 a replacer function to replace those with JSON values.
 JSON.stringify(undefined) returns undefined.

 The optional space parameter produces a stringification of the
 value that is filled with line breaks and indentation to make it
 easier to read.

 If the space parameter is a non-empty string, then that string will
 be used for indentation. If the space parameter is a number, then
 the indentation will be that many spaces.

 Example:

 text = JSON.stringify(['e', {pluribus: 'unum'}]);
 // text is '["e",{"pluribus":"unum"}]'


 text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
 // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

 text = JSON.stringify([new Date()], function (key, value) {
 return this[key] instanceof Date ?
 'Date(' + this[key] + ')' : value;
 });
 // text is '["Date(---current time---)"]'


 JSON.parse(text, reviver)
 This method parses a JSON text to produce an object or array.
 It can throw a SyntaxError exception.

 The optional reviver parameter is a function that can filter and
 transform the results. It receives each of the keys and values,
 and its return value is used instead of the original value.
 If it returns what it received, then the structure is not modified.
 If it returns undefined then the member is deleted.

 Example:

 // Parse the text. Values that look like ISO date strings will
 // be converted to Date objects.

 myData = JSON.parse(text, function (key, value) {
 var a;
 if (typeof value === 'string') {
 a =
 /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
 if (a) {
 return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
 +a[5], +a[6]));
 }
 }
 return value;
 });

 myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
 var d;
 if (typeof value === 'string' &&
 value.slice(0, 5) === 'Date(' &&
 value.slice(-1) === ')') {
 d = new Date(value.slice(5, -1));
 if (d) {
 return d;
 }
 }
 return value;
 });


 This is a reference implementation. You are free to copy, modify, or
 redistribute.
 */

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
 call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
 getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
 lastIndex, length, parse, prototype, push, replace, slice, stringify,
 test, toJSON, toString, valueOf
 */


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON;
if (!JSON) {
  JSON = {};
}

(function () {
  'use strict';

  function f(n) {
    // Format integers to have at least two digits.
    return n < 10 ? '0' + n : n;
  }

  if (typeof Date.prototype.toJSON !== 'function') {

    Date.prototype.toJSON = function (key) {

      return isFinite(this.valueOf())
        ? this.getUTCFullYear()     + '-' +
        f(this.getUTCMonth() + 1) + '-' +
        f(this.getUTCDate())      + 'T' +
        f(this.getUTCHours())     + ':' +
        f(this.getUTCMinutes())   + ':' +
        f(this.getUTCSeconds())   + 'Z'
        : null;
    };

    String.prototype.toJSON      =
      Number.prototype.toJSON  =
        Boolean.prototype.toJSON = function (key) {
          return this.valueOf();
        };
  }

  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
      '\b': '\\b',
      '\t': '\\t',
      '\n': '\\n',
      '\f': '\\f',
      '\r': '\\r',
      '"' : '\\"',
      '\\': '\\\\'
    },
    rep;


  function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
      var c = meta[a];
      return typeof c === 'string'
        ? c
        : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
  }


  function str(key, holder) {

// Produce a string from holder[key].

    var i,          // The loop counter.
      k,          // The member key.
      v,          // The member value.
      length,
      mind = gap,
      partial,
      value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

    if (value && typeof value === 'object' &&
      typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

    if (typeof rep === 'function') {
      value = rep.call(holder, key, value);
    }

// What happens next depends on the value's type.

    switch (typeof value) {
      case 'string':
        return quote(value);

      case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

        return isFinite(value) ? String(value) : 'null';

      case 'boolean':
      case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

        return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

      case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

        if (!value) {
          return 'null';
        }

// Make an array to hold the partial results of stringifying this object value.

        gap += indent;
        partial = [];

// Is the value an array?

        if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

          length = value.length;
          for (i = 0; i < length; i += 1) {
            partial[i] = str(i, value) || 'null';
          }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

          v = partial.length === 0
            ? '[]'
            : gap
            ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
            : '[' + partial.join(',') + ']';
          gap = mind;
          return v;
        }

// If the replacer is an array, use it to select the members to be stringified.

        if (rep && typeof rep === 'object') {
          length = rep.length;
          for (i = 0; i < length; i += 1) {
            if (typeof rep[i] === 'string') {
              k = rep[i];
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ': ' : ':') + v);
              }
            }
          }
        } else {

// Otherwise, iterate through all of the keys in the object.

          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ': ' : ':') + v);
              }
            }
          }
        }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

        v = partial.length === 0
          ? '{}'
          : gap
          ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
          : '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
  }

// If the JSON object does not yet have a stringify method, give it one.

  if (typeof JSON.stringify !== 'function') {
    JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

      var i;
      gap = '';
      indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

      if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
          indent += ' ';
        }

// If the space parameter is a string, it will be used as the indent string.

      } else if (typeof space === 'string') {
        indent = space;
      }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

      rep = replacer;
      if (replacer && typeof replacer !== 'function' &&
        (typeof replacer !== 'object' ||
          typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
      }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

      return str('', {'': value});
    };
  }


// If the JSON object does not yet have a parse method, give it one.

  if (typeof JSON.parse !== 'function') {
    JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

      var j;

      function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = walk(value, k);
              if (v !== undefined) {
                value[k] = v;
              } else {
                delete value[k];
              }
            }
          }
        }
        return reviver.call(holder, key, value);
      }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

      text = String(text);
      cx.lastIndex = 0;
      if (cx.test(text)) {
        text = text.replace(cx, function (a) {
          return '\\u' +
            ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        });
      }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

      if (/^[\],:{}\s]*$/
        .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

        j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

        return typeof reviver === 'function'
          ? walk({'': j}, '')
          : j;
      }

// If the text is not JSON parseable, then a SyntaxError is thrown.

      throw new SyntaxError('JSON.parse');
    };
  }
}());
; browserify_shim__define__module__export__(typeof JSON != "undefined" ? JSON : window.JSON);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.

// Basic JavaScript BN library - subset useful for RSA encryption.

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary&0xffffff)==0xefcafe);

// (public) Constructor
function BigInteger(a,b,c) {
  if(a != null)
    if("number" == typeof a) this.fromNumber(a,b,c);
    else if(b == null && "string" != typeof a) this.fromString(a,256);
    else this.fromString(a,b);
}

// return new, unset BigInteger
function nbi() { return new BigInteger(null); }

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i,x,w,j,c,n) {
  while(--n >= 0) {
    var v = x*this[i++]+w[j]+c;
    c = Math.floor(v/0x4000000);
    w[j++] = v&0x3ffffff;
  }
  return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i,x,w,j,c,n) {
  var xl = x&0x7fff, xh = x>>15;
  while(--n >= 0) {
    var l = this[i]&0x7fff;
    var h = this[i++]>>15;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
    w[j++] = l&0x3fffffff;
  }
  return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i,x,w,j,c,n) {
  var xl = x&0x3fff, xh = x>>14;
  while(--n >= 0) {
    var l = this[i]&0x3fff;
    var h = this[i++]>>14;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x3fff)<<14)+w[j]+c;
    c = (l>>28)+(m>>14)+xh*h;
    w[j++] = l&0xfffffff;
  }
  return c;
}
if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
  BigInteger.prototype.am = am2;
  dbits = 30;
}
else if(j_lm && (navigator.appName != "Netscape")) {
  BigInteger.prototype.am = am1;
  dbits = 26;
}
else { // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1<<dbits)-1);
BigInteger.prototype.DV = (1<<dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2,BI_FP);
BigInteger.prototype.F1 = BI_FP-dbits;
BigInteger.prototype.F2 = 2*dbits-BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr,vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) { return BI_RM.charAt(n); }
function intAt(s,i) {
  var c = BI_RC[s.charCodeAt(i)];
  return (c==null)?-1:c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1;
  this.s = (x<0)?-1:0;
  if(x > 0) this[0] = x;
  else if(x < -1) this[0] = x+DV;
  else this.t = 0;
}

// return bigint initialized to value
function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

// (protected) set from string and radix
function bnpFromString(s,b) {
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 256) k = 8; // byte array
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else { this.fromRadix(s,b); return; }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while(--i >= 0) {
    var x = (k==8)?s[i]&0xff:intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-") mi = true;
      continue;
    }
    mi = false;
    if(sh == 0)
      this[this.t++] = x;
    else if(sh+k > this.DB) {
      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
      this[this.t++] = (x>>(this.DB-sh));
    }
    else
      this[this.t-1] |= x<<sh;
    sh += k;
    if(sh >= this.DB) sh -= this.DB;
  }
  if(k == 8 && (s[0]&0x80) != 0) {
    this.s = -1;
    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
  }
  this.clamp();
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s&this.DM;
  while(this.t > 0 && this[this.t-1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
  if(this.s < 0) return "-"+this.negate().toString(b);
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else return this.toRadix(b);
  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
  var p = this.DB-(i*this.DB)%k;
  if(i-- > 0) {
    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
    while(i >= 0) {
      if(p < k) {
        d = (this[i]&((1<<p)-1))<<(k-p);
        d |= this[--i]>>(p+=this.DB-k);
      }
      else {
        d = (this[i]>>(p-=k))&km;
        if(p <= 0) { p += this.DB; --i; }
      }
      if(d > 0) m = true;
      if(m) r += int2char(d);
    }
  }
  return m?r:"0";
}

// (public) -this
function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

// (public) |this|
function bnAbs() { return (this.s<0)?this.negate():this; }

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s-a.s;
  if(r != 0) return r;
  var i = this.t;
  r = i-a.t;
  if(r != 0) return (this.s<0)?-r:r;
  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
  return 0;
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1, t;
  if((t=x>>>16) != 0) { x = t; r += 16; }
  if((t=x>>8) != 0) { x = t; r += 8; }
  if((t=x>>4) != 0) { x = t; r += 4; }
  if((t=x>>2) != 0) { x = t; r += 2; }
  if((t=x>>1) != 0) { x = t; r += 1; }
  return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if(this.t <= 0) return 0;
  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n,r) {
  var i;
  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
  for(i = n-1; i >= 0; --i) r[i] = 0;
  r.t = this.t+n;
  r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n,r) {
  for(var i = n; i < this.t; ++i) r[i-n] = this[i];
  r.t = Math.max(this.t-n,0);
  r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n,r) {
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<cbs)-1;
  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
  for(i = this.t-1; i >= 0; --i) {
    r[i+ds+1] = (this[i]>>cbs)|c;
    c = (this[i]&bm)<<bs;
  }
  for(i = ds-1; i >= 0; --i) r[i] = 0;
  r[ds] = c;
  r.t = this.t+ds+1;
  r.s = this.s;
  r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n,r) {
  r.s = this.s;
  var ds = Math.floor(n/this.DB);
  if(ds >= this.t) { r.t = 0; return; }
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<bs)-1;
  r[0] = this[ds]>>bs;
  for(var i = ds+1; i < this.t; ++i) {
    r[i-ds-1] |= (this[i]&bm)<<cbs;
    r[i-ds] = this[i]>>bs;
  }
  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
  r.t = this.t-ds;
  r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]-a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c -= a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c -= a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = (c<0)?-1:0;
  if(c < -1) r[i++] = this.DV+c;
  else if(c > 0) r[i++] = c;
  r.t = i;
  r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a,r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i+y.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
  r.s = 0;
  r.clamp();
  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2*x.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < x.t-1; ++i) {
    var c = x.am(i,x[i],r,2*i,0,1);
    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
      r[i+x.t] -= x.DV;
      r[i+x.t+1] = 1;
    }
  }
  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
  r.s = 0;
  r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m,q,r) {
  var pm = m.abs();
  if(pm.t <= 0) return;
  var pt = this.abs();
  if(pt.t < pm.t) {
    if(q != null) q.fromInt(0);
    if(r != null) this.copyTo(r);
    return;
  }
  if(r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB-nbits(pm[pm.t-1]);  // normalize modulus
  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
  else { pm.copyTo(y); pt.copyTo(r); }
  var ys = y.t;
  var y0 = y[ys-1];
  if(y0 == 0) return;
  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
  y.dlShiftTo(j,t);
  if(r.compareTo(t) >= 0) {
    r[r.t++] = 1;
    r.subTo(t,r);
  }
  BigInteger.ONE.dlShiftTo(ys,t);
  t.subTo(y,y); // "negative" y so we can replace sub with am later
  while(y.t < ys) y[y.t++] = 0;
  while(--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {  // Try it out
      y.dlShiftTo(j,t);
      r.subTo(t,r);
      while(r[i] < --qd) r.subTo(t,r);
    }
  }
  if(q != null) {
    r.drShiftTo(ys,q);
    if(ts != ms) BigInteger.ZERO.subTo(q,q);
  }
  r.t = ys;
  r.clamp();
  if(nsh > 0) r.rShiftTo(nsh,r);  // Denormalize remainder
  if(ts < 0) BigInteger.ZERO.subTo(r,r);
}

// (public) this mod a
function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a,null,r);
  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
  return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) { this.m = m; }
function cConvert(x) {
  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
  else return x;
}
function cRevert(x) { return x; }
function cReduce(x) { x.divRemTo(this.m,null,x); }
function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if(this.t < 1) return 0;
  var x = this[0];
  if((x&1) == 0) return 0;
  var y = x&3;    // y == 1/x mod 2^2
  y = (y*(2-(x&0xf)*y))&0xf;  // y == 1/x mod 2^4
  y = (y*(2-(x&0xff)*y))&0xff;  // y == 1/x mod 2^8
  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff; // y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y*(2-x*y%this.DV))%this.DV;    // y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y>0)?this.DV-y:-y;
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp&0x7fff;
  this.mph = this.mp>>15;
  this.um = (1<<(m.DB-15))-1;
  this.mt2 = 2*m.t;
}

// xR mod m
function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t,r);
  r.divRemTo(this.m,null,r);
  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
  return r;
}

// x/R mod m
function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while(x.t <= this.mt2)  // pad x so am has enough room later
    x[x.t++] = 0;
  for(var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i]&0x7fff;
    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
    // use am to combine the multiply-shift-add into one call
    j = i+this.m.t;
    x[j] += this.m.am(0,u0,x,i,0,this.m.t);
    // propagate carry
    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
  }
  x.clamp();
  x.drShiftTo(this.m.t,x);
  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

// r = "xy/R mod m"; x,y != r
function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e,z) {
  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
  g.copyTo(r);
  while(--i >= 0) {
    z.sqrTo(r,r2);
    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
    else { var t = r; r = r2; r2 = t; }
  }
  return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e,m) {
  var z;
  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e,z);
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// prng4.js - uses Arcfour as a PRNG

function Arcfour() {
  this.i = 0;
  this.j = 0;
  this.S = new Array();
}

// Initialize arcfour context from key, an array of ints, each from [0..255]
function ARC4init(key) {
  var i, j, t;
  for(i = 0; i < 256; ++i)
    this.S[i] = i;
  j = 0;
  for(i = 0; i < 256; ++i) {
    j = (j + this.S[i] + key[i % key.length]) & 255;
    t = this.S[i];
    this.S[i] = this.S[j];
    this.S[j] = t;
  }
  this.i = 0;
  this.j = 0;
}

function ARC4next() {
  var t;
  this.i = (this.i + 1) & 255;
  this.j = (this.j + this.S[this.i]) & 255;
  t = this.S[this.i];
  this.S[this.i] = this.S[this.j];
  this.S[this.j] = t;
  return this.S[(t + this.S[this.i]) & 255];
}

Arcfour.prototype.init = ARC4init;
Arcfour.prototype.next = ARC4next;

// Plug in your RNG constructor here
function prng_newstate() {
  return new Arcfour();
}

// Pool size must be a multiple of 4 and greater than 32.
// An array of bytes the size of the pool will be passed to init()
var rng_psize = 256;
// Random number generator - requires a PRNG backend, e.g. prng4.js

// For best results, put code like
// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
// in your main HTML document.

var rng_state;
var rng_pool;
var rng_pptr;

// Mix in a 32-bit integer into the pool
function rng_seed_int(x) {
  rng_pool[rng_pptr++] ^= x & 255;
  rng_pool[rng_pptr++] ^= (x >> 8) & 255;
  rng_pool[rng_pptr++] ^= (x >> 16) & 255;
  rng_pool[rng_pptr++] ^= (x >> 24) & 255;
  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
}

// Mix in the current time (w/milliseconds) into the pool
function rng_seed_time() {
  rng_seed_int(new Date().getTime());
}

// Initialize the pool with junk if needed.
if(rng_pool == null) {
  rng_pool = new Array();
  rng_pptr = 0;
  var t;
  if(navigator.appName == "Netscape" && navigator.appVersion < "5" && window.crypto) {
    // Extract entropy (256 bits) from NS4 RNG if available
    var z = window.crypto.random(32);
    for(t = 0; t < z.length; ++t)
      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
  }
  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
    t = Math.floor(65536 * Math.random());
    rng_pool[rng_pptr++] = t >>> 8;
    rng_pool[rng_pptr++] = t & 255;
  }
  rng_pptr = 0;
  rng_seed_time();
  //rng_seed_int(window.screenX);
  //rng_seed_int(window.screenY);
}

function rng_get_byte() {
  if(rng_state == null) {
    rng_seed_time();
    rng_state = prng_newstate();
    rng_state.init(rng_pool);
    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
      rng_pool[rng_pptr] = 0;
    rng_pptr = 0;
    //rng_pool = null;
  }
  // TODO: allow reseeding after first request
  return rng_state.next();
}

function rng_get_bytes(ba) {
  var i;
  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
}

function SecureRandom() {}

SecureRandom.prototype.nextBytes = rng_get_bytes;

//Depends on jsbn.js and rng.js

//Version 1.1: support utf-8 encoding in pkcs1pad2

//convert a (hex) string to a bignum object
function parseBigInt(str,r) {
  return new BigInteger(str,r);
}

function linebrk(s,n) {
  var ret = "";
  var i = 0;
  while(i + n < s.length) {
    ret += s.substring(i,i+n) + "\n";
    i += n;
  }
  return ret + s.substring(i,s.length);
}

function byte2Hex(b) {
  if(b < 0x10)
    return "0" + b.toString(16);
  else
    return b.toString(16);
}

//PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint
function pkcs1pad2(s,n) {
  if(n < s.length + 11) { // TODO: fix for utf-8
    alert("Message too long for RSA");
    return null;
  }
  var ba = new Array();
  var i = s.length - 1;
  while(i >= 0 && n > 0) {
    var c = s.charCodeAt(i--);
    if(c < 128) { // encode using utf-8
      ba[--n] = c;
    }
    else if((c > 127) && (c < 2048)) {
      ba[--n] = (c & 63) | 128;
      ba[--n] = (c >> 6) | 192;
    }
    else {
      ba[--n] = (c & 63) | 128;
      ba[--n] = ((c >> 6) & 63) | 128;
      ba[--n] = (c >> 12) | 224;
    }
  }
  ba[--n] = 0;
  var rng = new SecureRandom();
  var x = new Array();
  while(n > 2) { // random non-zero pad
    x[0] = 0;
    while(x[0] == 0) rng.nextBytes(x);
    ba[--n] = x[0];
  }
  ba[--n] = 2;
  ba[--n] = 0;
  return new BigInteger(ba);
}

//"empty" RSA key constructor
function RSAKey() {
  this.n = null;
  this.e = 0;
  this.d = null;
  this.p = null;
  this.q = null;
  this.dmp1 = null;
  this.dmq1 = null;
  this.coeff = null;
}

//Set the public key fields N and e from hex strings
function RSASetPublic(N,E) {
  if(N != null && E != null && N.length > 0 && E.length > 0) {
    this.n = parseBigInt(N,16);
    this.e = parseInt(E,16);
  }
  else
    alert("Invalid RSA public key");
}

//Perform raw public operation on "x": return x^e (mod n)
function RSADoPublic(x) {
  return x.modPowInt(this.e, this.n);
}

//Return the PKCS#1 RSA encryption of "text" as an even-length hex string
function RSAEncrypt(text) {
  var m = pkcs1pad2(text,(this.n.bitLength()+7)>>3);
  if(m == null) return null;
  var c = this.doPublic(m);
  if(c == null) return null;
  var h = c.toString(16);
  if((h.length & 1) == 0) return h; else return "0" + h;
}

//Return the PKCS#1 RSA encryption of "text" as a Base64-encoded string
//function RSAEncryptB64(text) {
//var h = this.encrypt(text);
//if(h) return hex2b64(h); else return null;
//}

//protected
RSAKey.prototype.doPublic = RSADoPublic;

//public
RSAKey.prototype.setPublic = RSASetPublic;
RSAKey.prototype.encrypt = RSAEncrypt;
//RSAKey.prototype.encrypt_b64 = RSAEncryptB64;

module.exports = {
  SecureRandom: SecureRandom,
  byte2Hex: byte2Hex,
  RSAKey: RSAKey
}
},{}],5:[function(require,module,exports){
module.exports = require('./lib/chai');

},{"./lib/chai":6}],6:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = []
  , exports = module.exports = {};

/*!
 * Chai version
 */

exports.version = '1.8.1';

/*!
 * Assertion Error
 */

exports.AssertionError = require('assertion-error');

/*!
 * Utils for plugins (not exported)
 */

var util = require('./chai/utils');

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(this, util);
    used.push(fn);
  }

  return this;
};

/*!
 * Primary `Assertion` prototype
 */

var assertion = require('./chai/assertion');
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = require('./chai/core/assertions');
exports.use(core);

/*!
 * Expect interface
 */

var expect = require('./chai/interface/expect');
exports.use(expect);

/*!
 * Should interface
 */

var should = require('./chai/interface/should');
exports.use(should);

/*!
 * Assert interface
 */

var assert = require('./chai/interface/assert');
exports.use(assert);

},{"./chai/assertion":7,"./chai/core/assertions":8,"./chai/interface/assert":9,"./chai/interface/expect":10,"./chai/interface/should":11,"./chai/utils":22,"assertion-error":31}],7:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * @api private
   */

  function Assertion (obj, msg, stack) {
    flag(this, 'ssfi', stack || arguments.callee);
    flag(this, 'object', obj);
    flag(this, 'message', msg);
  }

  /*!
    * ### Assertion.includeStack
    *
    * User configurable property, influences whether stack trace
    * is included in Assertion error message. Default of false
    * suppresses stack trace in the error message
    *
    *     Assertion.includeStack = true;  // enable stack on error
    *
    * @api public
    */

  Assertion.includeStack = false;

  /*!
   * ### Assertion.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @api public
   */

  Assertion.showDiff = true;

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /*!
   * ### .assert(expression, message, negateMessage, expected, actual)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String} message to display if fails
   * @param {String} negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (true !== showDiff) showDiff = false;
    if (true !== Assertion.showDiff) showDiff = false;

    if (!ok) {
      var msg = util.getMessage(this, arguments)
        , actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (Assertion.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};

},{}],8:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , toString = Object.prototype.toString
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to
   * improve the readability of your assertions. They
   * do not provide an testing capability unless they
   * have been overwritten by a plugin.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   *
   * @name language chains
   * @api public
   */

  [ 'to', 'be', 'been'
  , 'is', 'and', 'has', 'have'
  , 'with', 'that', 'at'
  , 'of', 'same' ].forEach(function (chain) {
    Assertion.addProperty(chain, function () {
      return this;
    });
  });

  /**
   * ### .not
   *
   * Negates any of assertions following in the chain.
   *
   *     expect(foo).to.not.equal('bar');
   *     expect(goodFn).to.not.throw(Error);
   *     expect({ foo: 'baz' }).to.have.property('foo')
   *       .and.not.equal('bar');
   *
   * @name not
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Sets the `deep` flag, later used by the `equal` and
   * `property` assertions.
   *
   *     expect(foo).to.deep.equal({ bar: 'baz' });
   *     expect({ foo: { bar: { baz: 'quux' } } })
   *       .to.have.deep.property('foo.bar.baz', 'quux');
   *
   * @name deep
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .a(type)
   *
   * The `a` and `an` assertions are aliases that can be
   * used either as language chains or to assert a value's
   * type.
   *
   *     // typeof
   *     expect('test').to.be.a('string');
   *     expect({ foo: 'bar' }).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *
   *     // language chain
   *     expect(foo).to.be.an.instanceof(Foo);
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} message _optional_
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj)
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(value)
   *
   * The `include` and `contain` assertions can be used as either property
   * based language chains or as methods to assert the inclusion of an object
   * in an array or a substring in a string. When used as language chains,
   * they toggle the `contain` flag for the `keys` assertion.
   *
   *     expect([1,2,3]).to.include(2);
   *     expect('foobar').to.contain('foo');
   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
   *
   * @name include
   * @alias contain
   * @param {Object|String|Number} obj
   * @param {String} message _optional_
   * @api public
   */

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    if (_.type(val) === 'object') {
      if (!flag(this, 'negate')) {
        for (var k in val) new Assertion(obj).property(k, val[k]);
        return;
      }
      var subset = {}
      for (var k in val) subset[k] = obj[k]
      var expected = _.eql(subset, val);
    } else {
      var expected = obj && ~obj.indexOf(val)
    }
    this.assert(
        expected
      , 'expected #{this} to include ' + _.inspect(val)
      , 'expected #{this} to not include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is truthy.
   *
   *     expect('everthing').to.be.ok;
   *     expect(1).to.be.ok;
   *     expect(false).to.not.be.ok;
   *     expect(undefined).to.not.be.ok;
   *     expect(null).to.not.be.ok;
   *
   * @name ok
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is `true`.
   *
   *     expect(true).to.be.true;
   *     expect(1).to.not.be.true;
   *
   * @name true
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , this.negate ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is `false`.
   *
   *     expect(false).to.be.false;
   *     expect(0).to.not.be.false;
   *
   * @name false
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , this.negate ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is `null`.
   *
   *     expect(null).to.be.null;
   *     expect(undefined).not.to.be.null;
   *
   * @name null
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *     expect(null).to.not.be.undefined;
   *
   * @name undefined
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi'
   *       , bar = null
   *       , baz;
   *
   *     expect(foo).to.exist;
   *     expect(bar).to.not.exist;
   *     expect(baz).to.not.exist;
   *
   * @name exist
   * @api public
   */

  Assertion.addProperty('exist', function () {
    this.assert(
        null != flag(this, 'object')
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });


  /**
   * ### .empty
   *
   * Asserts that the target's length is `0`. For arrays, it checks
   * the `length` property. For objects, it gets the count of
   * enumerable keys.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *     expect({}).to.be.empty;
   *
   * @name empty
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var obj = flag(this, 'object')
      , expected = obj;

    if (Array.isArray(obj) || 'string' === typeof object) {
      expected = obj.length;
    } else if (typeof obj === 'object') {
      expected = Object.keys(obj).length;
    }

    this.assert(
        !expected
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an arguments object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   * @name arguments
   * @alias Arguments
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = Object.prototype.toString.call(obj);
    this.assert(
        '[object Arguments]' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);

  /**
   * ### .equal(value)
   *
   * Asserts that the target is strictly equal (`===`) to `value`.
   * Alternately, if the `deep` flag is set, asserts that
   * the target is deeply equal to `value`.
   *
   *     expect('hello').to.equal('hello');
   *     expect(42).to.equal(42);
   *     expect(1).to.not.equal(true);
   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @alias deep.equal
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      return this.eql(val);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(value)
   *
   * Asserts that the target is deeply equal to `value`.
   *
   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(value)
   *
   * Asserts that the target is greater than `value`.
   *
   *     expect(10).to.be.above(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len > n
        , 'expected #{this} to have a length above #{exp} but got #{act}'
        , 'expected #{this} to not have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above ' + n
        , 'expected #{this} to be at most ' + n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(value)
   *
   * Asserts that the target is greater than or equal to `value`.
   *
   *     expect(10).to.be.at.least(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.least(2);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
   *
   * @name least
   * @alias gte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= n
        , 'expected #{this} to have a length at least #{exp} but got #{act}'
        , 'expected #{this} to have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least ' + n
        , 'expected #{this} to be below ' + n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(value)
   *
   * Asserts that the target is less than `value`.
   *
   *     expect(5).to.be.below(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len < n
        , 'expected #{this} to have a length below #{exp} but got #{act}'
        , 'expected #{this} to not have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below ' + n
        , 'expected #{this} to be at least ' + n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(value)
   *
   * Asserts that the target is less than or equal to `value`.
   *
   *     expect(5).to.be.at.most(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.most(4);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
   *
   * @name most
   * @alias lte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len <= n
        , 'expected #{this} to have a length at most #{exp} but got #{act}'
        , 'expected #{this} to have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most ' + n
        , 'expected #{this} to be above ' + n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish)
   *
   * Asserts that the target is within a range.
   *
   *     expect(7).to.be.within(5,10);
   *
   * Can also be used in conjunction with `length` to
   * assert a length range. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name within
   * @param {Number} start lowerbound inclusive
   * @param {Number} finish upperbound inclusive
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , range = start + '..' + finish;
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= start && len <= finish
        , 'expected #{this} to have a length within ' + range
        , 'expected #{this} to not have a length within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor)
   *
   * Asserts that the target is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , Chai = new Tea('chai');
   *
   *     expect(Chai).to.be.an.instanceof(Tea);
   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} message _optional_
   * @alias instanceOf
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);
    var name = _.getName(constructor);
    this.assert(
        flag(this, 'object') instanceof constructor
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name, [value])
   *
   * Asserts that the target has a property `name`, optionally asserting that
   * the value of that property is strictly equal to  `value`.
   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
   * references into objects and arrays.
   *
   *     // simple referencing
   *     var obj = { foo: 'bar' };
   *     expect(obj).to.have.property('foo');
   *     expect(obj).to.have.property('foo', 'bar');
   *
   *     // deep referencing
   *     var deepObj = {
   *         green: { tea: 'matcha' }
   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
   *     };

   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
   *
   * You can also use an array as the starting point of a `deep.property`
   * assertion, or traverse nested arrays.
   *
   *     var arr = [
   *         [ 'chai', 'matcha', 'konacha' ]
   *       , [ { tea: 'chai' }
   *         , { tea: 'matcha' }
   *         , { tea: 'konacha' } ]
   *     ];
   *
   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
   *
   * Furthermore, `property` changes the subject of the assertion
   * to be the value of that property from the original object. This
   * permits for further chainable assertions on that property.
   *
   *     expect(obj).to.have.property('foo')
   *       .that.is.a('string');
   *     expect(deepObj).to.have.property('green')
   *       .that.is.an('object')
   *       .that.deep.equals({ tea: 'matcha' });
   *     expect(deepObj).to.have.property('teas')
   *       .that.is.an('array')
   *       .with.deep.property('[2]')
   *         .that.deep.equals({ tea: 'konacha' });
   *
   * @name property
   * @alias deep.property
   * @param {String} name
   * @param {Mixed} value (optional)
   * @param {String} message _optional_
   * @returns value of property for chaining
   * @api public
   */

  Assertion.addMethod('property', function (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var descriptor = flag(this, 'deep') ? 'deep property ' : 'property '
      , negate = flag(this, 'negate')
      , obj = flag(this, 'object')
      , value = flag(this, 'deep')
        ? _.getPathValue(name, obj)
        : obj[name];

    if (negate && undefined !== val) {
      if (undefined === value) {
        msg = (msg != null) ? msg + ': ' : '';
        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
      }
    } else {
      this.assert(
          undefined !== value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (undefined !== val) {
      this.assert(
          val === value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  });


  /**
   * ### .ownProperty(name)
   *
   * Asserts that the target has an own property `name`.
   *
   *     expect('test').to.have.ownProperty('length');
   *
   * @name ownProperty
   * @alias haveOwnProperty
   * @param {String} name
   * @param {String} message _optional_
   * @api public
   */

  function assertOwnProperty (name, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        obj.hasOwnProperty(name)
      , 'expected #{this} to have own property ' + _.inspect(name)
      , 'expected #{this} to not have own property ' + _.inspect(name)
    );
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .length(value)
   *
   * Asserts that the target's `length` property has
   * the expected value.
   *
   *     expect([ 1, 2, 3]).to.have.length(3);
   *     expect('foobar').to.have.length(6);
   *
   * Can also be used as a chain precursor to a value
   * comparison for the length property.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name length
   * @alias lengthOf
   * @param {Number} length
   * @param {String} message _optional_
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).to.have.property('length');
    var len = obj.length;

    this.assert(
        len == n
      , 'expected #{this} to have a length of #{exp} but got #{act}'
      , 'expected #{this} to not have a length of #{act}'
      , n
      , len
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addMethod('lengthOf', assertLength, assertLengthChain);

  /**
   * ### .match(regexp)
   *
   * Asserts that the target matches a regular expression.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * @name match
   * @param {RegExp} RegularExpression
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('match', function (re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  });

  /**
   * ### .string(string)
   *
   * Asserts that the string target contains another string.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * @name string
   * @param {String} string
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });


  /**
   * ### .keys(key1, [key2], [...])
   *
   * Asserts that the target has exactly the given keys, or
   * asserts the inclusion of some keys when using the
   * `include` or `contain` modifiers.
   *
   *     expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);
   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');
   *
   * @name keys
   * @alias key
   * @param {String...|Array} keys
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , str
      , ok = true;

    keys = keys instanceof Array
      ? keys
      : Array.prototype.slice.call(arguments);

    if (!keys.length) throw new Error('keys required');

    var actual = Object.keys(obj)
      , len = keys.length;

    // Inclusion
    ok = keys.every(function(key){
      return ~actual.indexOf(key);
    });

    // Strict
    if (!flag(this, 'negate') && !flag(this, 'contains')) {
      ok = ok && keys.length == actual.length;
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key){
        return _.inspect(key);
      });
      var last = keys.pop();
      str = keys.join(', ') + ', and ' + last;
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + str
      , 'expected #{this} to not ' + str
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw(constructor)
   *
   * Asserts that the function target will throw a specific error, or specific type of error
   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
   * for the error's message.
   *
   *     var err = new ReferenceError('This is a bad function.');
   *     var fn = function () { throw err; }
   *     expect(fn).to.throw(ReferenceError);
   *     expect(fn).to.throw(Error);
   *     expect(fn).to.throw(/bad function/);
   *     expect(fn).to.not.throw('good function');
   *     expect(fn).to.throw(ReferenceError, /bad function/);
   *     expect(fn).to.throw(err);
   *     expect(fn).to.not.throw(new RangeError('Out of range.'));
   *
   * Please note that when a throw expectation is negated, it will check each
   * parameter independently, starting with error constructor type. The appropriate way
   * to check for the existence of a type of error but for a message that does not match
   * is to use `and`.
   *
   *     expect(fn).to.throw(ReferenceError)
   *        .and.not.throw(/good function/);
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {ErrorConstructor} constructor
   * @param {String|RegExp} expected error message
   * @param {String} message _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @api public
   */

  function assertThrows (constructor, errMsg, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('function');

    var thrown = false
      , desiredError = null
      , name = null
      , thrownError = null;

    if (arguments.length === 0) {
      errMsg = null;
      constructor = null;
    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
      errMsg = constructor;
      constructor = null;
    } else if (constructor && constructor instanceof Error) {
      desiredError = constructor;
      constructor = null;
      errMsg = null;
    } else if (typeof constructor === 'function') {
      name = constructor.prototype.name || constructor.name;
      if (name === 'Error' && constructor !== Error) {
        name = (new constructor()).name;
      }
    } else {
      constructor = null;
    }

    try {
      obj();
    } catch (err) {
      // first, check desired error
      if (desiredError) {
        this.assert(
            err === desiredError
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp}'
          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
          , (err instanceof Error ? err.toString() : err)
        );

        flag(this, 'object', err);
        return this;
      }

      // next, check constructor
      if (constructor) {
        this.assert(
            err instanceof constructor
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
          , name
          , (err instanceof Error ? err.toString() : err)
        );

        if (!errMsg) {
          flag(this, 'object', err);
          return this;
        }
      }

      // next, check message
      var message = 'object' === _.type(err) && "message" in err
        ? err.message
        : '' + err;

      if ((message != null) && errMsg && errMsg instanceof RegExp) {
        this.assert(
            errMsg.exec(message)
          , 'expected #{this} to throw error matching #{exp} but got #{act}'
          , 'expected #{this} to throw error not matching #{exp}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
        this.assert(
            ~message.indexOf(errMsg)
          , 'expected #{this} to throw error including #{exp} but got #{act}'
          , 'expected #{this} to throw error not including #{act}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else {
        thrown = true;
        thrownError = err;
      }
    }

    var actuallyGot = ''
      , expectedThrown = name !== null
        ? name
        : desiredError
          ? '#{exp}' //_.inspect(desiredError)
          : 'an error';

    if (thrown) {
      actuallyGot = ' but #{act} was thrown'
    }

    this.assert(
        thrown === true
      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
    );

    flag(this, 'object', thrownError);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method)
   *
   * Asserts that the object or class target will respond to a method.
   *
   *     Klass.prototype.bar = function(){};
   *     expect(Klass).to.respondTo('bar');
   *     expect(obj).to.respondTo('bar');
   *
   * To check if a constructor will respond to a static function,
   * set the `itself` flag.
   *
   *     Klass.baz = function(){};
   *     expect(Klass).itself.to.respondTo('baz');
   *
   * @name respondTo
   * @param {String} method
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('respondTo', function (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === _.type(obj) && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  });

  /**
   * ### .itself
   *
   * Sets the `itself` flag, later used by the `respondTo` assertion.
   *
   *     function Foo() {}
   *     Foo.bar = function() {}
   *     Foo.prototype.baz = function() {}
   *
   *     expect(Foo).itself.to.respondTo('bar');
   *     expect(Foo).itself.not.to.respondTo('baz');
   *
   * @name itself
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(method)
   *
   * Asserts that the target passes a given truth test.
   *
   *     expect(1).to.satisfy(function(num) { return num > 0; });
   *
   * @name satisfy
   * @param {Function} matcher
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('satisfy', function (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        matcher(obj)
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , this.negate ? false : true
      , matcher(obj)
    );
  });

  /**
   * ### .closeTo(expected, delta)
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *
   * @name closeTo
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('closeTo', function (expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  });

  function isSubsetOf(subset, superset) {
    return subset.every(function(elem) {
      return superset.indexOf(elem) !== -1;
    })
  }

  /**
   * ### .members(set)
   *
   * Asserts that the target is a superset of `set`,
   * or that the target and `set` have the same members.
   *
   *     expect([1, 2, 3]).to.include.members([3, 2]);
   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
   *
   *     expect([4, 2]).to.have.members([2, 4]);
   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
   *
   * @name members
   * @param {Array} set
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj).to.be.an('array');
    new Assertion(subset).to.be.an('array');

    if (flag(this, 'contains')) {
      return this.assert(
          isSubsetOf(subset, obj)
        , 'expected #{this} to be a superset of #{act}'
        , 'expected #{this} to not be a superset of #{act}'
        , obj
        , subset
      );
    }

    this.assert(
        isSubsetOf(obj, subset) && isSubsetOf(subset, obj)
        , 'expected #{this} to have the same members as #{act}'
        , 'expected #{this} to not have the same members as #{act}'
        , obj
        , subset
    );
  });
};

},{}],9:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


module.exports = function (chai, util) {

  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .ok(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.ok('everything', 'everything is ok');
   *     assert.ok(false, 'this will fail');
   *
   * @name ok
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.ok = function (val, msg) {
    new Assertion(val, msg).is.ok;
  };

  /**
   * ### .notOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.notOk('everything', 'this will fail');
   *     assert.notOk(false, 'this will pass');
   *
   * @name notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.notOk = function (val, msg) {
    new Assertion(val, msg).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.deepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.eql(exp);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg).is['true'];
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg).is['false'];
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg).to.not.equal(null);
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object (as revealed by
   * `Object.prototype.toString`).
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object.
   *
   *     var selection = 'chai'
   *     assert.isObject(selection, 'tea selection is not an object');
   *     assert.isObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('number');
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Works
   * for strings and arrays.
   *
   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Works
   * for strings and arrays.
   *i
   *     assert.notInclude('foobar', 'baz', 'string not include substring');
   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg).not.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.property(prop);
  };

  /**
   * ### .deepProperty(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`, which can be a
   * string using dot- and bracket-notation for deep reference.
   *
   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name deepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.deepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop);
  };

  /**
   * ### .notDeepProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for deep reference.
   *
   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notDeepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notDeepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`.
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.property(prop, val);
  };

  /**
   * ### .propertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`.
   *
   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
   *
   * @name propertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for deep
   * reference.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop, val);
  };

  /**
   * ### .deepPropertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`. `property` can use dot- and
   * bracket-notation for deep reference.
   *
   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *
   * @name deepPropertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
  };

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` property with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 5, 'string has length of 6');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg).to.have.length(len);
  };

  /**
   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
   *
   * Asserts that `function` will throw an error that is an instance of
   * `constructor`, or alternately that it will throw an error with message
   * matching `regexp`.
   *
   *     assert.throw(fn, 'function throws a reference error');
   *     assert.throw(fn, /function throws a reference error/);
   *     assert.throw(fn, ReferenceError);
   *     assert.throw(fn, ReferenceError, 'function throws a reference error');
   *     assert.throw(fn, ReferenceError, /function throws a reference error/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.Throw = function (fn, errt, errs, msg) {
    if ('string' === typeof errt || errt instanceof RegExp) {
      errs = errt;
      errt = null;
    }

    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(function, [constructor/regexp], [message])
   *
   * Asserts that `function` will _not_ throw an error that is an instance of
   * `constructor`, or alternately that it will not throw an error with message
   * matching `regexp`.
   *
   *     assert.doesNotThrow(fn, Error, 'function does not throw');
   *
   * @name doesNotThrow
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.doesNotThrow = function (fn, type, msg) {
    if ('string' === typeof type) {
      msg = type;
      type = null;
    }

    new Assertion(fn, msg).to.not.Throw(type);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {
      throw new Error('Invalid operator "' + operator + '"');
    }
    var test = new Assertion(eval(val + operator + val2), msg);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg).to.be.closeTo(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members.
   * Order is not taken into account.
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg).to.have.same.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset`.
   * Order is not taken into account.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg).to.include.members(subset);
  }

  /*!
   * Undocumented / untested
   */

  assert.ifError = function (val, msg) {
    new Assertion(val, msg).to.not.be.ok;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('Throw', 'throw')
  ('Throw', 'throws');
};

},{}],10:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };
};


},{}],11:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should',
      {
        set: function (value) {
          // See https://github.com/chaijs/chai/issues/86: this makes
          // `whatever.should = someValue` actually set `someValue`, which is
          // especially useful for `global.should = require('chai').should()`.
          //
          // Note that we have to use [[DefineProperty]] instead of [[Put]]
          // since otherwise we would trigger this very setter!
          Object.defineProperty(this, 'should', {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        }
      , get: function(){
          if (this instanceof String || this instanceof Number) {
            return new Assertion(this.constructor(this));
          } else if (this instanceof Boolean) {
            return new Assertion(this == true);
          }
          return new Assertion(this);
        }
      , configurable: true
    });

    var should = {};

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};

},{}],12:[function(require,module,exports){
/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var transferFlags = require('./transferFlags');

/*!
 * Module variables
 */

// Check whether `__proto__` is supported
var hasProtoSupport = '__proto__' in Object;

// Without `__proto__` support, this module will need to add properties to a function.
// However, some Function.prototype methods cannot be overwritten,
// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
var excludeNames = /^(?:length|name|arguments|caller)$/;

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### addChainableMethod (ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @name addChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function () {
        chainableBehavior.chainingBehavior.call(this);

        var assert = function () {
          var result = chainableBehavior.method.apply(this, arguments);
          return result === undefined ? this : result;
        };

        // Use `__proto__` if available
        if (hasProtoSupport) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = assert.__proto__ = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (!excludeNames.test(asserterName)) {
              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
              Object.defineProperty(assert, asserterName, pd);
            }
          });
        }

        transferFlags(this, assert);
        return assert;
      }
    , configurable: true
  });
};

},{"./transferFlags":29}],13:[function(require,module,exports){
/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addMethod (ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @name addMethod
 * @api public
 */

module.exports = function (ctx, name, method) {
  ctx[name] = function () {
    var result = method.apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{}],14:[function(require,module,exports){
/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### addProperty (ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @name addProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter.call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],15:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### flag(object ,key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object (constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @name flag
 * @api private
 */

module.exports = function (obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};

},{}],16:[function(require,module,exports){
/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  var actual = args[4];
  return 'undefined' !== typeof actual ? actual : obj._obj;
};

},{}],17:[function(require,module,exports){
/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};

},{}],18:[function(require,module,exports){
/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag')
  , getActual = require('./getActual')
  , inspect = require('./inspect')
  , objDisplay = require('./objDisplay');

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @name getMessage
 * @api public
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  msg = msg || '';
  msg = msg
    .replace(/#{this}/g, objDisplay(val))
    .replace(/#{act}/g, objDisplay(actual))
    .replace(/#{exp}/g, objDisplay(expected));

  return flagMsg ? flagMsg + ': ' + msg : msg;
};

},{"./flag":15,"./getActual":16,"./inspect":23,"./objDisplay":24}],19:[function(require,module,exports){
/*!
 * Chai - getName utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getName(func)
 *
 * Gets the name of a function, in a cross-browser way.
 *
 * @param {Function} a function (usually a constructor)
 */

module.exports = function (func) {
  if (func.name) return func.name;

  var match = /^\s?function ([^(]*)\(/.exec(func);
  return match && match[1] ? match[1] : "";
};

},{}],20:[function(require,module,exports){
/*!
 * Chai - getPathValue utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .getPathValue(path, object)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue('prop1.str', obj); // Hello
 *     getPathValue('prop1.att[2]', obj); // b
 *     getPathValue('prop2.arr[0].nested', obj); // Universe
 *
 * @param {String} path
 * @param {Object} object
 * @returns {Object} value or `undefined`
 * @name getPathValue
 * @api public
 */

var getPathValue = module.exports = function (path, obj) {
  var parsed = parsePath(path);
  return _getPathValue(parsed, obj);
};

/*!
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `_getPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be as near infinitely deep and nested
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath (path) {
  var str = path.replace(/\[/g, '.[')
    , parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function (value) {
    var re = /\[(\d+)\]$/
      , mArr = re.exec(value)
    if (mArr) return { i: parseFloat(mArr[1]) };
    else return { p: value };
  });
};

/*!
 * ## _getPathValue(parsed, obj)
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(parsed, obj);
 *
 * @param {Object} parsed definition from `parsePath`.
 * @param {Object} object to search against
 * @returns {Object|Undefined} value
 * @api private
 */

function _getPathValue (parsed, obj) {
  var tmp = obj
    , res;
  for (var i = 0, l = parsed.length; i < l; i++) {
    var part = parsed[i];
    if (tmp) {
      if ('undefined' !== typeof part.p)
        tmp = tmp[part.p];
      else if ('undefined' !== typeof part.i)
        tmp = tmp[part.i];
      if (i == (l - 1)) res = tmp;
    } else {
      res = undefined;
    }
  }
  return res;
};

},{}],21:[function(require,module,exports){
/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(subject);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(subject);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};

},{}],22:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Main exports
 */

var exports = module.exports = {};

/*!
 * test utility
 */

exports.test = require('./test');

/*!
 * type utility
 */

exports.type = require('./type');

/*!
 * message utility
 */

exports.getMessage = require('./getMessage');

/*!
 * actual utility
 */

exports.getActual = require('./getActual');

/*!
 * Inspect util
 */

exports.inspect = require('./inspect');

/*!
 * Object Display util
 */

exports.objDisplay = require('./objDisplay');

/*!
 * Flag utility
 */

exports.flag = require('./flag');

/*!
 * Flag transferring utility
 */

exports.transferFlags = require('./transferFlags');

/*!
 * Deep equal utility
 */

exports.eql = require('deep-eql');

/*!
 * Deep path value
 */

exports.getPathValue = require('./getPathValue');

/*!
 * Function name
 */

exports.getName = require('./getName');

/*!
 * add Property
 */

exports.addProperty = require('./addProperty');

/*!
 * add Method
 */

exports.addMethod = require('./addMethod');

/*!
 * overwrite Property
 */

exports.overwriteProperty = require('./overwriteProperty');

/*!
 * overwrite Method
 */

exports.overwriteMethod = require('./overwriteMethod');

/*!
 * Add a chainable method
 */

exports.addChainableMethod = require('./addChainableMethod');

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = require('./overwriteChainableMethod');


},{"./addChainableMethod":12,"./addMethod":13,"./addProperty":14,"./flag":15,"./getActual":16,"./getMessage":18,"./getName":19,"./getPathValue":20,"./inspect":23,"./objDisplay":24,"./overwriteChainableMethod":25,"./overwriteMethod":26,"./overwriteProperty":27,"./test":28,"./transferFlags":29,"./type":30,"deep-eql":32}],23:[function(require,module,exports){
// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = require('./getName');
var getProperties = require('./getProperties');
var getEnumerableProperties = require('./getEnumerableProperties');

module.exports = inspect;

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// https://gist.github.com/1044128/
var getOuterHTML = function(element) {
  if ('outerHTML' in element) return element.outerHTML;
  var ns = "http://www.w3.org/1999/xhtml";
  var container = document.createElementNS(ns, '_');
  var elemProto = (window.HTMLElement || window.Element).prototype;
  var xmlSerializer = new XMLSerializer();
  var html;
  if (document.xmlVersion) {
    return xmlSerializer.serializeToString(element);
  } else {
    container.appendChild(element.cloneNode(false));
    html = container.innerHTML.replace('><', '>' + element.innerHTML + '<');
    container.innerHTML = '';
    return html;
  }
};

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If it's DOM elem, get outer HTML.
  if (isDOMElement(value)) {
    return getOuterHTML(value);
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  // Some type of object without properties can be shortcutted.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      var name = getName(value);
      var nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    var name = getName(value);
    var nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str;
  if (value.__lookupGetter__) {
    if (value.__lookupGetter__(key)) {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"./getEnumerableProperties":17,"./getName":19,"./getProperties":21}],24:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var inspect = require('./inspect');

/**
 * ### .objDisplay (object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @api public
 */

module.exports = function (obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (str.length >= 40) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};

},{"./inspect":23}],25:[function(require,module,exports){
/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteChainableMethod (ctx, name, fn)
 *
 * Overwites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.length(3);
 *     expect(myFoo).to.have.length.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function () {
    var result = chainingBehavior(_chainingBehavior).call(this);
    return result === undefined ? this : result;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function () {
    var result = method(_method).apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{}],26:[function(require,module,exports){
/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteMethod (ctx, name, fn)
 *
 * Overwites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @name overwriteMethod
 * @api public
 */

module.exports = function (ctx, name, method) {
  var _method = ctx[name]
    , _super = function () { return this; };

  if (_method && 'function' === typeof _method)
    _super = _method;

  ctx[name] = function () {
    var result = method(_super).apply(this, arguments);
    return result === undefined ? this : result;
  }
};

},{}],27:[function(require,module,exports){
/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteProperty (ctx, name, fn)
 *
 * Overwites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @name overwriteProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter(_super).call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],28:[function(require,module,exports){
/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag');

/**
 * # test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};

},{"./flag":15}],29:[function(require,module,exports){
/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, and `message`)
 * will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAsseriton = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags too; usually a new assertion
 * @param {Boolean} includeAll
 * @name getAllFlags
 * @api private
 */

module.exports = function (assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};

},{}],30:[function(require,module,exports){
/*!
 * Chai - type utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Arguments]': 'arguments'
  , '[object Array]': 'array'
  , '[object Date]': 'date'
  , '[object Function]': 'function'
  , '[object Number]': 'number'
  , '[object RegExp]': 'regexp'
  , '[object String]': 'string'
};

/**
 * ### type(object)
 *
 * Better implementation of `typeof` detection that can
 * be used cross-browser. Handles the inconsistencies of
 * Array, `null`, and `undefined` detection.
 *
 *     utils.type({}) // 'object'
 *     utils.type(null) // `null'
 *     utils.type(undefined) // `undefined`
 *     utils.type([]) // `array`
 *
 * @param {Mixed} object to detect type of
 * @name type
 * @api private
 */

module.exports = function (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
};

},{}],31:[function(require,module,exports){
/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || arguments.callee;
  if (ssf && Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};

},{}],32:[function(require,module,exports){
module.exports = require('./lib/eql');

},{"./lib/eql":33}],33:[function(require,module,exports){
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var type = require('type-detect');

/*!
 * Buffer.isBuffer browser shim
 */

var Buffer;
try { Buffer = require('buffer').Buffer; }
catch(ex) {
  Buffer = {};
  Buffer.isBuffer = function() { return false; }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;

/**
 * Assert super-strict (egal) equality between
 * two objects of any type.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @param {Array} memoised (optional)
 * @return {Boolean} equal match
 */

function deepEqual(a, b, m) {
  if (sameValue(a, b)) {
    return true;
  } else if ('date' === type(a)) {
    return dateEqual(a, b);
  } else if ('regexp' === type(a)) {
    return regexpEqual(a, b);
  } else if (Buffer.isBuffer(a)) {
    return bufferEqual(a, b);
  } else if ('arguments' === type(a)) {
    return argumentsEqual(a, b, m);
  } else if (!typeEqual(a, b)) {
    return false;
  } else if (('object' !== type(a) && 'object' !== type(b))
  && ('array' !== type(a) && 'array' !== type(b))) {
    return sameValue(a, b);
  } else {
    return objectEqual(a, b, m);
  }
}

/*!
 * Strict (egal) equality test. Ensures that NaN always
 * equals NaN and `-0` does not equal `+0`.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} equal match
 */

function sameValue(a, b) {
  if (a === b) return a !== 0 || 1 / a === 1 / b;
  return a !== a && b !== b;
}

/*!
 * Compare the types of two given objects and
 * return if they are equal. Note that an Array
 * has a type of `array` (not `object`) and arguments
 * have a type of `arguments` (not `array`/`object`).
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function typeEqual(a, b) {
  return type(a) === type(b);
}

/*!
 * Compare two Date objects by asserting that
 * the time values are equal using `saveValue`.
 *
 * @param {Date} a
 * @param {Date} b
 * @return {Boolean} result
 */

function dateEqual(a, b) {
  if ('date' !== type(b)) return false;
  return sameValue(a.getTime(), b.getTime());
}

/*!
 * Compare two regular expressions by converting them
 * to string and checking for `sameValue`.
 *
 * @param {RegExp} a
 * @param {RegExp} b
 * @return {Boolean} result
 */

function regexpEqual(a, b) {
  if ('regexp' !== type(b)) return false;
  return sameValue(a.toString(), b.toString());
}

/*!
 * Assert deep equality of two `arguments` objects.
 * Unfortunately, these must be sliced to arrays
 * prior to test to ensure no bad behavior.
 *
 * @param {Arguments} a
 * @param {Arguments} b
 * @param {Array} memoize (optional)
 * @return {Boolean} result
 */

function argumentsEqual(a, b, m) {
  if ('arguments' !== type(b)) return false;
  a = [].slice.call(a);
  b = [].slice.call(b);
  return deepEqual(a, b, m);
}

/*!
 * Get enumerable properties of a given object.
 *
 * @param {Object} a
 * @return {Array} property names
 */

function enumerable(a) {
  var res = [];
  for (var key in a) res.push(key);
  return res;
}

/*!
 * Simple equality for flat iterable objects
 * such as Arrays or Node.js buffers.
 *
 * @param {Iterable} a
 * @param {Iterable} b
 * @return {Boolean} result
 */

function iterableEqual(a, b) {
  if (a.length !==  b.length) return false;

  var i = 0;
  var match = true;

  for (; i < a.length; i++) {
    if (a[i] !== b[i]) {
      match = false;
      break;
    }
  }

  return match;
}

/*!
 * Extension to `iterableEqual` specifically
 * for Node.js Buffers.
 *
 * @param {Buffer} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function bufferEqual(a, b) {
  if (!Buffer.isBuffer(b)) return false;
  return iterableEqual(a, b);
}

/*!
 * Block for `objectEqual` ensuring non-existing
 * values don't get in.
 *
 * @param {Mixed} object
 * @return {Boolean} result
 */

function isValue(a) {
  return a !== null && a !== undefined;
}

/*!
 * Recursively check the equality of two objects.
 * Once basic sameness has been established it will
 * defer to `deepEqual` for each enumerable key
 * in the object.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function objectEqual(a, b, m) {
  if (!isValue(a) || !isValue(b)) {
    return false;
  }

  if (a.prototype !== b.prototype) {
    return false;
  }

  var i;
  if (m) {
    for (i = 0; i < m.length; i++) {
      if ((m[i][0] === a && m[i][1] === b)
      ||  (m[i][0] === b && m[i][1] === a)) {
        return true;
      }
    }
  } else {
    m = [];
  }

  try {
    var ka = enumerable(a);
    var kb = enumerable(b);
  } catch (ex) {
    return false;
  }

  ka.sort();
  kb.sort();

  if (!iterableEqual(ka, kb)) {
    return false;
  }

  m.push([ a, b ]);

  var key;
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], m)) {
      return false;
    }
  }

  return true;
}

},{"buffer":39,"type-detect":34}],34:[function(require,module,exports){
module.exports = require('./lib/type');

},{"./lib/type":35}],35:[function(require,module,exports){
/*!
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Primary Exports
 */

var exports = module.exports = getType;

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Array]': 'array'
  , '[object RegExp]': 'regexp'
  , '[object Function]': 'function'
  , '[object Arguments]': 'arguments'
  , '[object Date]': 'date'
};

/**
 * ### typeOf (obj)
 *
 * Use several different techniques to determine
 * the type of object being tested.
 *
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */

function getType (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
}

exports.Library = Library;

/**
 * ### Library
 *
 * Create a repository for custom type detection.
 *
 * ```js
 * var lib = new type.Library;
 * ```
 *
 */

function Library () {
  this.tests = {};
}

/**
 * #### .of (obj)
 *
 * Expose replacement `typeof` detection to the library.
 *
 * ```js
 * if ('string' === lib.of('hello world')) {
 *   // ...
 * }
 * ```
 *
 * @param {Mixed} object to test
 * @return {String} type
 */

Library.prototype.of = getType;

/**
 * #### .define (type, test)
 *
 * Add a test to for the `.test()` assertion.
 *
 * Can be defined as a regular expression:
 *
 * ```js
 * lib.define('int', /^[0-9]+$/);
 * ```
 *
 * ... or as a function:
 *
 * ```js
 * lib.define('bln', function (obj) {
 *   if ('boolean' === lib.of(obj)) return true;
 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
 *   return !! ~blns.indexOf(obj);
 * });
 * ```
 *
 * @param {String} type
 * @param {RegExp|Function} test
 * @api public
 */

Library.prototype.define = function (type, test) {
  if (arguments.length === 1) return this.tests[type];
  this.tests[type] = test;
  return this;
};

/**
 * #### .test (obj, test)
 *
 * Assert that an object is of type. Will first
 * check natives, and if that does not pass it will
 * use the user defined custom tests.
 *
 * ```js
 * assert(lib.test('1', 'int'));
 * assert(lib.test('yes', 'bln'));
 * ```
 *
 * @param {Mixed} object
 * @param {String} type
 * @return {Boolean} result
 * @api public
 */

Library.prototype.test = function (obj, type) {
  if (type === getType(obj)) return true;
  var test = this.tests[type];

  if (test && 'regexp' === getType(test)) {
    return test.test(obj);
  } else if (test && 'function' === getType(test)) {
    return test(obj);
  } else {
    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
  }
};

},{}],36:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":38}],37:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],38:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require("/Users/weili/work/fh-sdks/fh-js-sdk/node_modules/grunt-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":37,"/Users/weili/work/fh-sdks/fh-js-sdk/node_modules/grunt-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":45,"inherits":44}],39:[function(require,module,exports){
/**
 * The buffer module from node.js, for the browser.
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install buffer`
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
   // Detect if browser supports Typed Arrays. Supported browsers are IE 10+,
   // Firefox 4+, Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+.
  if (typeof Uint8Array !== 'function' || typeof ArrayBuffer !== 'function')
    return false

  // Does the browser support adding properties to `Uint8Array` instances? If
  // not, then that's the same as no `Uint8Array` support. We need to be able to
  // add all the node Buffer API methods.
  // Bug in Firefox 4-29, now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var arr = new Uint8Array(0)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // Assume object is an array
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof Uint8Array === 'function' &&
      subject instanceof Uint8Array) {
    // Speed optimization -- use set if we're copying from a Uint8Array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  // copy!
  for (var i = 0; i < end - start; i++)
    target[i + target_start] = this[i + start]
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array === 'function') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment the Uint8Array *instance* (not the class!) with Buffer methods
 */
function augment (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

},{"base64-js":40,"ieee754":41}],40:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var ZERO   = '0'.charCodeAt(0)
	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	module.exports.toByteArray = b64ToByteArray
	module.exports.fromByteArray = uint8ToBase64
}())

},{}],41:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],42:[function(require,module,exports){
(function (global){
/*global window, global*/
var util = require("util")
var assert = require("assert")

var slice = Array.prototype.slice
var console
var times = {}

if (typeof global !== "undefined" && global.console) {
    console = global.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"]
    , [info, "info"]
    , [warn, "warn"]
    , [error, "error"]
    , [time, "time"]
    , [timeEnd, "timeEnd"]
    , [trace, "trace"]
    , [dir, "dir"]
    , [assert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = Date.now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    var duration = Date.now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function assert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"assert":36,"util":47}],43:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        throw TypeError('Uncaught, unspecified "error" event.');
      }
      return false;
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      console.trace();
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],44:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],45:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],46:[function(require,module,exports){
module.exports=require(37)
},{}],47:[function(require,module,exports){
module.exports=require(38)
},{"./support/isBuffer":46,"/Users/weili/work/fh-sdks/fh-js-sdk/node_modules/grunt-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":45,"inherits":44}],48:[function(require,module,exports){
/*
 * loglevel - https://github.com/pimterry/loglevel
 *
 * Copyright (c) 2013 Tim Perry
 * Licensed under the MIT license.
 */

;(function (undefined) {
    var undefinedType = "undefined";

    (function (name, definition) {
        if (typeof module !== 'undefined') {
            module.exports = definition();
        } else if (typeof define === 'function' && typeof define.amd === 'object') {
            define(definition);
        } else {
            this[name] = definition();
        }
    }('log', function () {
        var self = {};
        var noop = function() {};

        function realMethod(methodName) {
            if (typeof console === undefinedType) {
                return noop;
            } else if (console[methodName] === undefined) {
                if (console.log !== undefined) {
                    return boundToConsole(console, 'log');
                } else {
                    return noop;
                }
            } else {
                return boundToConsole(console, methodName);
            }
        }

        function boundToConsole(console, methodName) {
            var method = console[methodName];
            if (method.bind === undefined) {
                if (Function.prototype.bind === undefined) {
                    return functionBindingWrapper(method, console);
                } else {
                    try {
                        return Function.prototype.bind.call(console[methodName], console);
                    } catch (e) {
                        // In IE8 + Modernizr, the bind shim will reject the above, so we fall back to wrapping
                        return functionBindingWrapper(method, console);
                    }
                }
            } else {
                return console[methodName].bind(console);
            }
        }

        function functionBindingWrapper(f, context) {
            return function() {
                Function.prototype.apply.apply(f, [context, arguments]);
            };
        }

        var logMethods = [
            "trace",
            "debug",
            "info",
            "warn",
            "error"
        ];

        function replaceLoggingMethods(methodFactory) {
            for (var ii = 0; ii < logMethods.length; ii++) {
                self[logMethods[ii]] = methodFactory(logMethods[ii]);
            }
        }

        function cookiesAvailable() {
            return (typeof window !== undefinedType &&
                    window.document !== undefined &&
                    window.document.cookie !== undefined);
        }

        function localStorageAvailable() {
            try {
                return (typeof window !== undefinedType &&
                        window.localStorage !== undefined);
            } catch (e) {
                return false;
            }
        }

        function persistLevelIfPossible(levelNum) {
            var localStorageFail = false,
                levelName;

            for (var key in self.levels) {
                if (self.levels.hasOwnProperty(key) && self.levels[key] === levelNum) {
                    levelName = key;
                    break;
                }
            }

            if (localStorageAvailable()) {
                /*
                 * Setting localStorage can create a DOM 22 Exception if running in Private mode
                 * in Safari, so even if it is available we need to catch any errors when trying
                 * to write to it
                 */
                try {
                    window.localStorage['loglevel'] = levelName;
                } catch (e) {
                    localStorageFail = true;
                }
            } else {
                localStorageFail = true;
            }

            if (localStorageFail && cookiesAvailable()) {
                window.document.cookie = "loglevel=" + levelName + ";";
            }
        }

        var cookieRegex = /loglevel=([^;]+)/;

        function loadPersistedLevel() {
            var storedLevel;

            if (localStorageAvailable()) {
                storedLevel = window.localStorage['loglevel'];
            }

            if (storedLevel === undefined && cookiesAvailable()) {
                var cookieMatch = cookieRegex.exec(window.document.cookie) || [];
                storedLevel = cookieMatch[1];
            }
            
            if (self.levels[storedLevel] === undefined) {
                storedLevel = "WARN";
            }

            self.setLevel(self.levels[storedLevel]);
        }

        /*
         *
         * Public API
         *
         */

        self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
            "ERROR": 4, "SILENT": 5};

        self.setLevel = function (level) {
            if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
                persistLevelIfPossible(level);

                if (level === self.levels.SILENT) {
                    replaceLoggingMethods(function () {
                        return noop;
                    });
                    return;
                } else if (typeof console === undefinedType) {
                    replaceLoggingMethods(function (methodName) {
                        return function () {
                            if (typeof console !== undefinedType) {
                                self.setLevel(level);
                                self[methodName].apply(self, arguments);
                            }
                        };
                    });
                    return "No console available for logging";
                } else {
                    replaceLoggingMethods(function (methodName) {
                        if (level <= self.levels[methodName.toUpperCase()]) {
                            return realMethod(methodName);
                        } else {
                            return noop;
                        }
                    });
                }
            } else if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
                self.setLevel(self.levels[level.toUpperCase()]);
            } else {
                throw "log.setLevel() called with invalid level: " + level;
            }
        };

        self.enableAll = function() {
            self.setLevel(self.levels.TRACE);
        };

        self.disableAll = function() {
            self.setLevel(self.levels.SILENT);
        };

        loadPersistedLevel();
        return self;
    }));
})();

},{}],49:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.once = noop;
process.off = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],50:[function(require,module,exports){
(function (sinonChai) {
    "use strict";

    // Module systems magic dance.

    if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
        // NodeJS
        module.exports = sinonChai;
    } else if (typeof define === "function" && define.amd) {
        // AMD
        define(function () {
            return sinonChai;
        });
    } else {
        // Other environment (usually <script> tag): plug in to global chai instance directly.
        chai.use(sinonChai);
    }
}(function sinonChai(chai, utils) {
    "use strict";

    var slice = Array.prototype.slice;

    function isSpy(putativeSpy) {
        return typeof putativeSpy === "function" &&
               typeof putativeSpy.getCall === "function" &&
               typeof putativeSpy.calledWithExactly === "function";
    }

    function timesInWords(count) {
        return count === 1 ? "once" :
               count === 2 ? "twice" :
               count === 3 ? "thrice" :
               (count || 0) + " times";
    }

    function isCall(putativeCall) {
        return putativeCall && isSpy(putativeCall.proxy);
    }

    function assertCanWorkWith(assertion) {
        if (!isSpy(assertion._obj) && !isCall(assertion._obj)) {
            throw new TypeError(utils.inspect(assertion._obj) + " is not a spy or a call to a spy!");
        }
    }

    function getMessages(spy, action, nonNegatedSuffix, always, args) {
        var verbPhrase = always ? "always have " : "have ";
        nonNegatedSuffix = nonNegatedSuffix || "";
        if (isSpy(spy.proxy)) {
            spy = spy.proxy;
        }

        function printfArray(array) {
            return spy.printf.apply(spy, array);
        }

        return {
            affirmative: printfArray(["expected %n to " + verbPhrase + action + nonNegatedSuffix].concat(args)),
            negative: printfArray(["expected %n to not " + verbPhrase + action].concat(args))
        };
    }

    function sinonProperty(name, action, nonNegatedSuffix) {
        utils.addProperty(chai.Assertion.prototype, name, function () {
            assertCanWorkWith(this);

            var messages = getMessages(this._obj, action, nonNegatedSuffix, false);
            this.assert(this._obj[name], messages.affirmative, messages.negative);
        });
    }

    function sinonPropertyAsBooleanMethod(name, action, nonNegatedSuffix) {
        utils.addMethod(chai.Assertion.prototype, name, function (arg) {
            assertCanWorkWith(this);

            var messages = getMessages(this._obj, action, nonNegatedSuffix, false, [timesInWords(arg)]);
            this.assert(this._obj[name] === arg, messages.affirmative, messages.negative);
        });
    }

    function createSinonMethodHandler(sinonName, action, nonNegatedSuffix) {
        return function () {
            assertCanWorkWith(this);

            var alwaysSinonMethod = "always" + sinonName[0].toUpperCase() + sinonName.substring(1);
            var shouldBeAlways = utils.flag(this, "always") && typeof this._obj[alwaysSinonMethod] === "function";
            var sinonMethod = shouldBeAlways ? alwaysSinonMethod : sinonName;

            var messages = getMessages(this._obj, action, nonNegatedSuffix, shouldBeAlways, slice.call(arguments));
            this.assert(this._obj[sinonMethod].apply(this._obj, arguments), messages.affirmative, messages.negative);
        };
    }

    function sinonMethodAsProperty(name, action, nonNegatedSuffix) {
        var handler = createSinonMethodHandler(name, action, nonNegatedSuffix);
        utils.addProperty(chai.Assertion.prototype, name, handler);
    }

    function exceptionalSinonMethod(chaiName, sinonName, action, nonNegatedSuffix) {
        var handler = createSinonMethodHandler(sinonName, action, nonNegatedSuffix);
        utils.addMethod(chai.Assertion.prototype, chaiName, handler);
    }

    function sinonMethod(name, action, nonNegatedSuffix) {
        exceptionalSinonMethod(name, name, action, nonNegatedSuffix);
    }

    utils.addProperty(chai.Assertion.prototype, "always", function () {
        utils.flag(this, "always", true);
    });

    sinonProperty("called", "been called", " at least once, but it was never called");
    sinonPropertyAsBooleanMethod("callCount", "been called exactly %1", ", but it was called %c%C");
    sinonProperty("calledOnce", "been called exactly once", ", but it was called %c%C");
    sinonProperty("calledTwice", "been called exactly twice", ", but it was called %c%C");
    sinonProperty("calledThrice", "been called exactly thrice", ", but it was called %c%C");
    sinonMethodAsProperty("calledWithNew", "been called with new");
    sinonMethod("calledBefore", "been called before %1");
    sinonMethod("calledAfter", "been called after %1");
    sinonMethod("calledOn", "been called with %1 as this", ", but it was called with %t instead");
    sinonMethod("calledWith", "been called with arguments %*", "%C");
    sinonMethod("calledWithExactly", "been called with exact arguments %*", "%C");
    sinonMethod("calledWithMatch", "been called with arguments matching %*", "%C");
    sinonMethod("returned", "returned %1");
    exceptionalSinonMethod("thrown", "threw", "thrown %1");
}));

},{}],51:[function(require,module,exports){
var toString = Object.prototype.toString

module.exports = function(val){
  switch (toString.call(val)) {
    case '[object Function]': return 'function'
    case '[object Date]': return 'date'
    case '[object RegExp]': return 'regexp'
    case '[object Arguments]': return 'arguments'
    case '[object Array]': return 'array'
    case '[object String]': return 'string'
  }

  if (typeof val == 'object' && val && typeof val.length == 'number') {
    try {
      if (typeof val.callee == 'function') return 'arguments';
    } catch (ex) {
      if (ex instanceof TypeError) {
        return 'arguments';
      }
    }
  }

  if (val === null) return 'null'
  if (val === undefined) return 'undefined'
  if (val && val.nodeType === 1) return 'element'
  if (val === Object(val)) return 'object'

  return typeof val
}

},{}],52:[function(require,module,exports){
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    any(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, function(value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
    each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
    each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(array, predicate) {
    var pass = [], fail = [];
    each(array, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.contains(other, item);
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function () {
      return value;
    };
  };

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj === attrs) return true; //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);

},{}],53:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/XDomainRequestWrapper.js']) {
  _$jscoverage['modules/XDomainRequestWrapper.js'] = [];
  _$jscoverage['modules/XDomainRequestWrapper.js'][1] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][2] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][3] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][4] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][5] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][6] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][7] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][8] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][9] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][10] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][11] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][12] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][13] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][14] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][15] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][16] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][19] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][20] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][21] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][23] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][24] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][25] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][26] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][27] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][30] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][31] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][32] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][33] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][34] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][35] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][40] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][41] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][44] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][45] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][48] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][49] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][52] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][59] = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][63] = 0;
}
_$jscoverage['modules/XDomainRequestWrapper.js'][1]++;
var XDomainRequestWrapper = (function (xdr) {
  _$jscoverage['modules/XDomainRequestWrapper.js'][2]++;
  this.xdr = xdr;
  _$jscoverage['modules/XDomainRequestWrapper.js'][3]++;
  this.isWrapper = true;
  _$jscoverage['modules/XDomainRequestWrapper.js'][4]++;
  this.readyState = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][5]++;
  this.onreadystatechange = null;
  _$jscoverage['modules/XDomainRequestWrapper.js'][6]++;
  this.status = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][7]++;
  this.statusText = "";
  _$jscoverage['modules/XDomainRequestWrapper.js'][8]++;
  this.responseText = "";
  _$jscoverage['modules/XDomainRequestWrapper.js'][9]++;
  var self = this;
  _$jscoverage['modules/XDomainRequestWrapper.js'][10]++;
  this.xdr.onload = (function () {
  _$jscoverage['modules/XDomainRequestWrapper.js'][11]++;
  self.readyState = 4;
  _$jscoverage['modules/XDomainRequestWrapper.js'][12]++;
  self.status = 200;
  _$jscoverage['modules/XDomainRequestWrapper.js'][13]++;
  self.statusText = "";
  _$jscoverage['modules/XDomainRequestWrapper.js'][14]++;
  self.responseText = self.xdr.responseText;
  _$jscoverage['modules/XDomainRequestWrapper.js'][15]++;
  if (self.onreadystatechange) {
    _$jscoverage['modules/XDomainRequestWrapper.js'][16]++;
    self.onreadystatechange();
  }
});
  _$jscoverage['modules/XDomainRequestWrapper.js'][19]++;
  this.xdr.onerror = (function () {
  _$jscoverage['modules/XDomainRequestWrapper.js'][20]++;
  if (self.onerror) {
    _$jscoverage['modules/XDomainRequestWrapper.js'][21]++;
    self.onerror();
  }
  _$jscoverage['modules/XDomainRequestWrapper.js'][23]++;
  self.readyState = 4;
  _$jscoverage['modules/XDomainRequestWrapper.js'][24]++;
  self.status = 0;
  _$jscoverage['modules/XDomainRequestWrapper.js'][25]++;
  self.statusText = "";
  _$jscoverage['modules/XDomainRequestWrapper.js'][26]++;
  if (self.onreadystatechange) {
    _$jscoverage['modules/XDomainRequestWrapper.js'][27]++;
    self.onreadystatechange();
  }
});
  _$jscoverage['modules/XDomainRequestWrapper.js'][30]++;
  this.xdr.ontimeout = (function () {
  _$jscoverage['modules/XDomainRequestWrapper.js'][31]++;
  self.readyState = 4;
  _$jscoverage['modules/XDomainRequestWrapper.js'][32]++;
  self.status = 408;
  _$jscoverage['modules/XDomainRequestWrapper.js'][33]++;
  self.statusText = "timeout";
  _$jscoverage['modules/XDomainRequestWrapper.js'][34]++;
  if (self.onreadystatechange) {
    _$jscoverage['modules/XDomainRequestWrapper.js'][35]++;
    self.onreadystatechange();
  }
});
});
_$jscoverage['modules/XDomainRequestWrapper.js'][40]++;
XDomainRequestWrapper.prototype.open = (function (method, url, asyn) {
  _$jscoverage['modules/XDomainRequestWrapper.js'][41]++;
  this.xdr.open(method, url);
});
_$jscoverage['modules/XDomainRequestWrapper.js'][44]++;
XDomainRequestWrapper.prototype.send = (function (data) {
  _$jscoverage['modules/XDomainRequestWrapper.js'][45]++;
  this.xdr.send(data);
});
_$jscoverage['modules/XDomainRequestWrapper.js'][48]++;
XDomainRequestWrapper.prototype.abort = (function () {
  _$jscoverage['modules/XDomainRequestWrapper.js'][49]++;
  this.xdr.abort();
});
_$jscoverage['modules/XDomainRequestWrapper.js'][52]++;
XDomainRequestWrapper.prototype.setRequestHeader = (function (n, v) {
});
_$jscoverage['modules/XDomainRequestWrapper.js'][59]++;
XDomainRequestWrapper.prototype.getResponseHeader = (function (n) {
});
_$jscoverage['modules/XDomainRequestWrapper.js'][63]++;
module.exports = XDomainRequestWrapper;
_$jscoverage['modules/XDomainRequestWrapper.js'].source = ["var XDomainRequestWrapper = function(xdr){","  this.xdr = xdr;","  this.isWrapper = true;","  this.readyState = 0;","  this.onreadystatechange = null;","  this.status = 0;","  this.statusText = \"\";","  this.responseText = \"\";","  var self = this;","  this.xdr.onload = function(){","      self.readyState = 4;","      self.status = 200;","      self.statusText = \"\";","      self.responseText = self.xdr.responseText;","      if(self.onreadystatechange){","          self.onreadystatechange();","      }","  };","  this.xdr.onerror = function(){","      if(self.onerror){","          self.onerror();","      }","      self.readyState = 4;","      self.status = 0;","      self.statusText = \"\";","      if(self.onreadystatechange){","          self.onreadystatechange();","      }","  };","  this.xdr.ontimeout = function(){","      self.readyState = 4;","      self.status = 408;","      self.statusText = \"timeout\";","      if(self.onreadystatechange){","          self.onreadystatechange();","      }","  };","};","","XDomainRequestWrapper.prototype.open = function(method, url, asyn){","  this.xdr.open(method, url);","};","","XDomainRequestWrapper.prototype.send = function(data){","  this.xdr.send(data);","};","","XDomainRequestWrapper.prototype.abort = function(){","  this.xdr.abort();","};","","XDomainRequestWrapper.prototype.setRequestHeader = function(n, v){","  //not supported by xdr","  //Good doc on limitations of XDomainRequest http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx","  //XDomainRequest doesn't allow setting custom request headers. But it is the only available option to do CORS requests in IE8 &amp; 9. In IE10, they finally start to use standard XMLHttpRequest.","  //To support FH auth tokens in IE8&amp;9, we have to find a different way of doing it.","};","","XDomainRequestWrapper.prototype.getResponseHeader = function(n){","  //not supported by xdr","};","","module.exports = XDomainRequestWrapper;"];

},{}],54:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/ajax.js']) {
  _$jscoverage['modules/ajax.js'] = [];
  _$jscoverage['modules/ajax.js'][11] = 0;
  _$jscoverage['modules/ajax.js'][12] = 0;
  _$jscoverage['modules/ajax.js'][13] = 0;
  _$jscoverage['modules/ajax.js'][14] = 0;
  _$jscoverage['modules/ajax.js'][16] = 0;
  _$jscoverage['modules/ajax.js'][17] = 0;
  _$jscoverage['modules/ajax.js'][18] = 0;
  _$jscoverage['modules/ajax.js'][21] = 0;
  _$jscoverage['modules/ajax.js'][22] = 0;
  _$jscoverage['modules/ajax.js'][25] = 0;
  _$jscoverage['modules/ajax.js'][36] = 0;
  _$jscoverage['modules/ajax.js'][37] = 0;
  _$jscoverage['modules/ajax.js'][38] = 0;
  _$jscoverage['modules/ajax.js'][39] = 0;
  _$jscoverage['modules/ajax.js'][41] = 0;
  _$jscoverage['modules/ajax.js'][43] = 0;
  _$jscoverage['modules/ajax.js'][46] = 0;
  _$jscoverage['modules/ajax.js'][48] = 0;
  _$jscoverage['modules/ajax.js'][49] = 0;
  _$jscoverage['modules/ajax.js'][50] = 0;
  _$jscoverage['modules/ajax.js'][52] = 0;
  _$jscoverage['modules/ajax.js'][55] = 0;
  _$jscoverage['modules/ajax.js'][56] = 0;
  _$jscoverage['modules/ajax.js'][58] = 0;
  _$jscoverage['modules/ajax.js'][64] = 0;
  _$jscoverage['modules/ajax.js'][65] = 0;
  _$jscoverage['modules/ajax.js'][66] = 0;
  _$jscoverage['modules/ajax.js'][67] = 0;
  _$jscoverage['modules/ajax.js'][68] = 0;
  _$jscoverage['modules/ajax.js'][70] = 0;
  _$jscoverage['modules/ajax.js'][71] = 0;
  _$jscoverage['modules/ajax.js'][72] = 0;
  _$jscoverage['modules/ajax.js'][74] = 0;
  _$jscoverage['modules/ajax.js'][75] = 0;
  _$jscoverage['modules/ajax.js'][76] = 0;
  _$jscoverage['modules/ajax.js'][77] = 0;
  _$jscoverage['modules/ajax.js'][78] = 0;
  _$jscoverage['modules/ajax.js'][80] = 0;
  _$jscoverage['modules/ajax.js'][81] = 0;
  _$jscoverage['modules/ajax.js'][82] = 0;
  _$jscoverage['modules/ajax.js'][83] = 0;
  _$jscoverage['modules/ajax.js'][84] = 0;
  _$jscoverage['modules/ajax.js'][85] = 0;
  _$jscoverage['modules/ajax.js'][88] = 0;
  _$jscoverage['modules/ajax.js'][89] = 0;
  _$jscoverage['modules/ajax.js'][90] = 0;
  _$jscoverage['modules/ajax.js'][91] = 0;
  _$jscoverage['modules/ajax.js'][93] = 0;
  _$jscoverage['modules/ajax.js'][94] = 0;
  _$jscoverage['modules/ajax.js'][95] = 0;
  _$jscoverage['modules/ajax.js'][96] = 0;
  _$jscoverage['modules/ajax.js'][98] = 0;
  _$jscoverage['modules/ajax.js'][101] = 0;
  _$jscoverage['modules/ajax.js'][102] = 0;
  _$jscoverage['modules/ajax.js'][103] = 0;
  _$jscoverage['modules/ajax.js'][105] = 0;
  _$jscoverage['modules/ajax.js'][107] = 0;
  _$jscoverage['modules/ajax.js'][112] = 0;
  _$jscoverage['modules/ajax.js'][113] = 0;
  _$jscoverage['modules/ajax.js'][114] = 0;
  _$jscoverage['modules/ajax.js'][116] = 0;
  _$jscoverage['modules/ajax.js'][118] = 0;
  _$jscoverage['modules/ajax.js'][119] = 0;
  _$jscoverage['modules/ajax.js'][120] = 0;
  _$jscoverage['modules/ajax.js'][121] = 0;
  _$jscoverage['modules/ajax.js'][124] = 0;
  _$jscoverage['modules/ajax.js'][125] = 0;
  _$jscoverage['modules/ajax.js'][126] = 0;
  _$jscoverage['modules/ajax.js'][127] = 0;
  _$jscoverage['modules/ajax.js'][128] = 0;
  _$jscoverage['modules/ajax.js'][129] = 0;
  _$jscoverage['modules/ajax.js'][133] = 0;
  _$jscoverage['modules/ajax.js'][134] = 0;
  _$jscoverage['modules/ajax.js'][139] = 0;
  _$jscoverage['modules/ajax.js'][140] = 0;
  _$jscoverage['modules/ajax.js'][141] = 0;
  _$jscoverage['modules/ajax.js'][145] = 0;
  _$jscoverage['modules/ajax.js'][146] = 0;
  _$jscoverage['modules/ajax.js'][150] = 0;
  _$jscoverage['modules/ajax.js'][152] = 0;
  _$jscoverage['modules/ajax.js'][153] = 0;
  _$jscoverage['modules/ajax.js'][156] = 0;
  _$jscoverage['modules/ajax.js'][157] = 0;
  _$jscoverage['modules/ajax.js'][161] = 0;
  _$jscoverage['modules/ajax.js'][162] = 0;
  _$jscoverage['modules/ajax.js'][163] = 0;
  _$jscoverage['modules/ajax.js'][164] = 0;
  _$jscoverage['modules/ajax.js'][166] = 0;
  _$jscoverage['modules/ajax.js'][169] = 0;
  _$jscoverage['modules/ajax.js'][170] = 0;
  _$jscoverage['modules/ajax.js'][172] = 0;
  _$jscoverage['modules/ajax.js'][173] = 0;
  _$jscoverage['modules/ajax.js'][174] = 0;
  _$jscoverage['modules/ajax.js'][177] = 0;
  _$jscoverage['modules/ajax.js'][178] = 0;
  _$jscoverage['modules/ajax.js'][179] = 0;
  _$jscoverage['modules/ajax.js'][180] = 0;
  _$jscoverage['modules/ajax.js'][181] = 0;
  _$jscoverage['modules/ajax.js'][184] = 0;
  _$jscoverage['modules/ajax.js'][185] = 0;
  _$jscoverage['modules/ajax.js'][186] = 0;
  _$jscoverage['modules/ajax.js'][187] = 0;
  _$jscoverage['modules/ajax.js'][188] = 0;
  _$jscoverage['modules/ajax.js'][192] = 0;
  _$jscoverage['modules/ajax.js'][194] = 0;
  _$jscoverage['modules/ajax.js'][195] = 0;
  _$jscoverage['modules/ajax.js'][197] = 0;
  _$jscoverage['modules/ajax.js'][202] = 0;
  _$jscoverage['modules/ajax.js'][203] = 0;
  _$jscoverage['modules/ajax.js'][210] = 0;
  _$jscoverage['modules/ajax.js'][211] = 0;
  _$jscoverage['modules/ajax.js'][212] = 0;
  _$jscoverage['modules/ajax.js'][215] = 0;
  _$jscoverage['modules/ajax.js'][216] = 0;
  _$jscoverage['modules/ajax.js'][219] = 0;
  _$jscoverage['modules/ajax.js'][220] = 0;
  _$jscoverage['modules/ajax.js'][223] = 0;
  _$jscoverage['modules/ajax.js'][224] = 0;
  _$jscoverage['modules/ajax.js'][228] = 0;
  _$jscoverage['modules/ajax.js'][230] = 0;
  _$jscoverage['modules/ajax.js'][231] = 0;
  _$jscoverage['modules/ajax.js'][232] = 0;
  _$jscoverage['modules/ajax.js'][235] = 0;
  _$jscoverage['modules/ajax.js'][238] = 0;
  _$jscoverage['modules/ajax.js'][239] = 0;
  _$jscoverage['modules/ajax.js'][240] = 0;
  _$jscoverage['modules/ajax.js'][241] = 0;
  _$jscoverage['modules/ajax.js'][243] = 0;
  _$jscoverage['modules/ajax.js'][246] = 0;
  _$jscoverage['modules/ajax.js'][247] = 0;
  _$jscoverage['modules/ajax.js'][249] = 0;
  _$jscoverage['modules/ajax.js'][250] = 0;
  _$jscoverage['modules/ajax.js'][253] = 0;
  _$jscoverage['modules/ajax.js'][254] = 0;
  _$jscoverage['modules/ajax.js'][256] = 0;
  _$jscoverage['modules/ajax.js'][259] = 0;
  _$jscoverage['modules/ajax.js'][290] = 0;
  _$jscoverage['modules/ajax.js'][291] = 0;
  _$jscoverage['modules/ajax.js'][297] = 0;
  _$jscoverage['modules/ajax.js'][298] = 0;
  _$jscoverage['modules/ajax.js'][302] = 0;
  _$jscoverage['modules/ajax.js'][303] = 0;
  _$jscoverage['modules/ajax.js'][304] = 0;
  _$jscoverage['modules/ajax.js'][306] = 0;
  _$jscoverage['modules/ajax.js'][308] = 0;
  _$jscoverage['modules/ajax.js'][311] = 0;
  _$jscoverage['modules/ajax.js'][312] = 0;
  _$jscoverage['modules/ajax.js'][315] = 0;
  _$jscoverage['modules/ajax.js'][316] = 0;
  _$jscoverage['modules/ajax.js'][322] = 0;
  _$jscoverage['modules/ajax.js'][323] = 0;
  _$jscoverage['modules/ajax.js'][324] = 0;
  _$jscoverage['modules/ajax.js'][333] = 0;
  _$jscoverage['modules/ajax.js'][334] = 0;
  _$jscoverage['modules/ajax.js'][341] = 0;
  _$jscoverage['modules/ajax.js'][343] = 0;
  _$jscoverage['modules/ajax.js'][344] = 0;
  _$jscoverage['modules/ajax.js'][345] = 0;
  _$jscoverage['modules/ajax.js'][346] = 0;
  _$jscoverage['modules/ajax.js'][348] = 0;
  _$jscoverage['modules/ajax.js'][350] = 0;
  _$jscoverage['modules/ajax.js'][352] = 0;
  _$jscoverage['modules/ajax.js'][353] = 0;
  _$jscoverage['modules/ajax.js'][354] = 0;
  _$jscoverage['modules/ajax.js'][358] = 0;
  _$jscoverage['modules/ajax.js'][359] = 0;
  _$jscoverage['modules/ajax.js'][360] = 0;
  _$jscoverage['modules/ajax.js'][361] = 0;
  _$jscoverage['modules/ajax.js'][363] = 0;
  _$jscoverage['modules/ajax.js'][364] = 0;
  _$jscoverage['modules/ajax.js'][367] = 0;
  _$jscoverage['modules/ajax.js'][368] = 0;
  _$jscoverage['modules/ajax.js'][369] = 0;
  _$jscoverage['modules/ajax.js'][370] = 0;
  _$jscoverage['modules/ajax.js'][371] = 0;
  _$jscoverage['modules/ajax.js'][372] = 0;
  _$jscoverage['modules/ajax.js'][374] = 0;
}
_$jscoverage['modules/ajax.js'][11]++;
var eventsHandler = require("./events");
_$jscoverage['modules/ajax.js'][12]++;
var XDomainRequestWrapper = require("./XDomainRequestWrapper");
_$jscoverage['modules/ajax.js'][13]++;
var consts = require("./constants");
_$jscoverage['modules/ajax.js'][14]++;
var logger = require("./logger");
_$jscoverage['modules/ajax.js'][16]++;
var type;
_$jscoverage['modules/ajax.js'][17]++;
try {
  _$jscoverage['modules/ajax.js'][18]++;
  type = require("type-of");
}
catch (ex) {
  _$jscoverage['modules/ajax.js'][21]++;
  var r = require;
  _$jscoverage['modules/ajax.js'][22]++;
  type = r("type");
}
_$jscoverage['modules/ajax.js'][25]++;
var jsonpID = 0, document = window.document, key, name, rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, scriptTypeRE = /^(?:text|application)\/javascript/i, xmlTypeRE = /^(?:text|application)\/xml/i, jsonType = "application/json", htmlType = "text/html", blankRE = /^\s*$/;
_$jscoverage['modules/ajax.js'][36]++;
var ajax = module.exports = (function (options) {
  _$jscoverage['modules/ajax.js'][37]++;
  var settings = extend({}, options || {});
  _$jscoverage['modules/ajax.js'][38]++;
  for (key in ajax.settings) {
    _$jscoverage['modules/ajax.js'][39]++;
    if (settings[key] === undefined) {
      _$jscoverage['modules/ajax.js'][39]++;
      settings[key] = ajax.settings[key];
    }
}
  _$jscoverage['modules/ajax.js'][41]++;
  ajaxStart(settings);
  _$jscoverage['modules/ajax.js'][43]++;
  if (! settings.crossDomain) {
    _$jscoverage['modules/ajax.js'][43]++;
    settings.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(settings.url) && RegExp.$2 != window.location.host;
  }
  _$jscoverage['modules/ajax.js'][46]++;
  var dataType = settings.dataType, hasPlaceholder = /=\?/.test(settings.url);
  _$jscoverage['modules/ajax.js'][48]++;
  if (dataType == "jsonp" || hasPlaceholder) {
    _$jscoverage['modules/ajax.js'][49]++;
    if (! hasPlaceholder) {
      _$jscoverage['modules/ajax.js'][50]++;
      settings.url = appendQuery(settings.url, (settings.jsonp? settings.jsonp: "_callback") + "=?");
    }
    _$jscoverage['modules/ajax.js'][52]++;
    return ajax.JSONP(settings);
  }
  _$jscoverage['modules/ajax.js'][55]++;
  if (! settings.url) {
    _$jscoverage['modules/ajax.js'][55]++;
    settings.url = window.location.toString();
  }
  _$jscoverage['modules/ajax.js'][56]++;
  serializeData(settings);
  _$jscoverage['modules/ajax.js'][58]++;
  var mime = settings.accepts[dataType], baseHeaders = {}, protocol = /^([\w-]+:)\/\//.test(settings.url)? RegExp.$1: window.location.protocol, xhr = settings.xhr(settings.crossDomain), abortTimeout;
  _$jscoverage['modules/ajax.js'][64]++;
  if (! settings.crossDomain) {
    _$jscoverage['modules/ajax.js'][64]++;
    baseHeaders["X-Requested-With"] = "XMLHttpRequest";
  }
  _$jscoverage['modules/ajax.js'][65]++;
  if (mime) {
    _$jscoverage['modules/ajax.js'][66]++;
    baseHeaders.Accept = mime;
    _$jscoverage['modules/ajax.js'][67]++;
    if (mime.indexOf(",") > -1) {
      _$jscoverage['modules/ajax.js'][67]++;
      mime = mime.split(",", 2)[0];
    }
    _$jscoverage['modules/ajax.js'][68]++;
    xhr.overrideMimeType && xhr.overrideMimeType(mime);
  }
  _$jscoverage['modules/ajax.js'][70]++;
  if (settings.contentType || (settings.data && ! settings.formdata && settings.type.toUpperCase() != "GET")) {
    _$jscoverage['modules/ajax.js'][71]++;
    baseHeaders["Content-Type"] = (settings.contentType || "application/x-www-form-urlencoded");
  }
  _$jscoverage['modules/ajax.js'][72]++;
  settings.headers = extend(baseHeaders, settings.headers || {});
  _$jscoverage['modules/ajax.js'][74]++;
  xhr.onreadystatechange = (function () {
  _$jscoverage['modules/ajax.js'][75]++;
  if (xhr.readyState == 4) {
    _$jscoverage['modules/ajax.js'][76]++;
    clearTimeout(abortTimeout);
    _$jscoverage['modules/ajax.js'][77]++;
    var result, error = false;
    _$jscoverage['modules/ajax.js'][78]++;
    if (settings.tryJSONP) {
      _$jscoverage['modules/ajax.js'][80]++;
      if (xhr.status === 0 && settings.crossDomain && ! xhr.isTimeout && protocol != "file:") {
        _$jscoverage['modules/ajax.js'][81]++;
        logger.debug("retry ajax call with jsonp");
        _$jscoverage['modules/ajax.js'][82]++;
        settings.type = "GET";
        _$jscoverage['modules/ajax.js'][83]++;
        settings.dataType = "jsonp";
        _$jscoverage['modules/ajax.js'][84]++;
        settings.data = "_jsonpdata=" + settings.data;
        _$jscoverage['modules/ajax.js'][85]++;
        return ajax(settings);
      }
    }
    _$jscoverage['modules/ajax.js'][88]++;
    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == "file:")) {
      _$jscoverage['modules/ajax.js'][89]++;
      dataType = dataType || mimeToDataType(xhr.getResponseHeader("content-type"));
      _$jscoverage['modules/ajax.js'][90]++;
      result = xhr.responseText;
      _$jscoverage['modules/ajax.js'][91]++;
      logger.debug("ajax response :: status = " + xhr.status + " :: body = " + result);
      _$jscoverage['modules/ajax.js'][93]++;
      try {
        _$jscoverage['modules/ajax.js'][94]++;
        if (dataType == "script") {
          _$jscoverage['modules/ajax.js'][94]++;
          (1, eval)(result);
        }
        else {
          _$jscoverage['modules/ajax.js'][95]++;
          if (dataType == "xml") {
            _$jscoverage['modules/ajax.js'][95]++;
            result = xhr.responseXML;
          }
          else {
            _$jscoverage['modules/ajax.js'][96]++;
            if (dataType == "json") {
              _$jscoverage['modules/ajax.js'][96]++;
              result = blankRE.test(result)? null: JSON.parse(result);
            }
          }
        }
      }
      catch (e) {
        _$jscoverage['modules/ajax.js'][98]++;
        error = e;
      }
      _$jscoverage['modules/ajax.js'][101]++;
      if (error) {
        _$jscoverage['modules/ajax.js'][102]++;
        logger.debug("ajax error", error);
        _$jscoverage['modules/ajax.js'][103]++;
        ajaxError(error, "parsererror", xhr, settings);
      }
      else {
        _$jscoverage['modules/ajax.js'][105]++;
        ajaxSuccess(result, xhr, settings);
      }
    }
    else {
      _$jscoverage['modules/ajax.js'][107]++;
      ajaxError(null, "error", xhr, settings);
    }
  }
});
  _$jscoverage['modules/ajax.js'][112]++;
  var async = "async" in settings? settings.async: true;
  _$jscoverage['modules/ajax.js'][113]++;
  logger.debug("ajax call settings", settings);
  _$jscoverage['modules/ajax.js'][114]++;
  xhr.open(settings.type, settings.url, async);
  _$jscoverage['modules/ajax.js'][116]++;
  for (name in settings.headers) {
    _$jscoverage['modules/ajax.js'][116]++;
    xhr.setRequestHeader(name, settings.headers[name]);
}
  _$jscoverage['modules/ajax.js'][118]++;
  if (ajaxBeforeSend(xhr, settings) === false) {
    _$jscoverage['modules/ajax.js'][119]++;
    logger.debug("ajax call is aborted due to ajaxBeforeSend");
    _$jscoverage['modules/ajax.js'][120]++;
    xhr.abort();
    _$jscoverage['modules/ajax.js'][121]++;
    return false;
  }
  _$jscoverage['modules/ajax.js'][124]++;
  if (settings.timeout > 0) {
    _$jscoverage['modules/ajax.js'][124]++;
    abortTimeout = setTimeout((function () {
  _$jscoverage['modules/ajax.js'][125]++;
  logger.debug("ajax call timed out");
  _$jscoverage['modules/ajax.js'][126]++;
  xhr.onreadystatechange = empty;
  _$jscoverage['modules/ajax.js'][127]++;
  xhr.abort();
  _$jscoverage['modules/ajax.js'][128]++;
  xhr.isTimeout = true;
  _$jscoverage['modules/ajax.js'][129]++;
  ajaxError(null, "timeout", xhr, settings);
}), settings.timeout);
  }
  _$jscoverage['modules/ajax.js'][133]++;
  xhr.send(settings.data? settings.data: null);
  _$jscoverage['modules/ajax.js'][134]++;
  return xhr;
});
_$jscoverage['modules/ajax.js'][139]++;
function triggerAndReturn(context, eventName, data) {
  _$jscoverage['modules/ajax.js'][140]++;
  eventsHandler.emit(eventName, data);
  _$jscoverage['modules/ajax.js'][141]++;
  return true;
}
_$jscoverage['modules/ajax.js'][145]++;
function triggerGlobal(settings, context, eventName, data) {
  _$jscoverage['modules/ajax.js'][146]++;
  if (settings.global) {
    _$jscoverage['modules/ajax.js'][146]++;
    return triggerAndReturn(context || document, eventName, data);
  }
}
_$jscoverage['modules/ajax.js'][150]++;
ajax.active = 0;
_$jscoverage['modules/ajax.js'][152]++;
function ajaxStart(settings) {
  _$jscoverage['modules/ajax.js'][153]++;
  if (settings.global && ajax.active++ === 0) {
    _$jscoverage['modules/ajax.js'][153]++;
    triggerGlobal(settings, null, "ajaxStart");
  }
}
_$jscoverage['modules/ajax.js'][156]++;
function ajaxStop(settings) {
  _$jscoverage['modules/ajax.js'][157]++;
  if (settings.global && ! (--ajax.active)) {
    _$jscoverage['modules/ajax.js'][157]++;
    triggerGlobal(settings, null, "ajaxStop");
  }
}
_$jscoverage['modules/ajax.js'][161]++;
function ajaxBeforeSend(xhr, settings) {
  _$jscoverage['modules/ajax.js'][162]++;
  var context = settings.context;
  _$jscoverage['modules/ajax.js'][163]++;
  if (settings.beforeSend.call(context, xhr, settings) === false) {
    _$jscoverage['modules/ajax.js'][164]++;
    return false;
  }
  _$jscoverage['modules/ajax.js'][166]++;
  triggerGlobal(settings, context, "ajaxSend", [xhr, settings]);
}
_$jscoverage['modules/ajax.js'][169]++;
function ajaxSuccess(data, xhr, settings) {
  _$jscoverage['modules/ajax.js'][170]++;
  var context = settings.context, status = "success";
  _$jscoverage['modules/ajax.js'][172]++;
  settings.success.call(context, data, status, xhr);
  _$jscoverage['modules/ajax.js'][173]++;
  triggerGlobal(settings, context, "ajaxSuccess", [xhr, settings, data]);
  _$jscoverage['modules/ajax.js'][174]++;
  ajaxComplete(status, xhr, settings);
}
_$jscoverage['modules/ajax.js'][177]++;
function ajaxError(error, type, xhr, settings) {
  _$jscoverage['modules/ajax.js'][178]++;
  var context = settings.context;
  _$jscoverage['modules/ajax.js'][179]++;
  settings.error.call(context, xhr, type, error);
  _$jscoverage['modules/ajax.js'][180]++;
  triggerGlobal(settings, context, "ajaxError", [xhr, settings, error]);
  _$jscoverage['modules/ajax.js'][181]++;
  ajaxComplete(type, xhr, settings);
}
_$jscoverage['modules/ajax.js'][184]++;
function ajaxComplete(status, xhr, settings) {
  _$jscoverage['modules/ajax.js'][185]++;
  var context = settings.context;
  _$jscoverage['modules/ajax.js'][186]++;
  settings.complete.call(context, xhr, status);
  _$jscoverage['modules/ajax.js'][187]++;
  triggerGlobal(settings, context, "ajaxComplete", [xhr, settings]);
  _$jscoverage['modules/ajax.js'][188]++;
  ajaxStop(settings);
}
_$jscoverage['modules/ajax.js'][192]++;
function empty() {
}
_$jscoverage['modules/ajax.js'][194]++;
ajax.JSONP = (function (options) {
  _$jscoverage['modules/ajax.js'][195]++;
  if (! ("type" in options)) {
    _$jscoverage['modules/ajax.js'][195]++;
    return ajax(options);
  }
  _$jscoverage['modules/ajax.js'][197]++;
  var callbackName = "jsonp" + (++jsonpID), script = document.createElement("script"), abort = (function () {
  _$jscoverage['modules/ajax.js'][202]++;
  if (callbackName in window) {
    _$jscoverage['modules/ajax.js'][202]++;
    window[callbackName] = empty;
  }
  _$jscoverage['modules/ajax.js'][203]++;
  ajaxComplete("abort", xhr, options);
}), xhr = {abort: abort}, abortTimeout, head = document.getElementsByTagName("head")[0] || document.documentElement;
  _$jscoverage['modules/ajax.js'][210]++;
  if (options.error) {
    _$jscoverage['modules/ajax.js'][210]++;
    script.onerror = (function () {
  _$jscoverage['modules/ajax.js'][211]++;
  xhr.abort();
  _$jscoverage['modules/ajax.js'][212]++;
  options.error();
});
  }
  _$jscoverage['modules/ajax.js'][215]++;
  window[callbackName] = (function (data) {
  _$jscoverage['modules/ajax.js'][216]++;
  clearTimeout(abortTimeout);
  _$jscoverage['modules/ajax.js'][219]++;
  delete window[callbackName];
  _$jscoverage['modules/ajax.js'][220]++;
  ajaxSuccess(data, xhr, options);
});
  _$jscoverage['modules/ajax.js'][223]++;
  serializeData(options);
  _$jscoverage['modules/ajax.js'][224]++;
  script.src = options.url.replace(/=\?/, "=" + callbackName);
  _$jscoverage['modules/ajax.js'][228]++;
  head.insertBefore(script, head.firstChild);
  _$jscoverage['modules/ajax.js'][230]++;
  if (options.timeout > 0) {
    _$jscoverage['modules/ajax.js'][230]++;
    abortTimeout = setTimeout((function () {
  _$jscoverage['modules/ajax.js'][231]++;
  xhr.abort();
  _$jscoverage['modules/ajax.js'][232]++;
  ajaxComplete("timeout", xhr, options);
}), options.timeout);
  }
  _$jscoverage['modules/ajax.js'][235]++;
  return xhr;
});
_$jscoverage['modules/ajax.js'][238]++;
function isIE() {
  _$jscoverage['modules/ajax.js'][239]++;
  var ie = false;
  _$jscoverage['modules/ajax.js'][240]++;
  if (navigator.userAgent && navigator.userAgent.indexOf("MSIE") >= 0) {
    _$jscoverage['modules/ajax.js'][241]++;
    ie = true;
  }
  _$jscoverage['modules/ajax.js'][243]++;
  return ie;
}
_$jscoverage['modules/ajax.js'][246]++;
function getXhr(crossDomain) {
  _$jscoverage['modules/ajax.js'][247]++;
  var xhr = null;
  _$jscoverage['modules/ajax.js'][249]++;
  if (window.XMLHttpRequest) {
    _$jscoverage['modules/ajax.js'][250]++;
    xhr = new XMLHttpRequest();
  }
  _$jscoverage['modules/ajax.js'][253]++;
  if (isIE() && (crossDomain === true) && typeof window.XDomainRequest !== "undefined") {
    _$jscoverage['modules/ajax.js'][254]++;
    xhr = new XDomainRequestWrapper(new XDomainRequest());
  }
  _$jscoverage['modules/ajax.js'][256]++;
  return xhr;
}
_$jscoverage['modules/ajax.js'][259]++;
ajax.settings = {type: "GET", beforeSend: empty, success: empty, error: empty, complete: empty, context: null, global: true, xhr: getXhr, accepts: {script: "text/javascript, application/javascript", json: jsonType, xml: "application/xml, text/xml", html: htmlType, text: "text/plain"}, crossDomain: false, timeout: consts.fh_timeout};
_$jscoverage['modules/ajax.js'][290]++;
function mimeToDataType(mime) {
  _$jscoverage['modules/ajax.js'][291]++;
  return mime && (mime == htmlType? "html": mime == jsonType? "json": scriptTypeRE.test(mime)? "script": xmlTypeRE.test(mime) && "xml") || "text";
}
_$jscoverage['modules/ajax.js'][297]++;
function appendQuery(url, query) {
  _$jscoverage['modules/ajax.js'][298]++;
  return (url + "&" + query).replace(/[&?]{1,2}/, "?");
}
_$jscoverage['modules/ajax.js'][302]++;
function serializeData(options) {
  _$jscoverage['modules/ajax.js'][303]++;
  if (type(options.data) === "object") {
    _$jscoverage['modules/ajax.js'][304]++;
    if (typeof options.data.append === "function") {
      _$jscoverage['modules/ajax.js'][306]++;
      options.formdata = true;
    }
    else {
      _$jscoverage['modules/ajax.js'][308]++;
      options.data = param(options.data);
    }
  }
  _$jscoverage['modules/ajax.js'][311]++;
  if (options.data && (! options.type || options.type.toUpperCase() == "GET")) {
    _$jscoverage['modules/ajax.js'][312]++;
    options.url = appendQuery(options.url, options.data);
  }
}
_$jscoverage['modules/ajax.js'][315]++;
ajax.get = (function (url, success) {
  _$jscoverage['modules/ajax.js'][316]++;
  return ajax({url: url, success: success});
});
_$jscoverage['modules/ajax.js'][322]++;
ajax.post = (function (url, data, success, dataType) {
  _$jscoverage['modules/ajax.js'][323]++;
  if (type(data) === "function") {
    _$jscoverage['modules/ajax.js'][323]++;
    dataType = dataType || success, success = data, data = null;
  }
  _$jscoverage['modules/ajax.js'][324]++;
  return ajax({type: "POST", url: url, data: data, success: success, dataType: dataType});
});
_$jscoverage['modules/ajax.js'][333]++;
ajax.getJSON = (function (url, success) {
  _$jscoverage['modules/ajax.js'][334]++;
  return ajax({url: url, success: success, dataType: "json"});
});
_$jscoverage['modules/ajax.js'][341]++;
var escape = encodeURIComponent;
_$jscoverage['modules/ajax.js'][343]++;
function serialize(params, obj, traditional, scope) {
  _$jscoverage['modules/ajax.js'][344]++;
  var array = type(obj) === "array";
  _$jscoverage['modules/ajax.js'][345]++;
  for (var key in obj) {
    _$jscoverage['modules/ajax.js'][346]++;
    var value = obj[key];
    _$jscoverage['modules/ajax.js'][348]++;
    if (scope) {
      _$jscoverage['modules/ajax.js'][348]++;
      key = traditional? scope: scope + "[" + (array? "": key) + "]";
    }
    _$jscoverage['modules/ajax.js'][350]++;
    if (! scope && array) {
      _$jscoverage['modules/ajax.js'][350]++;
      params.add(value.name, value.value);
    }
    else {
      _$jscoverage['modules/ajax.js'][352]++;
      if (traditional? (type(value) === "array"): (type(value) === "object")) {
        _$jscoverage['modules/ajax.js'][353]++;
        serialize(params, value, traditional, key);
      }
      else {
        _$jscoverage['modules/ajax.js'][354]++;
        params.add(key, value);
      }
    }
}
}
_$jscoverage['modules/ajax.js'][358]++;
function param(obj, traditional) {
  _$jscoverage['modules/ajax.js'][359]++;
  var params = [];
  _$jscoverage['modules/ajax.js'][360]++;
  params.add = (function (k, v) {
  _$jscoverage['modules/ajax.js'][361]++;
  this.push(escape(k) + "=" + escape(v));
});
  _$jscoverage['modules/ajax.js'][363]++;
  serialize(params, obj, traditional);
  _$jscoverage['modules/ajax.js'][364]++;
  return params.join("&").replace("%20", "+");
}
_$jscoverage['modules/ajax.js'][367]++;
function extend(target) {
  _$jscoverage['modules/ajax.js'][368]++;
  var slice = Array.prototype.slice;
  _$jscoverage['modules/ajax.js'][369]++;
  slice.call(arguments, 1).forEach((function (source) {
  _$jscoverage['modules/ajax.js'][370]++;
  for (key in source) {
    _$jscoverage['modules/ajax.js'][371]++;
    if (source[key] !== undefined) {
      _$jscoverage['modules/ajax.js'][372]++;
      target[key] = source[key];
    }
}
}));
  _$jscoverage['modules/ajax.js'][374]++;
  return target;
}
_$jscoverage['modules/ajax.js'].source = ["//a shameless copy from https://github.com/ForbesLindesay/ajax/blob/master/index.js. ","//it has the same methods and config options as jQuery/zeptojs but very light weight. see http://api.jquery.com/jQuery.ajax/","//a few small changes are made for supporting IE 8 and other features:","//1. use getXhr function to replace the default XMLHttpRequest implementation for supporting IE8","//2. Integrate with events emitter. So to subscribe ajax events, you can do $fh.on(\"ajaxStart\", handler). See http://api.jquery.com/Ajax_Events/ for full list of events","//3. allow passing xhr factory method through options: e.g. $fh.ajax({xhr: function(){/*own implementation of xhr*/}}); ","//4. Use fh_timeout value as the default timeout","//5. an extra option called \"tryJSONP\" to allow try the same call with JSONP if normal CORS failed - should only be used internally","//6. for jsonp, allow to specify the callback query param name using the \"jsonp\" option","","var eventsHandler = require(\"./events\");","var XDomainRequestWrapper = require(\"./XDomainRequestWrapper\");","var consts = require(\"./constants\");","var logger = require(\"./logger\");","","var type","try {","  type = require('type-of')","} catch (ex) {","  //hide from browserify","  var r = require","  type = r('type')","}","","var jsonpID = 0,","  document = window.document,","  key,","  name,","  rscript = /&lt;script\\b[^&lt;]*(?:(?!&lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi,","  scriptTypeRE = /^(?:text|application)\\/javascript/i,","  xmlTypeRE = /^(?:text|application)\\/xml/i,","  jsonType = 'application/json',","  htmlType = 'text/html',","  blankRE = /^\\s*$/;","","var ajax = module.exports = function (options) {","  var settings = extend({}, options || {})","  for (key in ajax.settings)","    if (settings[key] === undefined) settings[key] = ajax.settings[key]","","  ajaxStart(settings)","","  if (!settings.crossDomain) settings.crossDomain = /^([\\w-]+:)?\\/\\/([^\\/]+)/.test(settings.url) &amp;&amp;","    RegExp.$2 != window.location.host","","  var dataType = settings.dataType,","    hasPlaceholder = /=\\?/.test(settings.url)","    if (dataType == 'jsonp' || hasPlaceholder) {","      if (!hasPlaceholder) {","        settings.url = appendQuery(settings.url, (settings.jsonp? settings.jsonp: '_callback') + '=?');","      }","      return ajax.JSONP(settings)","    }","","  if (!settings.url) settings.url = window.location.toString()","  serializeData(settings)","","  var mime = settings.accepts[dataType],","    baseHeaders = {},","    protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,","    xhr = settings.xhr(settings.crossDomain),","    abortTimeout","","  if (!settings.crossDomain) baseHeaders['X-Requested-With'] = 'XMLHttpRequest'","  if (mime) {","    baseHeaders['Accept'] = mime","    if (mime.indexOf(',') &gt; -1) mime = mime.split(',', 2)[0]","    xhr.overrideMimeType &amp;&amp; xhr.overrideMimeType(mime)","  }","  if (settings.contentType || (settings.data &amp;&amp; !settings.formdata &amp;&amp; settings.type.toUpperCase() != 'GET'))","    baseHeaders['Content-Type'] = (settings.contentType || 'application/x-www-form-urlencoded')","  settings.headers = extend(baseHeaders, settings.headers || {})","","  xhr.onreadystatechange = function () {","    if (xhr.readyState == 4) {","      clearTimeout(abortTimeout)","      var result, error = false","      if(settings.tryJSONP){","        //check if the request has fail. In some cases, we may want to try jsonp as well. Again, FH only...","        if(xhr.status === 0 &amp;&amp; settings.crossDomain &amp;&amp; !xhr.isTimeout &amp;&amp;  protocol != 'file:'){","          logger.debug(\"retry ajax call with jsonp\")","          settings.type = \"GET\";","          settings.dataType = \"jsonp\";","          settings.data = \"_jsonpdata=\" + settings.data;","          return ajax(settings);","        }","      }","      if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304 || (xhr.status == 0 &amp;&amp; protocol == 'file:')) {","        dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'))","        result = xhr.responseText","        logger.debug(\"ajax response :: status = \" + xhr.status + \" :: body = \" + result)","","        try {","          if (dataType == 'script')(1, eval)(result)","          else if (dataType == 'xml') result = xhr.responseXML","          else if (dataType == 'json') result = blankRE.test(result) ? null : JSON.parse(result)","        } catch (e) {","          error = e","        }","","        if (error) {","          logger.debug(\"ajax error\", error);","          ajaxError(error, 'parsererror', xhr, settings)","        }","        else ajaxSuccess(result, xhr, settings)","      } else {","        ajaxError(null, 'error', xhr, settings)","      }","    }","  }","","  var async = 'async' in settings ? settings.async : true","  logger.debug(\"ajax call settings\", settings)","  xhr.open(settings.type, settings.url, async)","","  for (name in settings.headers) xhr.setRequestHeader(name, settings.headers[name])","","  if (ajaxBeforeSend(xhr, settings) === false) {","    logger.debug(\"ajax call is aborted due to ajaxBeforeSend\")","    xhr.abort()","    return false","  }","","  if (settings.timeout &gt; 0) abortTimeout = setTimeout(function () {","    logger.debug(\"ajax call timed out\")","    xhr.onreadystatechange = empty","    xhr.abort()","    xhr.isTimeout = true","    ajaxError(null, 'timeout', xhr, settings)","  }, settings.timeout)","","  // avoid sending empty string (#319)","  xhr.send(settings.data ? settings.data : null)","  return xhr","}","","","// trigger a custom event and return true","function triggerAndReturn(context, eventName, data) {","  eventsHandler.emit(eventName, data);","  return true;","}","","// trigger an Ajax \"global\" event","function triggerGlobal(settings, context, eventName, data) {","  if (settings.global) return triggerAndReturn(context || document, eventName, data)","}","","// Number of active Ajax requests","ajax.active = 0","","function ajaxStart(settings) {","  if (settings.global &amp;&amp; ajax.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')","}","","function ajaxStop(settings) {","  if (settings.global &amp;&amp; !(--ajax.active)) triggerGlobal(settings, null, 'ajaxStop')","}","","// triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable","function ajaxBeforeSend(xhr, settings) {","  var context = settings.context","  if (settings.beforeSend.call(context, xhr, settings) === false)","    return false","","  triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])","}","","function ajaxSuccess(data, xhr, settings) {","  var context = settings.context,","    status = 'success'","  settings.success.call(context, data, status, xhr)","  triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])","  ajaxComplete(status, xhr, settings)","}","// type: \"timeout\", \"error\", \"abort\", \"parsererror\"","function ajaxError(error, type, xhr, settings) {","  var context = settings.context","  settings.error.call(context, xhr, type, error)","  triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error])","  ajaxComplete(type, xhr, settings)","}","// status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"","function ajaxComplete(status, xhr, settings) {","  var context = settings.context","  settings.complete.call(context, xhr, status)","  triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])","  ajaxStop(settings)","}","","// Empty function, used as default callback","function empty() {}","","ajax.JSONP = function (options) {","  if (!('type' in options)) return ajax(options)","","  var callbackName = 'jsonp' + (++jsonpID),","    script = document.createElement('script'),","    abort = function () {","      //todo: remove script","      //$(script).remove()","      if (callbackName in window) window[callbackName] = empty","      ajaxComplete('abort', xhr, options)","    },","    xhr = {","      abort: abort","    }, abortTimeout,","    head = document.getElementsByTagName(\"head\")[0] || document.documentElement","","  if (options.error) script.onerror = function () {","    xhr.abort()","    options.error()","  }","","  window[callbackName] = function (data) {","    clearTimeout(abortTimeout)","    //todo: remove script","    //$(script).remove()","    delete window[callbackName]","    ajaxSuccess(data, xhr, options)","  }","","  serializeData(options)","  script.src = options.url.replace(/=\\?/, '=' + callbackName)","","  // Use insertBefore instead of appendChild to circumvent an IE6 bug.","  // This arises when a base node is used (see jQuery bugs #2709 and #4378).","  head.insertBefore(script, head.firstChild);","","  if (options.timeout &gt; 0) abortTimeout = setTimeout(function () {","    xhr.abort()","    ajaxComplete('timeout', xhr, options)","  }, options.timeout)","","  return xhr","}","","function isIE(){","  var ie = false;","  if(navigator.userAgent &amp;&amp; navigator.userAgent.indexOf(\"MSIE\") &gt;=0 ){","    ie = true;","  }","  return ie;","}","","function getXhr(crossDomain){","  var xhr = null;","  //always use XMLHttpRequest if available","  if(window.XMLHttpRequest){","    xhr = new XMLHttpRequest();","  }","  //for IE8","  if(isIE() &amp;&amp; (crossDomain === true) &amp;&amp; typeof window.XDomainRequest !== \"undefined\"){","    xhr = new XDomainRequestWrapper(new XDomainRequest());","  }","  return xhr;","}","","ajax.settings = {","  // Default type of request","  type: 'GET',","  // Callback that is executed before request","  beforeSend: empty,","  // Callback that is executed if the request succeeds","  success: empty,","  // Callback that is executed the the server drops error","  error: empty,","  // Callback that is executed on request complete (both: error and success)","  complete: empty,","  // The context for the callbacks","  context: null,","  // Whether to trigger \"global\" Ajax events","  global: true,","  // Transport","  xhr: getXhr,","  // MIME types mapping","  accepts: {","    script: 'text/javascript, application/javascript',","    json: jsonType,","    xml: 'application/xml, text/xml',","    html: htmlType,","    text: 'text/plain'","  },","  // Whether the request is to another domain","  crossDomain: false,","  // Default timeout","  timeout: consts.fh_timeout","}","","function mimeToDataType(mime) {","  return mime &amp;&amp; (mime == htmlType ? 'html' :","    mime == jsonType ? 'json' :","    scriptTypeRE.test(mime) ? 'script' :","    xmlTypeRE.test(mime) &amp;&amp; 'xml') || 'text'","}","","function appendQuery(url, query) {","  return (url + '&amp;' + query).replace(/[&amp;?]{1,2}/, '?')","}","","// serialize payload and append it to the URL for GET requests","function serializeData(options) {","  if (type(options.data) === 'object') {","    if(typeof options.data.append === \"function\"){","      //we are dealing with FormData, do not serialize","      options.formdata = true;","    } else {","      options.data = param(options.data)","    }","  }","  if (options.data &amp;&amp; (!options.type || options.type.toUpperCase() == 'GET'))","    options.url = appendQuery(options.url, options.data)","}","","ajax.get = function (url, success) {","  return ajax({","    url: url,","    success: success","  })","}","","ajax.post = function (url, data, success, dataType) {","  if (type(data) === 'function') dataType = dataType || success, success = data, data = null","  return ajax({","    type: 'POST',","    url: url,","    data: data,","    success: success,","    dataType: dataType","  })","}","","ajax.getJSON = function (url, success) {","  return ajax({","    url: url,","    success: success,","    dataType: 'json'","  })","}","","var escape = encodeURIComponent;","","function serialize(params, obj, traditional, scope) {","  var array = type(obj) === 'array';","  for (var key in obj) {","    var value = obj[key];","","    if (scope) key = traditional ? scope : scope + '[' + (array ? '' : key) + ']'","    // handle data in serializeArray() format","    if (!scope &amp;&amp; array) params.add(value.name, value.value)","    // recurse into nested objects","    else if (traditional ? (type(value) === 'array') : (type(value) === 'object'))","      serialize(params, value, traditional, key)","    else params.add(key, value)","  }","}","","function param(obj, traditional) {","  var params = []","  params.add = function (k, v) {","    this.push(escape(k) + '=' + escape(v))","  }","  serialize(params, obj, traditional)","  return params.join('&amp;').replace('%20', '+')","}","","function extend(target) {","  var slice = Array.prototype.slice;","  slice.call(arguments, 1).forEach(function (source) {","    for (key in source)","      if (source[key] !== undefined)","        target[key] = source[key]","  })","  return target","}"];

},{"./XDomainRequestWrapper":53,"./constants":58,"./events":61,"./logger":68,"type-of":51}],55:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/api_act.js']) {
  _$jscoverage['modules/api_act.js'] = [];
  _$jscoverage['modules/api_act.js'][1] = 0;
  _$jscoverage['modules/api_act.js'][2] = 0;
  _$jscoverage['modules/api_act.js'][3] = 0;
  _$jscoverage['modules/api_act.js'][4] = 0;
  _$jscoverage['modules/api_act.js'][5] = 0;
  _$jscoverage['modules/api_act.js'][6] = 0;
  _$jscoverage['modules/api_act.js'][8] = 0;
  _$jscoverage['modules/api_act.js'][9] = 0;
  _$jscoverage['modules/api_act.js'][10] = 0;
  _$jscoverage['modules/api_act.js'][11] = 0;
  _$jscoverage['modules/api_act.js'][12] = 0;
  _$jscoverage['modules/api_act.js'][13] = 0;
  _$jscoverage['modules/api_act.js'][23] = 0;
  _$jscoverage['modules/api_act.js'][28] = 0;
  _$jscoverage['modules/api_act.js'][29] = 0;
  _$jscoverage['modules/api_act.js'][30] = 0;
  _$jscoverage['modules/api_act.js'][31] = 0;
  _$jscoverage['modules/api_act.js'][32] = 0;
  _$jscoverage['modules/api_act.js'][36] = 0;
  _$jscoverage['modules/api_act.js'][37] = 0;
  _$jscoverage['modules/api_act.js'][40] = 0;
  _$jscoverage['modules/api_act.js'][41] = 0;
  _$jscoverage['modules/api_act.js'][42] = 0;
  _$jscoverage['modules/api_act.js'][43] = 0;
  _$jscoverage['modules/api_act.js'][45] = 0;
}
_$jscoverage['modules/api_act.js'][1]++;
var logger = require("./logger");
_$jscoverage['modules/api_act.js'][2]++;
var cloud = require("./waitForCloud");
_$jscoverage['modules/api_act.js'][3]++;
var fhparams = require("./fhparams");
_$jscoverage['modules/api_act.js'][4]++;
var ajax = require("./ajax");
_$jscoverage['modules/api_act.js'][5]++;
var JSON = require("JSON");
_$jscoverage['modules/api_act.js'][6]++;
var handleError = require("./handleError");
_$jscoverage['modules/api_act.js'][8]++;
function doActCall(opts, success, fail) {
  _$jscoverage['modules/api_act.js'][9]++;
  var cloud_host = cloud.getCloudHost();
  _$jscoverage['modules/api_act.js'][10]++;
  var url = cloud_host.getActUrl(opts.act);
  _$jscoverage['modules/api_act.js'][11]++;
  var params = opts.req || {};
  _$jscoverage['modules/api_act.js'][12]++;
  params = fhparams.addFHParams(params);
  _$jscoverage['modules/api_act.js'][13]++;
  return ajax({"url": url, "tryJSONP": true, "type": "POST", "dataType": "json", "data": JSON.stringify(params), "contentType": "application/json", "timeout": opts.timeout, "success": success, "error": (function (req, statusText, error) {
  _$jscoverage['modules/api_act.js'][23]++;
  return handleError(fail, req, statusText, error);
})});
}
_$jscoverage['modules/api_act.js'][28]++;
module.exports = (function (opts, success, fail) {
  _$jscoverage['modules/api_act.js'][29]++;
  logger.debug("act is called");
  _$jscoverage['modules/api_act.js'][30]++;
  if (! fail) {
    _$jscoverage['modules/api_act.js'][31]++;
    fail = (function (msg, error) {
  _$jscoverage['modules/api_act.js'][32]++;
  logger.debug(msg + ":" + JSON.stringify(error));
});
  }
  _$jscoverage['modules/api_act.js'][36]++;
  if (! opts.act) {
    _$jscoverage['modules/api_act.js'][37]++;
    return fail("act_no_action", {});
  }
  _$jscoverage['modules/api_act.js'][40]++;
  cloud.ready((function (err, cloudHost) {
  _$jscoverage['modules/api_act.js'][41]++;
  logger.debug("Calling fhact now");
  _$jscoverage['modules/api_act.js'][42]++;
  if (err) {
    _$jscoverage['modules/api_act.js'][43]++;
    return fail(err.message, err);
  }
  else {
    _$jscoverage['modules/api_act.js'][45]++;
    doActCall(opts, success, fail);
  }
}));
});
_$jscoverage['modules/api_act.js'].source = ["var logger =require(\"./logger\");","var cloud = require(\"./waitForCloud\");","var fhparams = require(\"./fhparams\");","var ajax = require(\"./ajax\");","var JSON = require(\"JSON\");","var handleError = require(\"./handleError\");","","function doActCall(opts, success, fail){","  var cloud_host = cloud.getCloudHost();","  var url = cloud_host.getActUrl(opts.act);","  var params = opts.req || {};","  params = fhparams.addFHParams(params);","  return ajax({","    \"url\": url,","    \"tryJSONP\": true,","    \"type\": \"POST\",","    \"dataType\": \"json\",","    \"data\": JSON.stringify(params),","    \"contentType\": \"application/json\",","    \"timeout\": opts.timeout,","    \"success\": success,","    \"error\": function(req, statusText, error){","      return handleError(fail, req, statusText, error);","    }","  })","}","","module.exports = function(opts, success, fail){","  logger.debug(\"act is called\");","  if(!fail){","    fail = function(msg, error){","      logger.debug(msg + \":\" + JSON.stringify(error));","    };","  }","","  if(!opts.act){","    return fail('act_no_action', {});","  }","","  cloud.ready(function(err, cloudHost){","    logger.debug(\"Calling fhact now\");","    if(err){","      return fail(err.message, err);","    } else {","      doActCall(opts, success, fail);","    }","  })","}"];

},{"./ajax":54,"./fhparams":62,"./handleError":63,"./logger":68,"./waitForCloud":75,"JSON":3}],56:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/api_cloud.js']) {
  _$jscoverage['modules/api_cloud.js'] = [];
  _$jscoverage['modules/api_cloud.js'][1] = 0;
  _$jscoverage['modules/api_cloud.js'][2] = 0;
  _$jscoverage['modules/api_cloud.js'][3] = 0;
  _$jscoverage['modules/api_cloud.js'][4] = 0;
  _$jscoverage['modules/api_cloud.js'][5] = 0;
  _$jscoverage['modules/api_cloud.js'][6] = 0;
  _$jscoverage['modules/api_cloud.js'][8] = 0;
  _$jscoverage['modules/api_cloud.js'][9] = 0;
  _$jscoverage['modules/api_cloud.js'][10] = 0;
  _$jscoverage['modules/api_cloud.js'][11] = 0;
  _$jscoverage['modules/api_cloud.js'][12] = 0;
  _$jscoverage['modules/api_cloud.js'][13] = 0;
  _$jscoverage['modules/api_cloud.js'][22] = 0;
  _$jscoverage['modules/api_cloud.js'][27] = 0;
  _$jscoverage['modules/api_cloud.js'][28] = 0;
  _$jscoverage['modules/api_cloud.js'][29] = 0;
  _$jscoverage['modules/api_cloud.js'][30] = 0;
  _$jscoverage['modules/api_cloud.js'][31] = 0;
  _$jscoverage['modules/api_cloud.js'][35] = 0;
  _$jscoverage['modules/api_cloud.js'][36] = 0;
  _$jscoverage['modules/api_cloud.js'][37] = 0;
  _$jscoverage['modules/api_cloud.js'][38] = 0;
  _$jscoverage['modules/api_cloud.js'][40] = 0;
}
_$jscoverage['modules/api_cloud.js'][1]++;
var logger = require("./logger");
_$jscoverage['modules/api_cloud.js'][2]++;
var cloud = require("./waitForCloud");
_$jscoverage['modules/api_cloud.js'][3]++;
var fhparams = require("./fhparams");
_$jscoverage['modules/api_cloud.js'][4]++;
var ajax = require("./ajax");
_$jscoverage['modules/api_cloud.js'][5]++;
var JSON = require("JSON");
_$jscoverage['modules/api_cloud.js'][6]++;
var handleError = require("./handleError");
_$jscoverage['modules/api_cloud.js'][8]++;
function doCloudCall(opts, success, fail) {
  _$jscoverage['modules/api_cloud.js'][9]++;
  var cloud_host = cloud.getCloudHost();
  _$jscoverage['modules/api_cloud.js'][10]++;
  var url = cloud_host.getCloudUrl(opts.path);
  _$jscoverage['modules/api_cloud.js'][11]++;
  var params = opts.data || {};
  _$jscoverage['modules/api_cloud.js'][12]++;
  params = fhparams.addFHParams(params);
  _$jscoverage['modules/api_cloud.js'][13]++;
  return ajax({"url": url, "type": opts.method || "POST", "dataType": opts.dataType || "json", "data": JSON.stringify(params), "contentType": opts.contentType || "application/json", "timeout": opts.timeout, "success": success, "error": (function (req, statusText, error) {
  _$jscoverage['modules/api_cloud.js'][22]++;
  return handleError(fail, req, statusText, error);
})});
}
_$jscoverage['modules/api_cloud.js'][27]++;
module.exports = (function (opts, success, fail) {
  _$jscoverage['modules/api_cloud.js'][28]++;
  logger.debug("cloud is called");
  _$jscoverage['modules/api_cloud.js'][29]++;
  if (! fail) {
    _$jscoverage['modules/api_cloud.js'][30]++;
    fail = (function (msg, error) {
  _$jscoverage['modules/api_cloud.js'][31]++;
  logger.debug(msg + ":" + JSON.stringify(error));
});
  }
  _$jscoverage['modules/api_cloud.js'][35]++;
  cloud.ready((function (err, cloudHost) {
  _$jscoverage['modules/api_cloud.js'][36]++;
  logger.debug("Calling fhact now");
  _$jscoverage['modules/api_cloud.js'][37]++;
  if (err) {
    _$jscoverage['modules/api_cloud.js'][38]++;
    return fail(err.message, err);
  }
  else {
    _$jscoverage['modules/api_cloud.js'][40]++;
    doCloudCall(opts, success, fail);
  }
}));
});
_$jscoverage['modules/api_cloud.js'].source = ["var logger =require(\"./logger\");","var cloud = require(\"./waitForCloud\");","var fhparams = require(\"./fhparams\");","var ajax = require(\"./ajax\");","var JSON = require(\"JSON\");","var handleError = require(\"./handleError\");","","function doCloudCall(opts, success, fail){","  var cloud_host = cloud.getCloudHost();","  var url = cloud_host.getCloudUrl(opts.path);","  var params = opts.data || {};","  params = fhparams.addFHParams(params);","  return ajax({","    \"url\": url,","    \"type\": opts.method || \"POST\",","    \"dataType\": opts.dataType || \"json\",","    \"data\": JSON.stringify(params),","    \"contentType\": opts.contentType || \"application/json\",","    \"timeout\": opts.timeout,","    \"success\": success,","    \"error\": function(req, statusText, error){","      return handleError(fail, req, statusText, error);","    }","  })","}","","module.exports = function(opts, success, fail){","  logger.debug(\"cloud is called\");","  if(!fail){","    fail = function(msg, error){","      logger.debug(msg + \":\" + JSON.stringify(error));","    };","  }","","  cloud.ready(function(err, cloudHost){","    logger.debug(\"Calling fhact now\");","    if(err){","      return fail(err.message, err);","    } else {","      doCloudCall(opts, success, fail);","    }","  })","}"];

},{"./ajax":54,"./fhparams":62,"./handleError":63,"./logger":68,"./waitForCloud":75,"JSON":3}],57:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/appProps.js']) {
  _$jscoverage['modules/appProps.js'] = [];
  _$jscoverage['modules/appProps.js'][1] = 0;
  _$jscoverage['modules/appProps.js'][2] = 0;
  _$jscoverage['modules/appProps.js'][3] = 0;
  _$jscoverage['modules/appProps.js'][4] = 0;
  _$jscoverage['modules/appProps.js'][6] = 0;
  _$jscoverage['modules/appProps.js'][8] = 0;
  _$jscoverage['modules/appProps.js'][9] = 0;
  _$jscoverage['modules/appProps.js'][10] = 0;
  _$jscoverage['modules/appProps.js'][11] = 0;
  _$jscoverage['modules/appProps.js'][14] = 0;
  _$jscoverage['modules/appProps.js'][15] = 0;
  _$jscoverage['modules/appProps.js'][16] = 0;
  _$jscoverage['modules/appProps.js'][17] = 0;
  _$jscoverage['modules/appProps.js'][18] = 0;
  _$jscoverage['modules/appProps.js'][19] = 0;
  _$jscoverage['modules/appProps.js'][20] = 0;
  _$jscoverage['modules/appProps.js'][21] = 0;
  _$jscoverage['modules/appProps.js'][22] = 0;
  _$jscoverage['modules/appProps.js'][23] = 0;
  _$jscoverage['modules/appProps.js'][26] = 0;
  _$jscoverage['modules/appProps.js'][27] = 0;
  _$jscoverage['modules/appProps.js'][31] = 0;
  _$jscoverage['modules/appProps.js'][33] = 0;
  _$jscoverage['modules/appProps.js'][34] = 0;
  _$jscoverage['modules/appProps.js'][36] = 0;
  _$jscoverage['modules/appProps.js'][38] = 0;
  _$jscoverage['modules/appProps.js'][43] = 0;
  _$jscoverage['modules/appProps.js'][44] = 0;
  _$jscoverage['modules/appProps.js'][46] = 0;
  _$jscoverage['modules/appProps.js'][47] = 0;
  _$jscoverage['modules/appProps.js'][52] = 0;
  _$jscoverage['modules/appProps.js'][53] = 0;
  _$jscoverage['modules/appProps.js'][56] = 0;
  _$jscoverage['modules/appProps.js'][57] = 0;
  _$jscoverage['modules/appProps.js'][60] = 0;
}
_$jscoverage['modules/appProps.js'][1]++;
var consts = require("./constants");
_$jscoverage['modules/appProps.js'][2]++;
var ajax = require("./ajax");
_$jscoverage['modules/appProps.js'][3]++;
var logger = require("./logger");
_$jscoverage['modules/appProps.js'][4]++;
var qs = require("./queryMap");
_$jscoverage['modules/appProps.js'][6]++;
var app_props = null;
_$jscoverage['modules/appProps.js'][8]++;
var load = (function (cb) {
  _$jscoverage['modules/appProps.js'][9]++;
  var doc_url = document.location.href;
  _$jscoverage['modules/appProps.js'][10]++;
  var url_params = qs(doc_url);
  _$jscoverage['modules/appProps.js'][11]++;
  var local = (typeof url_params.url !== "undefined");
  _$jscoverage['modules/appProps.js'][14]++;
  if (local) {
    _$jscoverage['modules/appProps.js'][15]++;
    app_props = {};
    _$jscoverage['modules/appProps.js'][16]++;
    app_props.local = true;
    _$jscoverage['modules/appProps.js'][17]++;
    app_props.host = url_params.url;
    _$jscoverage['modules/appProps.js'][18]++;
    app_props.appid = "000000000000000000000000";
    _$jscoverage['modules/appProps.js'][19]++;
    app_props.appkey = "0000000000000000000000000000000000000000";
    _$jscoverage['modules/appProps.js'][20]++;
    app_props.projectid = "000000000000000000000000";
    _$jscoverage['modules/appProps.js'][21]++;
    app_props.connectiontag = "0.0.1";
    _$jscoverage['modules/appProps.js'][22]++;
    app_props.loglevel = url_params.loglevel;
    _$jscoverage['modules/appProps.js'][23]++;
    return cb(null, app_props);
  }
  _$jscoverage['modules/appProps.js'][26]++;
  var config_url = url_params.fhconfig || consts.config_js;
  _$jscoverage['modules/appProps.js'][27]++;
  ajax({url: config_url, dataType: "json", success: (function (data) {
  _$jscoverage['modules/appProps.js'][31]++;
  logger.debug("fhconfig = " + JSON.stringify(data));
  _$jscoverage['modules/appProps.js'][33]++;
  if (null === data) {
    _$jscoverage['modules/appProps.js'][34]++;
    return cb(new Error("app_config_missing"));
  }
  else {
    _$jscoverage['modules/appProps.js'][36]++;
    app_props = data;
    _$jscoverage['modules/appProps.js'][38]++;
    cb(null, app_props);
  }
}), error: (function (req, statusText, error) {
  _$jscoverage['modules/appProps.js'][43]++;
  if (window.fh_app_props) {
    _$jscoverage['modules/appProps.js'][44]++;
    return cb(null, window.fh_app_props);
  }
  _$jscoverage['modules/appProps.js'][46]++;
  logger.error(consts.config_js + " Not Found");
  _$jscoverage['modules/appProps.js'][47]++;
  cb(new Error("app_config_missing"));
})});
});
_$jscoverage['modules/appProps.js'][52]++;
var setAppProps = (function (props) {
  _$jscoverage['modules/appProps.js'][53]++;
  app_props = props;
});
_$jscoverage['modules/appProps.js'][56]++;
var getAppProps = (function () {
  _$jscoverage['modules/appProps.js'][57]++;
  return app_props;
});
_$jscoverage['modules/appProps.js'][60]++;
module.exports = {load: load, getAppProps: getAppProps, setAppProps: setAppProps};
_$jscoverage['modules/appProps.js'].source = ["var consts = require(\"./constants\");","var ajax = require(\"./ajax\");","var logger = require(\"./logger\");","var qs = require(\"./queryMap\");","","var app_props = null;","","var load = function(cb) {","  var doc_url = document.location.href;","  var url_params = qs(doc_url);","  var local = (typeof url_params.url !== 'undefined');","","  // For local environments, no init needed","  if (local) {","    app_props = {};","    app_props.local = true;","    app_props.host = url_params.url;","    app_props.appid = \"000000000000000000000000\";","    app_props.appkey = \"0000000000000000000000000000000000000000\";","    app_props.projectid = \"000000000000000000000000\";","    app_props.connectiontag = \"0.0.1\";","    app_props.loglevel = url_params.loglevel;","    return cb(null, app_props);","  }","","  var config_url = url_params.fhconfig || consts.config_js;","  ajax({","    url: config_url,","    dataType: \"json\",","    success: function(data) {","      logger.debug(\"fhconfig = \" + JSON.stringify(data));","      //when load the config file on device, because file:// protocol is used, it will never call fail call back. The success callback will be called but the data value will be null.","      if (null === data) {","        return cb(new Error(\"app_config_missing\"));","      } else {","        app_props = data;","","        cb(null, app_props);","      }","    },","    error: function(req, statusText, error) {","      //fh v2 only","      if(window.fh_app_props){","        return cb(null, window.fh_app_props);","      }","      logger.error(consts.config_js + \" Not Found\");","      cb(new Error(\"app_config_missing\"));","    }","  });","};","","var setAppProps = function(props) {","  app_props = props;","};","","var getAppProps = function() {","  return app_props;","};","","module.exports = {","  load: load,","  getAppProps: getAppProps,","  setAppProps: setAppProps","};"];

},{"./ajax":54,"./constants":58,"./logger":68,"./queryMap":70}],58:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/constants.js']) {
  _$jscoverage['modules/constants.js'] = [];
  _$jscoverage['modules/constants.js'][1] = 0;
}
_$jscoverage['modules/constants.js'][1]++;
module.exports = {"fh_timeout": 20000, "boxprefix": "/box/srv/1.1/", "sdk_version": "BUILD_VERSION", "config_js": "fhconfig.json", "INIT_EVENT": "fhinit"};
_$jscoverage['modules/constants.js'].source = ["module.exports = {","  \"fh_timeout\": 20000,","  \"boxprefix\": \"/box/srv/1.1/\",","  \"sdk_version\": \"BUILD_VERSION\",","  \"config_js\": \"fhconfig.json\",","  \"INIT_EVENT\": \"fhinit\"","};"];

},{}],59:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/cookies.js']) {
  _$jscoverage['modules/cookies.js'] = [];
  _$jscoverage['modules/cookies.js'][1] = 0;
  _$jscoverage['modules/cookies.js'][3] = 0;
  _$jscoverage['modules/cookies.js'][4] = 0;
  _$jscoverage['modules/cookies.js'][5] = 0;
  _$jscoverage['modules/cookies.js'][6] = 0;
  _$jscoverage['modules/cookies.js'][7] = 0;
  _$jscoverage['modules/cookies.js'][8] = 0;
  _$jscoverage['modules/cookies.js'][10] = 0;
  _$jscoverage['modules/cookies.js'][11] = 0;
  _$jscoverage['modules/cookies.js'][14] = 0;
  _$jscoverage['modules/cookies.js'][18] = 0;
  _$jscoverage['modules/cookies.js'][19] = 0;
  _$jscoverage['modules/cookies.js'][20] = 0;
  _$jscoverage['modules/cookies.js'][21] = 0;
}
_$jscoverage['modules/cookies.js'][1]++;
module.exports = {readCookieValue: (function (cookie_name) {
  _$jscoverage['modules/cookies.js'][3]++;
  var name_str = cookie_name + "=";
  _$jscoverage['modules/cookies.js'][4]++;
  var cookies = document.cookie.split(";");
  _$jscoverage['modules/cookies.js'][5]++;
  for (var i = 0; i < cookies.length; i++) {
    _$jscoverage['modules/cookies.js'][6]++;
    var c = cookies[i];
    _$jscoverage['modules/cookies.js'][7]++;
    while (c.charAt(0) === " ") {
      _$jscoverage['modules/cookies.js'][8]++;
      c = c.substring(1, c.length);
}
    _$jscoverage['modules/cookies.js'][10]++;
    if (c.indexOf(name_str) === 0) {
      _$jscoverage['modules/cookies.js'][11]++;
      return c.substring(name_str.length, c.length);
    }
}
  _$jscoverage['modules/cookies.js'][14]++;
  return null;
}), createCookie: (function (cookie_name, cookie_value) {
  _$jscoverage['modules/cookies.js'][18]++;
  var date = new Date();
  _$jscoverage['modules/cookies.js'][19]++;
  date.setTime(date.getTime() + 3153600000000);
  _$jscoverage['modules/cookies.js'][20]++;
  var expires = "; expires=" + date.toGMTString();
  _$jscoverage['modules/cookies.js'][21]++;
  document.cookie = cookie_name + "=" + cookie_value + expires + "; path = /";
})};
_$jscoverage['modules/cookies.js'].source = ["module.exports = {","  readCookieValue  : function (cookie_name) {","    var name_str = cookie_name + \"=\";","    var cookies = document.cookie.split(\";\");","    for (var i = 0; i &lt; cookies.length; i++) {","      var c = cookies[i];","      while (c.charAt(0) === ' ') {","        c = c.substring(1, c.length);","      }","      if (c.indexOf(name_str) === 0) {","        return c.substring(name_str.length, c.length);","      }","    }","    return null;","  },","","  createCookie : function (cookie_name, cookie_value) {","    var date = new Date();","    date.setTime(date.getTime() + 36500 * 24 * 60 * 60 * 1000); //100 years","    var expires = \"; expires=\" + date.toGMTString();","    document.cookie = cookie_name + \"=\" + cookie_value + expires + \"; path = /\";","  }","};"];

},{}],60:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/device.js']) {
  _$jscoverage['modules/device.js'] = [];
  _$jscoverage['modules/device.js'][1] = 0;
  _$jscoverage['modules/device.js'][2] = 0;
  _$jscoverage['modules/device.js'][3] = 0;
  _$jscoverage['modules/device.js'][5] = 0;
  _$jscoverage['modules/device.js'][9] = 0;
  _$jscoverage['modules/device.js'][10] = 0;
  _$jscoverage['modules/device.js'][11] = 0;
  _$jscoverage['modules/device.js'][12] = 0;
  _$jscoverage['modules/device.js'][13] = 0;
  _$jscoverage['modules/device.js'][14] = 0;
  _$jscoverage['modules/device.js'][16] = 0;
  _$jscoverage['modules/device.js'][17] = 0;
  _$jscoverage['modules/device.js'][18] = 0;
  _$jscoverage['modules/device.js'][19] = 0;
  _$jscoverage['modules/device.js'][20] = 0;
  _$jscoverage['modules/device.js'][22] = 0;
  _$jscoverage['modules/device.js'][28] = 0;
  _$jscoverage['modules/device.js'][29] = 0;
  _$jscoverage['modules/device.js'][30] = 0;
  _$jscoverage['modules/device.js'][31] = 0;
  _$jscoverage['modules/device.js'][32] = 0;
  _$jscoverage['modules/device.js'][33] = 0;
  _$jscoverage['modules/device.js'][36] = 0;
  _$jscoverage['modules/device.js'][40] = 0;
  _$jscoverage['modules/device.js'][41] = 0;
  _$jscoverage['modules/device.js'][44] = 0;
  _$jscoverage['modules/device.js'][46] = 0;
  _$jscoverage['modules/device.js'][47] = 0;
  _$jscoverage['modules/device.js'][48] = 0;
  _$jscoverage['modules/device.js'][49] = 0;
  _$jscoverage['modules/device.js'][50] = 0;
  _$jscoverage['modules/device.js'][52] = 0;
  _$jscoverage['modules/device.js'][53] = 0;
  _$jscoverage['modules/device.js'][54] = 0;
  _$jscoverage['modules/device.js'][55] = 0;
  _$jscoverage['modules/device.js'][61] = 0;
  _$jscoverage['modules/device.js'][62] = 0;
  _$jscoverage['modules/device.js'][65] = 0;
  _$jscoverage['modules/device.js'][67] = 0;
}
_$jscoverage['modules/device.js'][1]++;
var cookies = require("./cookies");
_$jscoverage['modules/device.js'][2]++;
var uuidModule = require("./uuid");
_$jscoverage['modules/device.js'][3]++;
var logger = require("./logger");
_$jscoverage['modules/device.js'][5]++;
module.exports = {"getDeviceId": (function () {
  _$jscoverage['modules/device.js'][9]++;
  if (typeof window.fhdevice !== "undefined" && typeof window.fhdevice.uuid !== "undefined") {
    _$jscoverage['modules/device.js'][10]++;
    return window.fhdevice.uuid;
  }
  else {
    _$jscoverage['modules/device.js'][11]++;
    if (typeof window.device !== "undefined" && typeof window.device.uuid !== "undefined") {
      _$jscoverage['modules/device.js'][12]++;
      return window.device.uuid;
    }
    else {
      _$jscoverage['modules/device.js'][13]++;
      if (typeof navigator.device !== "undefined" && typeof navigator.device.uuid !== "undefined") {
        _$jscoverage['modules/device.js'][14]++;
        return navigator.device.uuid;
      }
      else {
        _$jscoverage['modules/device.js'][16]++;
        var _mock_uuid_cookie_name = "mock_uuid";
        _$jscoverage['modules/device.js'][17]++;
        var uuid = cookies.readCookieValue(_mock_uuid_cookie_name);
        _$jscoverage['modules/device.js'][18]++;
        if (null == uuid) {
          _$jscoverage['modules/device.js'][19]++;
          uuid = uuidModule.createUUID();
          _$jscoverage['modules/device.js'][20]++;
          cookies.createCookie(_mock_uuid_cookie_name, uuid);
        }
        _$jscoverage['modules/device.js'][22]++;
        return uuid;
      }
    }
  }
}), "getCuidMap": (function () {
  _$jscoverage['modules/device.js'][28]++;
  if (typeof window.fhdevice !== "undefined" && typeof window.fhdevice.cuidMap !== "undefined") {
    _$jscoverage['modules/device.js'][29]++;
    return window.fhdevice.cuidMap;
  }
  else {
    _$jscoverage['modules/device.js'][30]++;
    if (typeof window.device !== "undefined" && typeof window.device.cuidMap !== "undefined") {
      _$jscoverage['modules/device.js'][31]++;
      return window.device.cuidMap;
    }
    else {
      _$jscoverage['modules/device.js'][32]++;
      if (typeof navigator.device !== "undefined" && typeof navigator.device.cuidMap !== "undefined") {
        _$jscoverage['modules/device.js'][33]++;
        return navigator.device.cuidMap;
      }
    }
  }
  _$jscoverage['modules/device.js'][36]++;
  return null;
}), "getDestination": (function () {
  _$jscoverage['modules/device.js'][40]++;
  var destination = null;
  _$jscoverage['modules/device.js'][41]++;
  var platformsToTest = require("./platformsMap");
  _$jscoverage['modules/device.js'][44]++;
  var userAgent = navigator.userAgent;
  _$jscoverage['modules/device.js'][46]++;
  var dest_override = document.location.search.split("fh_destination_code=");
  _$jscoverage['modules/device.js'][47]++;
  if (dest_override.length > 1) {
    _$jscoverage['modules/device.js'][48]++;
    destination = dest_override[1];
  }
  else {
    _$jscoverage['modules/device.js'][49]++;
    if (typeof window.fh_destination_code !== "undefined") {
      _$jscoverage['modules/device.js'][50]++;
      destination = window.fh_destination_code;
    }
    else {
      _$jscoverage['modules/device.js'][52]++;
      platformsToTest.forEach((function (testDestination) {
  _$jscoverage['modules/device.js'][53]++;
  testDestination.test.forEach((function (destinationTest) {
  _$jscoverage['modules/device.js'][54]++;
  if (userAgent.indexOf(destinationTest) > -1) {
    _$jscoverage['modules/device.js'][55]++;
    destination = testDestination.destination;
  }
}));
}));
    }
  }
  _$jscoverage['modules/device.js'][61]++;
  if (destination == null) {
    _$jscoverage['modules/device.js'][62]++;
    destination = "web";
  }
  _$jscoverage['modules/device.js'][65]++;
  logger.debug("destination = " + destination);
  _$jscoverage['modules/device.js'][67]++;
  return destination;
})};
_$jscoverage['modules/device.js'].source = ["var cookies = require(\"./cookies\");","var uuidModule = require(\"./uuid\");","var logger = require(\"./logger\");","","module.exports = {","  //try to get the unique device identifier","  \"getDeviceId\": function(){","    //check for cordova/phonegap first","    if(typeof window.fhdevice !== \"undefined\" &amp;&amp; typeof window.fhdevice.uuid !== \"undefined\"){","      return window.fhdevice.uuid;","    } else if(typeof window.device !== \"undefined\" &amp;&amp; typeof window.device.uuid !== \"undefined\"){","      return window.device.uuid;","    }  else if(typeof navigator.device !== \"undefined\" &amp;&amp; typeof navigator.device.uuid !== \"undefined\"){","      return navigator.device.uuid;","    } else {","      var _mock_uuid_cookie_name = \"mock_uuid\";","      var uuid = cookies.readCookieValue(_mock_uuid_cookie_name);","      if(null == uuid){","          uuid = uuidModule.createUUID();","          cookies.createCookie(_mock_uuid_cookie_name, uuid);","      }","      return uuid;","    }","  },","","  //this is for fixing analytics issues when upgrading from io6 to ios7. Probably can be deprecated now","  \"getCuidMap\": function(){","    if(typeof window.fhdevice !== \"undefined\" &amp;&amp; typeof window.fhdevice.cuidMap !== \"undefined\"){","      return window.fhdevice.cuidMap;","    } else if(typeof window.device !== \"undefined\" &amp;&amp; typeof window.device.cuidMap !== \"undefined\"){","      return window.device.cuidMap;","    }  else if(typeof navigator.device !== \"undefined\" &amp;&amp; typeof navigator.device.cuidMap !== \"undefined\"){","      return navigator.device.cuidMap;","    }","","    return null;","  },","","  \"getDestination\": function(){","    var destination = null;","    var platformsToTest = require(\"./platformsMap\");","","","    var userAgent = navigator.userAgent;","","    var dest_override = document.location.search.split(\"fh_destination_code=\");","    if (dest_override.length &gt; 1) {","     destination = dest_override[1];","    } else if (typeof window.fh_destination_code !== 'undefined') {","      destination = window.fh_destination_code;","    } else {","      platformsToTest.forEach(function(testDestination){","        testDestination.test.forEach(function(destinationTest){","          if(userAgent.indexOf(destinationTest) &gt; -1){","            destination = testDestination.destination;","          }","        });","      });","    }","","    if(destination == null){ //No user agents were found, set to default web","      destination = \"web\";","    }","","    logger.debug(\"destination = \" + destination);","","    return destination;","  }","}"];

},{"./cookies":59,"./logger":68,"./platformsMap":69,"./uuid":74}],61:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/events.js']) {
  _$jscoverage['modules/events.js'] = [];
  _$jscoverage['modules/events.js'][1] = 0;
  _$jscoverage['modules/events.js'][3] = 0;
  _$jscoverage['modules/events.js'][4] = 0;
  _$jscoverage['modules/events.js'][6] = 0;
}
_$jscoverage['modules/events.js'][1]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['modules/events.js'][3]++;
var emitter = new EventEmitter();
_$jscoverage['modules/events.js'][4]++;
emitter.setMaxListeners(0);
_$jscoverage['modules/events.js'][6]++;
module.exports = emitter;
_$jscoverage['modules/events.js'].source = ["var EventEmitter = require('events').EventEmitter;","","var emitter = new EventEmitter();","emitter.setMaxListeners(0);","","module.exports = emitter;"];

},{"events":43}],62:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/fhparams.js']) {
  _$jscoverage['modules/fhparams.js'] = [];
  _$jscoverage['modules/fhparams.js'][1] = 0;
  _$jscoverage['modules/fhparams.js'][2] = 0;
  _$jscoverage['modules/fhparams.js'][3] = 0;
  _$jscoverage['modules/fhparams.js'][4] = 0;
  _$jscoverage['modules/fhparams.js'][6] = 0;
  _$jscoverage['modules/fhparams.js'][7] = 0;
  _$jscoverage['modules/fhparams.js'][9] = 0;
  _$jscoverage['modules/fhparams.js'][10] = 0;
  _$jscoverage['modules/fhparams.js'][11] = 0;
  _$jscoverage['modules/fhparams.js'][13] = 0;
  _$jscoverage['modules/fhparams.js'][14] = 0;
  _$jscoverage['modules/fhparams.js'][15] = 0;
  _$jscoverage['modules/fhparams.js'][16] = 0;
  _$jscoverage['modules/fhparams.js'][18] = 0;
  _$jscoverage['modules/fhparams.js'][19] = 0;
  _$jscoverage['modules/fhparams.js'][23] = 0;
  _$jscoverage['modules/fhparams.js'][24] = 0;
  _$jscoverage['modules/fhparams.js'][26] = 0;
  _$jscoverage['modules/fhparams.js'][27] = 0;
  _$jscoverage['modules/fhparams.js'][29] = 0;
  _$jscoverage['modules/fhparams.js'][30] = 0;
  _$jscoverage['modules/fhparams.js'][32] = 0;
  _$jscoverage['modules/fhparams.js'][33] = 0;
  _$jscoverage['modules/fhparams.js'][34] = 0;
  _$jscoverage['modules/fhparams.js'][37] = 0;
  _$jscoverage['modules/fhparams.js'][38] = 0;
  _$jscoverage['modules/fhparams.js'][39] = 0;
  _$jscoverage['modules/fhparams.js'][40] = 0;
  _$jscoverage['modules/fhparams.js'][41] = 0;
  _$jscoverage['modules/fhparams.js'][42] = 0;
  _$jscoverage['modules/fhparams.js'][43] = 0;
  _$jscoverage['modules/fhparams.js'][44] = 0;
  _$jscoverage['modules/fhparams.js'][45] = 0;
  _$jscoverage['modules/fhparams.js'][49] = 0;
  _$jscoverage['modules/fhparams.js'][50] = 0;
  _$jscoverage['modules/fhparams.js'][51] = 0;
  _$jscoverage['modules/fhparams.js'][54] = 0;
  _$jscoverage['modules/fhparams.js'][55] = 0;
  _$jscoverage['modules/fhparams.js'][56] = 0;
  _$jscoverage['modules/fhparams.js'][57] = 0;
  _$jscoverage['modules/fhparams.js'][60] = 0;
  _$jscoverage['modules/fhparams.js'][61] = 0;
  _$jscoverage['modules/fhparams.js'][64] = 0;
}
_$jscoverage['modules/fhparams.js'][1]++;
var device = require("./device");
_$jscoverage['modules/fhparams.js'][2]++;
var sdkversion = require("./sdkversion");
_$jscoverage['modules/fhparams.js'][3]++;
var appProps = require("./appProps");
_$jscoverage['modules/fhparams.js'][4]++;
var logger = require("./logger");
_$jscoverage['modules/fhparams.js'][6]++;
var defaultParams = null;
_$jscoverage['modules/fhparams.js'][7]++;
var authSessionToken = null;
_$jscoverage['modules/fhparams.js'][9]++;
var buildFHParams = (function () {
  _$jscoverage['modules/fhparams.js'][10]++;
  if (defaultParams) {
    _$jscoverage['modules/fhparams.js'][11]++;
    return defaultParams;
  }
  _$jscoverage['modules/fhparams.js'][13]++;
  var fhparams = {};
  _$jscoverage['modules/fhparams.js'][14]++;
  fhparams.cuid = device.getDeviceId();
  _$jscoverage['modules/fhparams.js'][15]++;
  fhparams.cuidMap = device.getCuidMap();
  _$jscoverage['modules/fhparams.js'][16]++;
  fhparams.destination = device.getDestination();
  _$jscoverage['modules/fhparams.js'][18]++;
  if (window.device || navigator.device) {
    _$jscoverage['modules/fhparams.js'][19]++;
    fhparams.device = window.device || navigator.device;
  }
  _$jscoverage['modules/fhparams.js'][23]++;
  if (typeof window.fh_app_version !== "undefined") {
    _$jscoverage['modules/fhparams.js'][24]++;
    fhparams.app_version = fh_app_version;
  }
  _$jscoverage['modules/fhparams.js'][26]++;
  if (typeof window.fh_project_version !== "undefined") {
    _$jscoverage['modules/fhparams.js'][27]++;
    fhparams.project_version = fh_project_version;
  }
  _$jscoverage['modules/fhparams.js'][29]++;
  if (typeof window.fh_project_app_version !== "undefined") {
    _$jscoverage['modules/fhparams.js'][30]++;
    fhparams.project_app_version = fh_project_app_version;
  }
  _$jscoverage['modules/fhparams.js'][32]++;
  fhparams.sdk_version = sdkversion();
  _$jscoverage['modules/fhparams.js'][33]++;
  if (authSessionToken) {
    _$jscoverage['modules/fhparams.js'][34]++;
    fhparams.sessionToken = authSessionToken;
  }
  _$jscoverage['modules/fhparams.js'][37]++;
  var app_props = appProps.getAppProps();
  _$jscoverage['modules/fhparams.js'][38]++;
  if (app_props) {
    _$jscoverage['modules/fhparams.js'][39]++;
    fhparams.appid = app_props.appid;
    _$jscoverage['modules/fhparams.js'][40]++;
    fhparams.appkey = app_props.appkey;
    _$jscoverage['modules/fhparams.js'][41]++;
    fhparams.projectid = app_props.projectid;
    _$jscoverage['modules/fhparams.js'][42]++;
    fhparams.analyticsTag = app_props.analyticsTag;
    _$jscoverage['modules/fhparams.js'][43]++;
    fhparams.connectiontag = app_props.connectiontag;
    _$jscoverage['modules/fhparams.js'][44]++;
    if (app_props.init) {
      _$jscoverage['modules/fhparams.js'][45]++;
      fhparams.init = typeof app_props.init === "string"? JSON.parse(app_props.init): app_props.init;
    }
  }
  _$jscoverage['modules/fhparams.js'][49]++;
  defaultParams = fhparams;
  _$jscoverage['modules/fhparams.js'][50]++;
  logger.debug("fhparams = ", defaultParams);
  _$jscoverage['modules/fhparams.js'][51]++;
  return fhparams;
});
_$jscoverage['modules/fhparams.js'][54]++;
var addFHParams = (function (params) {
  _$jscoverage['modules/fhparams.js'][55]++;
  var params = params || {};
  _$jscoverage['modules/fhparams.js'][56]++;
  params.__fh = buildFHParams();
  _$jscoverage['modules/fhparams.js'][57]++;
  return params;
});
_$jscoverage['modules/fhparams.js'][60]++;
var setAuthSessionToken = (function (sessionToken) {
  _$jscoverage['modules/fhparams.js'][61]++;
  authSessionToken = sessionToken;
});
_$jscoverage['modules/fhparams.js'][64]++;
module.exports = {"buildFHParams": buildFHParams, "addFHParams": addFHParams, "setAuthSessionToken": setAuthSessionToken};
_$jscoverage['modules/fhparams.js'].source = ["var device = require(\"./device\");","var sdkversion = require(\"./sdkversion\");","var appProps = require(\"./appProps\");","var logger = require(\"./logger\");","","var defaultParams = null;","var authSessionToken = null;","//TODO: review these options, we probably only needs all of them for init calls, but we shouldn't need all of them for act calls","var buildFHParams = function(){","  if(defaultParams){","    return defaultParams;","  }","  var fhparams = {};","  fhparams.cuid = device.getDeviceId();","  fhparams.cuidMap = device.getCuidMap();","  fhparams.destination = device.getDestination();","  ","  if(window.device || navigator.device){","    fhparams.device = window.device || navigator.device;","  }","","  //backward compatible","  if (typeof window.fh_app_version !== 'undefined'){","    fhparams.app_version = fh_app_version;","  }","  if (typeof window.fh_project_version !== 'undefined'){","    fhparams.project_version = fh_project_version;","  }","  if (typeof window.fh_project_app_version !== 'undefined'){","    fhparams.project_app_version = fh_project_app_version;","  }","  fhparams.sdk_version = sdkversion();","  if(authSessionToken){","    fhparams.sessionToken = authSessionToken;","  }","","  var app_props = appProps.getAppProps();","  if(app_props){","    fhparams.appid = app_props.appid;","    fhparams.appkey = app_props.appkey;","    fhparams.projectid = app_props.projectid;","    fhparams.analyticsTag =  app_props.analyticsTag;","    fhparams.connectiontag = app_props.connectiontag;","    if(app_props.init){","      fhparams.init = typeof(app_props.init) === \"string\" ? JSON.parse(app_props.init) : app_props.init;","    }","  }","  ","  defaultParams = fhparams;","  logger.debug(\"fhparams = \", defaultParams);","  return fhparams;","}","","var addFHParams = function(params){","  var params = params || {};","  params.__fh = buildFHParams();","  return params;","}","","var setAuthSessionToken = function(sessionToken){","  authSessionToken = sessionToken;","}","","module.exports = {","  \"buildFHParams\": buildFHParams,","  \"addFHParams\": addFHParams,","  \"setAuthSessionToken\":setAuthSessionToken","}"];

},{"./appProps":57,"./device":60,"./logger":68,"./sdkversion":71}],63:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/handleError.js']) {
  _$jscoverage['modules/handleError.js'] = [];
  _$jscoverage['modules/handleError.js'][1] = 0;
  _$jscoverage['modules/handleError.js'][3] = 0;
  _$jscoverage['modules/handleError.js'][4] = 0;
  _$jscoverage['modules/handleError.js'][5] = 0;
  _$jscoverage['modules/handleError.js'][6] = 0;
  _$jscoverage['modules/handleError.js'][7] = 0;
  _$jscoverage['modules/handleError.js'][8] = 0;
  _$jscoverage['modules/handleError.js'][9] = 0;
  _$jscoverage['modules/handleError.js'][10] = 0;
  _$jscoverage['modules/handleError.js'][11] = 0;
  _$jscoverage['modules/handleError.js'][12] = 0;
  _$jscoverage['modules/handleError.js'][15] = 0;
  _$jscoverage['modules/handleError.js'][18] = 0;
  _$jscoverage['modules/handleError.js'][19] = 0;
}
_$jscoverage['modules/handleError.js'][1]++;
var JSON = require("JSON");
_$jscoverage['modules/handleError.js'][3]++;
module.exports = (function (fail, req, resStatus, error) {
  _$jscoverage['modules/handleError.js'][4]++;
  var errraw;
  _$jscoverage['modules/handleError.js'][5]++;
  var statusCode = 0;
  _$jscoverage['modules/handleError.js'][6]++;
  if (req) {
    _$jscoverage['modules/handleError.js'][7]++;
    try {
      _$jscoverage['modules/handleError.js'][8]++;
      statusCode = req.status;
      _$jscoverage['modules/handleError.js'][9]++;
      var res = JSON.parse(req.responseText);
      _$jscoverage['modules/handleError.js'][10]++;
      errraw = res.error || res.msg;
      _$jscoverage['modules/handleError.js'][11]++;
      if (errraw instanceof Array) {
        _$jscoverage['modules/handleError.js'][12]++;
        errraw = errraw.join("\n");
      }
    }
    catch (e) {
      _$jscoverage['modules/handleError.js'][15]++;
      errraw = req.responseText;
    }
  }
  _$jscoverage['modules/handleError.js'][18]++;
  if (fail) {
    _$jscoverage['modules/handleError.js'][19]++;
    fail(errraw, {status: statusCode, message: resStatus, error: error});
  }
});
_$jscoverage['modules/handleError.js'].source = ["var JSON = require(\"JSON\");","","module.exports = function(fail, req, resStatus, error){","  var errraw;","  var statusCode = 0;","  if(req){","    try{","      statusCode = req.status;","      var res = JSON.parse(req.responseText);","      errraw = res.error || res.msg;","      if (errraw instanceof Array) {","        errraw = errraw.join('\\n');","      }","    } catch(e){","      errraw = req.responseText;","    }","  }","  if(fail){","    fail(errraw, {","      status: statusCode,","      message: resStatus,","      error: error","    });","  }","};"];

},{"JSON":3}],64:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/hosts.js']) {
  _$jscoverage['modules/hosts.js'] = [];
  _$jscoverage['modules/hosts.js'][1] = 0;
  _$jscoverage['modules/hosts.js'][2] = 0;
  _$jscoverage['modules/hosts.js'][4] = 0;
  _$jscoverage['modules/hosts.js'][5] = 0;
  _$jscoverage['modules/hosts.js'][6] = 0;
  _$jscoverage['modules/hosts.js'][7] = 0;
  _$jscoverage['modules/hosts.js'][9] = 0;
  _$jscoverage['modules/hosts.js'][12] = 0;
  _$jscoverage['modules/hosts.js'][13] = 0;
  _$jscoverage['modules/hosts.js'][14] = 0;
  _$jscoverage['modules/hosts.js'][15] = 0;
  _$jscoverage['modules/hosts.js'][17] = 0;
  _$jscoverage['modules/hosts.js'][20] = 0;
  _$jscoverage['modules/hosts.js'][21] = 0;
  _$jscoverage['modules/hosts.js'][22] = 0;
  _$jscoverage['modules/hosts.js'][23] = 0;
  _$jscoverage['modules/hosts.js'][26] = 0;
  _$jscoverage['modules/hosts.js'][27] = 0;
  _$jscoverage['modules/hosts.js'][28] = 0;
  _$jscoverage['modules/hosts.js'][30] = 0;
  _$jscoverage['modules/hosts.js'][31] = 0;
  _$jscoverage['modules/hosts.js'][32] = 0;
  _$jscoverage['modules/hosts.js'][33] = 0;
  _$jscoverage['modules/hosts.js'][35] = 0;
  _$jscoverage['modules/hosts.js'][40] = 0;
  _$jscoverage['modules/hosts.js'][41] = 0;
  _$jscoverage['modules/hosts.js'][43] = 0;
  _$jscoverage['modules/hosts.js'][44] = 0;
  _$jscoverage['modules/hosts.js'][45] = 0;
  _$jscoverage['modules/hosts.js'][47] = 0;
  _$jscoverage['modules/hosts.js'][50] = 0;
  _$jscoverage['modules/hosts.js'][51] = 0;
  _$jscoverage['modules/hosts.js'][52] = 0;
  _$jscoverage['modules/hosts.js'][53] = 0;
  _$jscoverage['modules/hosts.js'][55] = 0;
  _$jscoverage['modules/hosts.js'][59] = 0;
  _$jscoverage['modules/hosts.js'][60] = 0;
  _$jscoverage['modules/hosts.js'][61] = 0;
  _$jscoverage['modules/hosts.js'][62] = 0;
  _$jscoverage['modules/hosts.js'][64] = 0;
  _$jscoverage['modules/hosts.js'][65] = 0;
  _$jscoverage['modules/hosts.js'][67] = 0;
  _$jscoverage['modules/hosts.js'][71] = 0;
  _$jscoverage['modules/hosts.js'][72] = 0;
  _$jscoverage['modules/hosts.js'][73] = 0;
  _$jscoverage['modules/hosts.js'][74] = 0;
  _$jscoverage['modules/hosts.js'][76] = 0;
  _$jscoverage['modules/hosts.js'][79] = 0;
  _$jscoverage['modules/hosts.js'][80] = 0;
  _$jscoverage['modules/hosts.js'][81] = 0;
  _$jscoverage['modules/hosts.js'][82] = 0;
  _$jscoverage['modules/hosts.js'][84] = 0;
  _$jscoverage['modules/hosts.js'][89] = 0;
}
_$jscoverage['modules/hosts.js'][1]++;
var constants = require("./constants");
_$jscoverage['modules/hosts.js'][2]++;
var appProps = require("./appProps");
_$jscoverage['modules/hosts.js'][4]++;
function removeEndSlash(input) {
  _$jscoverage['modules/hosts.js'][5]++;
  var ret = input;
  _$jscoverage['modules/hosts.js'][6]++;
  if (ret.charAt(ret.length - 1) === "/") {
    _$jscoverage['modules/hosts.js'][7]++;
    ret = ret.substring(0, ret.length - 1);
  }
  _$jscoverage['modules/hosts.js'][9]++;
  return ret;
}
_$jscoverage['modules/hosts.js'][12]++;
function removeStartSlash(input) {
  _$jscoverage['modules/hosts.js'][13]++;
  var ret = input;
  _$jscoverage['modules/hosts.js'][14]++;
  if (ret.length > 1 && ret.charAt(0) === "/") {
    _$jscoverage['modules/hosts.js'][15]++;
    ret = ret.substring(1, ret.length);
  }
  _$jscoverage['modules/hosts.js'][17]++;
  return ret;
}
_$jscoverage['modules/hosts.js'][20]++;
function CloudHost(cloud_props) {
  _$jscoverage['modules/hosts.js'][21]++;
  this.cloud_props = cloud_props;
  _$jscoverage['modules/hosts.js'][22]++;
  this.cloud_host = undefined;
  _$jscoverage['modules/hosts.js'][23]++;
  this.isLegacy = false;
}
_$jscoverage['modules/hosts.js'][26]++;
CloudHost.prototype.getHost = (function (appType) {
  _$jscoverage['modules/hosts.js'][27]++;
  if (this.cloud_host) {
    _$jscoverage['modules/hosts.js'][28]++;
    return this.cloud_host;
  }
  else {
    _$jscoverage['modules/hosts.js'][30]++;
    var url;
    _$jscoverage['modules/hosts.js'][31]++;
    var app_type;
    _$jscoverage['modules/hosts.js'][32]++;
    if (this.cloud_props && this.cloud_props.hosts) {
      _$jscoverage['modules/hosts.js'][33]++;
      url = this.cloud_props.hosts.url;
      _$jscoverage['modules/hosts.js'][35]++;
      if (typeof url === "undefined") {
        _$jscoverage['modules/hosts.js'][40]++;
        var cloud_host = this.cloud_props.hosts.releaseCloudUrl;
        _$jscoverage['modules/hosts.js'][41]++;
        app_type = this.cloud_props.hosts.releaseCloudType;
        _$jscoverage['modules/hosts.js'][43]++;
        if (typeof appType !== "undefined" && appType.indexOf("dev") > -1) {
          _$jscoverage['modules/hosts.js'][44]++;
          cloud_host = this.cloud_props.hosts.debugCloudUrl;
          _$jscoverage['modules/hosts.js'][45]++;
          app_type = this.cloud_props.hosts.debugCloudType;
        }
        _$jscoverage['modules/hosts.js'][47]++;
        url = cloud_host;
      }
    }
    _$jscoverage['modules/hosts.js'][50]++;
    url = removeEndSlash(url);
    _$jscoverage['modules/hosts.js'][51]++;
    this.cloud_host = url;
    _$jscoverage['modules/hosts.js'][52]++;
    if (app_type === "fh") {
      _$jscoverage['modules/hosts.js'][53]++;
      this.isLegacy = true;
    }
    _$jscoverage['modules/hosts.js'][55]++;
    return url;
  }
});
_$jscoverage['modules/hosts.js'][59]++;
CloudHost.prototype.getActUrl = (function (act) {
  _$jscoverage['modules/hosts.js'][60]++;
  var app_props = appProps.getAppProps() || {};
  _$jscoverage['modules/hosts.js'][61]++;
  if (typeof this.cloud_host === "undefined") {
    _$jscoverage['modules/hosts.js'][62]++;
    this.getHost(app_props.mode);
  }
  _$jscoverage['modules/hosts.js'][64]++;
  if (this.isLegacy) {
    _$jscoverage['modules/hosts.js'][65]++;
    return this.cloud_host + constants.boxprefix + "act/" + this.cloud_props.domain + "/" + app_props.appid + "/" + act + "/" + app_props.appid;
  }
  else {
    _$jscoverage['modules/hosts.js'][67]++;
    return this.cloud_host + "/cloud/" + act;
  }
});
_$jscoverage['modules/hosts.js'][71]++;
CloudHost.prototype.getMBAASUrl = (function (service) {
  _$jscoverage['modules/hosts.js'][72]++;
  var app_props = appProps.getAppProps() || {};
  _$jscoverage['modules/hosts.js'][73]++;
  if (typeof this.cloud_host === "undefined") {
    _$jscoverage['modules/hosts.js'][74]++;
    this.getHost(app_props.mode);
  }
  _$jscoverage['modules/hosts.js'][76]++;
  return this.cloud_host + "/mbaas/" + service;
});
_$jscoverage['modules/hosts.js'][79]++;
CloudHost.prototype.getCloudUrl = (function (path) {
  _$jscoverage['modules/hosts.js'][80]++;
  var app_props = appProps.getAppProps() || {};
  _$jscoverage['modules/hosts.js'][81]++;
  if (typeof this.cloud_host === "undefined") {
    _$jscoverage['modules/hosts.js'][82]++;
    this.getHost(app_props.mode);
  }
  _$jscoverage['modules/hosts.js'][84]++;
  return this.cloud_host + "/" + removeStartSlash(path);
});
_$jscoverage['modules/hosts.js'][89]++;
module.exports = CloudHost;
_$jscoverage['modules/hosts.js'].source = ["var constants = require(\"./constants\");","var appProps = require(\"./appProps\");","","function removeEndSlash(input){","  var ret = input;","  if(ret.charAt(ret.length - 1) === \"/\"){","    ret = ret.substring(0, ret.length-1);","  }","  return ret;","}","","function removeStartSlash(input){","  var ret = input;","  if(ret.length &gt; 1 &amp;&amp; ret.charAt(0) === \"/\"){","    ret = ret.substring(1, ret.length);","  }","  return ret;","}","","function CloudHost(cloud_props){","  this.cloud_props = cloud_props;","  this.cloud_host = undefined;","  this.isLegacy = false;","}","","CloudHost.prototype.getHost = function(appType){","  if(this.cloud_host){","    return this.cloud_host;","  } else {","    var url;","    var app_type;","    if(this.cloud_props &amp;&amp; this.cloud_props.hosts){","      url = this.cloud_props.hosts.url;","","      if (typeof url === 'undefined') {","        // resolve url the old way i.e. depending on","        // -burnt in app mode","        // -returned dev or live url","        // -returned dev or live type (node or fh(rhino or proxying))","        var cloud_host = this.cloud_props.hosts.releaseCloudUrl;","        app_type = this.cloud_props.hosts.releaseCloudType;","","        if(typeof appType !== \"undefined\" &amp;&amp; appType.indexOf(\"dev\") &gt; -1){","          cloud_host = this.cloud_props.hosts.debugCloudUrl;","          app_type = this.cloud_props.hosts.debugCloudType;","        }","        url = cloud_host;","      }","    }","    url = removeEndSlash(url);","    this.cloud_host = url;","    if(app_type === \"fh\"){","      this.isLegacy = true;","    }","    return url;","  }","}","","CloudHost.prototype.getActUrl = function(act){","  var app_props = appProps.getAppProps() || {};","  if(typeof this.cloud_host === \"undefined\"){","    this.getHost(app_props.mode);","  }","  if(this.isLegacy){","    return this.cloud_host + constants.boxprefix + \"act/\" + this.cloud_props.domain + \"/\" + app_props.appid + \"/\" + act + \"/\" + app_props.appid;","  } else {","    return this.cloud_host + \"/cloud/\" + act;","  }","}","","CloudHost.prototype.getMBAASUrl = function(service){","  var app_props = appProps.getAppProps() || {};","  if(typeof this.cloud_host === \"undefined\"){","    this.getHost(app_props.mode);","  }","  return this.cloud_host + \"/mbaas/\" + service;","}","","CloudHost.prototype.getCloudUrl = function(path){","  var app_props = appProps.getAppProps() || {};","  if(typeof this.cloud_host === \"undefined\"){","    this.getHost(app_props.mode);","  }","  return this.cloud_host + \"/\" + removeStartSlash(path);","}","","","","module.exports = CloudHost;"];

},{"./appProps":57,"./constants":58}],65:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/initializer.js']) {
  _$jscoverage['modules/initializer.js'] = [];
  _$jscoverage['modules/initializer.js'][1] = 0;
  _$jscoverage['modules/initializer.js'][2] = 0;
  _$jscoverage['modules/initializer.js'][3] = 0;
  _$jscoverage['modules/initializer.js'][4] = 0;
  _$jscoverage['modules/initializer.js'][5] = 0;
  _$jscoverage['modules/initializer.js'][6] = 0;
  _$jscoverage['modules/initializer.js'][7] = 0;
  _$jscoverage['modules/initializer.js'][8] = 0;
  _$jscoverage['modules/initializer.js'][9] = 0;
  _$jscoverage['modules/initializer.js'][10] = 0;
  _$jscoverage['modules/initializer.js'][11] = 0;
  _$jscoverage['modules/initializer.js'][13] = 0;
  _$jscoverage['modules/initializer.js'][14] = 0;
  _$jscoverage['modules/initializer.js'][15] = 0;
  _$jscoverage['modules/initializer.js'][16] = 0;
  _$jscoverage['modules/initializer.js'][20] = 0;
  _$jscoverage['modules/initializer.js'][21] = 0;
  _$jscoverage['modules/initializer.js'][22] = 0;
  _$jscoverage['modules/initializer.js'][25] = 0;
  _$jscoverage['modules/initializer.js'][26] = 0;
  _$jscoverage['modules/initializer.js'][43] = 0;
  _$jscoverage['modules/initializer.js'][50] = 0;
  _$jscoverage['modules/initializer.js'][54] = 0;
  _$jscoverage['modules/initializer.js'][58] = 0;
  _$jscoverage['modules/initializer.js'][59] = 0;
  _$jscoverage['modules/initializer.js'][63] = 0;
  _$jscoverage['modules/initializer.js'][64] = 0;
  _$jscoverage['modules/initializer.js'][65] = 0;
  _$jscoverage['modules/initializer.js'][69] = 0;
  _$jscoverage['modules/initializer.js'][70] = 0;
  _$jscoverage['modules/initializer.js'][73] = 0;
  _$jscoverage['modules/initializer.js'][75] = 0;
  _$jscoverage['modules/initializer.js'][76] = 0;
  _$jscoverage['modules/initializer.js'][77] = 0;
  _$jscoverage['modules/initializer.js'][78] = 0;
  _$jscoverage['modules/initializer.js'][79] = 0;
  _$jscoverage['modules/initializer.js'][80] = 0;
  _$jscoverage['modules/initializer.js'][81] = 0;
  _$jscoverage['modules/initializer.js'][84] = 0;
  _$jscoverage['modules/initializer.js'][86] = 0;
  _$jscoverage['modules/initializer.js'][87] = 0;
  _$jscoverage['modules/initializer.js'][90] = 0;
  _$jscoverage['modules/initializer.js'][92] = 0;
  _$jscoverage['modules/initializer.js'][101] = 0;
  _$jscoverage['modules/initializer.js'][105] = 0;
  _$jscoverage['modules/initializer.js'][106] = 0;
  _$jscoverage['modules/initializer.js'][113] = 0;
  _$jscoverage['modules/initializer.js'][114] = 0;
  _$jscoverage['modules/initializer.js'][115] = 0;
  _$jscoverage['modules/initializer.js'][120] = 0;
  _$jscoverage['modules/initializer.js'][121] = 0;
  _$jscoverage['modules/initializer.js'][122] = 0;
  _$jscoverage['modules/initializer.js'][134] = 0;
}
_$jscoverage['modules/initializer.js'][1]++;
var loadScript = require("./loadScript");
_$jscoverage['modules/initializer.js'][2]++;
var Lawnchair = require("../../libs/generated/lawnchair");
_$jscoverage['modules/initializer.js'][3]++;
var lawnchairext = require("./lawnchair-ext");
_$jscoverage['modules/initializer.js'][4]++;
var consts = require("./constants");
_$jscoverage['modules/initializer.js'][5]++;
var fhparams = require("./fhparams");
_$jscoverage['modules/initializer.js'][6]++;
var ajax = require("./ajax");
_$jscoverage['modules/initializer.js'][7]++;
var handleError = require("./handleError");
_$jscoverage['modules/initializer.js'][8]++;
var logger = require("./logger");
_$jscoverage['modules/initializer.js'][9]++;
var JSON = require("JSON");
_$jscoverage['modules/initializer.js'][10]++;
var hashFunc = require("./security/hash");
_$jscoverage['modules/initializer.js'][11]++;
var appProps = require("./appProps");
_$jscoverage['modules/initializer.js'][13]++;
var init = (function (cb) {
  _$jscoverage['modules/initializer.js'][14]++;
  appProps.load((function (err, data) {
  _$jscoverage['modules/initializer.js'][15]++;
  if (err) {
    _$jscoverage['modules/initializer.js'][15]++;
    return cb(err);
  }
  _$jscoverage['modules/initializer.js'][16]++;
  return loadCloudProps(data, cb);
}));
});
_$jscoverage['modules/initializer.js'][20]++;
var loadCloudProps = (function (app_props, callback) {
  _$jscoverage['modules/initializer.js'][21]++;
  if (app_props.loglevel) {
    _$jscoverage['modules/initializer.js'][22]++;
    logger.setLevel(app_props.loglevel);
  }
  _$jscoverage['modules/initializer.js'][25]++;
  if (app_props.local) {
    _$jscoverage['modules/initializer.js'][26]++;
    var res = {"domain": "local", "firstTime": false, "hosts": {"debugCloudType": "node", "debugCloudUrl": app_props.host, "releaseCloudType": "node", "releaseCloudUrl": app_props.host, "type": "cloud_nodejs", "url": app_props.host}, "init": {"trackId": "000000000000000000000000"}, "status": "ok"};
    _$jscoverage['modules/initializer.js'][43]++;
    return callback(null, {cloud: res});
  }
  _$jscoverage['modules/initializer.js'][50]++;
  lawnchairext.addAdapter(app_props, hashFunc);
  _$jscoverage['modules/initializer.js'][54]++;
  var lcConf = {name: "fh_init_storage", adapter: ["dom", "webkit-sqlite", "localFileStorage", "window-name"], fail: (function (msg, err) {
  _$jscoverage['modules/initializer.js'][58]++;
  var error_message = "read/save from/to local storage failed  msg:" + msg + " err:" + err;
  _$jscoverage['modules/initializer.js'][59]++;
  return fail(error_message, {});
})};
  _$jscoverage['modules/initializer.js'][63]++;
  var storage = null;
  _$jscoverage['modules/initializer.js'][64]++;
  try {
    _$jscoverage['modules/initializer.js'][65]++;
    storage = new Lawnchair(lcConf, (function () {
}));
  }
  catch (e) {
    _$jscoverage['modules/initializer.js'][69]++;
    lcConf.adapter = undefined;
    _$jscoverage['modules/initializer.js'][70]++;
    storage = new Lawnchair(lcConf, (function () {
}));
  }
  _$jscoverage['modules/initializer.js'][73]++;
  var path = app_props.host + consts.boxprefix + "app/init";
  _$jscoverage['modules/initializer.js'][75]++;
  storage.get("fh_init", (function (storage_res) {
  _$jscoverage['modules/initializer.js'][76]++;
  var savedHost = null;
  _$jscoverage['modules/initializer.js'][77]++;
  if (storage_res && storage_res.value !== null && typeof storage_res.value !== "undefined" && storage_res !== "") {
    _$jscoverage['modules/initializer.js'][78]++;
    storage_res = typeof storage_res === "string"? JSON.parse(storage_res): storage_res;
    _$jscoverage['modules/initializer.js'][79]++;
    storage_res.value = typeof storage_res.value === "string"? JSON.parse(storage_res.value): storage_res.value;
    _$jscoverage['modules/initializer.js'][80]++;
    if (storage_res.value.init) {
      _$jscoverage['modules/initializer.js'][81]++;
      app_props.init = storage_res.value.init;
    }
    else {
      _$jscoverage['modules/initializer.js'][84]++;
      app_props.init = typeof storage_res.value === "string"? JSON.parse(storage_res.value): storage_res.value;
    }
    _$jscoverage['modules/initializer.js'][86]++;
    if (storage_res.value.hosts) {
      _$jscoverage['modules/initializer.js'][87]++;
      savedHost = storage_res.value;
    }
  }
  _$jscoverage['modules/initializer.js'][90]++;
  var data = fhparams.buildFHParams();
  _$jscoverage['modules/initializer.js'][92]++;
  ajax({"url": path, "type": "POST", "tryJSONP": true, "dataType": "json", "contentType": "application/json", "data": JSON.stringify(data), "timeout": app_props.timeout || consts.fh_timeout, "success": (function (initRes) {
  _$jscoverage['modules/initializer.js'][101]++;
  storage.save({key: "fh_init", value: initRes}, (function () {
}));
  _$jscoverage['modules/initializer.js'][105]++;
  if (callback) {
    _$jscoverage['modules/initializer.js'][106]++;
    callback(null, {cloud: initRes});
  }
}), "error": (function (req, statusText, error) {
  _$jscoverage['modules/initializer.js'][113]++;
  if (savedHost) {
    _$jscoverage['modules/initializer.js'][114]++;
    if (callback) {
      _$jscoverage['modules/initializer.js'][115]++;
      callback(null, {cloud: savedHost});
    }
  }
  else {
    _$jscoverage['modules/initializer.js'][120]++;
    handleError((function (msg, err) {
  _$jscoverage['modules/initializer.js'][121]++;
  if (callback) {
    _$jscoverage['modules/initializer.js'][122]++;
    callback({error: err, message: msg});
  }
}), req, statusText, error);
  }
})});
}));
});
_$jscoverage['modules/initializer.js'][134]++;
module.exports = {"init": init, "loadCloudProps": loadCloudProps};
_$jscoverage['modules/initializer.js'].source = ["var loadScript = require(\"./loadScript\");","var Lawnchair = require('../../libs/generated/lawnchair');","var lawnchairext = require('./lawnchair-ext');","var consts = require(\"./constants\");","var fhparams = require(\"./fhparams\");","var ajax = require(\"./ajax\");","var handleError = require(\"./handleError\");","var logger = require(\"./logger\");","var JSON = require(\"JSON\");","var hashFunc = require(\"./security/hash\");","var appProps = require(\"./appProps\");","","var init = function(cb) {","  appProps.load(function(err, data) {","    if (err) return cb(err);","    return loadCloudProps(data, cb);","  });","}","","var loadCloudProps = function(app_props, callback) {","  if(app_props.loglevel){","    logger.setLevel(app_props.loglevel);","  }","  // If local - shortcircuit the init - just return the host","  if (app_props.local) {","    var res = {","      \"domain\": \"local\",","      \"firstTime\": false,","      \"hosts\": {","        \"debugCloudType\": \"node\",","        \"debugCloudUrl\": app_props.host,","        \"releaseCloudType\": \"node\",","        \"releaseCloudUrl\": app_props.host,","        \"type\": \"cloud_nodejs\",","        \"url\": app_props.host","      },","      \"init\": {","        \"trackId\": \"000000000000000000000000\"","      },","      \"status\": \"ok\"","    };","","    return callback(null, {","      cloud: res","    });","  }","","","  //now we have app props, add the fileStorageAdapter","  lawnchairext.addAdapter(app_props, hashFunc);","  //dom adapter doens't work on windows phone, so don't specify the adapter if the dom one failed","  //we specify the order of lawnchair adapters to use, lawnchair will find the right one to use, to keep backward compatibility, keep the order","  //as dom, webkit-sqlite, localFileStorage, window-name","  var lcConf = {","    name: \"fh_init_storage\",","    adapter: [\"dom\", \"webkit-sqlite\", \"localFileStorage\", \"window-name\"],","    fail: function(msg, err) {","      var error_message = 'read/save from/to local storage failed  msg:' + msg + ' err:' + err;","      return fail(error_message, {});","    }","  };","","  var storage = null;","  try {","    storage = new Lawnchair(lcConf, function() {});","  } catch (e) {","    //when dom adapter failed, Lawnchair throws an error","    //shoudn't go in here anymore","    lcConf.adapter = undefined;","    storage = new Lawnchair(lcConf, function() {});","  }","","  var path = app_props.host + consts.boxprefix + \"app/init\";","","  storage.get('fh_init', function(storage_res) {","    var savedHost = null;","    if (storage_res &amp;&amp; storage_res.value !== null &amp;&amp; typeof(storage_res.value) !== \"undefined\" &amp;&amp; storage_res !== \"\") {","      storage_res = typeof(storage_res) === \"string\" ? JSON.parse(storage_res) : storage_res;","      storage_res.value = typeof(storage_res.value) === \"string\" ? JSON.parse(storage_res.value) : storage_res.value;","      if (storage_res.value.init) {","        app_props.init = storage_res.value.init;","      } else {","        //keep it backward compatible.","        app_props.init = typeof(storage_res.value) === \"string\" ? JSON.parse(storage_res.value) : storage_res.value;","      }","      if (storage_res.value.hosts) {","        savedHost = storage_res.value;","      }","    }","    var data = fhparams.buildFHParams();","","    ajax({","      \"url\": path,","      \"type\": \"POST\",","      \"tryJSONP\": true,","      \"dataType\": \"json\",","      \"contentType\": \"application/json\",","      \"data\": JSON.stringify(data),","      \"timeout\": app_props.timeout || consts.fh_timeout,","      \"success\": function(initRes) {","        storage.save({","          key: \"fh_init\",","          value: initRes","        }, function() {});","        if (callback) {","          callback(null, {","            cloud: initRes","          });","        }","      },","      \"error\": function(req, statusText, error) {","        //use the cached host if we have a copy","        if (savedHost) {","          if (callback) {","            callback(null, {","              cloud: savedHost","            });","          }","        } else {","          handleError(function(msg, err) {","            if (callback) {","              callback({","                error: err,","                message: msg","              });","            }","          }, req, statusText, error);","        }","      }","    });","  });","};","","module.exports = {","  \"init\": init,","  \"loadCloudProps\": loadCloudProps","}"];

},{"../../libs/generated/lawnchair":2,"./ajax":54,"./appProps":57,"./constants":58,"./fhparams":62,"./handleError":63,"./lawnchair-ext":66,"./loadScript":67,"./logger":68,"./security/hash":72,"JSON":3}],66:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/lawnchair-ext.js']) {
  _$jscoverage['modules/lawnchair-ext.js'] = [];
  _$jscoverage['modules/lawnchair-ext.js'][1] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][3] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][6] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][7] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][8] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][12] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][13] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][14] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][18] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][19] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][21] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][25] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][26] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][27] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][28] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][29] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][30] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][31] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][32] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][34] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][36] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][37] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][39] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][42] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][43] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][48] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][50] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][54] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][55] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][59] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][63] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][64] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][65] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][66] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][68] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][71] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][72] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][73] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][78] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][80] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][83] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][86] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][92] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][96] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][97] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][98] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][99] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][100] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][101] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][102] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][105] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][106] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][111] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][116] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][118] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][122] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][128] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][134] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][135] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][136] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][138] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][140] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][147] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][151] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][153] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][154] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][156] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][157] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][162] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][165] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][168] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][174] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][181] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][182] = 0;
  _$jscoverage['modules/lawnchair-ext.js'][185] = 0;
}
_$jscoverage['modules/lawnchair-ext.js'][1]++;
var Lawnchair = require("../../libs/generated/lawnchair");
_$jscoverage['modules/lawnchair-ext.js'][3]++;
var fileStorageAdapter = (function (app_props, hashFunc) {
  _$jscoverage['modules/lawnchair-ext.js'][6]++;
  function doLog(mess) {
    _$jscoverage['modules/lawnchair-ext.js'][7]++;
    if (console) {
      _$jscoverage['modules/lawnchair-ext.js'][8]++;
      console.log(mess);
    }
}
  _$jscoverage['modules/lawnchair-ext.js'][12]++;
  var fail = (function (e, i) {
  _$jscoverage['modules/lawnchair-ext.js'][13]++;
  if (console) {
    _$jscoverage['modules/lawnchair-ext.js'][13]++;
    console.log("error in file system adapter !", e, i);
  }
  else {
    _$jscoverage['modules/lawnchair-ext.js'][14]++;
    throw e;
  }
});
  _$jscoverage['modules/lawnchair-ext.js'][18]++;
  function filenameForKey(key, cb) {
    _$jscoverage['modules/lawnchair-ext.js'][19]++;
    key = app_props.appid + key;
    _$jscoverage['modules/lawnchair-ext.js'][21]++;
    hashFunc({algorithm: "MD5", text: key}, (function (result) {
  _$jscoverage['modules/lawnchair-ext.js'][25]++;
  var filename = result.hashvalue + ".txt";
  _$jscoverage['modules/lawnchair-ext.js'][26]++;
  if (typeof navigator.externalstorage !== "undefined") {
    _$jscoverage['modules/lawnchair-ext.js'][27]++;
    navigator.externalstorage.enable((function handleSuccess(res) {
  _$jscoverage['modules/lawnchair-ext.js'][28]++;
  var path = filename;
  _$jscoverage['modules/lawnchair-ext.js'][29]++;
  if (res.path) {
    _$jscoverage['modules/lawnchair-ext.js'][30]++;
    path = res.path;
    _$jscoverage['modules/lawnchair-ext.js'][31]++;
    if (! path.match(/\/$/)) {
      _$jscoverage['modules/lawnchair-ext.js'][32]++;
      path += "/";
    }
    _$jscoverage['modules/lawnchair-ext.js'][34]++;
    path += filename;
  }
  _$jscoverage['modules/lawnchair-ext.js'][36]++;
  filename = path;
  _$jscoverage['modules/lawnchair-ext.js'][37]++;
  return cb(filename);
}), (function handleError(err) {
  _$jscoverage['modules/lawnchair-ext.js'][39]++;
  return cb(filename);
}));
  }
  else {
    _$jscoverage['modules/lawnchair-ext.js'][42]++;
    doLog("filenameForKey key=" + key + " , Filename: " + filename);
    _$jscoverage['modules/lawnchair-ext.js'][43]++;
    return cb(filename);
  }
}));
}
  _$jscoverage['modules/lawnchair-ext.js'][48]++;
  return ({valid: (function () {
  _$jscoverage['modules/lawnchair-ext.js'][50]++;
  return ! ! window.requestFileSystem;
}), init: (function (options, callback) {
  _$jscoverage['modules/lawnchair-ext.js'][54]++;
  if (options && "function" === typeof options.fail) {
    _$jscoverage['modules/lawnchair-ext.js'][54]++;
    fail = options.fail;
  }
  _$jscoverage['modules/lawnchair-ext.js'][55]++;
  if (callback) {
    _$jscoverage['modules/lawnchair-ext.js'][55]++;
    this.fn(this.name, callback).call(this, this);
  }
}), keys: (function (callback) {
  _$jscoverage['modules/lawnchair-ext.js'][59]++;
  throw "Currently not supported";
}), save: (function (obj, callback) {
  _$jscoverage['modules/lawnchair-ext.js'][63]++;
  var key = obj.key;
  _$jscoverage['modules/lawnchair-ext.js'][64]++;
  var value = obj.val || obj.value;
  _$jscoverage['modules/lawnchair-ext.js'][65]++;
  filenameForKey(key, (function (hash) {
  _$jscoverage['modules/lawnchair-ext.js'][66]++;
  window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, (function gotFS(fileSystem) {
  _$jscoverage['modules/lawnchair-ext.js'][68]++;
  fileSystem.root.getFile(hash, {create: true}, (function gotFileEntry(fileEntry) {
  _$jscoverage['modules/lawnchair-ext.js'][71]++;
  fileEntry.createWriter((function gotFileWriter(writer) {
  _$jscoverage['modules/lawnchair-ext.js'][72]++;
  writer.onwrite = (function () {
  _$jscoverage['modules/lawnchair-ext.js'][73]++;
  return callback({key: key, val: value});
});
  _$jscoverage['modules/lawnchair-ext.js'][78]++;
  writer.write(value);
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][80]++;
  fail("[save] Failed to create file writer");
}));
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][83]++;
  fail("[save] Failed to getFile");
}));
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][86]++;
  fail("[save] Failed to requestFileSystem");
}));
}));
}), batch: (function (records, callback) {
  _$jscoverage['modules/lawnchair-ext.js'][92]++;
  throw "Currently not supported";
}), get: (function (key, callback) {
  _$jscoverage['modules/lawnchair-ext.js'][96]++;
  filenameForKey(key, (function (hash) {
  _$jscoverage['modules/lawnchair-ext.js'][97]++;
  window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, (function gotFS(fileSystem) {
  _$jscoverage['modules/lawnchair-ext.js'][98]++;
  fileSystem.root.getFile(hash, {}, (function gotFileEntry(fileEntry) {
  _$jscoverage['modules/lawnchair-ext.js'][99]++;
  fileEntry.file((function gotFile(file) {
  _$jscoverage['modules/lawnchair-ext.js'][100]++;
  var reader = new FileReader();
  _$jscoverage['modules/lawnchair-ext.js'][101]++;
  reader.onloadend = (function (evt) {
  _$jscoverage['modules/lawnchair-ext.js'][102]++;
  var text = evt.target.result;
  _$jscoverage['modules/lawnchair-ext.js'][105]++;
  try {
    _$jscoverage['modules/lawnchair-ext.js'][106]++;
    text = decodeURIComponent(text);
  }
  catch (e) {
  }
  _$jscoverage['modules/lawnchair-ext.js'][111]++;
  return callback({key: key, val: text});
});
  _$jscoverage['modules/lawnchair-ext.js'][116]++;
  reader.readAsText(file);
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][118]++;
  fail("[load] Failed to getFile");
}));
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][122]++;
  callback({key: key, val: null});
}));
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][128]++;
  fail("[load] Failed to get fileSystem");
}));
}));
}), exists: (function (key, callback) {
  _$jscoverage['modules/lawnchair-ext.js'][134]++;
  filenameForKey(key, (function (hash) {
  _$jscoverage['modules/lawnchair-ext.js'][135]++;
  window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, (function gotFS(fileSystem) {
  _$jscoverage['modules/lawnchair-ext.js'][136]++;
  fileSystem.root.getFile(hash, {}, (function gotFileEntry(fileEntry) {
  _$jscoverage['modules/lawnchair-ext.js'][138]++;
  return callback(true);
}), (function (err) {
  _$jscoverage['modules/lawnchair-ext.js'][140]++;
  return callback(false);
}));
}));
}));
}), all: (function (callback) {
  _$jscoverage['modules/lawnchair-ext.js'][147]++;
  throw "Currently not supported";
}), remove: (function (key, callback) {
  _$jscoverage['modules/lawnchair-ext.js'][151]++;
  filenameForKey(key, (function (hash) {
  _$jscoverage['modules/lawnchair-ext.js'][153]++;
  window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, (function gotFS(fileSystem) {
  _$jscoverage['modules/lawnchair-ext.js'][154]++;
  fileSystem.root.getFile(hash, {}, (function gotFileEntry(fileEntry) {
  _$jscoverage['modules/lawnchair-ext.js'][156]++;
  fileEntry.remove((function () {
  _$jscoverage['modules/lawnchair-ext.js'][157]++;
  return callback({key: key, val: null});
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][162]++;
  fail("[remove] Failed to remove file");
}));
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][165]++;
  fail("[remove] Failed to getFile");
}));
}), (function () {
  _$jscoverage['modules/lawnchair-ext.js'][168]++;
  fail("[remove] Failed to get fileSystem");
}));
}));
}), nuke: (function (callback) {
  _$jscoverage['modules/lawnchair-ext.js'][174]++;
  throw "Currently not supported";
})});
});
_$jscoverage['modules/lawnchair-ext.js'][181]++;
var addAdapter = (function (app_props, hashFunc) {
  _$jscoverage['modules/lawnchair-ext.js'][182]++;
  Lawnchair.adapter("localFileStorage", fileStorageAdapter(app_props, hashFunc));
});
_$jscoverage['modules/lawnchair-ext.js'][185]++;
module.exports = {addAdapter: addAdapter};
_$jscoverage['modules/lawnchair-ext.js'].source = ["var Lawnchair = require('../../libs/generated/lawnchair');","","var fileStorageAdapter = function (app_props, hashFunc) {","  // private methods","","  function doLog(mess){","    if(console){","      console.log(mess);","    }","  }","","  var fail = function (e, i) {","    if(console) console.log('error in file system adapter !', e, i);","    else throw e;","  };","","","  function filenameForKey(key, cb) {","    key = app_props.appid + key;","","    hashFunc({","      algorithm: \"MD5\",","      text: key","    }, function(result) {","      var filename = result.hashvalue + '.txt';","      if (typeof navigator.externalstorage !== \"undefined\") {","        navigator.externalstorage.enable(function handleSuccess(res){","          var path = filename;","          if(res.path ) {","            path = res.path;","            if(!path.match(/\\/$/)) {","              path += '/';","            }","            path += filename;","          }","          filename = path;","          return cb(filename);","        },function handleError(err){","          return cb(filename);","        })","      } else {","        doLog('filenameForKey key=' + key+ ' , Filename: ' + filename);","        return cb(filename);","      }","    });","  }","","  return {","","    valid: function () { return !!(window.requestFileSystem) },","","    init : function (options, callback){","      //calls the parent function fn and applies this scope","      if(options &amp;&amp; 'function' === typeof options.fail ) fail = options.fail;","      if (callback) this.fn(this.name, callback).call(this, this);","    },","","    keys: function (callback){","      throw \"Currently not supported\";","    },","","    save : function (obj, callback){","      var key = obj.key;","      var value = obj.val||obj.value;","      filenameForKey(key, function(hash) {","        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {","","          fileSystem.root.getFile(hash, {","            create: true","          }, function gotFileEntry(fileEntry) {","            fileEntry.createWriter(function gotFileWriter(writer) {","              writer.onwrite = function() {","                return callback({","                  key: key,","                  val: value","                });","              };","              writer.write(value);","            }, function() {","              fail('[save] Failed to create file writer');","            });","          }, function() {","            fail('[save] Failed to getFile');","          });","        }, function() {","          fail('[save] Failed to requestFileSystem');","        });","      });","    },","","    batch : function (records, callback){","      throw \"Currently not supported\";","    },","","    get : function (key, callback){","      filenameForKey(key, function(hash) {","        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {","          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {","            fileEntry.file(function gotFile(file) {","              var reader = new FileReader();","              reader.onloadend = function (evt) {","                var text = evt.target.result;","                // Check for URLencoded","                // PG 2.2 bug in readAsText()","                try {","                  text = decodeURIComponent(text);","                } catch (e) {","                  // Swallow exception if not URLencoded","                  // Just use the result","                }","                return callback({","                  key: key,","                  val: text","                });","              };","              reader.readAsText(file);","            }, function() {","              fail('[load] Failed to getFile');","            });","          }, function() {","            // Success callback on key load failure","            callback({","              key: key,","              val: null","            });","          });","        }, function() {","          fail('[load] Failed to get fileSystem');","        });","      });","    },","","    exists : function (key, callback){","      filenameForKey(key,function (hash){","        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {","          fileSystem.root.getFile(hash, {},","            function gotFileEntry(fileEntry) {","              return callback(true);","            }, function (err){","              return callback(false);","            });","        });","      });","    },","","    all : function (callback){","      throw \"Currently not supported\";","    },","","    remove : function (key, callback){","      filenameForKey(key, function(hash) {","","        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {","          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {","","            fileEntry.remove(function() {","              return callback({","                key: key,","                val: null","              });","            }, function() {","              fail('[remove] Failed to remove file');","            });","          }, function() {","            fail('[remove] Failed to getFile');","          });","        }, function() {","          fail('[remove] Failed to get fileSystem');","        });","      });","    },","","    nuke : function (callback){","      throw \"Currently not supported\";","    }","","","  };","}","","var addAdapter = function(app_props, hashFunc){","  Lawnchair.adapter('localFileStorage', fileStorageAdapter(app_props, hashFunc));","}","","module.exports = {","  addAdapter: addAdapter","}"];

},{"../../libs/generated/lawnchair":2}],67:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/loadScript.js']) {
  _$jscoverage['modules/loadScript.js'] = [];
  _$jscoverage['modules/loadScript.js'][1] = 0;
  _$jscoverage['modules/loadScript.js'][2] = 0;
  _$jscoverage['modules/loadScript.js'][3] = 0;
  _$jscoverage['modules/loadScript.js'][4] = 0;
  _$jscoverage['modules/loadScript.js'][5] = 0;
  _$jscoverage['modules/loadScript.js'][6] = 0;
  _$jscoverage['modules/loadScript.js'][7] = 0;
  _$jscoverage['modules/loadScript.js'][8] = 0;
  _$jscoverage['modules/loadScript.js'][9] = 0;
  _$jscoverage['modules/loadScript.js'][10] = 0;
  _$jscoverage['modules/loadScript.js'][11] = 0;
  _$jscoverage['modules/loadScript.js'][12] = 0;
  _$jscoverage['modules/loadScript.js'][14] = 0;
  _$jscoverage['modules/loadScript.js'][15] = 0;
  _$jscoverage['modules/loadScript.js'][16] = 0;
  _$jscoverage['modules/loadScript.js'][20] = 0;
}
_$jscoverage['modules/loadScript.js'][1]++;
module.exports = (function (url, callback) {
  _$jscoverage['modules/loadScript.js'][2]++;
  var script;
  _$jscoverage['modules/loadScript.js'][3]++;
  var head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;
  _$jscoverage['modules/loadScript.js'][4]++;
  script = document.createElement("script");
  _$jscoverage['modules/loadScript.js'][5]++;
  script.async = "async";
  _$jscoverage['modules/loadScript.js'][6]++;
  script.src = url;
  _$jscoverage['modules/loadScript.js'][7]++;
  script.type = "text/javascript";
  _$jscoverage['modules/loadScript.js'][8]++;
  script.onload = script.onreadystatechange = (function () {
  _$jscoverage['modules/loadScript.js'][9]++;
  if (! script.readyState || /loaded|complete/.test(script.readyState)) {
    _$jscoverage['modules/loadScript.js'][10]++;
    script.onload = script.onreadystatechange = null;
    _$jscoverage['modules/loadScript.js'][11]++;
    if (head && script.parentNode) {
      _$jscoverage['modules/loadScript.js'][12]++;
      head.removeChild(script);
    }
    _$jscoverage['modules/loadScript.js'][14]++;
    script = undefined;
    _$jscoverage['modules/loadScript.js'][15]++;
    if (callback && typeof callback === "function") {
      _$jscoverage['modules/loadScript.js'][16]++;
      callback();
    }
  }
});
  _$jscoverage['modules/loadScript.js'][20]++;
  head.insertBefore(script, head.firstChild);
});
_$jscoverage['modules/loadScript.js'].source = ["module.exports = function (url, callback) {","  var script;","  var head = document.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;","  script = document.createElement(\"script\");","  script.async = \"async\";","  script.src = url;","  script.type = \"text/javascript\";","  script.onload = script.onreadystatechange = function () {","    if (!script.readyState || /loaded|complete/.test(script.readyState)) {","      script.onload = script.onreadystatechange = null;","      if (head &amp;&amp; script.parentNode) {","        head.removeChild(script);","      }","      script = undefined;","      if (callback &amp;&amp; typeof callback === \"function\") {","        callback();","      }","    }","  };","  head.insertBefore(script, head.firstChild);","};"];

},{}],68:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/logger.js']) {
  _$jscoverage['modules/logger.js'] = [];
  _$jscoverage['modules/logger.js'][1] = 0;
  _$jscoverage['modules/logger.js'][2] = 0;
  _$jscoverage['modules/logger.js'][4] = 0;
  _$jscoverage['modules/logger.js'][23] = 0;
}
_$jscoverage['modules/logger.js'][1]++;
var console = require("console");
_$jscoverage['modules/logger.js'][2]++;
var log = require("loglevel");
_$jscoverage['modules/logger.js'][4]++;
log.setLevel("info");
_$jscoverage['modules/logger.js'][23]++;
module.exports = log;
_$jscoverage['modules/logger.js'].source = ["var console = require('console');","var log = require('loglevel');","","log.setLevel('info');","","/**"," * APIs:"," * see https://github.com/pimterry/loglevel."," * In short, you can use:"," * log.setLevel(loglevel) - default to info"," * log.enableAll() - enable all log messages"," * log.disableAll() - disable all log messages"," *"," * log.trace(msg)"," * log.debug(msg)"," * log.info(msg)"," * log.warn(msg)"," * log.error(msg)"," *"," * Available levels: { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3, \"ERROR\": 4, \"SILENT\": 5}"," * Use either string or integer value"," */","module.exports = log;"];

},{"console":42,"loglevel":48}],69:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/platformsMap.js']) {
  _$jscoverage['modules/platformsMap.js'] = [];
  _$jscoverage['modules/platformsMap.js'][1] = 0;
}
_$jscoverage['modules/platformsMap.js'][1]++;
module.exports = [{"destination": "ipad", "test": ["iPad"]}, {"destination": "iphone", "test": ["iPhone"]}, {"destination": "android", "test": ["Android"]}, {"destination": "blackberry", "test": ["BlackBerry", "BB10", "RIM Tablet OS"]}, {"destination": "windowsphone", "test": ["Windows Phone 8"]}, {"destination": "windowsphone7", "test": ["Windows Phone OS 7"]}];
_$jscoverage['modules/platformsMap.js'].source = ["module.exports = [","  {","    \"destination\" :\"ipad\",","    \"test\": [\"iPad\"]","  },","  {","    \"destination\" :\"iphone\",","    \"test\": [\"iPhone\"]","  },","  {","    \"destination\" :\"android\",","    \"test\": [\"Android\"]","  },","  {","    \"destination\" :\"blackberry\",","    \"test\": [\"BlackBerry\", \"BB10\", \"RIM Tablet OS\"]//Blackberry 10 does not contain \"Blackberry\"","  },","  {","    \"destination\" :\"windowsphone\",","    \"test\": [\"Windows Phone 8\"]","  },","  {","    \"destination\" :\"windowsphone7\",","    \"test\": [\"Windows Phone OS 7\"]","  }","];"];

},{}],70:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/queryMap.js']) {
  _$jscoverage['modules/queryMap.js'] = [];
  _$jscoverage['modules/queryMap.js'][1] = 0;
  _$jscoverage['modules/queryMap.js'][2] = 0;
  _$jscoverage['modules/queryMap.js'][3] = 0;
  _$jscoverage['modules/queryMap.js'][4] = 0;
  _$jscoverage['modules/queryMap.js'][5] = 0;
  _$jscoverage['modules/queryMap.js'][6] = 0;
  _$jscoverage['modules/queryMap.js'][7] = 0;
  _$jscoverage['modules/queryMap.js'][8] = 0;
  _$jscoverage['modules/queryMap.js'][9] = 0;
  _$jscoverage['modules/queryMap.js'][10] = 0;
  _$jscoverage['modules/queryMap.js'][11] = 0;
  _$jscoverage['modules/queryMap.js'][14] = 0;
}
_$jscoverage['modules/queryMap.js'][1]++;
module.exports = (function (url) {
  _$jscoverage['modules/queryMap.js'][2]++;
  var qmap = {};
  _$jscoverage['modules/queryMap.js'][3]++;
  var i = url.split("?");
  _$jscoverage['modules/queryMap.js'][4]++;
  if (i.length === 2) {
    _$jscoverage['modules/queryMap.js'][5]++;
    var queryString = i[1];
    _$jscoverage['modules/queryMap.js'][6]++;
    var pairs = queryString.split("&");
    _$jscoverage['modules/queryMap.js'][7]++;
    qmap = {};
    _$jscoverage['modules/queryMap.js'][8]++;
    for (var p = 0; p < pairs.length; p++) {
      _$jscoverage['modules/queryMap.js'][9]++;
      var q = pairs[p];
      _$jscoverage['modules/queryMap.js'][10]++;
      var qp = q.split("=");
      _$jscoverage['modules/queryMap.js'][11]++;
      qmap[qp[0]] = qp[1];
}
  }
  _$jscoverage['modules/queryMap.js'][14]++;
  return qmap;
});
_$jscoverage['modules/queryMap.js'].source = ["module.exports = function(url) {","  var qmap = {};","  var i = url.split(\"?\");","  if (i.length === 2) {","    var queryString = i[1];","    var pairs = queryString.split(\"&amp;\");","    qmap = {};","    for (var p = 0; p &lt; pairs.length; p++) {","      var q = pairs[p];","      var qp = q.split(\"=\");","      qmap[qp[0]] = qp[1];","    }","  }","  return qmap;","};"];

},{}],71:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/sdkversion.js']) {
  _$jscoverage['modules/sdkversion.js'] = [];
  _$jscoverage['modules/sdkversion.js'][1] = 0;
  _$jscoverage['modules/sdkversion.js'][3] = 0;
  _$jscoverage['modules/sdkversion.js'][4] = 0;
  _$jscoverage['modules/sdkversion.js'][5] = 0;
  _$jscoverage['modules/sdkversion.js'][6] = 0;
  _$jscoverage['modules/sdkversion.js'][7] = 0;
  _$jscoverage['modules/sdkversion.js'][8] = 0;
  _$jscoverage['modules/sdkversion.js'][10] = 0;
}
_$jscoverage['modules/sdkversion.js'][1]++;
var constants = require("./constants");
_$jscoverage['modules/sdkversion.js'][3]++;
module.exports = (function () {
  _$jscoverage['modules/sdkversion.js'][4]++;
  var type = "FH_JS_SDK";
  _$jscoverage['modules/sdkversion.js'][5]++;
  if (typeof window.fh_destination_code !== "undefined") {
    _$jscoverage['modules/sdkversion.js'][6]++;
    type = "FH_HYBRID_SDK";
  }
  else {
    _$jscoverage['modules/sdkversion.js'][7]++;
    if (window.PhoneGap || window.cordova) {
      _$jscoverage['modules/sdkversion.js'][8]++;
      type = "FH_PHONEGAP_SDK";
    }
  }
  _$jscoverage['modules/sdkversion.js'][10]++;
  return type + "/" + constants.sdk_version;
});
_$jscoverage['modules/sdkversion.js'].source = ["var constants = require(\"./constants\");","","module.exports = function() {","  var type = \"FH_JS_SDK\";","  if (typeof window.fh_destination_code !== 'undefined') {","    type = \"FH_HYBRID_SDK\";","  } else if(window.PhoneGap || window.cordova) {","    type = \"FH_PHONEGAP_SDK\";","  }","  return type + \"/\" + constants.sdk_version;","};"];

},{"./constants":58}],72:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/security/hash.js']) {
  _$jscoverage['modules/security/hash.js'] = [];
  _$jscoverage['modules/security/hash.js'][1] = 0;
  _$jscoverage['modules/security/hash.js'][4] = 0;
  _$jscoverage['modules/security/hash.js'][5] = 0;
  _$jscoverage['modules/security/hash.js'][6] = 0;
  _$jscoverage['modules/security/hash.js'][7] = 0;
  _$jscoverage['modules/security/hash.js'][9] = 0;
  _$jscoverage['modules/security/hash.js'][10] = 0;
  _$jscoverage['modules/security/hash.js'][11] = 0;
  _$jscoverage['modules/security/hash.js'][12] = 0;
  _$jscoverage['modules/security/hash.js'][13] = 0;
  _$jscoverage['modules/security/hash.js'][14] = 0;
  _$jscoverage['modules/security/hash.js'][15] = 0;
  _$jscoverage['modules/security/hash.js'][16] = 0;
  _$jscoverage['modules/security/hash.js'][17] = 0;
  _$jscoverage['modules/security/hash.js'][19] = 0;
  _$jscoverage['modules/security/hash.js'][21] = 0;
  _$jscoverage['modules/security/hash.js'][24] = 0;
}
_$jscoverage['modules/security/hash.js'][1]++;
var CryptoJS = require("../../../libs/generated/crypto");
_$jscoverage['modules/security/hash.js'][4]++;
var hash = (function (p, s, f) {
  _$jscoverage['modules/security/hash.js'][5]++;
  if (! p.params.text) {
    _$jscoverage['modules/security/hash.js'][6]++;
    f("hash_no_text", {}, p);
    _$jscoverage['modules/security/hash.js'][7]++;
    return;
  }
  _$jscoverage['modules/security/hash.js'][9]++;
  var hashValue;
  _$jscoverage['modules/security/hash.js'][10]++;
  if (p.params.algorithm.toLowerCase() === "md5") {
    _$jscoverage['modules/security/hash.js'][11]++;
    hashValue = CryptoJS.MD5(p.params.text).toString(CryptoJS.enc.Hex);
  }
  else {
    _$jscoverage['modules/security/hash.js'][12]++;
    if (p.params.algorithm.toLowerCase() === "sha1") {
      _$jscoverage['modules/security/hash.js'][13]++;
      hashValue = CryptoJS.SHA1(p.params.text).toString(CryptoJS.enc.Hex);
    }
    else {
      _$jscoverage['modules/security/hash.js'][14]++;
      if (p.params.algorithm.toLowerCase() === "sha256") {
        _$jscoverage['modules/security/hash.js'][15]++;
        hashValue = CryptoJS.SHA256(p.params.text).toString(CryptoJS.enc.Hex);
      }
      else {
        _$jscoverage['modules/security/hash.js'][16]++;
        if (p.params.algorithm.toLowerCase() === "sha512") {
          _$jscoverage['modules/security/hash.js'][17]++;
          hashValue = CryptoJS.SHA512(p.params.text).toString(CryptoJS.enc.Hex);
        }
        else {
          _$jscoverage['modules/security/hash.js'][19]++;
          return f("hash_unsupported_algorithm: " + p.params.algorithm);
        }
      }
    }
  }
  _$jscoverage['modules/security/hash.js'][21]++;
  return s({"hashvalue": hashValue});
});
_$jscoverage['modules/security/hash.js'][24]++;
module.exports = hash;
_$jscoverage['modules/security/hash.js'].source = ["var CryptoJS = require(\"../../../libs/generated/crypto\");","","","var hash = function(p, s, f){","  if (!p.params.text) {","    f('hash_no_text', {}, p);","    return;","  }","  var hashValue;","  if (p.params.algorithm.toLowerCase() === \"md5\") {","    hashValue = CryptoJS.MD5(p.params.text).toString(CryptoJS.enc.Hex);","  } else if(p.params.algorithm.toLowerCase() === \"sha1\"){","    hashValue = CryptoJS.SHA1(p.params.text).toString(CryptoJS.enc.Hex);","  } else if(p.params.algorithm.toLowerCase() === \"sha256\"){","    hashValue = CryptoJS.SHA256(p.params.text).toString(CryptoJS.enc.Hex);","  } else if(p.params.algorithm.toLowerCase() === \"sha512\"){","    hashValue = CryptoJS.SHA512(p.params.text).toString(CryptoJS.enc.Hex);","  } else {","    return f(\"hash_unsupported_algorithm: \" + p.params.algorithm);","  }","  return s({\"hashvalue\": hashValue});","}","","module.exports = hash;"];

},{"../../../libs/generated/crypto":1}],73:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/sync-cli.js']) {
  _$jscoverage['modules/sync-cli.js'] = [];
  _$jscoverage['modules/sync-cli.js'][1] = 0;
  _$jscoverage['modules/sync-cli.js'][2] = 0;
  _$jscoverage['modules/sync-cli.js'][3] = 0;
  _$jscoverage['modules/sync-cli.js'][4] = 0;
  _$jscoverage['modules/sync-cli.js'][5] = 0;
  _$jscoverage['modules/sync-cli.js'][7] = 0;
  _$jscoverage['modules/sync-cli.js'][87] = 0;
  _$jscoverage['modules/sync-cli.js'][89] = 0;
  _$jscoverage['modules/sync-cli.js'][90] = 0;
  _$jscoverage['modules/sync-cli.js'][91] = 0;
  _$jscoverage['modules/sync-cli.js'][94] = 0;
  _$jscoverage['modules/sync-cli.js'][98] = 0;
  _$jscoverage['modules/sync-cli.js'][102] = 0;
  _$jscoverage['modules/sync-cli.js'][104] = 0;
  _$jscoverage['modules/sync-cli.js'][106] = 0;
  _$jscoverage['modules/sync-cli.js'][107] = 0;
  _$jscoverage['modules/sync-cli.js'][109] = 0;
  _$jscoverage['modules/sync-cli.js'][111] = 0;
  _$jscoverage['modules/sync-cli.js'][112] = 0;
  _$jscoverage['modules/sync-cli.js'][113] = 0;
  _$jscoverage['modules/sync-cli.js'][114] = 0;
  _$jscoverage['modules/sync-cli.js'][115] = 0;
  _$jscoverage['modules/sync-cli.js'][116] = 0;
  _$jscoverage['modules/sync-cli.js'][117] = 0;
  _$jscoverage['modules/sync-cli.js'][119] = 0;
  _$jscoverage['modules/sync-cli.js'][121] = 0;
  _$jscoverage['modules/sync-cli.js'][122] = 0;
  _$jscoverage['modules/sync-cli.js'][128] = 0;
  _$jscoverage['modules/sync-cli.js'][129] = 0;
  _$jscoverage['modules/sync-cli.js'][130] = 0;
  _$jscoverage['modules/sync-cli.js'][132] = 0;
  _$jscoverage['modules/sync-cli.js'][135] = 0;
  _$jscoverage['modules/sync-cli.js'][136] = 0;
  _$jscoverage['modules/sync-cli.js'][141] = 0;
  _$jscoverage['modules/sync-cli.js'][144] = 0;
  _$jscoverage['modules/sync-cli.js'][148] = 0;
  _$jscoverage['modules/sync-cli.js'][149] = 0;
  _$jscoverage['modules/sync-cli.js'][150] = 0;
  _$jscoverage['modules/sync-cli.js'][151] = 0;
  _$jscoverage['modules/sync-cli.js'][152] = 0;
  _$jscoverage['modules/sync-cli.js'][153] = 0;
  _$jscoverage['modules/sync-cli.js'][160] = 0;
  _$jscoverage['modules/sync-cli.js'][161] = 0;
  _$jscoverage['modules/sync-cli.js'][164] = 0;
  _$jscoverage['modules/sync-cli.js'][165] = 0;
  _$jscoverage['modules/sync-cli.js'][166] = 0;
  _$jscoverage['modules/sync-cli.js'][167] = 0;
  _$jscoverage['modules/sync-cli.js'][170] = 0;
  _$jscoverage['modules/sync-cli.js'][174] = 0;
  _$jscoverage['modules/sync-cli.js'][175] = 0;
  _$jscoverage['modules/sync-cli.js'][177] = 0;
  _$jscoverage['modules/sync-cli.js'][178] = 0;
  _$jscoverage['modules/sync-cli.js'][180] = 0;
  _$jscoverage['modules/sync-cli.js'][183] = 0;
  _$jscoverage['modules/sync-cli.js'][188] = 0;
  _$jscoverage['modules/sync-cli.js'][192] = 0;
  _$jscoverage['modules/sync-cli.js'][193] = 0;
  _$jscoverage['modules/sync-cli.js'][194] = 0;
  _$jscoverage['modules/sync-cli.js'][195] = 0;
  _$jscoverage['modules/sync-cli.js'][198] = 0;
  _$jscoverage['modules/sync-cli.js'][199] = 0;
  _$jscoverage['modules/sync-cli.js'][202] = 0;
  _$jscoverage['modules/sync-cli.js'][207] = 0;
  _$jscoverage['modules/sync-cli.js'][211] = 0;
  _$jscoverage['modules/sync-cli.js'][215] = 0;
  _$jscoverage['modules/sync-cli.js'][216] = 0;
  _$jscoverage['modules/sync-cli.js'][217] = 0;
  _$jscoverage['modules/sync-cli.js'][218] = 0;
  _$jscoverage['modules/sync-cli.js'][220] = 0;
  _$jscoverage['modules/sync-cli.js'][222] = 0;
  _$jscoverage['modules/sync-cli.js'][227] = 0;
  _$jscoverage['modules/sync-cli.js'][228] = 0;
  _$jscoverage['modules/sync-cli.js'][229] = 0;
  _$jscoverage['modules/sync-cli.js'][234] = 0;
  _$jscoverage['modules/sync-cli.js'][235] = 0;
  _$jscoverage['modules/sync-cli.js'][246] = 0;
  _$jscoverage['modules/sync-cli.js'][247] = 0;
  _$jscoverage['modules/sync-cli.js'][261] = 0;
  _$jscoverage['modules/sync-cli.js'][264] = 0;
  _$jscoverage['modules/sync-cli.js'][265] = 0;
  _$jscoverage['modules/sync-cli.js'][269] = 0;
  _$jscoverage['modules/sync-cli.js'][271] = 0;
  _$jscoverage['modules/sync-cli.js'][272] = 0;
  _$jscoverage['modules/sync-cli.js'][273] = 0;
  _$jscoverage['modules/sync-cli.js'][274] = 0;
  _$jscoverage['modules/sync-cli.js'][279] = 0;
  _$jscoverage['modules/sync-cli.js'][284] = 0;
  _$jscoverage['modules/sync-cli.js'][285] = 0;
  _$jscoverage['modules/sync-cli.js'][286] = 0;
  _$jscoverage['modules/sync-cli.js'][293] = 0;
  _$jscoverage['modules/sync-cli.js'][294] = 0;
  _$jscoverage['modules/sync-cli.js'][301] = 0;
  _$jscoverage['modules/sync-cli.js'][303] = 0;
  _$jscoverage['modules/sync-cli.js'][304] = 0;
  _$jscoverage['modules/sync-cli.js'][306] = 0;
  _$jscoverage['modules/sync-cli.js'][311] = 0;
  _$jscoverage['modules/sync-cli.js'][313] = 0;
  _$jscoverage['modules/sync-cli.js'][314] = 0;
  _$jscoverage['modules/sync-cli.js'][316] = 0;
  _$jscoverage['modules/sync-cli.js'][321] = 0;
  _$jscoverage['modules/sync-cli.js'][323] = 0;
  _$jscoverage['modules/sync-cli.js'][324] = 0;
  _$jscoverage['modules/sync-cli.js'][325] = 0;
  _$jscoverage['modules/sync-cli.js'][326] = 0;
  _$jscoverage['modules/sync-cli.js'][327] = 0;
  _$jscoverage['modules/sync-cli.js'][330] = 0;
  _$jscoverage['modules/sync-cli.js'][331] = 0;
  _$jscoverage['modules/sync-cli.js'][337] = 0;
  _$jscoverage['modules/sync-cli.js'][339] = 0;
  _$jscoverage['modules/sync-cli.js'][340] = 0;
  _$jscoverage['modules/sync-cli.js'][342] = 0;
  _$jscoverage['modules/sync-cli.js'][347] = 0;
  _$jscoverage['modules/sync-cli.js'][349] = 0;
  _$jscoverage['modules/sync-cli.js'][350] = 0;
  _$jscoverage['modules/sync-cli.js'][351] = 0;
  _$jscoverage['modules/sync-cli.js'][352] = 0;
  _$jscoverage['modules/sync-cli.js'][353] = 0;
  _$jscoverage['modules/sync-cli.js'][356] = 0;
  _$jscoverage['modules/sync-cli.js'][357] = 0;
  _$jscoverage['modules/sync-cli.js'][363] = 0;
  _$jscoverage['modules/sync-cli.js'][365] = 0;
  _$jscoverage['modules/sync-cli.js'][366] = 0;
  _$jscoverage['modules/sync-cli.js'][368] = 0;
  _$jscoverage['modules/sync-cli.js'][373] = 0;
  _$jscoverage['modules/sync-cli.js'][375] = 0;
  _$jscoverage['modules/sync-cli.js'][376] = 0;
  _$jscoverage['modules/sync-cli.js'][377] = 0;
  _$jscoverage['modules/sync-cli.js'][378] = 0;
  _$jscoverage['modules/sync-cli.js'][379] = 0;
  _$jscoverage['modules/sync-cli.js'][380] = 0;
  _$jscoverage['modules/sync-cli.js'][383] = 0;
  _$jscoverage['modules/sync-cli.js'][384] = 0;
  _$jscoverage['modules/sync-cli.js'][390] = 0;
  _$jscoverage['modules/sync-cli.js'][391] = 0;
  _$jscoverage['modules/sync-cli.js'][392] = 0;
  _$jscoverage['modules/sync-cli.js'][398] = 0;
  _$jscoverage['modules/sync-cli.js'][399] = 0;
  _$jscoverage['modules/sync-cli.js'][400] = 0;
  _$jscoverage['modules/sync-cli.js'][406] = 0;
  _$jscoverage['modules/sync-cli.js'][408] = 0;
  _$jscoverage['modules/sync-cli.js'][409] = 0;
  _$jscoverage['modules/sync-cli.js'][410] = 0;
  _$jscoverage['modules/sync-cli.js'][411] = 0;
  _$jscoverage['modules/sync-cli.js'][412] = 0;
  _$jscoverage['modules/sync-cli.js'][415] = 0;
  _$jscoverage['modules/sync-cli.js'][416] = 0;
  _$jscoverage['modules/sync-cli.js'][422] = 0;
  _$jscoverage['modules/sync-cli.js'][424] = 0;
  _$jscoverage['modules/sync-cli.js'][425] = 0;
  _$jscoverage['modules/sync-cli.js'][426] = 0;
  _$jscoverage['modules/sync-cli.js'][427] = 0;
  _$jscoverage['modules/sync-cli.js'][428] = 0;
  _$jscoverage['modules/sync-cli.js'][431] = 0;
  _$jscoverage['modules/sync-cli.js'][432] = 0;
  _$jscoverage['modules/sync-cli.js'][438] = 0;
  _$jscoverage['modules/sync-cli.js'][439] = 0;
  _$jscoverage['modules/sync-cli.js'][442] = 0;
  _$jscoverage['modules/sync-cli.js'][444] = 0;
  _$jscoverage['modules/sync-cli.js'][445] = 0;
  _$jscoverage['modules/sync-cli.js'][451] = 0;
  _$jscoverage['modules/sync-cli.js'][456] = 0;
  _$jscoverage['modules/sync-cli.js'][458] = 0;
  _$jscoverage['modules/sync-cli.js'][459] = 0;
  _$jscoverage['modules/sync-cli.js'][461] = 0;
  _$jscoverage['modules/sync-cli.js'][464] = 0;
  _$jscoverage['modules/sync-cli.js'][468] = 0;
  _$jscoverage['modules/sync-cli.js'][469] = 0;
  _$jscoverage['modules/sync-cli.js'][473] = 0;
  _$jscoverage['modules/sync-cli.js'][474] = 0;
  _$jscoverage['modules/sync-cli.js'][475] = 0;
  _$jscoverage['modules/sync-cli.js'][479] = 0;
  _$jscoverage['modules/sync-cli.js'][480] = 0;
  _$jscoverage['modules/sync-cli.js'][482] = 0;
  _$jscoverage['modules/sync-cli.js'][484] = 0;
  _$jscoverage['modules/sync-cli.js'][486] = 0;
  _$jscoverage['modules/sync-cli.js'][488] = 0;
  _$jscoverage['modules/sync-cli.js'][489] = 0;
  _$jscoverage['modules/sync-cli.js'][491] = 0;
  _$jscoverage['modules/sync-cli.js'][492] = 0;
  _$jscoverage['modules/sync-cli.js'][494] = 0;
  _$jscoverage['modules/sync-cli.js'][496] = 0;
  _$jscoverage['modules/sync-cli.js'][500] = 0;
  _$jscoverage['modules/sync-cli.js'][501] = 0;
  _$jscoverage['modules/sync-cli.js'][502] = 0;
  _$jscoverage['modules/sync-cli.js'][503] = 0;
  _$jscoverage['modules/sync-cli.js'][504] = 0;
  _$jscoverage['modules/sync-cli.js'][505] = 0;
  _$jscoverage['modules/sync-cli.js'][506] = 0;
  _$jscoverage['modules/sync-cli.js'][507] = 0;
  _$jscoverage['modules/sync-cli.js'][508] = 0;
  _$jscoverage['modules/sync-cli.js'][510] = 0;
  _$jscoverage['modules/sync-cli.js'][511] = 0;
  _$jscoverage['modules/sync-cli.js'][512] = 0;
  _$jscoverage['modules/sync-cli.js'][513] = 0;
  _$jscoverage['modules/sync-cli.js'][514] = 0;
  _$jscoverage['modules/sync-cli.js'][516] = 0;
  _$jscoverage['modules/sync-cli.js'][522] = 0;
  _$jscoverage['modules/sync-cli.js'][525] = 0;
  _$jscoverage['modules/sync-cli.js'][526] = 0;
  _$jscoverage['modules/sync-cli.js'][527] = 0;
  _$jscoverage['modules/sync-cli.js'][528] = 0;
  _$jscoverage['modules/sync-cli.js'][530] = 0;
  _$jscoverage['modules/sync-cli.js'][531] = 0;
  _$jscoverage['modules/sync-cli.js'][532] = 0;
  _$jscoverage['modules/sync-cli.js'][534] = 0;
  _$jscoverage['modules/sync-cli.js'][536] = 0;
  _$jscoverage['modules/sync-cli.js'][537] = 0;
  _$jscoverage['modules/sync-cli.js'][538] = 0;
  _$jscoverage['modules/sync-cli.js'][539] = 0;
  _$jscoverage['modules/sync-cli.js'][540] = 0;
  _$jscoverage['modules/sync-cli.js'][541] = 0;
  _$jscoverage['modules/sync-cli.js'][543] = 0;
  _$jscoverage['modules/sync-cli.js'][544] = 0;
  _$jscoverage['modules/sync-cli.js'][546] = 0;
  _$jscoverage['modules/sync-cli.js'][547] = 0;
  _$jscoverage['modules/sync-cli.js'][548] = 0;
  _$jscoverage['modules/sync-cli.js'][552] = 0;
  _$jscoverage['modules/sync-cli.js'][553] = 0;
  _$jscoverage['modules/sync-cli.js'][554] = 0;
  _$jscoverage['modules/sync-cli.js'][555] = 0;
  _$jscoverage['modules/sync-cli.js'][558] = 0;
  _$jscoverage['modules/sync-cli.js'][560] = 0;
  _$jscoverage['modules/sync-cli.js'][561] = 0;
  _$jscoverage['modules/sync-cli.js'][563] = 0;
  _$jscoverage['modules/sync-cli.js'][564] = 0;
  _$jscoverage['modules/sync-cli.js'][568] = 0;
  _$jscoverage['modules/sync-cli.js'][570] = 0;
  _$jscoverage['modules/sync-cli.js'][571] = 0;
  _$jscoverage['modules/sync-cli.js'][572] = 0;
  _$jscoverage['modules/sync-cli.js'][573] = 0;
  _$jscoverage['modules/sync-cli.js'][574] = 0;
  _$jscoverage['modules/sync-cli.js'][575] = 0;
  _$jscoverage['modules/sync-cli.js'][576] = 0;
  _$jscoverage['modules/sync-cli.js'][577] = 0;
  _$jscoverage['modules/sync-cli.js'][584] = 0;
  _$jscoverage['modules/sync-cli.js'][587] = 0;
  _$jscoverage['modules/sync-cli.js'][590] = 0;
  _$jscoverage['modules/sync-cli.js'][593] = 0;
  _$jscoverage['modules/sync-cli.js'][596] = 0;
  _$jscoverage['modules/sync-cli.js'][600] = 0;
  _$jscoverage['modules/sync-cli.js'][602] = 0;
  _$jscoverage['modules/sync-cli.js'][603] = 0;
  _$jscoverage['modules/sync-cli.js'][605] = 0;
  _$jscoverage['modules/sync-cli.js'][608] = 0;
  _$jscoverage['modules/sync-cli.js'][609] = 0;
  _$jscoverage['modules/sync-cli.js'][610] = 0;
  _$jscoverage['modules/sync-cli.js'][611] = 0;
  _$jscoverage['modules/sync-cli.js'][612] = 0;
  _$jscoverage['modules/sync-cli.js'][613] = 0;
  _$jscoverage['modules/sync-cli.js'][616] = 0;
  _$jscoverage['modules/sync-cli.js'][617] = 0;
  _$jscoverage['modules/sync-cli.js'][619] = 0;
  _$jscoverage['modules/sync-cli.js'][621] = 0;
  _$jscoverage['modules/sync-cli.js'][622] = 0;
  _$jscoverage['modules/sync-cli.js'][628] = 0;
  _$jscoverage['modules/sync-cli.js'][629] = 0;
  _$jscoverage['modules/sync-cli.js'][630] = 0;
  _$jscoverage['modules/sync-cli.js'][634] = 0;
  _$jscoverage['modules/sync-cli.js'][635] = 0;
  _$jscoverage['modules/sync-cli.js'][645] = 0;
  _$jscoverage['modules/sync-cli.js'][647] = 0;
  _$jscoverage['modules/sync-cli.js'][649] = 0;
  _$jscoverage['modules/sync-cli.js'][650] = 0;
  _$jscoverage['modules/sync-cli.js'][651] = 0;
  _$jscoverage['modules/sync-cli.js'][652] = 0;
  _$jscoverage['modules/sync-cli.js'][653] = 0;
  _$jscoverage['modules/sync-cli.js'][656] = 0;
  _$jscoverage['modules/sync-cli.js'][658] = 0;
  _$jscoverage['modules/sync-cli.js'][659] = 0;
  _$jscoverage['modules/sync-cli.js'][660] = 0;
  _$jscoverage['modules/sync-cli.js'][661] = 0;
  _$jscoverage['modules/sync-cli.js'][663] = 0;
  _$jscoverage['modules/sync-cli.js'][665] = 0;
  _$jscoverage['modules/sync-cli.js'][669] = 0;
  _$jscoverage['modules/sync-cli.js'][671] = 0;
  _$jscoverage['modules/sync-cli.js'][672] = 0;
  _$jscoverage['modules/sync-cli.js'][673] = 0;
  _$jscoverage['modules/sync-cli.js'][674] = 0;
  _$jscoverage['modules/sync-cli.js'][677] = 0;
  _$jscoverage['modules/sync-cli.js'][678] = 0;
  _$jscoverage['modules/sync-cli.js'][679] = 0;
  _$jscoverage['modules/sync-cli.js'][680] = 0;
  _$jscoverage['modules/sync-cli.js'][681] = 0;
  _$jscoverage['modules/sync-cli.js'][684] = 0;
  _$jscoverage['modules/sync-cli.js'][685] = 0;
  _$jscoverage['modules/sync-cli.js'][686] = 0;
  _$jscoverage['modules/sync-cli.js'][687] = 0;
  _$jscoverage['modules/sync-cli.js'][691] = 0;
  _$jscoverage['modules/sync-cli.js'][693] = 0;
  _$jscoverage['modules/sync-cli.js'][694] = 0;
  _$jscoverage['modules/sync-cli.js'][695] = 0;
  _$jscoverage['modules/sync-cli.js'][697] = 0;
  _$jscoverage['modules/sync-cli.js'][699] = 0;
  _$jscoverage['modules/sync-cli.js'][700] = 0;
  _$jscoverage['modules/sync-cli.js'][707] = 0;
  _$jscoverage['modules/sync-cli.js'][708] = 0;
  _$jscoverage['modules/sync-cli.js'][709] = 0;
  _$jscoverage['modules/sync-cli.js'][710] = 0;
  _$jscoverage['modules/sync-cli.js'][711] = 0;
  _$jscoverage['modules/sync-cli.js'][716] = 0;
  _$jscoverage['modules/sync-cli.js'][717] = 0;
  _$jscoverage['modules/sync-cli.js'][718] = 0;
  _$jscoverage['modules/sync-cli.js'][720] = 0;
  _$jscoverage['modules/sync-cli.js'][722] = 0;
  _$jscoverage['modules/sync-cli.js'][723] = 0;
  _$jscoverage['modules/sync-cli.js'][724] = 0;
  _$jscoverage['modules/sync-cli.js'][725] = 0;
  _$jscoverage['modules/sync-cli.js'][727] = 0;
  _$jscoverage['modules/sync-cli.js'][728] = 0;
  _$jscoverage['modules/sync-cli.js'][729] = 0;
  _$jscoverage['modules/sync-cli.js'][730] = 0;
  _$jscoverage['modules/sync-cli.js'][731] = 0;
  _$jscoverage['modules/sync-cli.js'][733] = 0;
  _$jscoverage['modules/sync-cli.js'][737] = 0;
  _$jscoverage['modules/sync-cli.js'][738] = 0;
  _$jscoverage['modules/sync-cli.js'][741] = 0;
  _$jscoverage['modules/sync-cli.js'][743] = 0;
  _$jscoverage['modules/sync-cli.js'][748] = 0;
  _$jscoverage['modules/sync-cli.js'][756] = 0;
  _$jscoverage['modules/sync-cli.js'][757] = 0;
  _$jscoverage['modules/sync-cli.js'][759] = 0;
  _$jscoverage['modules/sync-cli.js'][761] = 0;
  _$jscoverage['modules/sync-cli.js'][769] = 0;
  _$jscoverage['modules/sync-cli.js'][770] = 0;
  _$jscoverage['modules/sync-cli.js'][771] = 0;
  _$jscoverage['modules/sync-cli.js'][773] = 0;
  _$jscoverage['modules/sync-cli.js'][774] = 0;
  _$jscoverage['modules/sync-cli.js'][777] = 0;
  _$jscoverage['modules/sync-cli.js'][778] = 0;
  _$jscoverage['modules/sync-cli.js'][780] = 0;
  _$jscoverage['modules/sync-cli.js'][782] = 0;
  _$jscoverage['modules/sync-cli.js'][787] = 0;
  _$jscoverage['modules/sync-cli.js'][788] = 0;
  _$jscoverage['modules/sync-cli.js'][792] = 0;
  _$jscoverage['modules/sync-cli.js'][794] = 0;
  _$jscoverage['modules/sync-cli.js'][797] = 0;
  _$jscoverage['modules/sync-cli.js'][802] = 0;
  _$jscoverage['modules/sync-cli.js'][804] = 0;
  _$jscoverage['modules/sync-cli.js'][810] = 0;
  _$jscoverage['modules/sync-cli.js'][813] = 0;
  _$jscoverage['modules/sync-cli.js'][814] = 0;
  _$jscoverage['modules/sync-cli.js'][819] = 0;
  _$jscoverage['modules/sync-cli.js'][821] = 0;
  _$jscoverage['modules/sync-cli.js'][822] = 0;
  _$jscoverage['modules/sync-cli.js'][823] = 0;
  _$jscoverage['modules/sync-cli.js'][825] = 0;
  _$jscoverage['modules/sync-cli.js'][827] = 0;
  _$jscoverage['modules/sync-cli.js'][828] = 0;
  _$jscoverage['modules/sync-cli.js'][830] = 0;
  _$jscoverage['modules/sync-cli.js'][838] = 0;
  _$jscoverage['modules/sync-cli.js'][840] = 0;
  _$jscoverage['modules/sync-cli.js'][841] = 0;
  _$jscoverage['modules/sync-cli.js'][842] = 0;
  _$jscoverage['modules/sync-cli.js'][845] = 0;
  _$jscoverage['modules/sync-cli.js'][846] = 0;
  _$jscoverage['modules/sync-cli.js'][847] = 0;
  _$jscoverage['modules/sync-cli.js'][848] = 0;
  _$jscoverage['modules/sync-cli.js'][849] = 0;
  _$jscoverage['modules/sync-cli.js'][853] = 0;
  _$jscoverage['modules/sync-cli.js'][854] = 0;
  _$jscoverage['modules/sync-cli.js'][855] = 0;
  _$jscoverage['modules/sync-cli.js'][856] = 0;
  _$jscoverage['modules/sync-cli.js'][859] = 0;
  _$jscoverage['modules/sync-cli.js'][867] = 0;
  _$jscoverage['modules/sync-cli.js'][868] = 0;
  _$jscoverage['modules/sync-cli.js'][869] = 0;
  _$jscoverage['modules/sync-cli.js'][871] = 0;
  _$jscoverage['modules/sync-cli.js'][872] = 0;
  _$jscoverage['modules/sync-cli.js'][874] = 0;
  _$jscoverage['modules/sync-cli.js'][877] = 0;
  _$jscoverage['modules/sync-cli.js'][878] = 0;
  _$jscoverage['modules/sync-cli.js'][879] = 0;
  _$jscoverage['modules/sync-cli.js'][882] = 0;
  _$jscoverage['modules/sync-cli.js'][885] = 0;
  _$jscoverage['modules/sync-cli.js'][886] = 0;
  _$jscoverage['modules/sync-cli.js'][889] = 0;
  _$jscoverage['modules/sync-cli.js'][892] = 0;
  _$jscoverage['modules/sync-cli.js'][893] = 0;
  _$jscoverage['modules/sync-cli.js'][894] = 0;
  _$jscoverage['modules/sync-cli.js'][895] = 0;
  _$jscoverage['modules/sync-cli.js'][897] = 0;
  _$jscoverage['modules/sync-cli.js'][898] = 0;
  _$jscoverage['modules/sync-cli.js'][899] = 0;
  _$jscoverage['modules/sync-cli.js'][900] = 0;
  _$jscoverage['modules/sync-cli.js'][901] = 0;
  _$jscoverage['modules/sync-cli.js'][902] = 0;
  _$jscoverage['modules/sync-cli.js'][905] = 0;
  _$jscoverage['modules/sync-cli.js'][906] = 0;
  _$jscoverage['modules/sync-cli.js'][907] = 0;
  _$jscoverage['modules/sync-cli.js'][910] = 0;
  _$jscoverage['modules/sync-cli.js'][914] = 0;
  _$jscoverage['modules/sync-cli.js'][915] = 0;
  _$jscoverage['modules/sync-cli.js'][916] = 0;
  _$jscoverage['modules/sync-cli.js'][923] = 0;
  _$jscoverage['modules/sync-cli.js'][924] = 0;
  _$jscoverage['modules/sync-cli.js'][925] = 0;
  _$jscoverage['modules/sync-cli.js'][926] = 0;
  _$jscoverage['modules/sync-cli.js'][928] = 0;
  _$jscoverage['modules/sync-cli.js'][929] = 0;
  _$jscoverage['modules/sync-cli.js'][930] = 0;
  _$jscoverage['modules/sync-cli.js'][931] = 0;
  _$jscoverage['modules/sync-cli.js'][932] = 0;
  _$jscoverage['modules/sync-cli.js'][933] = 0;
  _$jscoverage['modules/sync-cli.js'][934] = 0;
  _$jscoverage['modules/sync-cli.js'][937] = 0;
  _$jscoverage['modules/sync-cli.js'][938] = 0;
  _$jscoverage['modules/sync-cli.js'][940] = 0;
  _$jscoverage['modules/sync-cli.js'][944] = 0;
  _$jscoverage['modules/sync-cli.js'][945] = 0;
  _$jscoverage['modules/sync-cli.js'][946] = 0;
  _$jscoverage['modules/sync-cli.js'][947] = 0;
  _$jscoverage['modules/sync-cli.js'][950] = 0;
  _$jscoverage['modules/sync-cli.js'][951] = 0;
  _$jscoverage['modules/sync-cli.js'][952] = 0;
  _$jscoverage['modules/sync-cli.js'][956] = 0;
  _$jscoverage['modules/sync-cli.js'][960] = 0;
  _$jscoverage['modules/sync-cli.js'][961] = 0;
  _$jscoverage['modules/sync-cli.js'][962] = 0;
  _$jscoverage['modules/sync-cli.js'][963] = 0;
  _$jscoverage['modules/sync-cli.js'][964] = 0;
  _$jscoverage['modules/sync-cli.js'][969] = 0;
  _$jscoverage['modules/sync-cli.js'][970] = 0;
  _$jscoverage['modules/sync-cli.js'][972] = 0;
  _$jscoverage['modules/sync-cli.js'][973] = 0;
  _$jscoverage['modules/sync-cli.js'][974] = 0;
  _$jscoverage['modules/sync-cli.js'][975] = 0;
  _$jscoverage['modules/sync-cli.js'][977] = 0;
  _$jscoverage['modules/sync-cli.js'][979] = 0;
  _$jscoverage['modules/sync-cli.js'][981] = 0;
  _$jscoverage['modules/sync-cli.js'][982] = 0;
  _$jscoverage['modules/sync-cli.js'][985] = 0;
  _$jscoverage['modules/sync-cli.js'][986] = 0;
  _$jscoverage['modules/sync-cli.js'][987] = 0;
  _$jscoverage['modules/sync-cli.js'][988] = 0;
  _$jscoverage['modules/sync-cli.js'][989] = 0;
  _$jscoverage['modules/sync-cli.js'][993] = 0;
  _$jscoverage['modules/sync-cli.js'][994] = 0;
  _$jscoverage['modules/sync-cli.js'][995] = 0;
  _$jscoverage['modules/sync-cli.js'][996] = 0;
  _$jscoverage['modules/sync-cli.js'][998] = 0;
  _$jscoverage['modules/sync-cli.js'][999] = 0;
  _$jscoverage['modules/sync-cli.js'][1000] = 0;
  _$jscoverage['modules/sync-cli.js'][1001] = 0;
  _$jscoverage['modules/sync-cli.js'][1002] = 0;
  _$jscoverage['modules/sync-cli.js'][1003] = 0;
  _$jscoverage['modules/sync-cli.js'][1004] = 0;
  _$jscoverage['modules/sync-cli.js'][1011] = 0;
  _$jscoverage['modules/sync-cli.js'][1012] = 0;
  _$jscoverage['modules/sync-cli.js'][1013] = 0;
  _$jscoverage['modules/sync-cli.js'][1014] = 0;
  _$jscoverage['modules/sync-cli.js'][1015] = 0;
  _$jscoverage['modules/sync-cli.js'][1016] = 0;
  _$jscoverage['modules/sync-cli.js'][1019] = 0;
  _$jscoverage['modules/sync-cli.js'][1020] = 0;
  _$jscoverage['modules/sync-cli.js'][1021] = 0;
  _$jscoverage['modules/sync-cli.js'][1022] = 0;
  _$jscoverage['modules/sync-cli.js'][1033] = 0;
  _$jscoverage['modules/sync-cli.js'][1035] = 0;
  _$jscoverage['modules/sync-cli.js'][1036] = 0;
  _$jscoverage['modules/sync-cli.js'][1037] = 0;
  _$jscoverage['modules/sync-cli.js'][1038] = 0;
  _$jscoverage['modules/sync-cli.js'][1040] = 0;
  _$jscoverage['modules/sync-cli.js'][1041] = 0;
  _$jscoverage['modules/sync-cli.js'][1043] = 0;
  _$jscoverage['modules/sync-cli.js'][1045] = 0;
  _$jscoverage['modules/sync-cli.js'][1046] = 0;
  _$jscoverage['modules/sync-cli.js'][1048] = 0;
  _$jscoverage['modules/sync-cli.js'][1050] = 0;
  _$jscoverage['modules/sync-cli.js'][1051] = 0;
  _$jscoverage['modules/sync-cli.js'][1053] = 0;
  _$jscoverage['modules/sync-cli.js'][1055] = 0;
  _$jscoverage['modules/sync-cli.js'][1057] = 0;
  _$jscoverage['modules/sync-cli.js'][1059] = 0;
  _$jscoverage['modules/sync-cli.js'][1060] = 0;
  _$jscoverage['modules/sync-cli.js'][1064] = 0;
  _$jscoverage['modules/sync-cli.js'][1074] = 0;
  _$jscoverage['modules/sync-cli.js'][1076] = 0;
  _$jscoverage['modules/sync-cli.js'][1077] = 0;
  _$jscoverage['modules/sync-cli.js'][1078] = 0;
  _$jscoverage['modules/sync-cli.js'][1079] = 0;
  _$jscoverage['modules/sync-cli.js'][1081] = 0;
  _$jscoverage['modules/sync-cli.js'][1082] = 0;
  _$jscoverage['modules/sync-cli.js'][1083] = 0;
  _$jscoverage['modules/sync-cli.js'][1084] = 0;
  _$jscoverage['modules/sync-cli.js'][1086] = 0;
  _$jscoverage['modules/sync-cli.js'][1087] = 0;
  _$jscoverage['modules/sync-cli.js'][1089] = 0;
  _$jscoverage['modules/sync-cli.js'][1091] = 0;
  _$jscoverage['modules/sync-cli.js'][1093] = 0;
  _$jscoverage['modules/sync-cli.js'][1095] = 0;
  _$jscoverage['modules/sync-cli.js'][1096] = 0;
  _$jscoverage['modules/sync-cli.js'][1100] = 0;
  _$jscoverage['modules/sync-cli.js'][1109] = 0;
  _$jscoverage['modules/sync-cli.js'][1115] = 0;
  _$jscoverage['modules/sync-cli.js'][1116] = 0;
  _$jscoverage['modules/sync-cli.js'][1117] = 0;
  _$jscoverage['modules/sync-cli.js'][1118] = 0;
  _$jscoverage['modules/sync-cli.js'][1121] = 0;
  _$jscoverage['modules/sync-cli.js'][1122] = 0;
  _$jscoverage['modules/sync-cli.js'][1123] = 0;
  _$jscoverage['modules/sync-cli.js'][1124] = 0;
  _$jscoverage['modules/sync-cli.js'][1126] = 0;
  _$jscoverage['modules/sync-cli.js'][1127] = 0;
  _$jscoverage['modules/sync-cli.js'][1128] = 0;
  _$jscoverage['modules/sync-cli.js'][1131] = 0;
  _$jscoverage['modules/sync-cli.js'][1132] = 0;
  _$jscoverage['modules/sync-cli.js'][1135] = 0;
  _$jscoverage['modules/sync-cli.js'][1137] = 0;
  _$jscoverage['modules/sync-cli.js'][1139] = 0;
  _$jscoverage['modules/sync-cli.js'][1141] = 0;
  _$jscoverage['modules/sync-cli.js'][1142] = 0;
  _$jscoverage['modules/sync-cli.js'][1143] = 0;
  _$jscoverage['modules/sync-cli.js'][1145] = 0;
  _$jscoverage['modules/sync-cli.js'][1146] = 0;
  _$jscoverage['modules/sync-cli.js'][1147] = 0;
  _$jscoverage['modules/sync-cli.js'][1154] = 0;
  _$jscoverage['modules/sync-cli.js'][1155] = 0;
  _$jscoverage['modules/sync-cli.js'][1160] = 0;
  _$jscoverage['modules/sync-cli.js'][1161] = 0;
  _$jscoverage['modules/sync-cli.js'][1164] = 0;
  _$jscoverage['modules/sync-cli.js'][1171] = 0;
  _$jscoverage['modules/sync-cli.js'][1172] = 0;
  _$jscoverage['modules/sync-cli.js'][1175] = 0;
  _$jscoverage['modules/sync-cli.js'][1182] = 0;
  _$jscoverage['modules/sync-cli.js'][1183] = 0;
  _$jscoverage['modules/sync-cli.js'][1184] = 0;
  _$jscoverage['modules/sync-cli.js'][1186] = 0;
  _$jscoverage['modules/sync-cli.js'][1187] = 0;
  _$jscoverage['modules/sync-cli.js'][1188] = 0;
  _$jscoverage['modules/sync-cli.js'][1189] = 0;
  _$jscoverage['modules/sync-cli.js'][1190] = 0;
  _$jscoverage['modules/sync-cli.js'][1191] = 0;
  _$jscoverage['modules/sync-cli.js'][1192] = 0;
  _$jscoverage['modules/sync-cli.js'][1195] = 0;
  _$jscoverage['modules/sync-cli.js'][1196] = 0;
  _$jscoverage['modules/sync-cli.js'][1200] = 0;
  _$jscoverage['modules/sync-cli.js'][1201] = 0;
  _$jscoverage['modules/sync-cli.js'][1203] = 0;
  _$jscoverage['modules/sync-cli.js'][1204] = 0;
  _$jscoverage['modules/sync-cli.js'][1205] = 0;
  _$jscoverage['modules/sync-cli.js'][1206] = 0;
  _$jscoverage['modules/sync-cli.js'][1215] = 0;
  _$jscoverage['modules/sync-cli.js'][1216] = 0;
  _$jscoverage['modules/sync-cli.js'][1217] = 0;
  _$jscoverage['modules/sync-cli.js'][1218] = 0;
  _$jscoverage['modules/sync-cli.js'][1219] = 0;
  _$jscoverage['modules/sync-cli.js'][1220] = 0;
  _$jscoverage['modules/sync-cli.js'][1221] = 0;
  _$jscoverage['modules/sync-cli.js'][1222] = 0;
  _$jscoverage['modules/sync-cli.js'][1223] = 0;
  _$jscoverage['modules/sync-cli.js'][1224] = 0;
  _$jscoverage['modules/sync-cli.js'][1225] = 0;
  _$jscoverage['modules/sync-cli.js'][1226] = 0;
  _$jscoverage['modules/sync-cli.js'][1227] = 0;
  _$jscoverage['modules/sync-cli.js'][1228] = 0;
  _$jscoverage['modules/sync-cli.js'][1229] = 0;
  _$jscoverage['modules/sync-cli.js'][1240] = 0;
  _$jscoverage['modules/sync-cli.js'][1241] = 0;
  _$jscoverage['modules/sync-cli.js'][1242] = 0;
  _$jscoverage['modules/sync-cli.js'][1244] = 0;
  _$jscoverage['modules/sync-cli.js'][1245] = 0;
  _$jscoverage['modules/sync-cli.js'][1246] = 0;
  _$jscoverage['modules/sync-cli.js'][1247] = 0;
  _$jscoverage['modules/sync-cli.js'][1248] = 0;
  _$jscoverage['modules/sync-cli.js'][1250] = 0;
  _$jscoverage['modules/sync-cli.js'][1251] = 0;
  _$jscoverage['modules/sync-cli.js'][1252] = 0;
  _$jscoverage['modules/sync-cli.js'][1253] = 0;
  _$jscoverage['modules/sync-cli.js'][1260] = 0;
  _$jscoverage['modules/sync-cli.js'][1261] = 0;
  _$jscoverage['modules/sync-cli.js'][1262] = 0;
  _$jscoverage['modules/sync-cli.js'][1264] = 0;
  _$jscoverage['modules/sync-cli.js'][1265] = 0;
  _$jscoverage['modules/sync-cli.js'][1266] = 0;
  _$jscoverage['modules/sync-cli.js'][1267] = 0;
  _$jscoverage['modules/sync-cli.js'][1276] = 0;
  _$jscoverage['modules/sync-cli.js'][1277] = 0;
  _$jscoverage['modules/sync-cli.js'][1282] = 0;
  _$jscoverage['modules/sync-cli.js'][1283] = 0;
  _$jscoverage['modules/sync-cli.js'][1288] = 0;
}
_$jscoverage['modules/sync-cli.js'][1]++;
var JSON = require("JSON");
_$jscoverage['modules/sync-cli.js'][2]++;
var actAPI = require("./api_act");
_$jscoverage['modules/sync-cli.js'][3]++;
var cloudAPI = require("./api_cloud");
_$jscoverage['modules/sync-cli.js'][4]++;
var CryptoJS = require("../../libs/generated/crypto");
_$jscoverage['modules/sync-cli.js'][5]++;
var Lawnchair = require("../../libs/generated/lawnchair");
_$jscoverage['modules/sync-cli.js'][7]++;
var self = {defaults: {"sync_frequency": 10, "auto_sync_local_updates": true, "notify_client_storage_failed": true, "notify_sync_started": true, "notify_sync_complete": true, "notify_offline_update": true, "notify_collision_detected": true, "notify_remote_update_failed": true, "notify_local_update_applied": true, "notify_remote_update_applied": true, "notify_delta_received": true, "notify_record_delta_received": true, "notify_sync_failed": true, "do_console_log": false, "crashed_count_wait": 10, "resend_crashed_updates": true, "sync_active": true, "storage_strategy": "html5-filesystem", "file_system_quota": 61644800}, notifications: {"CLIENT_STORAGE_FAILED": "client_storage_failed", "SYNC_STARTED": "sync_started", "SYNC_COMPLETE": "sync_complete", "OFFLINE_UPDATE": "offline_update", "COLLISION_DETECTED": "collision_detected", "REMOTE_UPDATE_FAILED": "remote_update_failed", "REMOTE_UPDATE_APPLIED": "remote_update_applied", "LOCAL_UPDATE_APPLIED": "local_update_applied", "DELTA_RECEIVED": "delta_received", "RECORD_DELTA_RECEIVED": "record_delta_received", "SYNC_FAILED": "sync_failed"}, datasets: {}, config: undefined, notify_callback: undefined, hasCustomSync: undefined, init: (function (options) {
  _$jscoverage['modules/sync-cli.js'][87]++;
  self.consoleLog("sync - init called");
  _$jscoverage['modules/sync-cli.js'][89]++;
  self.config = JSON.parse(JSON.stringify(self.defaults));
  _$jscoverage['modules/sync-cli.js'][90]++;
  for (var i in options) {
    _$jscoverage['modules/sync-cli.js'][91]++;
    self.config[i] = options[i];
}
  _$jscoverage['modules/sync-cli.js'][94]++;
  self.datasetMonitor();
}), notify: (function (callback) {
  _$jscoverage['modules/sync-cli.js'][98]++;
  self.notify_callback = callback;
}), manage: (function (dataset_id, options, query_params, meta_data, cb) {
  _$jscoverage['modules/sync-cli.js'][102]++;
  self.consoleLog("manage - START");
  _$jscoverage['modules/sync-cli.js'][104]++;
  var options = options || {};
  _$jscoverage['modules/sync-cli.js'][106]++;
  var doManage = (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][107]++;
  self.consoleLog("doManage dataset :: initialised = " + dataset.initialised + " :: " + dataset_id + " :: " + JSON.stringify(options));
  _$jscoverage['modules/sync-cli.js'][109]++;
  var datasetConfig = self.setOptions(options);
  _$jscoverage['modules/sync-cli.js'][111]++;
  dataset.query_params = query_params || dataset.query_params || {};
  _$jscoverage['modules/sync-cli.js'][112]++;
  dataset.meta_data = meta_data || dataset.meta_data || {};
  _$jscoverage['modules/sync-cli.js'][113]++;
  dataset.config = datasetConfig;
  _$jscoverage['modules/sync-cli.js'][114]++;
  dataset.syncRunning = false;
  _$jscoverage['modules/sync-cli.js'][115]++;
  dataset.syncPending = true;
  _$jscoverage['modules/sync-cli.js'][116]++;
  dataset.initialised = true;
  _$jscoverage['modules/sync-cli.js'][117]++;
  dataset.meta = {};
  _$jscoverage['modules/sync-cli.js'][119]++;
  self.saveDataSet(dataset_id, (function () {
  _$jscoverage['modules/sync-cli.js'][121]++;
  if (cb) {
    _$jscoverage['modules/sync-cli.js'][122]++;
    cb();
  }
}));
});
  _$jscoverage['modules/sync-cli.js'][128]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][129]++;
  self.consoleLog("manage - dataset already loaded");
  _$jscoverage['modules/sync-cli.js'][130]++;
  doManage(dataset);
}), (function (err) {
  _$jscoverage['modules/sync-cli.js'][132]++;
  self.consoleLog("manage - dataset not loaded... trying to load");
  _$jscoverage['modules/sync-cli.js'][135]++;
  self.loadDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][136]++;
  self.consoleLog("manage - dataset loaded from local storage");
  _$jscoverage['modules/sync-cli.js'][141]++;
  self.doNotify(dataset_id, null, self.notifications.LOCAL_UPDATE_APPLIED, "load");
  _$jscoverage['modules/sync-cli.js'][144]++;
  doManage(dataset);
}), (function (err) {
  _$jscoverage['modules/sync-cli.js'][148]++;
  self.consoleLog("manage - Creating new dataset for id " + dataset_id);
  _$jscoverage['modules/sync-cli.js'][149]++;
  var dataset = {};
  _$jscoverage['modules/sync-cli.js'][150]++;
  dataset.data = {};
  _$jscoverage['modules/sync-cli.js'][151]++;
  dataset.pending = {};
  _$jscoverage['modules/sync-cli.js'][152]++;
  self.datasets[dataset_id] = dataset;
  _$jscoverage['modules/sync-cli.js'][153]++;
  doManage(dataset);
}));
}));
}), setOptions: (function (options) {
  _$jscoverage['modules/sync-cli.js'][160]++;
  if (! self.config) {
    _$jscoverage['modules/sync-cli.js'][161]++;
    self.config = JSON.parse(JSON.stringify(self.defaults));
  }
  _$jscoverage['modules/sync-cli.js'][164]++;
  var datasetConfig = JSON.parse(JSON.stringify(self.config));
  _$jscoverage['modules/sync-cli.js'][165]++;
  var optionsIn = JSON.parse(JSON.stringify(options));
  _$jscoverage['modules/sync-cli.js'][166]++;
  for (var k in optionsIn) {
    _$jscoverage['modules/sync-cli.js'][167]++;
    datasetConfig[k] = optionsIn[k];
}
  _$jscoverage['modules/sync-cli.js'][170]++;
  return datasetConfig;
}), list: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][174]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][175]++;
  if (dataset && dataset.data) {
    _$jscoverage['modules/sync-cli.js'][177]++;
    var res = JSON.parse(JSON.stringify(dataset.data));
    _$jscoverage['modules/sync-cli.js'][178]++;
    success(res);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][180]++;
    if (failure) {
      _$jscoverage['modules/sync-cli.js'][180]++;
      failure("no_data");
    }
  }
}), (function (code, msg) {
  _$jscoverage['modules/sync-cli.js'][183]++;
  if (failure) {
    _$jscoverage['modules/sync-cli.js'][183]++;
    failure(code, msg);
  }
}));
}), create: (function (dataset_id, data, success, failure) {
  _$jscoverage['modules/sync-cli.js'][188]++;
  self.addPendingObj(dataset_id, null, data, "create", success, failure);
}), read: (function (dataset_id, uid, success, failure) {
  _$jscoverage['modules/sync-cli.js'][192]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][193]++;
  var rec = dataset.data[uid];
  _$jscoverage['modules/sync-cli.js'][194]++;
  if (! rec) {
    _$jscoverage['modules/sync-cli.js'][195]++;
    failure("unknown_uid");
  }
  else {
    _$jscoverage['modules/sync-cli.js'][198]++;
    var res = JSON.parse(JSON.stringify(rec));
    _$jscoverage['modules/sync-cli.js'][199]++;
    success(res);
  }
}), (function (code, msg) {
  _$jscoverage['modules/sync-cli.js'][202]++;
  if (failure) {
    _$jscoverage['modules/sync-cli.js'][202]++;
    failure(code, msg);
  }
}));
}), update: (function (dataset_id, uid, data, success, failure) {
  _$jscoverage['modules/sync-cli.js'][207]++;
  self.addPendingObj(dataset_id, uid, data, "update", success, failure);
}), "delete": (function (dataset_id, uid, success, failure) {
  _$jscoverage['modules/sync-cli.js'][211]++;
  self.addPendingObj(dataset_id, uid, null, "delete", success, failure);
}), getPending: (function (dataset_id, cb) {
  _$jscoverage['modules/sync-cli.js'][215]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][216]++;
  var res;
  _$jscoverage['modules/sync-cli.js'][217]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][218]++;
    res = dataset.pending;
  }
  _$jscoverage['modules/sync-cli.js'][220]++;
  cb(res);
}), (function (err, datatset_id) {
  _$jscoverage['modules/sync-cli.js'][222]++;
  self.consoleLog(err);
}));
}), clearPending: (function (dataset_id, cb) {
  _$jscoverage['modules/sync-cli.js'][227]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][228]++;
  dataset.pending = {};
  _$jscoverage['modules/sync-cli.js'][229]++;
  self.saveDataSet(dataset_id, cb);
}));
}), listCollisions: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][234]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][235]++;
  self.doCloudCall({"dataset_id": dataset_id, "req": {"fn": "listCollisions", "meta_data": dataset.meta_data}}, success, failure);
}), failure);
}), removeCollision: (function (dataset_id, colissionHash, success, failure) {
  _$jscoverage['modules/sync-cli.js'][246]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][247]++;
  self.doCloudCall({"dataset_id": dataset_id, "req": {"fn": "removeCollision", "hash": colissionHash, meta_data: dataset.meta_data}}, success, failure);
}));
}), isOnline: (function (callback) {
  _$jscoverage['modules/sync-cli.js'][261]++;
  var online = true;
  _$jscoverage['modules/sync-cli.js'][264]++;
  if (typeof navigator.onLine !== "undefined") {
    _$jscoverage['modules/sync-cli.js'][265]++;
    online = navigator.onLine;
  }
  _$jscoverage['modules/sync-cli.js'][269]++;
  if (online) {
    _$jscoverage['modules/sync-cli.js'][271]++;
    if (typeof navigator.network !== "undefined" && typeof navigator.network.connection !== "undefined") {
      _$jscoverage['modules/sync-cli.js'][272]++;
      var networkType = navigator.network.connection.type;
      _$jscoverage['modules/sync-cli.js'][273]++;
      if (networkType === "none" || networkType === null) {
        _$jscoverage['modules/sync-cli.js'][274]++;
        online = false;
      }
    }
  }
  _$jscoverage['modules/sync-cli.js'][279]++;
  return callback(online);
}), doNotify: (function (dataset_id, uid, code, message) {
  _$jscoverage['modules/sync-cli.js'][284]++;
  if (self.notify_callback) {
    _$jscoverage['modules/sync-cli.js'][285]++;
    if (self.config["notify_" + code]) {
      _$jscoverage['modules/sync-cli.js'][286]++;
      var notification = {"dataset_id": dataset_id, "uid": uid, "code": code, "message": message};
      _$jscoverage['modules/sync-cli.js'][293]++;
      setTimeout((function () {
  _$jscoverage['modules/sync-cli.js'][294]++;
  self.notify_callback(notification);
}), 0);
    }
  }
}), getDataSet: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][301]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][303]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][304]++;
    success(dataset);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][306]++;
    failure("unknown_dataset " + dataset_id, dataset_id);
  }
}), getQueryParams: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][311]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][313]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][314]++;
    success(dataset.query_params);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][316]++;
    failure("unknown_dataset " + dataset_id, dataset_id);
  }
}), setQueryParams: (function (dataset_id, queryParams, success, failure) {
  _$jscoverage['modules/sync-cli.js'][321]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][323]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][324]++;
    dataset.query_params = queryParams;
    _$jscoverage['modules/sync-cli.js'][325]++;
    self.saveDataSet(dataset_id);
    _$jscoverage['modules/sync-cli.js'][326]++;
    if (success) {
      _$jscoverage['modules/sync-cli.js'][327]++;
      success(dataset.query_params);
    }
  }
  else {
    _$jscoverage['modules/sync-cli.js'][330]++;
    if (failure) {
      _$jscoverage['modules/sync-cli.js'][331]++;
      failure("unknown_dataset " + dataset_id, dataset_id);
    }
  }
}), getMetaData: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][337]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][339]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][340]++;
    success(dataset.meta_data);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][342]++;
    failure("unknown_dataset " + dataset_id, dataset_id);
  }
}), setMetaData: (function (dataset_id, metaData, success, failure) {
  _$jscoverage['modules/sync-cli.js'][347]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][349]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][350]++;
    dataset.meta_data = metaData;
    _$jscoverage['modules/sync-cli.js'][351]++;
    self.saveDataSet(dataset_id);
    _$jscoverage['modules/sync-cli.js'][352]++;
    if (success) {
      _$jscoverage['modules/sync-cli.js'][353]++;
      success(dataset.meta_data);
    }
  }
  else {
    _$jscoverage['modules/sync-cli.js'][356]++;
    if (failure) {
      _$jscoverage['modules/sync-cli.js'][357]++;
      failure("unknown_dataset " + dataset_id, dataset_id);
    }
  }
}), getConfig: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][363]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][365]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][366]++;
    success(dataset.config);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][368]++;
    failure("unknown_dataset " + dataset_id, dataset_id);
  }
}), setConfig: (function (dataset_id, config, success, failure) {
  _$jscoverage['modules/sync-cli.js'][373]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][375]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][376]++;
    var fullConfig = self.setOptions(config);
    _$jscoverage['modules/sync-cli.js'][377]++;
    dataset.config = fullConfig;
    _$jscoverage['modules/sync-cli.js'][378]++;
    self.saveDataSet(dataset_id);
    _$jscoverage['modules/sync-cli.js'][379]++;
    if (success) {
      _$jscoverage['modules/sync-cli.js'][380]++;
      success(dataset.config);
    }
  }
  else {
    _$jscoverage['modules/sync-cli.js'][383]++;
    if (failure) {
      _$jscoverage['modules/sync-cli.js'][384]++;
      failure("unknown_dataset " + dataset_id, dataset_id);
    }
  }
}), stopSync: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][390]++;
  self.setConfig(dataset_id, {"sync_active": false}, (function () {
  _$jscoverage['modules/sync-cli.js'][391]++;
  if (success) {
    _$jscoverage['modules/sync-cli.js'][392]++;
    success();
  }
}), failure);
}), startSync: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][398]++;
  self.setConfig(dataset_id, {"sync_active": true}, (function () {
  _$jscoverage['modules/sync-cli.js'][399]++;
  if (success) {
    _$jscoverage['modules/sync-cli.js'][400]++;
    success();
  }
}), failure);
}), doSync: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][406]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][408]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][409]++;
    dataset.syncPending = true;
    _$jscoverage['modules/sync-cli.js'][410]++;
    self.saveDataSet(dataset_id);
    _$jscoverage['modules/sync-cli.js'][411]++;
    if (success) {
      _$jscoverage['modules/sync-cli.js'][412]++;
      success();
    }
  }
  else {
    _$jscoverage['modules/sync-cli.js'][415]++;
    if (failure) {
      _$jscoverage['modules/sync-cli.js'][416]++;
      failure("unknown_dataset " + dataset_id, dataset_id);
    }
  }
}), forceSync: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][422]++;
  var dataset = self.datasets[dataset_id];
  _$jscoverage['modules/sync-cli.js'][424]++;
  if (dataset) {
    _$jscoverage['modules/sync-cli.js'][425]++;
    dataset.syncForced = true;
    _$jscoverage['modules/sync-cli.js'][426]++;
    self.saveDataSet(dataset_id);
    _$jscoverage['modules/sync-cli.js'][427]++;
    if (success) {
      _$jscoverage['modules/sync-cli.js'][428]++;
      success();
    }
  }
  else {
    _$jscoverage['modules/sync-cli.js'][431]++;
    if (failure) {
      _$jscoverage['modules/sync-cli.js'][432]++;
      failure("unknown_dataset " + dataset_id, dataset_id);
    }
  }
}), sortObject: (function (object) {
  _$jscoverage['modules/sync-cli.js'][438]++;
  if (typeof object !== "object" || object === null) {
    _$jscoverage['modules/sync-cli.js'][439]++;
    return object;
  }
  _$jscoverage['modules/sync-cli.js'][442]++;
  var result = [];
  _$jscoverage['modules/sync-cli.js'][444]++;
  Object.keys(object).sort().forEach((function (key) {
  _$jscoverage['modules/sync-cli.js'][445]++;
  result.push({key: key, value: self.sortObject(object[key])});
}));
  _$jscoverage['modules/sync-cli.js'][451]++;
  return result;
}), sortedStringify: (function (obj) {
  _$jscoverage['modules/sync-cli.js'][456]++;
  var str = "";
  _$jscoverage['modules/sync-cli.js'][458]++;
  try {
    _$jscoverage['modules/sync-cli.js'][459]++;
    str = JSON.stringify(self.sortObject(obj));
  }
  catch (e) {
    _$jscoverage['modules/sync-cli.js'][461]++;
    console.error("Error stringifying sorted object:" + e);
  }
  _$jscoverage['modules/sync-cli.js'][464]++;
  return str;
}), generateHash: (function (object) {
  _$jscoverage['modules/sync-cli.js'][468]++;
  var hash = CryptoJS.SHA1(self.sortedStringify(object));
  _$jscoverage['modules/sync-cli.js'][469]++;
  return hash.toString();
}), addPendingObj: (function (dataset_id, uid, data, action, success, failure) {
  _$jscoverage['modules/sync-cli.js'][473]++;
  self.isOnline((function (online) {
  _$jscoverage['modules/sync-cli.js'][474]++;
  if (! online) {
    _$jscoverage['modules/sync-cli.js'][475]++;
    self.doNotify(dataset_id, uid, self.notifications.OFFLINE_UPDATE, action);
  }
}));
  _$jscoverage['modules/sync-cli.js'][479]++;
  function storePendingObject(obj) {
    _$jscoverage['modules/sync-cli.js'][480]++;
    obj.hash = self.generateHash(obj);
    _$jscoverage['modules/sync-cli.js'][482]++;
    self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][484]++;
  dataset.pending[obj.hash] = obj;
  _$jscoverage['modules/sync-cli.js'][486]++;
  self.updateDatasetFromLocal(dataset, obj);
  _$jscoverage['modules/sync-cli.js'][488]++;
  if (self.config.auto_sync_local_updates) {
    _$jscoverage['modules/sync-cli.js'][489]++;
    dataset.syncPending = true;
  }
  _$jscoverage['modules/sync-cli.js'][491]++;
  self.saveDataSet(dataset_id);
  _$jscoverage['modules/sync-cli.js'][492]++;
  self.doNotify(dataset_id, uid, self.notifications.LOCAL_UPDATE_APPLIED, action);
  _$jscoverage['modules/sync-cli.js'][494]++;
  success(obj);
}), (function (code, msg) {
  _$jscoverage['modules/sync-cli.js'][496]++;
  if (failure) {
    _$jscoverage['modules/sync-cli.js'][496]++;
    failure(code, msg);
  }
}));
}
  _$jscoverage['modules/sync-cli.js'][500]++;
  var pendingObj = {};
  _$jscoverage['modules/sync-cli.js'][501]++;
  pendingObj.inFlight = false;
  _$jscoverage['modules/sync-cli.js'][502]++;
  pendingObj.action = action;
  _$jscoverage['modules/sync-cli.js'][503]++;
  pendingObj.post = JSON.parse(JSON.stringify(data));
  _$jscoverage['modules/sync-cli.js'][504]++;
  pendingObj.postHash = self.generateHash(pendingObj.post);
  _$jscoverage['modules/sync-cli.js'][505]++;
  pendingObj.timestamp = new Date().getTime();
  _$jscoverage['modules/sync-cli.js'][506]++;
  if ("create" === action) {
    _$jscoverage['modules/sync-cli.js'][507]++;
    pendingObj.uid = pendingObj.postHash;
    _$jscoverage['modules/sync-cli.js'][508]++;
    storePendingObject(pendingObj);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][510]++;
    self.read(dataset_id, uid, (function (rec) {
  _$jscoverage['modules/sync-cli.js'][511]++;
  pendingObj.uid = uid;
  _$jscoverage['modules/sync-cli.js'][512]++;
  pendingObj.pre = rec.data;
  _$jscoverage['modules/sync-cli.js'][513]++;
  pendingObj.preHash = self.generateHash(rec.data);
  _$jscoverage['modules/sync-cli.js'][514]++;
  storePendingObject(pendingObj);
}), (function (code, msg) {
  _$jscoverage['modules/sync-cli.js'][516]++;
  failure(code, msg);
}));
  }
}), syncLoop: (function (dataset_id) {
  _$jscoverage['modules/sync-cli.js'][522]++;
  self.getDataSet(dataset_id, (function (dataSet) {
  _$jscoverage['modules/sync-cli.js'][525]++;
  dataSet.syncPending = false;
  _$jscoverage['modules/sync-cli.js'][526]++;
  dataSet.syncRunning = true;
  _$jscoverage['modules/sync-cli.js'][527]++;
  dataSet.syncLoopStart = new Date().getTime();
  _$jscoverage['modules/sync-cli.js'][528]++;
  self.doNotify(dataset_id, null, self.notifications.SYNC_STARTED, null);
  _$jscoverage['modules/sync-cli.js'][530]++;
  self.isOnline((function (online) {
  _$jscoverage['modules/sync-cli.js'][531]++;
  if (! online) {
    _$jscoverage['modules/sync-cli.js'][532]++;
    self.syncComplete(dataset_id, "offline", self.notifications.SYNC_FAILED);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][534]++;
    self.checkHasCustomSync(dataset_id, (function () {
  _$jscoverage['modules/sync-cli.js'][536]++;
  var syncLoopParams = {};
  _$jscoverage['modules/sync-cli.js'][537]++;
  syncLoopParams.fn = "sync";
  _$jscoverage['modules/sync-cli.js'][538]++;
  syncLoopParams.dataset_id = dataset_id;
  _$jscoverage['modules/sync-cli.js'][539]++;
  syncLoopParams.query_params = dataSet.query_params;
  _$jscoverage['modules/sync-cli.js'][540]++;
  syncLoopParams.config = dataSet.config;
  _$jscoverage['modules/sync-cli.js'][541]++;
  syncLoopParams.meta_data = dataSet.meta_data;
  _$jscoverage['modules/sync-cli.js'][543]++;
  syncLoopParams.dataset_hash = dataSet.hash;
  _$jscoverage['modules/sync-cli.js'][544]++;
  syncLoopParams.acknowledgements = dataSet.acknowledgements || [];
  _$jscoverage['modules/sync-cli.js'][546]++;
  var pending = dataSet.pending;
  _$jscoverage['modules/sync-cli.js'][547]++;
  var pendingArray = [];
  _$jscoverage['modules/sync-cli.js'][548]++;
  for (var i in pending) {
    _$jscoverage['modules/sync-cli.js'][552]++;
    if (! pending[i].inFlight && ! pending[i].crashed && ! pending[i].delayed) {
      _$jscoverage['modules/sync-cli.js'][553]++;
      pending[i].inFlight = true;
      _$jscoverage['modules/sync-cli.js'][554]++;
      pending[i].inFlightDate = new Date().getTime();
      _$jscoverage['modules/sync-cli.js'][555]++;
      pendingArray.push(pending[i]);
    }
}
  _$jscoverage['modules/sync-cli.js'][558]++;
  syncLoopParams.pending = pendingArray;
  _$jscoverage['modules/sync-cli.js'][560]++;
  if (pendingArray.length > 0) {
    _$jscoverage['modules/sync-cli.js'][561]++;
    self.consoleLog("Starting sync loop - global hash = " + dataSet.hash + " :: params = " + JSON.stringify(syncLoopParams, null, 2));
  }
  _$jscoverage['modules/sync-cli.js'][563]++;
  try {
    _$jscoverage['modules/sync-cli.js'][564]++;
    self.doCloudCall({"dataset_id": dataset_id, "req": syncLoopParams}, (function (res) {
  _$jscoverage['modules/sync-cli.js'][568]++;
  var rec;
  _$jscoverage['modules/sync-cli.js'][570]++;
  function processUpdates(updates, notification, acknowledgements) {
    _$jscoverage['modules/sync-cli.js'][571]++;
    if (updates) {
      _$jscoverage['modules/sync-cli.js'][572]++;
      for (var up in updates) {
        _$jscoverage['modules/sync-cli.js'][573]++;
        rec = updates[up];
        _$jscoverage['modules/sync-cli.js'][574]++;
        acknowledgements.push(rec);
        _$jscoverage['modules/sync-cli.js'][575]++;
        if (dataSet.pending[up] && dataSet.pending[up].inFlight && ! dataSet.pending[up].crashed) {
          _$jscoverage['modules/sync-cli.js'][576]++;
          delete dataSet.pending[up];
          _$jscoverage['modules/sync-cli.js'][577]++;
          self.doNotify(dataset_id, rec.uid, notification, rec);
        }
}
    }
}
  _$jscoverage['modules/sync-cli.js'][584]++;
  self.updatePendingFromNewData(dataset_id, dataSet, res);
  _$jscoverage['modules/sync-cli.js'][587]++;
  self.updateCrashedInFlightFromNewData(dataset_id, dataSet, res);
  _$jscoverage['modules/sync-cli.js'][590]++;
  self.updateDelayedFromNewData(dataset_id, dataSet, res);
  _$jscoverage['modules/sync-cli.js'][593]++;
  self.updateNewDataFromInFlight(dataset_id, dataSet, res);
  _$jscoverage['modules/sync-cli.js'][596]++;
  self.updateNewDataFromPending(dataset_id, dataSet, res);
  _$jscoverage['modules/sync-cli.js'][600]++;
  if (res.records) {
    _$jscoverage['modules/sync-cli.js'][602]++;
    dataSet.data = res.records;
    _$jscoverage['modules/sync-cli.js'][603]++;
    dataSet.hash = res.hash;
    _$jscoverage['modules/sync-cli.js'][605]++;
    self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, "full dataset");
  }
  _$jscoverage['modules/sync-cli.js'][608]++;
  if (res.updates) {
    _$jscoverage['modules/sync-cli.js'][609]++;
    var acknowledgements = [];
    _$jscoverage['modules/sync-cli.js'][610]++;
    processUpdates(res.updates.applied, self.notifications.REMOTE_UPDATE_APPLIED, acknowledgements);
    _$jscoverage['modules/sync-cli.js'][611]++;
    processUpdates(res.updates.failed, self.notifications.REMOTE_UPDATE_FAILED, acknowledgements);
    _$jscoverage['modules/sync-cli.js'][612]++;
    processUpdates(res.updates.collisions, self.notifications.COLLISION_DETECTED, acknowledgements);
    _$jscoverage['modules/sync-cli.js'][613]++;
    dataSet.acknowledgements = acknowledgements;
  }
  _$jscoverage['modules/sync-cli.js'][616]++;
  if (! res.records && res.hash && res.hash !== dataSet.hash) {
    _$jscoverage['modules/sync-cli.js'][617]++;
    self.consoleLog("Local dataset stale - syncing records :: local hash= " + dataSet.hash + " - remoteHash=" + res.hash);
    _$jscoverage['modules/sync-cli.js'][619]++;
    self.syncRecords(dataset_id);
  }
  else {
    _$jscoverage['modules/sync-cli.js'][621]++;
    self.consoleLog("Local dataset up to date");
    _$jscoverage['modules/sync-cli.js'][622]++;
    self.syncComplete(dataset_id, "online", self.notifications.SYNC_COMPLETE);
  }
}), (function (msg, err) {
  _$jscoverage['modules/sync-cli.js'][628]++;
  self.markInFlightAsCrashed(dataSet);
  _$jscoverage['modules/sync-cli.js'][629]++;
  self.consoleLog("syncLoop failed : msg=" + msg + " :: err = " + err);
  _$jscoverage['modules/sync-cli.js'][630]++;
  self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);
}));
  }
  catch (e) {
    _$jscoverage['modules/sync-cli.js'][634]++;
    self.consoleLog("Error performing sync - " + e);
    _$jscoverage['modules/sync-cli.js'][635]++;
    self.syncComplete(dataset_id, e, self.notifications.SYNC_FAILED);
  }
}));
  }
}));
}));
}), syncRecords: (function (dataset_id) {
  _$jscoverage['modules/sync-cli.js'][645]++;
  self.getDataSet(dataset_id, (function (dataSet) {
  _$jscoverage['modules/sync-cli.js'][647]++;
  var localDataSet = dataSet.data || {};
  _$jscoverage['modules/sync-cli.js'][649]++;
  var clientRecs = {};
  _$jscoverage['modules/sync-cli.js'][650]++;
  for (var i in localDataSet) {
    _$jscoverage['modules/sync-cli.js'][651]++;
    var uid = i;
    _$jscoverage['modules/sync-cli.js'][652]++;
    var hash = localDataSet[i].hash;
    _$jscoverage['modules/sync-cli.js'][653]++;
    clientRecs[uid] = hash;
}
  _$jscoverage['modules/sync-cli.js'][656]++;
  var syncRecParams = {};
  _$jscoverage['modules/sync-cli.js'][658]++;
  syncRecParams.fn = "syncRecords";
  _$jscoverage['modules/sync-cli.js'][659]++;
  syncRecParams.dataset_id = dataset_id;
  _$jscoverage['modules/sync-cli.js'][660]++;
  syncRecParams.query_params = dataSet.query_params;
  _$jscoverage['modules/sync-cli.js'][661]++;
  syncRecParams.clientRecs = clientRecs;
  _$jscoverage['modules/sync-cli.js'][663]++;
  self.consoleLog("syncRecParams :: " + JSON.stringify(syncRecParams));
  _$jscoverage['modules/sync-cli.js'][665]++;
  self.doCloudCall({"dataset_id": dataset_id, "req": syncRecParams}, (function (res) {
  _$jscoverage['modules/sync-cli.js'][669]++;
  var i;
  _$jscoverage['modules/sync-cli.js'][671]++;
  if (res.create) {
    _$jscoverage['modules/sync-cli.js'][672]++;
    for (i in res.create) {
      _$jscoverage['modules/sync-cli.js'][673]++;
      localDataSet[i] = {"hash": res.create[i].hash, "data": res.create[i].data};
      _$jscoverage['modules/sync-cli.js'][674]++;
      self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, "create");
}
  }
  _$jscoverage['modules/sync-cli.js'][677]++;
  if (res.update) {
    _$jscoverage['modules/sync-cli.js'][678]++;
    for (i in res.update) {
      _$jscoverage['modules/sync-cli.js'][679]++;
      localDataSet[i].hash = res.update[i].hash;
      _$jscoverage['modules/sync-cli.js'][680]++;
      localDataSet[i].data = res.update[i].data;
      _$jscoverage['modules/sync-cli.js'][681]++;
      self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, "update");
}
  }
  _$jscoverage['modules/sync-cli.js'][684]++;
  if (res["delete"]) {
    _$jscoverage['modules/sync-cli.js'][685]++;
    for (i in res["delete"]) {
      _$jscoverage['modules/sync-cli.js'][686]++;
      delete localDataSet[i];
      _$jscoverage['modules/sync-cli.js'][687]++;
      self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, "delete");
}
  }
  _$jscoverage['modules/sync-cli.js'][691]++;
  self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, "partial dataset");
  _$jscoverage['modules/sync-cli.js'][693]++;
  dataSet.data = localDataSet;
  _$jscoverage['modules/sync-cli.js'][694]++;
  if (res.hash) {
    _$jscoverage['modules/sync-cli.js'][695]++;
    dataSet.hash = res.hash;
  }
  _$jscoverage['modules/sync-cli.js'][697]++;
  self.syncComplete(dataset_id, "online", self.notifications.SYNC_COMPLETE);
}), (function (msg, err) {
  _$jscoverage['modules/sync-cli.js'][699]++;
  self.consoleLog("syncRecords failed : msg=" + msg + " :: err=" + err);
  _$jscoverage['modules/sync-cli.js'][700]++;
  self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);
}));
}));
}), syncComplete: (function (dataset_id, status, notification) {
  _$jscoverage['modules/sync-cli.js'][707]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][708]++;
  dataset.syncRunning = false;
  _$jscoverage['modules/sync-cli.js'][709]++;
  dataset.syncLoopEnd = new Date().getTime();
  _$jscoverage['modules/sync-cli.js'][710]++;
  self.saveDataSet(dataset_id);
  _$jscoverage['modules/sync-cli.js'][711]++;
  self.doNotify(dataset_id, dataset.hash, notification, status);
}));
}), checkDatasets: (function () {
  _$jscoverage['modules/sync-cli.js'][716]++;
  for (var dataset_id in self.datasets) {
    _$jscoverage['modules/sync-cli.js'][717]++;
    if (self.datasets.hasOwnProperty(dataset_id)) {
      _$jscoverage['modules/sync-cli.js'][718]++;
      var dataset = self.datasets[dataset_id];
      _$jscoverage['modules/sync-cli.js'][720]++;
      if (! dataset.syncRunning && (dataset.config.sync_active || dataset.syncForced)) {
        _$jscoverage['modules/sync-cli.js'][722]++;
        var lastSyncStart = dataset.syncLoopStart;
        _$jscoverage['modules/sync-cli.js'][723]++;
        var lastSyncCmp = dataset.syncLoopEnd;
        _$jscoverage['modules/sync-cli.js'][724]++;
        if (lastSyncStart == null) {
          _$jscoverage['modules/sync-cli.js'][725]++;
          self.consoleLog(dataset_id + " - Performing initial sync");
          _$jscoverage['modules/sync-cli.js'][727]++;
          dataset.syncPending = true;
        }
        else {
          _$jscoverage['modules/sync-cli.js'][728]++;
          if (lastSyncCmp != null) {
            _$jscoverage['modules/sync-cli.js'][729]++;
            var timeSinceLastSync = new Date().getTime() - lastSyncCmp;
            _$jscoverage['modules/sync-cli.js'][730]++;
            var syncFrequency = dataset.config.sync_frequency * 1000;
            _$jscoverage['modules/sync-cli.js'][731]++;
            if (timeSinceLastSync > syncFrequency) {
              _$jscoverage['modules/sync-cli.js'][733]++;
              dataset.syncPending = true;
            }
          }
        }
        _$jscoverage['modules/sync-cli.js'][737]++;
        if (dataset.syncForced) {
          _$jscoverage['modules/sync-cli.js'][738]++;
          dataset.syncPending = true;
        }
        _$jscoverage['modules/sync-cli.js'][741]++;
        if (dataset.syncPending) {
          _$jscoverage['modules/sync-cli.js'][743]++;
          dataset.syncForced = false;
          _$jscoverage['modules/sync-cli.js'][748]++;
          self.syncLoop(dataset_id);
        }
      }
    }
}
}), checkHasCustomSync: (function (dataset_id, cb) {
  _$jscoverage['modules/sync-cli.js'][756]++;
  if (self.hasCustomSync != null) {
    _$jscoverage['modules/sync-cli.js'][757]++;
    return cb();
  }
  _$jscoverage['modules/sync-cli.js'][759]++;
  self.consoleLog("starting check has custom sync");
  _$jscoverage['modules/sync-cli.js'][761]++;
  actAPI({"act": dataset_id, "req": {"fn": "sync"}}, (function (res) {
  _$jscoverage['modules/sync-cli.js'][769]++;
  self.consoleLog("checkHasCustomSync - success - ", res);
  _$jscoverage['modules/sync-cli.js'][770]++;
  self.hasCustomSync = true;
  _$jscoverage['modules/sync-cli.js'][771]++;
  return cb();
}), (function (msg, err) {
  _$jscoverage['modules/sync-cli.js'][773]++;
  self.consoleLog("checkHasCustomSync - failure - ", err);
  _$jscoverage['modules/sync-cli.js'][774]++;
  if (err.status && err.status === 500) {
    _$jscoverage['modules/sync-cli.js'][777]++;
    self.consoleLog("checkHasCustomSync - failed with 500, endpoint does exists");
    _$jscoverage['modules/sync-cli.js'][778]++;
    self.hasCustomSync = true;
  }
  else {
    _$jscoverage['modules/sync-cli.js'][780]++;
    self.hasCustomSync = false;
  }
  _$jscoverage['modules/sync-cli.js'][782]++;
  return cb();
}));
}), doCloudCall: (function (params, success, failure) {
  _$jscoverage['modules/sync-cli.js'][787]++;
  if (self.hasCustomSync) {
    _$jscoverage['modules/sync-cli.js'][788]++;
    actAPI({"act": params.dataset_id, "req": params.req}, (function (res) {
  _$jscoverage['modules/sync-cli.js'][792]++;
  success(res);
}), (function (msg, err) {
  _$jscoverage['modules/sync-cli.js'][794]++;
  failure(msg, err);
}));
  }
  else {
    _$jscoverage['modules/sync-cli.js'][797]++;
    cloudAPI({"path": "/mbaas/sync/" + params.dataset_id, "method": "post", "data": params.req}, (function (res) {
  _$jscoverage['modules/sync-cli.js'][802]++;
  success(res);
}), (function (msg, err) {
  _$jscoverage['modules/sync-cli.js'][804]++;
  failure(msg, err);
}));
  }
}), datasetMonitor: (function () {
  _$jscoverage['modules/sync-cli.js'][810]++;
  self.checkDatasets();
  _$jscoverage['modules/sync-cli.js'][813]++;
  setTimeout((function () {
  _$jscoverage['modules/sync-cli.js'][814]++;
  self.datasetMonitor();
}), 500);
}), saveDataSet: (function (dataset_id, cb) {
  _$jscoverage['modules/sync-cli.js'][819]++;
  var onFail = (function (msg, err) {
  _$jscoverage['modules/sync-cli.js'][821]++;
  var errMsg = "save to local storage failed  msg:" + msg + " err:" + err;
  _$jscoverage['modules/sync-cli.js'][822]++;
  self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);
  _$jscoverage['modules/sync-cli.js'][823]++;
  self.consoleLog(errMsg);
});
  _$jscoverage['modules/sync-cli.js'][825]++;
  self.getDataSet(dataset_id, (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][827]++;
  Lawnchair({fail: onFail, adapter: self.config.storage_strategy, size: self.config.file_system_quota}, (function () {
  _$jscoverage['modules/sync-cli.js'][828]++;
  this.save({key: "dataset_" + dataset_id, val: dataset}, (function () {
  _$jscoverage['modules/sync-cli.js'][830]++;
  if (cb) {
    _$jscoverage['modules/sync-cli.js'][830]++;
    return cb();
  }
}));
}));
}));
}), loadDataSet: (function (dataset_id, success, failure) {
  _$jscoverage['modules/sync-cli.js'][838]++;
  var onFail = (function (msg, err) {
  _$jscoverage['modules/sync-cli.js'][840]++;
  var errMsg = "load from local storage failed  msg:" + msg;
  _$jscoverage['modules/sync-cli.js'][841]++;
  self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);
  _$jscoverage['modules/sync-cli.js'][842]++;
  self.consoleLog(errMsg);
});
  _$jscoverage['modules/sync-cli.js'][845]++;
  Lawnchair({fail: onFail, adapter: self.config.storage_strategy, size: self.config.file_system_quota}, (function () {
  _$jscoverage['modules/sync-cli.js'][845]++;
  this.get("dataset_" + dataset_id, (function (data) {
  _$jscoverage['modules/sync-cli.js'][846]++;
  if (data && data.val !== null) {
    _$jscoverage['modules/sync-cli.js'][847]++;
    var dataset = data.val;
    _$jscoverage['modules/sync-cli.js'][848]++;
    if (typeof dataset === "string") {
      _$jscoverage['modules/sync-cli.js'][849]++;
      dataset = JSON.parse(dataset);
    }
    _$jscoverage['modules/sync-cli.js'][853]++;
    dataset.initialised = false;
    _$jscoverage['modules/sync-cli.js'][854]++;
    self.datasets[dataset_id] = dataset;
    _$jscoverage['modules/sync-cli.js'][855]++;
    self.consoleLog("load from local storage success for dataset_id :" + dataset_id);
    _$jscoverage['modules/sync-cli.js'][856]++;
    if (success) {
      _$jscoverage['modules/sync-cli.js'][856]++;
      return success(dataset);
    }
  }
  else {
    _$jscoverage['modules/sync-cli.js'][859]++;
    if (failure) {
      _$jscoverage['modules/sync-cli.js'][859]++;
      return failure();
    }
  }
}));
}));
}), updateDatasetFromLocal: (function (dataset, pendingRec) {
  _$jscoverage['modules/sync-cli.js'][867]++;
  var pending = dataset.pending;
  _$jscoverage['modules/sync-cli.js'][868]++;
  var previousPendingUid;
  _$jscoverage['modules/sync-cli.js'][869]++;
  var previousPending;
  _$jscoverage['modules/sync-cli.js'][871]++;
  var uid = pendingRec.uid;
  _$jscoverage['modules/sync-cli.js'][872]++;
  self.consoleLog("updating local dataset for uid " + uid + " - action = " + pendingRec.action);
  _$jscoverage['modules/sync-cli.js'][874]++;
  dataset.meta[uid] = dataset.meta[uid] || {};
  _$jscoverage['modules/sync-cli.js'][877]++;
  if (pendingRec.action === "create") {
    _$jscoverage['modules/sync-cli.js'][878]++;
    if (dataset.data[uid]) {
      _$jscoverage['modules/sync-cli.js'][879]++;
      self.consoleLog("dataset already exists for uid in create :: " + JSON.stringify(dataset.data[uid]));
      _$jscoverage['modules/sync-cli.js'][882]++;
      if (dataset.meta[uid].fromPending) {
        _$jscoverage['modules/sync-cli.js'][885]++;
        previousPendingUid = dataset.meta[uid].pendingUid;
        _$jscoverage['modules/sync-cli.js'][886]++;
        delete pending[previousPendingUid];
      }
    }
    _$jscoverage['modules/sync-cli.js'][889]++;
    dataset.data[uid] = {};
  }
  _$jscoverage['modules/sync-cli.js'][892]++;
  if (pendingRec.action === "update") {
    _$jscoverage['modules/sync-cli.js'][893]++;
    if (dataset.data[uid]) {
      _$jscoverage['modules/sync-cli.js'][894]++;
      if (dataset.meta[uid].fromPending) {
        _$jscoverage['modules/sync-cli.js'][895]++;
        self.consoleLog("updating an existing pending record for dataset :: " + JSON.stringify(dataset.data[uid]));
        _$jscoverage['modules/sync-cli.js'][897]++;
        previousPendingUid = dataset.meta[uid].pendingUid;
        _$jscoverage['modules/sync-cli.js'][898]++;
        dataset.meta[uid].previousPendingUid = previousPendingUid;
        _$jscoverage['modules/sync-cli.js'][899]++;
        previousPending = pending[previousPendingUid];
        _$jscoverage['modules/sync-cli.js'][900]++;
        if (previousPending) {
          _$jscoverage['modules/sync-cli.js'][901]++;
          if (! previousPending.inFlight) {
            _$jscoverage['modules/sync-cli.js'][902]++;
            self.consoleLog("existing pre-flight pending record = " + JSON.stringify(previousPending));
            _$jscoverage['modules/sync-cli.js'][905]++;
            previousPending.post = pendingRec.post;
            _$jscoverage['modules/sync-cli.js'][906]++;
            previousPending.postHash = pendingRec.postHash;
            _$jscoverage['modules/sync-cli.js'][907]++;
            delete pending[pendingRec.hash];
            _$jscoverage['modules/sync-cli.js'][910]++;
            pendingRec.hash = previousPendingUid;
          }
          else {
            _$jscoverage['modules/sync-cli.js'][914]++;
            self.consoleLog("existing in-inflight pending record = " + JSON.stringify(previousPending));
            _$jscoverage['modules/sync-cli.js'][915]++;
            pendingRec.delayed = true;
            _$jscoverage['modules/sync-cli.js'][916]++;
            pendingRec.waiting = previousPending.hash;
          }
        }
      }
    }
  }
  _$jscoverage['modules/sync-cli.js'][923]++;
  if (pendingRec.action === "delete") {
    _$jscoverage['modules/sync-cli.js'][924]++;
    if (dataset.data[uid]) {
      _$jscoverage['modules/sync-cli.js'][925]++;
      if (dataset.meta[uid].fromPending) {
        _$jscoverage['modules/sync-cli.js'][926]++;
        self.consoleLog("Deleting an existing pending record for dataset :: " + JSON.stringify(dataset.data[uid]));
        _$jscoverage['modules/sync-cli.js'][928]++;
        previousPendingUid = dataset.meta[uid].pendingUid;
        _$jscoverage['modules/sync-cli.js'][929]++;
        dataset.meta[uid].previousPendingUid = previousPendingUid;
        _$jscoverage['modules/sync-cli.js'][930]++;
        previousPending = pending[previousPendingUid];
        _$jscoverage['modules/sync-cli.js'][931]++;
        if (previousPending) {
          _$jscoverage['modules/sync-cli.js'][932]++;
          if (! previousPending.inFlight) {
            _$jscoverage['modules/sync-cli.js'][933]++;
            self.consoleLog("existing pending record = " + JSON.stringify(previousPending));
            _$jscoverage['modules/sync-cli.js'][934]++;
            if (previousPending.action === "create") {
              _$jscoverage['modules/sync-cli.js'][937]++;
              delete pending[pendingRec.hash];
              _$jscoverage['modules/sync-cli.js'][938]++;
              delete pending[previousPendingUid];
            }
            _$jscoverage['modules/sync-cli.js'][940]++;
            if (previousPending.action === "update") {
              _$jscoverage['modules/sync-cli.js'][944]++;
              pendingRec.pre = previousPending.pre;
              _$jscoverage['modules/sync-cli.js'][945]++;
              pendingRec.preHash = previousPending.preHash;
              _$jscoverage['modules/sync-cli.js'][946]++;
              pendingRec.inFlight = false;
              _$jscoverage['modules/sync-cli.js'][947]++;
              delete pending[previousPendingUid];
            }
          }
          else {
            _$jscoverage['modules/sync-cli.js'][950]++;
            self.consoleLog("existing in-inflight pending record = " + JSON.stringify(previousPending));
            _$jscoverage['modules/sync-cli.js'][951]++;
            pendingRec.delayed = true;
            _$jscoverage['modules/sync-cli.js'][952]++;
            pendingRec.waiting = previousPending.hash;
          }
        }
      }
      _$jscoverage['modules/sync-cli.js'][956]++;
      delete dataset.data[uid];
    }
  }
  _$jscoverage['modules/sync-cli.js'][960]++;
  if (dataset.data[uid]) {
    _$jscoverage['modules/sync-cli.js'][961]++;
    dataset.data[uid].data = pendingRec.post;
    _$jscoverage['modules/sync-cli.js'][962]++;
    dataset.data[uid].hash = pendingRec.postHash;
    _$jscoverage['modules/sync-cli.js'][963]++;
    dataset.meta[uid].fromPending = true;
    _$jscoverage['modules/sync-cli.js'][964]++;
    dataset.meta[uid].pendingUid = pendingRec.hash;
  }
}), updatePendingFromNewData: (function (dataset_id, dataset, newData) {
  _$jscoverage['modules/sync-cli.js'][969]++;
  var pending = dataset.pending;
  _$jscoverage['modules/sync-cli.js'][970]++;
  var newRec;
  _$jscoverage['modules/sync-cli.js'][972]++;
  if (pending && newData.records) {
    _$jscoverage['modules/sync-cli.js'][973]++;
    for (var pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][974]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][975]++;
        var pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][977]++;
        dataset.meta[pendingRec.uid] = dataset.meta[pendingRec.uid] || {};
        _$jscoverage['modules/sync-cli.js'][979]++;
        if (pendingRec.inFlight === false) {
          _$jscoverage['modules/sync-cli.js'][981]++;
          self.consoleLog("updatePendingFromNewData - Found Non inFlight record -> action=" + pendingRec.action + " :: uid=" + pendingRec.uid + " :: hash=" + pendingRec.hash);
          _$jscoverage['modules/sync-cli.js'][982]++;
          if (pendingRec.action === "update" || pendingRec.action === "delete") {
            _$jscoverage['modules/sync-cli.js'][985]++;
            newRec = newData.records[pendingRec.uid];
            _$jscoverage['modules/sync-cli.js'][986]++;
            if (newRec) {
              _$jscoverage['modules/sync-cli.js'][987]++;
              self.consoleLog("updatePendingFromNewData - Updating pre values for existing pending record " + pendingRec.uid);
              _$jscoverage['modules/sync-cli.js'][988]++;
              pendingRec.pre = newRec.data;
              _$jscoverage['modules/sync-cli.js'][989]++;
              pendingRec.preHash = newRec.hash;
            }
            else {
              _$jscoverage['modules/sync-cli.js'][993]++;
              var previousPendingUid = dataset.meta[pendingRec.uid].previousPendingUid;
              _$jscoverage['modules/sync-cli.js'][994]++;
              var previousPending = pending[previousPendingUid];
              _$jscoverage['modules/sync-cli.js'][995]++;
              if (previousPending) {
                _$jscoverage['modules/sync-cli.js'][996]++;
                if (newData && newData.updates && newData.updates.applied && newData.updates.applied[previousPending.hash]) {
                  _$jscoverage['modules/sync-cli.js'][998]++;
                  var newUid = newData.updates.applied[previousPending.hash].uid;
                  _$jscoverage['modules/sync-cli.js'][999]++;
                  newRec = newData.records[newUid];
                  _$jscoverage['modules/sync-cli.js'][1000]++;
                  if (newRec) {
                    _$jscoverage['modules/sync-cli.js'][1001]++;
                    self.consoleLog("updatePendingFromNewData - Updating pre values for existing pending record which was previously a create " + pendingRec.uid + " ==> " + newUid);
                    _$jscoverage['modules/sync-cli.js'][1002]++;
                    pendingRec.pre = newRec.data;
                    _$jscoverage['modules/sync-cli.js'][1003]++;
                    pendingRec.preHash = newRec.hash;
                    _$jscoverage['modules/sync-cli.js'][1004]++;
                    pendingRec.uid = newUid;
                  }
                }
              }
            }
          }
          _$jscoverage['modules/sync-cli.js'][1011]++;
          if (pendingRec.action === "create") {
            _$jscoverage['modules/sync-cli.js'][1012]++;
            if (newData && newData.updates && newData.updates.applied && newData.updates.applied[pendingHash]) {
              _$jscoverage['modules/sync-cli.js'][1013]++;
              self.consoleLog("updatePendingFromNewData - Found an update for a pending create " + JSON.stringify(newData.updates.applied[pendingHash]));
              _$jscoverage['modules/sync-cli.js'][1014]++;
              newRec = newData.records[newData.updates.applied[pendingHash].uid];
              _$jscoverage['modules/sync-cli.js'][1015]++;
              if (newRec) {
                _$jscoverage['modules/sync-cli.js'][1016]++;
                self.consoleLog("updatePendingFromNewData - Changing pending create to an update based on new record  " + JSON.stringify(newRec));
                _$jscoverage['modules/sync-cli.js'][1019]++;
                pendingRec.action = "update";
                _$jscoverage['modules/sync-cli.js'][1020]++;
                pendingRec.pre = newRec.data;
                _$jscoverage['modules/sync-cli.js'][1021]++;
                pendingRec.preHash = newRec.hash;
                _$jscoverage['modules/sync-cli.js'][1022]++;
                pendingRec.uid = newData.updates.applied[pendingHash].uid;
              }
            }
          }
        }
      }
}
  }
}), updateNewDataFromInFlight: (function (dataset_id, dataset, newData) {
  _$jscoverage['modules/sync-cli.js'][1033]++;
  var pending = dataset.pending;
  _$jscoverage['modules/sync-cli.js'][1035]++;
  if (pending && newData.records) {
    _$jscoverage['modules/sync-cli.js'][1036]++;
    for (var pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][1037]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][1038]++;
        var pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][1040]++;
        if (pendingRec.inFlight) {
          _$jscoverage['modules/sync-cli.js'][1041]++;
          var updateReceivedForPending = (newData && newData.updates && newData.updates.hashes && newData.updates.hashes[pendingHash])? true: false;
          _$jscoverage['modules/sync-cli.js'][1043]++;
          self.consoleLog("updateNewDataFromInFlight - Found inflight pending Record - action = " + pendingRec.action + " :: hash = " + pendingHash + " :: updateReceivedForPending=" + updateReceivedForPending);
          _$jscoverage['modules/sync-cli.js'][1045]++;
          if (! updateReceivedForPending) {
            _$jscoverage['modules/sync-cli.js'][1046]++;
            var newRec = newData.records[pendingRec.uid];
            _$jscoverage['modules/sync-cli.js'][1048]++;
            if (pendingRec.action === "update" && newRec) {
              _$jscoverage['modules/sync-cli.js'][1050]++;
              newRec.data = pendingRec.post;
              _$jscoverage['modules/sync-cli.js'][1051]++;
              newRec.hash = pendingRec.postHash;
            }
            else {
              _$jscoverage['modules/sync-cli.js'][1053]++;
              if (pendingRec.action === "delete" && newRec) {
                _$jscoverage['modules/sync-cli.js'][1055]++;
                delete newData.records[pendingRec.uid];
              }
              else {
                _$jscoverage['modules/sync-cli.js'][1057]++;
                if (pendingRec.action === "create") {
                  _$jscoverage['modules/sync-cli.js'][1059]++;
                  self.consoleLog("updateNewDataFromInFlight - re adding pending create to incomming dataset");
                  _$jscoverage['modules/sync-cli.js'][1060]++;
                  var newPendingCreate = {data: pendingRec.post, hash: pendingRec.postHash};
                  _$jscoverage['modules/sync-cli.js'][1064]++;
                  newData.records[pendingRec.uid] = newPendingCreate;
                }
              }
            }
          }
        }
      }
}
  }
}), updateNewDataFromPending: (function (dataset_id, dataset, newData) {
  _$jscoverage['modules/sync-cli.js'][1074]++;
  var pending = dataset.pending;
  _$jscoverage['modules/sync-cli.js'][1076]++;
  if (pending && newData.records) {
    _$jscoverage['modules/sync-cli.js'][1077]++;
    for (var pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][1078]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][1079]++;
        var pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][1081]++;
        if (pendingRec.inFlight === false) {
          _$jscoverage['modules/sync-cli.js'][1082]++;
          self.consoleLog("updateNewDataFromPending - Found Non inFlight record -> action=" + pendingRec.action + " :: uid=" + pendingRec.uid + " :: hash=" + pendingRec.hash);
          _$jscoverage['modules/sync-cli.js'][1083]++;
          var newRec = newData.records[pendingRec.uid];
          _$jscoverage['modules/sync-cli.js'][1084]++;
          if (pendingRec.action === "update" && newRec) {
            _$jscoverage['modules/sync-cli.js'][1086]++;
            newRec.data = pendingRec.post;
            _$jscoverage['modules/sync-cli.js'][1087]++;
            newRec.hash = pendingRec.postHash;
          }
          else {
            _$jscoverage['modules/sync-cli.js'][1089]++;
            if (pendingRec.action === "delete" && newRec) {
              _$jscoverage['modules/sync-cli.js'][1091]++;
              delete newData.records[pendingRec.uid];
            }
            else {
              _$jscoverage['modules/sync-cli.js'][1093]++;
              if (pendingRec.action === "create") {
                _$jscoverage['modules/sync-cli.js'][1095]++;
                self.consoleLog("updateNewDataFromPending - re adding pending create to incomming dataset");
                _$jscoverage['modules/sync-cli.js'][1096]++;
                var newPendingCreate = {data: pendingRec.post, hash: pendingRec.postHash};
                _$jscoverage['modules/sync-cli.js'][1100]++;
                newData.records[pendingRec.uid] = newPendingCreate;
              }
            }
          }
        }
      }
}
  }
}), updateCrashedInFlightFromNewData: (function (dataset_id, dataset, newData) {
  _$jscoverage['modules/sync-cli.js'][1109]++;
  var updateNotifications = {applied: self.notifications.REMOTE_UPDATE_APPLIED, failed: self.notifications.REMOTE_UPDATE_FAILED, collisions: self.notifications.COLLISION_DETECTED};
  _$jscoverage['modules/sync-cli.js'][1115]++;
  var pending = dataset.pending;
  _$jscoverage['modules/sync-cli.js'][1116]++;
  var resolvedCrashes = {};
  _$jscoverage['modules/sync-cli.js'][1117]++;
  var pendingHash;
  _$jscoverage['modules/sync-cli.js'][1118]++;
  var pendingRec;
  _$jscoverage['modules/sync-cli.js'][1121]++;
  if (pending) {
    _$jscoverage['modules/sync-cli.js'][1122]++;
    for (pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][1123]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][1124]++;
        pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][1126]++;
        if (pendingRec.inFlight && pendingRec.crashed) {
          _$jscoverage['modules/sync-cli.js'][1127]++;
          self.consoleLog("updateCrashedInFlightFromNewData - Found crashed inFlight pending record uid=" + pendingRec.uid + " :: hash=" + pendingRec.hash);
          _$jscoverage['modules/sync-cli.js'][1128]++;
          if (newData && newData.updates && newData.updates.hashes) {
            _$jscoverage['modules/sync-cli.js'][1131]++;
            var crashedUpdate = newData.updates.hashes[pendingHash];
            _$jscoverage['modules/sync-cli.js'][1132]++;
            if (crashedUpdate) {
              _$jscoverage['modules/sync-cli.js'][1135]++;
              resolvedCrashes[crashedUpdate.uid] = crashedUpdate;
              _$jscoverage['modules/sync-cli.js'][1137]++;
              self.consoleLog("updateCrashedInFlightFromNewData - Resolving status for crashed inflight pending record " + JSON.stringify(crashedUpdate));
              _$jscoverage['modules/sync-cli.js'][1139]++;
              if (crashedUpdate.type === "failed") {
                _$jscoverage['modules/sync-cli.js'][1141]++;
                if (crashedUpdate.action === "create") {
                  _$jscoverage['modules/sync-cli.js'][1142]++;
                  self.consoleLog("updateCrashedInFlightFromNewData - Deleting failed create from dataset");
                  _$jscoverage['modules/sync-cli.js'][1143]++;
                  delete dataset.data[crashedUpdate.uid];
                }
                else {
                  _$jscoverage['modules/sync-cli.js'][1145]++;
                  if (crashedUpdate.action === "update" || crashedUpdate.action === "delete") {
                    _$jscoverage['modules/sync-cli.js'][1146]++;
                    self.consoleLog("updateCrashedInFlightFromNewData - Reverting failed " + crashedUpdate.action + " in dataset");
                    _$jscoverage['modules/sync-cli.js'][1147]++;
                    dataset.data[crashedUpdate.uid] = {data: pendingRec.pre, hash: pendingRec.preHash};
                  }
                }
              }
              _$jscoverage['modules/sync-cli.js'][1154]++;
              delete pending[pendingHash];
              _$jscoverage['modules/sync-cli.js'][1155]++;
              self.doNotify(dataset_id, crashedUpdate.uid, updateNotifications[crashedUpdate.type], crashedUpdate);
            }
            else {
              _$jscoverage['modules/sync-cli.js'][1160]++;
              if (pendingRec.crashedCount) {
                _$jscoverage['modules/sync-cli.js'][1161]++;
                pendingRec.crashedCount++;
              }
              else {
                _$jscoverage['modules/sync-cli.js'][1164]++;
                pendingRec.crashedCount = 1;
              }
            }
          }
          else {
            _$jscoverage['modules/sync-cli.js'][1171]++;
            if (pendingRec.crashedCount) {
              _$jscoverage['modules/sync-cli.js'][1172]++;
              pendingRec.crashedCount++;
            }
            else {
              _$jscoverage['modules/sync-cli.js'][1175]++;
              pendingRec.crashedCount = 1;
            }
          }
        }
      }
}
    _$jscoverage['modules/sync-cli.js'][1182]++;
    for (pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][1183]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][1184]++;
        pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][1186]++;
        if (pendingRec.inFlight && pendingRec.crashed) {
          _$jscoverage['modules/sync-cli.js'][1187]++;
          if (pendingRec.crashedCount > dataset.config.crashed_count_wait) {
            _$jscoverage['modules/sync-cli.js'][1188]++;
            self.consoleLog("updateCrashedInFlightFromNewData - Crashed inflight pending record has reached crashed_count_wait limit : " + JSON.stringify(pendingRec));
            _$jscoverage['modules/sync-cli.js'][1189]++;
            if (dataset.config.resend_crashed_updates) {
              _$jscoverage['modules/sync-cli.js'][1190]++;
              self.consoleLog("updateCrashedInFlightFromNewData - Retryig crashed inflight pending record");
              _$jscoverage['modules/sync-cli.js'][1191]++;
              pendingRec.crashed = false;
              _$jscoverage['modules/sync-cli.js'][1192]++;
              pendingRec.inFlight = false;
            }
            else {
              _$jscoverage['modules/sync-cli.js'][1195]++;
              self.consoleLog("updateCrashedInFlightFromNewData - Deleting crashed inflight pending record");
              _$jscoverage['modules/sync-cli.js'][1196]++;
              delete pending[pendingHash];
            }
          }
        }
        else {
          _$jscoverage['modules/sync-cli.js'][1200]++;
          if (! pendingRec.inFlight && pendingRec.crashed) {
            _$jscoverage['modules/sync-cli.js'][1201]++;
            self.consoleLog("updateCrashedInFlightFromNewData - Trying to resolve issues with crashed non in flight record - uid = " + pendingRec.uid);
            _$jscoverage['modules/sync-cli.js'][1203]++;
            var crashedRef = resolvedCrashes[pendingRec.uid];
            _$jscoverage['modules/sync-cli.js'][1204]++;
            if (crashedRef) {
              _$jscoverage['modules/sync-cli.js'][1205]++;
              self.consoleLog("updateCrashedInFlightFromNewData - Found a stalled pending record backed up behind a resolved crash uid=" + pendingRec.uid + " :: hash=" + pendingRec.hash);
              _$jscoverage['modules/sync-cli.js'][1206]++;
              pendingRec.crashed = false;
            }
          }
        }
      }
}
  }
}), updateDelayedFromNewData: (function (dataset_id, dataset, newData) {
  _$jscoverage['modules/sync-cli.js'][1215]++;
  var pending = dataset.pending;
  _$jscoverage['modules/sync-cli.js'][1216]++;
  var pendingHash;
  _$jscoverage['modules/sync-cli.js'][1217]++;
  var pendingRec;
  _$jscoverage['modules/sync-cli.js'][1218]++;
  if (pending) {
    _$jscoverage['modules/sync-cli.js'][1219]++;
    for (pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][1220]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][1221]++;
        pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][1222]++;
        if (pendingRec.delayed && pendingRec.waiting) {
          _$jscoverage['modules/sync-cli.js'][1223]++;
          self.consoleLog("updateDelayedFromNewData - Found delayed pending record uid=" + pendingRec.uid + " :: hash=" + pendingRec.hash + " :: waiting=" + pendingRec.waiting);
          _$jscoverage['modules/sync-cli.js'][1224]++;
          if (newData && newData.updates && newData.updates.hashes) {
            _$jscoverage['modules/sync-cli.js'][1225]++;
            var waitingRec = newData.updates.hashes[pendingRec.waiting];
            _$jscoverage['modules/sync-cli.js'][1226]++;
            if (waitingRec) {
              _$jscoverage['modules/sync-cli.js'][1227]++;
              self.consoleLog("updateDelayedFromNewData - Waiting pending record is resolved rec=" + JSON.stringify(waitingRec));
              _$jscoverage['modules/sync-cli.js'][1228]++;
              pendingRec.delayed = false;
              _$jscoverage['modules/sync-cli.js'][1229]++;
              pendingRec.waiting = undefined;
            }
          }
        }
      }
}
  }
}), markInFlightAsCrashed: (function (dataset) {
  _$jscoverage['modules/sync-cli.js'][1240]++;
  var pending = dataset.pending;
  _$jscoverage['modules/sync-cli.js'][1241]++;
  var pendingHash;
  _$jscoverage['modules/sync-cli.js'][1242]++;
  var pendingRec;
  _$jscoverage['modules/sync-cli.js'][1244]++;
  if (pending) {
    _$jscoverage['modules/sync-cli.js'][1245]++;
    var crashedRecords = {};
    _$jscoverage['modules/sync-cli.js'][1246]++;
    for (pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][1247]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][1248]++;
        pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][1250]++;
        if (pendingRec.inFlight) {
          _$jscoverage['modules/sync-cli.js'][1251]++;
          self.consoleLog("Marking in flight pending record as crashed : " + pendingHash);
          _$jscoverage['modules/sync-cli.js'][1252]++;
          pendingRec.crashed = true;
          _$jscoverage['modules/sync-cli.js'][1253]++;
          crashedRecords[pendingRec.uid] = pendingRec;
        }
      }
}
    _$jscoverage['modules/sync-cli.js'][1260]++;
    for (pendingHash in pending) {
      _$jscoverage['modules/sync-cli.js'][1261]++;
      if (pending.hasOwnProperty(pendingHash)) {
        _$jscoverage['modules/sync-cli.js'][1262]++;
        pendingRec = pending[pendingHash];
        _$jscoverage['modules/sync-cli.js'][1264]++;
        if (! pendingRec.inFlight && ! pendingRec.delayed) {
          _$jscoverage['modules/sync-cli.js'][1265]++;
          var crashedRef = crashedRecords[pendingRec.uid];
          _$jscoverage['modules/sync-cli.js'][1266]++;
          if (crashedRef) {
            _$jscoverage['modules/sync-cli.js'][1267]++;
            pendingRec.crashed = true;
          }
        }
      }
}
  }
}), consoleLog: (function (msg) {
  _$jscoverage['modules/sync-cli.js'][1276]++;
  if (self.config.do_console_log) {
    _$jscoverage['modules/sync-cli.js'][1277]++;
    console.log(msg);
  }
})};
_$jscoverage['modules/sync-cli.js'][1282]++;
(function () {
  _$jscoverage['modules/sync-cli.js'][1283]++;
  self.config = self.defaults;
})();
_$jscoverage['modules/sync-cli.js'][1288]++;
module.exports = {init: self.init, manage: self.manage, notify: self.notify, doList: self.list, doCreate: self.create, doRead: self.read, doUpdate: self.update, doDelete: self["delete"], listCollisions: self.listCollisions, removeCollision: self.removeCollision, getPending: self.getPending, clearPending: self.clearPending, getDataset: self.getDataSet, getQueryParams: self.getQueryParams, setQueryParams: self.setQueryParams, getMetaData: self.getMetaData, setMetaData: self.setMetaData, getConfig: self.getConfig, setConfig: self.setConfig, startSync: self.startSync, stopSync: self.stopSync, doSync: self.doSync, forceSync: self.forceSync, generateHash: self.generateHash};
_$jscoverage['modules/sync-cli.js'].source = ["var JSON = require(\"JSON\");","var actAPI = require(\"./api_act\");","var cloudAPI = require(\"./api_cloud\");","var CryptoJS = require(\"../../libs/generated/crypto\");","var Lawnchair = require('../../libs/generated/lawnchair');","","var self = {","","  // CONFIG","  defaults: {","    \"sync_frequency\": 10,","    // How often to synchronise data with the cloud in seconds.","    \"auto_sync_local_updates\": true,","    // Should local chages be syned to the cloud immediately, or should they wait for the next sync interval","    \"notify_client_storage_failed\": true,","    // Should a notification event be triggered when loading/saving to client storage fails","    \"notify_sync_started\": true,","    // Should a notification event be triggered when a sync cycle with the server has been started","    \"notify_sync_complete\": true,","    // Should a notification event be triggered when a sync cycle with the server has been completed","    \"notify_offline_update\": true,","    // Should a notification event be triggered when an attempt was made to update a record while offline","    \"notify_collision_detected\": true,","    // Should a notification event be triggered when an update failed due to data collision","    \"notify_remote_update_failed\": true,","    // Should a notification event be triggered when an update failed for a reason other than data collision","    \"notify_local_update_applied\": true,","    // Should a notification event be triggered when an update was applied to the local data store","    \"notify_remote_update_applied\": true,","    // Should a notification event be triggered when an update was applied to the remote data store","    \"notify_delta_received\": true,","    // Should a notification event be triggered when a delta was received from the remote data store for the dataset ","    \"notify_record_delta_received\": true,","    // Should a notification event be triggered when a delta was received from the remote data store for a record","    \"notify_sync_failed\": true,","    // Should a notification event be triggered when the sync loop failed to complete","    \"do_console_log\": false,","    // Should log statements be written to console.log","    \"crashed_count_wait\" : 10,","    // How many syncs should we check for updates on crashed in flight updates before we give up searching","    \"resend_crashed_updates\" : true,","    // If we have reached the crashed_count_wait limit, should we re-try sending the crashed in flight pending record","    \"sync_active\" : true,","    // Is the background sync with the cloud currently active","    \"storage_strategy\" : \"html5-filesystem\",","    // Storage strategy to use for Lawnchair - supported strategies are 'html5-filesystem' and 'dom'","    \"file_system_quota\" : 50 * 1024 * 1204","    // Amount of space to request from the HTML5 filesystem API when running in browser","  },","","  notifications: {","    \"CLIENT_STORAGE_FAILED\": \"client_storage_failed\",","    // loading/saving to client storage failed","    \"SYNC_STARTED\": \"sync_started\",","    // A sync cycle with the server has been started","    \"SYNC_COMPLETE\": \"sync_complete\",","    // A sync cycle with the server has been completed","    \"OFFLINE_UPDATE\": \"offline_update\",","    // An attempt was made to update a record while offline","    \"COLLISION_DETECTED\": \"collision_detected\",","    //Update Failed due to data collision","    \"REMOTE_UPDATE_FAILED\": \"remote_update_failed\",","    // Update Failed for a reason other than data collision","    \"REMOTE_UPDATE_APPLIED\": \"remote_update_applied\",","    // An update was applied to the remote data store","    \"LOCAL_UPDATE_APPLIED\": \"local_update_applied\",","    // An update was applied to the local data store","    \"DELTA_RECEIVED\": \"delta_received\",","    // A delta was received from the remote data store for the dataset ","    \"RECORD_DELTA_RECEIVED\": \"record_delta_received\",","    // A delta was received from the remote data store for the record ","    \"SYNC_FAILED\": \"sync_failed\"","    // Sync loop failed to complete","  },","","  datasets: {},","","  // Initialise config to default values;","  config: undefined,","","  notify_callback: undefined,","","  hasCustomSync : undefined,","","  // PUBLIC FUNCTION IMPLEMENTATIONS","  init: function(options) {","    self.consoleLog('sync - init called');","","    self.config = JSON.parse(JSON.stringify(self.defaults));","    for (var i in options) {","      self.config[i] = options[i];","    }","","    self.datasetMonitor();","  },","","  notify: function(callback) {","    self.notify_callback = callback;","  },","","  manage: function(dataset_id, options, query_params, meta_data, cb) {","    self.consoleLog('manage - START');","","    var options = options || {};","","    var doManage = function(dataset) {","      self.consoleLog('doManage dataset :: initialised = ' + dataset.initialised + \" :: \" + dataset_id + ' :: ' + JSON.stringify(options));","","      var datasetConfig = self.setOptions(options);","","      dataset.query_params = query_params || dataset.query_params || {};","      dataset.meta_data = meta_data || dataset.meta_data || {};","      dataset.config = datasetConfig;","      dataset.syncRunning = false;","      dataset.syncPending = true;","      dataset.initialised = true;","      dataset.meta = {};","","      self.saveDataSet(dataset_id, function() {","","        if( cb ) {","          cb();","        }","      });","    };","","    // Check if the dataset is already loaded","    self.getDataSet(dataset_id, function(dataset) {","      self.consoleLog('manage - dataset already loaded');","      doManage(dataset);","    }, function(err) {","      self.consoleLog('manage - dataset not loaded... trying to load');","","      // Not already loaded, try to load from local storage","      self.loadDataSet(dataset_id, function(dataset) {","          self.consoleLog('manage - dataset loaded from local storage');","","          // Loading from local storage worked","","          // Fire the local update event to indicate that dataset was loaded from local storage","          self.doNotify(dataset_id, null, self.notifications.LOCAL_UPDATE_APPLIED, \"load\");","","          // Put the dataet under the management of the sync service","          doManage(dataset);","        },","        function(err) {","          // No dataset in memory or local storage - create a new one and put it in memory","          self.consoleLog('manage - Creating new dataset for id ' + dataset_id);","          var dataset = {};","          dataset.data = {};","          dataset.pending = {};","          self.datasets[dataset_id] = dataset;","          doManage(dataset);","        });","    });","  },","","  setOptions: function(options) {","    // Make sure config is initialised","    if( ! self.config ) {","      self.config = JSON.parse(JSON.stringify(self.defaults));","    }","","    var datasetConfig = JSON.parse(JSON.stringify(self.config));","    var optionsIn = JSON.parse(JSON.stringify(options));","    for (var k in optionsIn) {","      datasetConfig[k] = optionsIn[k];","    }","","    return datasetConfig;","  },","","  list: function(dataset_id, success, failure) {","    self.getDataSet(dataset_id, function(dataset) {","      if (dataset &amp;&amp; dataset.data) {","        // Return a copy of the dataset so updates will not automatically make it back into the dataset","        var res = JSON.parse(JSON.stringify(dataset.data));","        success(res);","      } else {","        if(failure) failure('no_data');","      }","    }, function(code, msg) {","      if(failure) failure(code, msg);","    });","  },","","  create: function(dataset_id, data, success, failure) {","    self.addPendingObj(dataset_id, null, data, \"create\", success, failure);","  },","","  read: function(dataset_id, uid, success, failure) {","      self.getDataSet(dataset_id, function(dataset) {","      var rec = dataset.data[uid];","      if (!rec) {","        failure(\"unknown_uid\");","      } else {","        // Return a copy of the record so updates will not automatically make it back into the dataset","        var res = JSON.parse(JSON.stringify(rec));","        success(res);","      }","    }, function(code, msg) {","      if(failure) failure(code, msg);","    });","  },","","  update: function(dataset_id, uid, data, success, failure) {","    self.addPendingObj(dataset_id, uid, data, \"update\", success, failure);","  },","","  'delete': function(dataset_id, uid, success, failure) {","    self.addPendingObj(dataset_id, uid, null, \"delete\", success, failure);","  },","","  getPending: function(dataset_id, cb) {","    self.getDataSet(dataset_id, function(dataset) {","      var res;","      if( dataset ) {","        res = dataset.pending;","      }","      cb(res);","    }, function(err, datatset_id) {","        self.consoleLog(err);","    });","  },","","  clearPending: function(dataset_id, cb) {","    self.getDataSet(dataset_id, function(dataset) {","      dataset.pending = {};","      self.saveDataSet(dataset_id, cb);","    });","  },","","  listCollisions : function(dataset_id, success, failure){","    self.getDataSet(dataset_id, function(dataset) {","      self.doCloudCall({","        \"dataset_id\": dataset_id,","        \"req\": {","          \"fn\": \"listCollisions\",","          \"meta_data\" : dataset.meta_data","        }","      }, success, failure);","    }, failure);","  },","","  removeCollision: function(dataset_id, colissionHash, success, failure) {","    self.getDataSet(dataset_id, function(dataset) {","      self.doCloudCall({","        \"dataset_id\" : dataset_id,","        \"req\": {","          \"fn\": \"removeCollision\",","          \"hash\": colissionHash,","          meta_data: dataset.meta_data","        }","      }, success, failure);","    });","  },","","","  // PRIVATE FUNCTIONS","  isOnline: function(callback) {","    var online = true;","","    // first, check if navigator.online is available","    if(typeof navigator.onLine !== \"undefined\"){","      online = navigator.onLine;","    }","","    // second, check if Phonegap is available and has online info","    if(online){","      //use phonegap to determin if the network is available","      if(typeof navigator.network !== \"undefined\" &amp;&amp; typeof navigator.network.connection !== \"undefined\"){","        var networkType = navigator.network.connection.type;","        if(networkType === \"none\" || networkType === null) {","          online = false;","        }","      }","    }","","    return callback(online);","  },","","  doNotify: function(dataset_id, uid, code, message) {","","    if( self.notify_callback ) {","      if ( self.config['notify_' + code] ) {","        var notification = {","          \"dataset_id\" : dataset_id,","          \"uid\" : uid,","          \"code\" : code,","          \"message\" : message","        };","        // make sure user doesn't block","        setTimeout(function () {","          self.notify_callback(notification);","        }, 0);","      }","    }","  },","","  getDataSet: function(dataset_id, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      success(dataset);","    } else {","      failure('unknown_dataset ' + dataset_id, dataset_id);","    }","  },","","  getQueryParams: function(dataset_id, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      success(dataset.query_params);","    } else {","      failure('unknown_dataset ' + dataset_id, dataset_id);","    }","  },","","  setQueryParams: function(dataset_id, queryParams, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      dataset.query_params = queryParams;","      self.saveDataSet(dataset_id);","      if( success ) {","        success(dataset.query_params);","      }","    } else {","      if ( failure ) {","        failure('unknown_dataset ' + dataset_id, dataset_id);","      }","    }","  },","","  getMetaData: function(dataset_id, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      success(dataset.meta_data);","    } else {","      failure('unknown_dataset ' + dataset_id, dataset_id);","    }","  },","","  setMetaData: function(dataset_id, metaData, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      dataset.meta_data = metaData;","      self.saveDataSet(dataset_id);","      if( success ) {","        success(dataset.meta_data);","      }","    } else {","      if( failure ) {","        failure('unknown_dataset ' + dataset_id, dataset_id);","      }","    }","  },","","  getConfig: function(dataset_id, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      success(dataset.config);","    } else {","      failure('unknown_dataset ' + dataset_id, dataset_id);","    }","  },","","  setConfig: function(dataset_id, config, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      var fullConfig = self.setOptions(config);","      dataset.config = fullConfig;","      self.saveDataSet(dataset_id);","      if( success ) {","        success(dataset.config);","      }","    } else {","      if( failure ) {","        failure('unknown_dataset ' + dataset_id, dataset_id);","      }","    }","  },","","  stopSync: function(dataset_id, success, failure) {","    self.setConfig(dataset_id, {\"sync_active\" : false}, function() {","      if( success ) {","        success();","      }","    }, failure);","  },","","  startSync: function(dataset_id, success, failure) {","    self.setConfig(dataset_id, {\"sync_active\" : true}, function() {","      if( success ) {","        success();","      }","    }, failure);","  },","","  doSync: function(dataset_id, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      dataset.syncPending = true;","      self.saveDataSet(dataset_id);","      if( success ) {","        success();","      }","    } else {","      if( failure ) {","        failure('unknown_dataset ' + dataset_id, dataset_id);","      }","    }","  },","","  forceSync: function(dataset_id, success, failure) {","    var dataset = self.datasets[dataset_id];","","    if (dataset) {","      dataset.syncForced = true;","      self.saveDataSet(dataset_id);","      if( success ) {","        success();","      }","    } else {","      if( failure ) {","        failure('unknown_dataset ' + dataset_id, dataset_id);","      }","    }","  },","","  sortObject : function(object) {","    if (typeof object !== \"object\" || object === null) {","      return object;","    }","","    var result = [];","","    Object.keys(object).sort().forEach(function(key) {","      result.push({","        key: key,","        value: self.sortObject(object[key])","      });","    });","","    return result;","  },","","  sortedStringify : function(obj) {","","    var str = '';","","    try {","      str = JSON.stringify(self.sortObject(obj));","    } catch (e) {","      console.error('Error stringifying sorted object:' + e);","    }","","    return str;","  },","","  generateHash: function(object) {","    var hash = CryptoJS.SHA1(self.sortedStringify(object));","    return hash.toString();","  },","","  addPendingObj: function(dataset_id, uid, data, action, success, failure) {","    self.isOnline(function (online) {","      if (!online) {","        self.doNotify(dataset_id, uid, self.notifications.OFFLINE_UPDATE, action);","      }","    });","","    function storePendingObject(obj) {","      obj.hash = self.generateHash(obj);","","      self.getDataSet(dataset_id, function(dataset) {","","        dataset.pending[obj.hash] = obj;","","        self.updateDatasetFromLocal(dataset, obj);","","        if(self.config.auto_sync_local_updates) {","          dataset.syncPending = true;","        }","        self.saveDataSet(dataset_id);","        self.doNotify(dataset_id, uid, self.notifications.LOCAL_UPDATE_APPLIED, action);","","        success(obj);","      }, function(code, msg) {","        if(failure) failure(code, msg);","      });","    }","","    var pendingObj = {};","    pendingObj.inFlight = false;","    pendingObj.action = action;","    pendingObj.post = JSON.parse(JSON.stringify(data));","    pendingObj.postHash = self.generateHash(pendingObj.post);","    pendingObj.timestamp = new Date().getTime();","    if( \"create\" === action ) {","      pendingObj.uid = pendingObj.postHash;","      storePendingObject(pendingObj);","    } else {","      self.read(dataset_id, uid, function(rec) {","        pendingObj.uid = uid;","        pendingObj.pre = rec.data;","        pendingObj.preHash = self.generateHash(rec.data);","        storePendingObject(pendingObj);","      }, function(code, msg) {","        failure(code, msg);","      });","    }","  },","","  syncLoop: function(dataset_id) {","    self.getDataSet(dataset_id, function(dataSet) {","    ","      // The sync loop is currently active","      dataSet.syncPending = false;","      dataSet.syncRunning = true;","      dataSet.syncLoopStart = new Date().getTime();","      self.doNotify(dataset_id, null, self.notifications.SYNC_STARTED, null);","","      self.isOnline(function(online) {","        if (!online) {","          self.syncComplete(dataset_id, \"offline\", self.notifications.SYNC_FAILED);","        } else {","          self.checkHasCustomSync(dataset_id, function() {","","            var syncLoopParams = {};","            syncLoopParams.fn = 'sync';","            syncLoopParams.dataset_id = dataset_id;","            syncLoopParams.query_params = dataSet.query_params;","            syncLoopParams.config = dataSet.config;","            syncLoopParams.meta_data = dataSet.meta_data;","            //var datasetHash = self.generateLocalDatasetHash(dataSet);","            syncLoopParams.dataset_hash = dataSet.hash;","            syncLoopParams.acknowledgements = dataSet.acknowledgements || [];","","            var pending = dataSet.pending;","            var pendingArray = [];","            for(var i in pending ) {","              // Mark the pending records we are about to submit as inflight and add them to the array for submission","              // Don't re-add previous inFlight pending records who whave crashed - i.e. who's current state is unknown","              // Don't add delayed records","              if( !pending[i].inFlight &amp;&amp; !pending[i].crashed &amp;&amp; !pending[i].delayed) {","                pending[i].inFlight = true;","                pending[i].inFlightDate = new Date().getTime();","                pendingArray.push(pending[i]);","              }","            }","            syncLoopParams.pending = pendingArray;","","            if( pendingArray.length &gt; 0 ) {","              self.consoleLog('Starting sync loop - global hash = ' + dataSet.hash + ' :: params = ' + JSON.stringify(syncLoopParams, null, 2));","            }","            try {","              self.doCloudCall({","                'dataset_id': dataset_id,","                'req': syncLoopParams","              }, function(res) {","                var rec;","","                function processUpdates(updates, notification, acknowledgements) {","                  if( updates ) {","                    for (var up in updates) {","                      rec = updates[up];","                      acknowledgements.push(rec);","                      if( dataSet.pending[up] &amp;&amp; dataSet.pending[up].inFlight &amp;&amp; !dataSet.pending[up].crashed ) {","                        delete dataSet.pending[up];","                        self.doNotify(dataset_id, rec.uid, notification, rec);","                      }","                    }","                  }","                }","","                // Check to see if any new pending records need to be updated to reflect the current state of play.","                self.updatePendingFromNewData(dataset_id, dataSet, res);","","                // Check to see if any previously crashed inflight records can now be resolved","                self.updateCrashedInFlightFromNewData(dataset_id, dataSet, res);","","                //Check to see if any delayed pending records can now be set to ready","                self.updateDelayedFromNewData(dataset_id, dataSet, res);","","                // Update the new dataset with details of any inflight updates which we have not received a response on","                self.updateNewDataFromInFlight(dataset_id, dataSet, res);","","                // Update the new dataset with details of any pending updates","                self.updateNewDataFromPending(dataset_id, dataSet, res);","","","","                if (res.records) {","                  // Full Dataset returned","                  dataSet.data = res.records;","                  dataSet.hash = res.hash;","","                  self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'full dataset');","                }","","                if (res.updates) {","                  var acknowledgements = [];","                  processUpdates(res.updates.applied, self.notifications.REMOTE_UPDATE_APPLIED, acknowledgements);","                  processUpdates(res.updates.failed, self.notifications.REMOTE_UPDATE_FAILED, acknowledgements);","                  processUpdates(res.updates.collisions, self.notifications.COLLISION_DETECTED, acknowledgements);","                  dataSet.acknowledgements = acknowledgements;","                }","","                if (!res.records &amp;&amp; res.hash &amp;&amp; res.hash !== dataSet.hash) {","                  self.consoleLog(\"Local dataset stale - syncing records :: local hash= \" + dataSet.hash + \" - remoteHash=\" + res.hash);","                  // Different hash value returned - Sync individual records","                  self.syncRecords(dataset_id);","                } else {","                  self.consoleLog(\"Local dataset up to date\");","                  self.syncComplete(dataset_id,  \"online\", self.notifications.SYNC_COMPLETE);","                }","              }, function(msg, err) {","                // The AJAX call failed to complete succesfully, so the state of the current pending updates is unknown","                // Mark them as \"crashed\". The next time a syncLoop completets successfully, we will review the crashed","                // records to see if we can determine their current state.","                self.markInFlightAsCrashed(dataSet);","                self.consoleLog(\"syncLoop failed : msg=\" + msg + \" :: err = \" + err);","                self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);","              });","            }","            catch (e) {","              self.consoleLog('Error performing sync - ' + e);","              self.syncComplete(dataset_id, e, self.notifications.SYNC_FAILED);","            }","          });","        }","      });","    });","  },","","  syncRecords: function(dataset_id) {","","    self.getDataSet(dataset_id, function(dataSet) {","","      var localDataSet = dataSet.data || {};","","      var clientRecs = {};","      for (var i in localDataSet) {","        var uid = i;","        var hash = localDataSet[i].hash;","        clientRecs[uid] = hash;","      }","","      var syncRecParams = {};","","      syncRecParams.fn = 'syncRecords';","      syncRecParams.dataset_id = dataset_id;","      syncRecParams.query_params = dataSet.query_params;","      syncRecParams.clientRecs = clientRecs;","","      self.consoleLog(\"syncRecParams :: \" + JSON.stringify(syncRecParams));","","      self.doCloudCall({","        'dataset_id': dataset_id,","        'req': syncRecParams","      }, function(res) {","        var i;","","        if (res.create) {","          for (i in res.create) {","            localDataSet[i] = {\"hash\" : res.create[i].hash, \"data\" : res.create[i].data};","            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"create\");","          }","        }","        if (res.update) {","          for (i in res.update) {","            localDataSet[i].hash = res.update[i].hash;","            localDataSet[i].data = res.update[i].data;","            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"update\");","          }","        }","        if (res['delete']) {","          for (i in res['delete']) {","            delete localDataSet[i];","            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"delete\");","          }","        }","","        self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'partial dataset');","","        dataSet.data = localDataSet;","        if(res.hash) {","          dataSet.hash = res.hash;","        }","        self.syncComplete(dataset_id, \"online\", self.notifications.SYNC_COMPLETE);","      }, function(msg, err) {","        self.consoleLog(\"syncRecords failed : msg=\" + msg + \" :: err=\" + err);","        self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);","      });","    });","  },","","  syncComplete: function(dataset_id, status, notification) {","","    self.getDataSet(dataset_id, function(dataset) {","      dataset.syncRunning = false;","      dataset.syncLoopEnd = new Date().getTime();","      self.saveDataSet(dataset_id);","      self.doNotify(dataset_id, dataset.hash, notification, status);","    });","  },","","  checkDatasets: function() {","    for( var dataset_id in self.datasets ) {","      if( self.datasets.hasOwnProperty(dataset_id) ) {","        var dataset = self.datasets[dataset_id];","","        if( !dataset.syncRunning &amp;&amp; (dataset.config.sync_active || dataset.syncForced)) {","          // Check to see if it is time for the sync loop to run again","          var lastSyncStart = dataset.syncLoopStart;","          var lastSyncCmp = dataset.syncLoopEnd;","          if( lastSyncStart == null ) {","            self.consoleLog(dataset_id +' - Performing initial sync');","            // Dataset has never been synced before - do initial sync","            dataset.syncPending = true;","          } else if (lastSyncCmp != null) {","            var timeSinceLastSync = new Date().getTime() - lastSyncCmp;","            var syncFrequency = dataset.config.sync_frequency * 1000;","            if( timeSinceLastSync &gt; syncFrequency ) {","              // Time between sync loops has passed - do another sync","              dataset.syncPending = true;","            }","          } ","","          if( dataset.syncForced ) {","            dataset.syncPending = true;","          }","","          if( dataset.syncPending ) {","            // Reset syncForced in case it was what caused the sync cycle to run.","            dataset.syncForced = false;","","            // If the dataset requres syncing, run the sync loop. This may be because the sync interval has passed","            // or because the sync_frequency has been changed or because a change was made to the dataset and the","            // immediate_sync flag set to true","            self.syncLoop(dataset_id);","          }","        }","      }","    }","  },","","  checkHasCustomSync : function(dataset_id, cb) {","    if(self.hasCustomSync != null) {","      return cb();","    }","    self.consoleLog('starting check has custom sync');","","    actAPI({","      'act' : dataset_id,","      'req': {","        'fn': 'sync'","      }","    }, function(res) {","      //if the custom sync is defined in the cloud, this call should success.","      //if failed, we think this the custom sync is not defined","      self.consoleLog('checkHasCustomSync - success - ', res);","      self.hasCustomSync = true;","      return cb();","    }, function(msg,err) {","      self.consoleLog('checkHasCustomSync - failure - ', err);","      if(err.status &amp;&amp; err.status === 500){","        //if we receive 500, it could be that there is an error occured due to missing parameters or similar,","        //but the endpoint is defined.","        self.consoleLog('checkHasCustomSync - failed with 500, endpoint does exists');","        self.hasCustomSync = true;","      } else {","        self.hasCustomSync = false;","      }","      return cb();","    });","  },","","  doCloudCall: function(params, success, failure) {","    if( self.hasCustomSync ) {","      actAPI({","        'act' : params.dataset_id,","        'req' : params.req","      }, function(res) {","        success(res);","      }, function(msg, err) {","        failure(msg, err);","      });      ","    } else {","      cloudAPI({","        'path' : '/mbaas/sync/' + params.dataset_id,","        'method' : 'post',","        'data' : params.req","      }, function(res) {","        success(res);","      }, function(msg, err) {","        failure(msg, err);","      })","    }","  },","","  datasetMonitor: function() {","    self.checkDatasets();","","    // Re-execute datasetMonitor every 500ms so we keep invoking checkDatasets();","    setTimeout(function() {","      self.datasetMonitor();","    }, 500);","  },","","  saveDataSet: function (dataset_id, cb) {","    var onFail =  function(msg, err) {","      // save failed","      var errMsg = 'save to local storage failed  msg:' + msg + ' err:' + err;","      self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);","      self.consoleLog(errMsg);","    };","    self.getDataSet(dataset_id, function(dataset) {","      // save dataset to local storage","      Lawnchair({fail:onFail, adapter: self.config.storage_strategy, size:self.config.file_system_quota}, function (){","        this.save({key:\"dataset_\" + dataset_id, val:dataset}, function(){","          //save success","          if(cb) return cb();","        });","      });","    });","  },","","  loadDataSet: function (dataset_id, success, failure) {","    // load dataset from local storage","    var onFail = function(msg, err) {","      // load failed","      var errMsg = 'load from local storage failed  msg:' + msg;","      self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);","      self.consoleLog(errMsg);","    };","","        Lawnchair({fail:onFail, adapter: self.config.storage_strategy, size:self.config.file_system_quota},function (){       this.get( \"dataset_\" + dataset_id, function (data){","         if (data &amp;&amp; data.val !== null) {","            var dataset = data.val;","            if(typeof dataset === \"string\"){","              dataset = JSON.parse(dataset);","            }","            // Datasets should not be auto initialised when loaded - the mange function should be called for each dataset","            // the user wants sync","            dataset.initialised = false;","            self.datasets[dataset_id] = dataset; // TODO: do we need to handle binary data?","            self.consoleLog('load from local storage success for dataset_id :' + dataset_id);","            if(success) return success(dataset);","          } else {","            // no data yet, probably first time. failure calback should handle this","            if(failure) return failure();","          }","       });","    });","  },","","","  updateDatasetFromLocal: function(dataset, pendingRec) {","    var pending = dataset.pending;","    var previousPendingUid;","    var previousPending;","","    var uid = pendingRec.uid;","    self.consoleLog('updating local dataset for uid ' + uid + ' - action = ' + pendingRec.action);","","    dataset.meta[uid] = dataset.meta[uid] || {};","","    // Creating a new record","    if( pendingRec.action === \"create\" ) {","      if( dataset.data[uid] ) {","        self.consoleLog('dataset already exists for uid in create :: ' + JSON.stringify(dataset.data[uid]));","","        // We are trying to do a create using a uid which already exists","        if (dataset.meta[uid].fromPending) {","          // We are trying to create on top of an existing pending record","          // Remove the previous pending record and use this one instead","          previousPendingUid = dataset.meta[uid].pendingUid;","          delete pending[previousPendingUid];","        }","      }","      dataset.data[uid] = {};","    }","","    if( pendingRec.action === \"update\" ) {","      if( dataset.data[uid] ) {","        if (dataset.meta[uid].fromPending) {","          self.consoleLog('updating an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));","          // We are trying to update an existing pending record","          previousPendingUid = dataset.meta[uid].pendingUid;","          dataset.meta[uid].previousPendingUid = previousPendingUid;","          previousPending = pending[previousPendingUid];","          if(previousPending) {","            if(!previousPending.inFlight){","              self.consoleLog('existing pre-flight pending record = ' + JSON.stringify(previousPending));","              // We are trying to perform an update on an existing pending record","              // modify the original record to have the latest value and delete the pending update","              previousPending.post = pendingRec.post;","              previousPending.postHash = pendingRec.postHash;","              delete pending[pendingRec.hash];","              // Update the pending record to have the hash of the previous record as this is what is now being","              // maintained in the pending array &amp; is what we want in the meta record","              pendingRec.hash = previousPendingUid;","            } else {","              //we are performing changes to a pending record which is inFlight. Until the status of this pending record is resolved,","              //we should not submit this pending record to the cloud. Mark it as delayed.","              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));","              pendingRec.delayed = true;","              pendingRec.waiting = previousPending.hash;","            }","          }","        }","      }","    }","","    if( pendingRec.action === \"delete\" ) {","      if( dataset.data[uid] ) {","        if (dataset.meta[uid].fromPending) {","          self.consoleLog('Deleting an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));","          // We are trying to delete an existing pending record","          previousPendingUid = dataset.meta[uid].pendingUid;","          dataset.meta[uid].previousPendingUid = previousPendingUid;","          previousPending = pending[previousPendingUid];","          if( previousPending ) {","            if(!previousPending.inFlight){","              self.consoleLog('existing pending record = ' + JSON.stringify(previousPending));","              if( previousPending.action === \"create\" ) {","                // We are trying to perform a delete on an existing pending create","                // These cancel each other out so remove them both","                delete pending[pendingRec.hash];","                delete pending[previousPendingUid];","              }","              if( previousPending.action === \"update\" ) {","                // We are trying to perform a delete on an existing pending update","                // Use the pre value from the pending update for the delete and","                // get rid of the pending update","                pendingRec.pre = previousPending.pre;","                pendingRec.preHash = previousPending.preHash;","                pendingRec.inFlight = false;","                delete pending[previousPendingUid];","              }","            } else {","              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));","              pendingRec.delayed = true;","              pendingRec.waiting = previousPending.hash;","            }","          }","        }","        delete dataset.data[uid];","      }","    }","","    if( dataset.data[uid] ) {","      dataset.data[uid].data = pendingRec.post;","      dataset.data[uid].hash = pendingRec.postHash;","      dataset.meta[uid].fromPending = true;","      dataset.meta[uid].pendingUid = pendingRec.hash;","    }","  },","","  updatePendingFromNewData: function(dataset_id, dataset, newData) {","    var pending = dataset.pending;","    var newRec;","","    if( pending &amp;&amp; newData.records) {","      for( var pendingHash in pending ) {","        if( pending.hasOwnProperty(pendingHash) ) {","          var pendingRec = pending[pendingHash];","","          dataset.meta[pendingRec.uid] = dataset.meta[pendingRec.uid] || {};","","          if( pendingRec.inFlight === false ) {","            // Pending record that has not been submitted","            self.consoleLog('updatePendingFromNewData - Found Non inFlight record -&gt; action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);","            if( pendingRec.action === \"update\" || pendingRec.action === \"delete\") {","              // Update the pre value of pending record to reflect the latest data returned from sync.","              // This will prevent a collision being reported when the pending record is sent.","              newRec = newData.records[pendingRec.uid];","              if( newRec ) {","                self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record ' + pendingRec.uid);","                pendingRec.pre = newRec.data;","                pendingRec.preHash = newRec.hash;","              }","              else {","                // The update/delete may be for a newly created record in which case the uid will have changed.","                var previousPendingUid = dataset.meta[pendingRec.uid].previousPendingUid;","                var previousPending = pending[previousPendingUid];","                if( previousPending ) {","                  if( newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.applied &amp;&amp; newData.updates.applied[previousPending.hash] ) {","                    // There is an update in from a previous pending action","                    var newUid = newData.updates.applied[previousPending.hash].uid;","                    newRec = newData.records[newUid];","                    if( newRec ) {","                      self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record which was previously a create ' + pendingRec.uid + ' ==&gt; ' + newUid);","                      pendingRec.pre = newRec.data;","                      pendingRec.preHash = newRec.hash;","                      pendingRec.uid = newUid;","                    }","                  }","                }","              }","            }","","            if( pendingRec.action === \"create\" ) {","              if( newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.applied &amp;&amp; newData.updates.applied[pendingHash] ) {","                self.consoleLog('updatePendingFromNewData - Found an update for a pending create ' + JSON.stringify(newData.updates.applied[pendingHash]));","                newRec = newData.records[newData.updates.applied[pendingHash].uid];","                if( newRec ) {","                  self.consoleLog('updatePendingFromNewData - Changing pending create to an update based on new record  ' + JSON.stringify(newRec));","","                  // Set up the pending create as an update","                  pendingRec.action = \"update\";","                  pendingRec.pre = newRec.data;","                  pendingRec.preHash = newRec.hash;","                  pendingRec.uid = newData.updates.applied[pendingHash].uid;","                }","              }","            }","          }","        }","      }","    }","  },","","  updateNewDataFromInFlight: function(dataset_id, dataset, newData) {","    var pending = dataset.pending;","","    if( pending &amp;&amp; newData.records) {","      for( var pendingHash in pending ) {","        if( pending.hasOwnProperty(pendingHash) ) {","          var pendingRec = pending[pendingHash];","","          if( pendingRec.inFlight ) {","            var updateReceivedForPending = (newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.hashes &amp;&amp; newData.updates.hashes[pendingHash]) ? true : false;","","            self.consoleLog('updateNewDataFromInFlight - Found inflight pending Record - action = ' + pendingRec.action + ' :: hash = ' + pendingHash + ' :: updateReceivedForPending=' + updateReceivedForPending);","","            if( ! updateReceivedForPending ) {","              var newRec = newData.records[pendingRec.uid];","","              if( pendingRec.action === \"update\" &amp;&amp; newRec) {","                // Modify the new Record to have the updates from the pending record so the local dataset is consistent","                newRec.data = pendingRec.post;","                newRec.hash = pendingRec.postHash;","              }","              else if( pendingRec.action === \"delete\" &amp;&amp; newRec) {","                // Remove the record from the new dataset so the local dataset is consistent","                delete newData.records[pendingRec.uid];","              }","              else if( pendingRec.action === \"create\" ) {","                // Add the pending create into the new dataset so it is not lost from the UI","                self.consoleLog('updateNewDataFromInFlight - re adding pending create to incomming dataset');","                var newPendingCreate = {","                  data: pendingRec.post,","                  hash: pendingRec.postHash","                };","                newData.records[pendingRec.uid] = newPendingCreate;","              }","            }","          }","        }","      }","    }","  },","","  updateNewDataFromPending: function(dataset_id, dataset, newData) {","    var pending = dataset.pending;","","    if( pending &amp;&amp; newData.records) {","      for( var pendingHash in pending ) {","        if( pending.hasOwnProperty(pendingHash) ) {","          var pendingRec = pending[pendingHash];","","          if( pendingRec.inFlight === false ) {","            self.consoleLog('updateNewDataFromPending - Found Non inFlight record -&gt; action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);","            var newRec = newData.records[pendingRec.uid];","            if( pendingRec.action === \"update\" &amp;&amp; newRec) {","              // Modify the new Record to have the updates from the pending record so the local dataset is consistent","              newRec.data = pendingRec.post;","              newRec.hash = pendingRec.postHash;","            }","            else if( pendingRec.action === \"delete\" &amp;&amp; newRec) {","              // Remove the record from the new dataset so the local dataset is consistent","              delete newData.records[pendingRec.uid];","            }","            else if( pendingRec.action === \"create\" ) {","              // Add the pending create into the new dataset so it is not lost from the UI","              self.consoleLog('updateNewDataFromPending - re adding pending create to incomming dataset');","              var newPendingCreate = {","                data: pendingRec.post,","                hash: pendingRec.postHash","              };","              newData.records[pendingRec.uid] = newPendingCreate;","            }","          }","        }","      }","    }","  },","","  updateCrashedInFlightFromNewData: function(dataset_id, dataset, newData) {","    var updateNotifications = {","      applied: self.notifications.REMOTE_UPDATE_APPLIED,","      failed: self.notifications.REMOTE_UPDATE_FAILED,","      collisions: self.notifications.COLLISION_DETECTED","    };","","    var pending = dataset.pending;","    var resolvedCrashes = {};","    var pendingHash;","    var pendingRec;","","","    if( pending ) {","      for( pendingHash in pending ) {","        if( pending.hasOwnProperty(pendingHash) ) {","          pendingRec = pending[pendingHash];","","          if( pendingRec.inFlight &amp;&amp; pendingRec.crashed) {","            self.consoleLog('updateCrashedInFlightFromNewData - Found crashed inFlight pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash );","            if( newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes) {","","              // Check if the updates received contain any info about the crashed in flight update","              var crashedUpdate = newData.updates.hashes[pendingHash];","              if( crashedUpdate ) {","                // We have found an update on one of our in flight crashed records","","                resolvedCrashes[crashedUpdate.uid] = crashedUpdate;","","                self.consoleLog('updateCrashedInFlightFromNewData - Resolving status for crashed inflight pending record ' + JSON.stringify(crashedUpdate));","","                if( crashedUpdate.type === 'failed' ) {","                  // Crashed update failed - revert local dataset","                  if( crashedUpdate.action === 'create' ) {","                    self.consoleLog('updateCrashedInFlightFromNewData - Deleting failed create from dataset');","                    delete dataset.data[crashedUpdate.uid];","                  }","                  else if ( crashedUpdate.action === 'update' || crashedUpdate.action === 'delete' ) {","                    self.consoleLog('updateCrashedInFlightFromNewData - Reverting failed ' + crashedUpdate.action + ' in dataset');","                    dataset.data[crashedUpdate.uid] = {","                      data : pendingRec.pre,","                      hash : pendingRec.preHash","                    };","                  }","                }","","                delete pending[pendingHash];","                self.doNotify(dataset_id, crashedUpdate.uid, updateNotifications[crashedUpdate.type], crashedUpdate);","              }","              else {","                // No word on our crashed update - increment a counter to reflect another sync that did not give us","                // any update on our crashed record.","                if( pendingRec.crashedCount ) {","                  pendingRec.crashedCount++;","                }","                else {","                  pendingRec.crashedCount = 1;","                }","              }","            }","            else {","              // No word on our crashed update - increment a counter to reflect another sync that did not give us","              // any update on our crashed record.","              if( pendingRec.crashedCount ) {","                pendingRec.crashedCount++;","              }","              else {","                pendingRec.crashedCount = 1;","              }","            }","          }","        }","      }","","      for( pendingHash in pending ) {","        if( pending.hasOwnProperty(pendingHash) ) {","          pendingRec = pending[pendingHash];","","          if( pendingRec.inFlight &amp;&amp; pendingRec.crashed) {","            if( pendingRec.crashedCount &gt; dataset.config.crashed_count_wait ) {","              self.consoleLog('updateCrashedInFlightFromNewData - Crashed inflight pending record has reached crashed_count_wait limit : ' + JSON.stringify(pendingRec));","              if( dataset.config.resend_crashed_updates ) {","                self.consoleLog('updateCrashedInFlightFromNewData - Retryig crashed inflight pending record');","                pendingRec.crashed = false;","                pendingRec.inFlight = false;","              }","              else {","                self.consoleLog('updateCrashedInFlightFromNewData - Deleting crashed inflight pending record');","                delete pending[pendingHash];","              }","            }","          }","          else if (!pendingRec.inFlight &amp;&amp; pendingRec.crashed ) {","            self.consoleLog('updateCrashedInFlightFromNewData - Trying to resolve issues with crashed non in flight record - uid = ' + pendingRec.uid);","            // Stalled pending record because a previous pending update on the same record crashed","            var crashedRef = resolvedCrashes[pendingRec.uid];","            if( crashedRef ) {","              self.consoleLog('updateCrashedInFlightFromNewData - Found a stalled pending record backed up behind a resolved crash uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash);","              pendingRec.crashed = false;","            }","          }","        }","      }","    }","  },","","  updateDelayedFromNewData: function(dataset_id, dataset, newData){","    var pending = dataset.pending;","    var pendingHash;","    var pendingRec;","    if(pending){","      for( pendingHash in pending ){","        if( pending.hasOwnProperty(pendingHash) ){","          pendingRec = pending[pendingHash];","          if( pendingRec.delayed &amp;&amp; pendingRec.waiting ){","            self.consoleLog('updateDelayedFromNewData - Found delayed pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash + ' :: waiting=' + pendingRec.waiting);","            if( newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes ){","              var waitingRec = newData.updates.hashes[pendingRec.waiting];","              if(waitingRec){","                self.consoleLog('updateDelayedFromNewData - Waiting pending record is resolved rec=' + JSON.stringify(waitingRec));","                pendingRec.delayed = false;","                pendingRec.waiting = undefined;","              }","            }","          }","        }","      }","    }","  },","","","  markInFlightAsCrashed : function(dataset) {","    var pending = dataset.pending;","    var pendingHash;","    var pendingRec;","","    if( pending ) {","      var crashedRecords = {};","      for( pendingHash in pending ) {","        if( pending.hasOwnProperty(pendingHash) ) {","          pendingRec = pending[pendingHash];","","          if( pendingRec.inFlight ) {","            self.consoleLog('Marking in flight pending record as crashed : ' + pendingHash);","            pendingRec.crashed = true;","            crashedRecords[pendingRec.uid] = pendingRec;","          }","        }","      }","","      // Check for any pending updates that would be modifying a crashed record. These can not go out until the","      // status of the crashed record is determined","      for( pendingHash in pending ) {","        if( pending.hasOwnProperty(pendingHash) ) {","          pendingRec = pending[pendingHash];","","          if( ! pendingRec.inFlight &amp;&amp; ! pendingRec.delayed ) {","            var crashedRef = crashedRecords[pendingRec.uid];","            if( crashedRef ) {","              pendingRec.crashed = true;","            }","          }","        }","      }","    }","  },","","  consoleLog: function(msg) {","    if( self.config.do_console_log ) {","      console.log(msg);","    }","  }","};","","(function() {","  self.config = self.defaults;","  //Initialse the sync service with default config","  //self.init({});","})();","","module.exports = {","  init: self.init,","  manage: self.manage,","  notify: self.notify,","  doList: self.list,","  doCreate: self.create,","  doRead: self.read,","  doUpdate: self.update,","  doDelete: self['delete'],","  listCollisions: self.listCollisions,","  removeCollision: self.removeCollision,","  getPending : self.getPending,","  clearPending : self.clearPending,","  getDataset : self.getDataSet,","  getQueryParams: self.getQueryParams,","  setQueryParams: self.setQueryParams,","  getMetaData: self.getMetaData,","  setMetaData: self.setMetaData,","  getConfig: self.getConfig,","  setConfig: self.setConfig,","  startSync: self.startSync,","  stopSync: self.stopSync,","  doSync: self.doSync,","  forceSync: self.forceSync,","  generateHash: self.generateHash","};"];

},{"../../libs/generated/crypto":1,"../../libs/generated/lawnchair":2,"./api_act":55,"./api_cloud":56,"JSON":3}],74:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/uuid.js']) {
  _$jscoverage['modules/uuid.js'] = [];
  _$jscoverage['modules/uuid.js'][1] = 0;
  _$jscoverage['modules/uuid.js'][5] = 0;
  _$jscoverage['modules/uuid.js'][6] = 0;
  _$jscoverage['modules/uuid.js'][7] = 0;
  _$jscoverage['modules/uuid.js'][8] = 0;
  _$jscoverage['modules/uuid.js'][10] = 0;
  _$jscoverage['modules/uuid.js'][11] = 0;
  _$jscoverage['modules/uuid.js'][12] = 0;
  _$jscoverage['modules/uuid.js'][13] = 0;
}
_$jscoverage['modules/uuid.js'][1]++;
module.exports = {createUUID: (function () {
  _$jscoverage['modules/uuid.js'][5]++;
  var s = [];
  _$jscoverage['modules/uuid.js'][6]++;
  var hexDigitals = "0123456789ABCDEF";
  _$jscoverage['modules/uuid.js'][7]++;
  for (var i = 0; i < 32; i++) {
    _$jscoverage['modules/uuid.js'][8]++;
    s[i] = hexDigitals.substr(Math.floor(Math.random() * 16), 1);
}
  _$jscoverage['modules/uuid.js'][10]++;
  s[12] = "4";
  _$jscoverage['modules/uuid.js'][11]++;
  s[16] = hexDigitals.substr((s[16] & 3) | 8, 1);
  _$jscoverage['modules/uuid.js'][12]++;
  var uuid = s.join("");
  _$jscoverage['modules/uuid.js'][13]++;
  return uuid;
})};
_$jscoverage['modules/uuid.js'].source = ["module.exports = {","  createUUID : function () {","    //from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript","    //based on RFC 4122, section 4.4 (Algorithms for creating UUID from truely random pr pseudo-random number)","    var s = [];","    var hexDigitals = \"0123456789ABCDEF\";","    for (var i = 0; i &lt; 32; i++) {","      s[i] = hexDigitals.substr(Math.floor(Math.random() * 0x10), 1);","    }","    s[12] = \"4\";","    s[16] = hexDigitals.substr((s[16] &amp; 0x3) | 0x8, 1);","    var uuid = s.join(\"\");","    return uuid;","  }","};"];

},{}],75:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/waitForCloud.js']) {
  _$jscoverage['modules/waitForCloud.js'] = [];
  _$jscoverage['modules/waitForCloud.js'][1] = 0;
  _$jscoverage['modules/waitForCloud.js'][2] = 0;
  _$jscoverage['modules/waitForCloud.js'][3] = 0;
  _$jscoverage['modules/waitForCloud.js'][4] = 0;
  _$jscoverage['modules/waitForCloud.js'][5] = 0;
  _$jscoverage['modules/waitForCloud.js'][9] = 0;
  _$jscoverage['modules/waitForCloud.js'][11] = 0;
  _$jscoverage['modules/waitForCloud.js'][12] = 0;
  _$jscoverage['modules/waitForCloud.js'][13] = 0;
  _$jscoverage['modules/waitForCloud.js'][16] = 0;
  _$jscoverage['modules/waitForCloud.js'][17] = 0;
  _$jscoverage['modules/waitForCloud.js'][18] = 0;
  _$jscoverage['modules/waitForCloud.js'][20] = 0;
  _$jscoverage['modules/waitForCloud.js'][21] = 0;
  _$jscoverage['modules/waitForCloud.js'][23] = 0;
  _$jscoverage['modules/waitForCloud.js'][24] = 0;
  _$jscoverage['modules/waitForCloud.js'][25] = 0;
  _$jscoverage['modules/waitForCloud.js'][26] = 0;
  _$jscoverage['modules/waitForCloud.js'][27] = 0;
  _$jscoverage['modules/waitForCloud.js'][28] = 0;
  _$jscoverage['modules/waitForCloud.js'][29] = 0;
  _$jscoverage['modules/waitForCloud.js'][31] = 0;
  _$jscoverage['modules/waitForCloud.js'][32] = 0;
  _$jscoverage['modules/waitForCloud.js'][33] = 0;
  _$jscoverage['modules/waitForCloud.js'][34] = 0;
  _$jscoverage['modules/waitForCloud.js'][41] = 0;
  _$jscoverage['modules/waitForCloud.js'][42] = 0;
  _$jscoverage['modules/waitForCloud.js'][45] = 0;
  _$jscoverage['modules/waitForCloud.js'][46] = 0;
  _$jscoverage['modules/waitForCloud.js'][47] = 0;
  _$jscoverage['modules/waitForCloud.js'][48] = 0;
  _$jscoverage['modules/waitForCloud.js'][50] = 0;
  _$jscoverage['modules/waitForCloud.js'][54] = 0;
  _$jscoverage['modules/waitForCloud.js'][55] = 0;
  _$jscoverage['modules/waitForCloud.js'][58] = 0;
  _$jscoverage['modules/waitForCloud.js'][59] = 0;
  _$jscoverage['modules/waitForCloud.js'][63] = 0;
  _$jscoverage['modules/waitForCloud.js'][64] = 0;
  _$jscoverage['modules/waitForCloud.js'][65] = 0;
  _$jscoverage['modules/waitForCloud.js'][66] = 0;
  _$jscoverage['modules/waitForCloud.js'][67] = 0;
  _$jscoverage['modules/waitForCloud.js'][68] = 0;
  _$jscoverage['modules/waitForCloud.js'][73] = 0;
  _$jscoverage['modules/waitForCloud.js'][74] = 0;
  _$jscoverage['modules/waitForCloud.js'][75] = 0;
  _$jscoverage['modules/waitForCloud.js'][76] = 0;
  _$jscoverage['modules/waitForCloud.js'][78] = 0;
  _$jscoverage['modules/waitForCloud.js'][81] = 0;
  _$jscoverage['modules/waitForCloud.js'][85] = 0;
}
_$jscoverage['modules/waitForCloud.js'][1]++;
var initializer = require("./initializer");
_$jscoverage['modules/waitForCloud.js'][2]++;
var events = require("./events");
_$jscoverage['modules/waitForCloud.js'][3]++;
var CloudHost = require("./hosts");
_$jscoverage['modules/waitForCloud.js'][4]++;
var constants = require("./constants");
_$jscoverage['modules/waitForCloud.js'][5]++;
var logger = require("./logger");
_$jscoverage['modules/waitForCloud.js'][9]++;
var cloud_host;
_$jscoverage['modules/waitForCloud.js'][11]++;
var is_initialising = false;
_$jscoverage['modules/waitForCloud.js'][12]++;
var is_cloud_ready = false;
_$jscoverage['modules/waitForCloud.js'][13]++;
var init_error = null;
_$jscoverage['modules/waitForCloud.js'][16]++;
var ready = (function (cb) {
  _$jscoverage['modules/waitForCloud.js'][17]++;
  if (is_cloud_ready) {
    _$jscoverage['modules/waitForCloud.js'][18]++;
    return cb(null, {host: getCloudHostUrl()});
  }
  else {
    _$jscoverage['modules/waitForCloud.js'][20]++;
    events.once(constants.INIT_EVENT, (function (err, host) {
  _$jscoverage['modules/waitForCloud.js'][21]++;
  return cb(err, host);
}));
    _$jscoverage['modules/waitForCloud.js'][23]++;
    if (! is_initialising) {
      _$jscoverage['modules/waitForCloud.js'][24]++;
      is_initialising = true;
      _$jscoverage['modules/waitForCloud.js'][25]++;
      initializer.init((function (err, initRes) {
  _$jscoverage['modules/waitForCloud.js'][26]++;
  is_initialising = false;
  _$jscoverage['modules/waitForCloud.js'][27]++;
  if (err) {
    _$jscoverage['modules/waitForCloud.js'][28]++;
    init_error = err;
    _$jscoverage['modules/waitForCloud.js'][29]++;
    return events.emit(constants.INIT_EVENT, err);
  }
  else {
    _$jscoverage['modules/waitForCloud.js'][31]++;
    init_error = null;
    _$jscoverage['modules/waitForCloud.js'][32]++;
    is_cloud_ready = true;
    _$jscoverage['modules/waitForCloud.js'][33]++;
    cloud_host = new CloudHost(initRes.cloud);
    _$jscoverage['modules/waitForCloud.js'][34]++;
    return events.emit(constants.INIT_EVENT, null, {host: getCloudHostUrl()});
  }
}));
    }
  }
});
_$jscoverage['modules/waitForCloud.js'][41]++;
var getCloudHost = (function () {
  _$jscoverage['modules/waitForCloud.js'][42]++;
  return cloud_host;
});
_$jscoverage['modules/waitForCloud.js'][45]++;
var getCloudHostUrl = (function () {
  _$jscoverage['modules/waitForCloud.js'][46]++;
  if (typeof cloud_host !== "undefined") {
    _$jscoverage['modules/waitForCloud.js'][47]++;
    var appProps = require("./appProps").getAppProps();
    _$jscoverage['modules/waitForCloud.js'][48]++;
    return cloud_host.getHost(appProps.mode);
  }
  else {
    _$jscoverage['modules/waitForCloud.js'][50]++;
    return undefined;
  }
});
_$jscoverage['modules/waitForCloud.js'][54]++;
var isReady = (function () {
  _$jscoverage['modules/waitForCloud.js'][55]++;
  return is_cloud_ready;
});
_$jscoverage['modules/waitForCloud.js'][58]++;
var getInitError = (function () {
  _$jscoverage['modules/waitForCloud.js'][59]++;
  return init_error;
});
_$jscoverage['modules/waitForCloud.js'][63]++;
var reset = (function () {
  _$jscoverage['modules/waitForCloud.js'][64]++;
  is_cloud_ready = false;
  _$jscoverage['modules/waitForCloud.js'][65]++;
  is_initialising = false;
  _$jscoverage['modules/waitForCloud.js'][66]++;
  cloud_host = undefined;
  _$jscoverage['modules/waitForCloud.js'][67]++;
  init_error = undefined;
  _$jscoverage['modules/waitForCloud.js'][68]++;
  ready((function () {
}));
});
_$jscoverage['modules/waitForCloud.js'][73]++;
ready((function (error, host) {
  _$jscoverage['modules/waitForCloud.js'][74]++;
  if (error) {
    _$jscoverage['modules/waitForCloud.js'][75]++;
    if (error.message !== "app_config_missing") {
      _$jscoverage['modules/waitForCloud.js'][76]++;
      logger.error("Failed to initialise fh.");
    }
    else {
      _$jscoverage['modules/waitForCloud.js'][78]++;
      logger.info("No fh config file");
    }
  }
  else {
    _$jscoverage['modules/waitForCloud.js'][81]++;
    logger.info("fh cloud is ready");
  }
}));
_$jscoverage['modules/waitForCloud.js'][85]++;
module.exports = {ready: ready, isReady: isReady, getCloudHost: getCloudHost, getCloudHostUrl: getCloudHostUrl, getInitError: getInitError, reset: reset};
_$jscoverage['modules/waitForCloud.js'].source = ["var initializer = require(\"./initializer\");","var events = require(\"./events\");","var CloudHost = require(\"./hosts\");","var constants = require(\"./constants\");","var logger = require(\"./logger\");","","","//the cloud configurations","var cloud_host;","","var is_initialising = false;","var is_cloud_ready = false;","var init_error = null;","","","var ready = function(cb){","  if(is_cloud_ready){","    return cb(null, {host: getCloudHostUrl()});","  } else {","    events.once(constants.INIT_EVENT, function(err, host){","      return cb(err, host);","    });","    if(!is_initialising){","      is_initialising = true;","      initializer.init(function(err, initRes){","        is_initialising = false;","        if(err){","          init_error = err;","          return events.emit(constants.INIT_EVENT, err);","        } else {","          init_error = null;","          is_cloud_ready = true;","          cloud_host = new CloudHost(initRes.cloud);","          return events.emit(constants.INIT_EVENT, null, {host: getCloudHostUrl()});","        }","      });","    }","  }","}","","var getCloudHost = function(){","  return cloud_host;","}","","var getCloudHostUrl = function(){","  if(typeof cloud_host !== \"undefined\"){","    var appProps = require(\"./appProps\").getAppProps();","    return cloud_host.getHost(appProps.mode);","  } else {","    return undefined;","  }","}","","var isReady = function(){","  return is_cloud_ready;","}","","var getInitError = function(){","  return init_error;","}","","//for test","var reset = function(){","  is_cloud_ready = false;","  is_initialising = false;","  cloud_host = undefined;","  init_error = undefined;","  ready(function(){","    ","  });","}","","ready(function(error, host){","  if(error){","    if(error.message !== \"app_config_missing\"){","      logger.error(\"Failed to initialise fh.\");","    } else {","      logger.info(\"No fh config file\");","    }","  } else {","    logger.info(\"fh cloud is ready\");","  }","});","","module.exports = {","  ready: ready,","  isReady: isReady,","  getCloudHost: getCloudHost,","  getCloudHostUrl: getCloudHostUrl,","  getInitError: getInitError,","  reset: reset","}"];

},{"./appProps":57,"./constants":58,"./events":61,"./hosts":64,"./initializer":65,"./logger":68}],76:[function(require,module,exports){
var constants = require("./modules/constants");
var logger = require("./modules/logger");
var ajax = require("./modules/ajax");
var events = require("./modules/events");
var cloud = require("./modules/waitForCloud");
var api_act = require("./modules/api_act");
var api_auth = require("./modules/api_auth");
var api_sec = require("./modules/api_sec");
var api_hash = require("./modules/api_hash");
var api_sync = require("./modules/sync-cli");
var api_mbaas = require("./modules/api_mbaas");
var api_cloud = require("./modules/api_cloud");
var fhparams = require("./modules/fhparams");
var appProps = require("./modules/appProps");
var device = require("./modules/device");

var defaultFail = function(msg, error){
  logger.error(msg + ":" + JSON.stringify(error));
};

var addListener = function(type, listener){
  events.addListener(type, listener);
  if(type === constants.INIT_EVENT){
    //for fhinit event, need to check the status of cloud and may need to fire the listener immediately.
    if(cloud.isReady()){
      listener(null, {host: cloud.getCloudHostUrl()});
    } else if(cloud.getInitError()){
      listener(cloud.getInitError());
    }
  } 
};

var once = function(type, listener){
  if(type === constants.INIT_EVENT && cloud.isReady()){
    listener(null, {host: cloud.getCloudHostUrl()});
  } else if(type === constants.INIT_EVENT && cloud.getInitError()){
    listener(cloud.getInitError());
  } else {
    events.once(type, listener);
  }
};

//Legacy shim. Init hapens based on fhconfig.json or, for v2, global var called fh_app_props which is injected as part of the index.html wrapper
var init = function(opts, success, fail){
  logger.warn("$fh.init will be deprecated soon");
  cloud.ready(function(err, host){
    if(err){
      if(typeof fail === "function"){
        return fail(err);
      }
    } else {
      if(typeof success === "function"){
        success(host.host);
      }
    }
  });
};

var fh = window.$fh || {};
fh.init = init;
fh.act = api_act;
fh.auth = api_auth;
fh.cloud = api_cloud;
fh.sec = api_sec;
fh.hash = api_hash;
fh.sync = api_sync;
fh.ajax = fh.__ajax = ajax;
fh.mbaas = api_mbaas;
fh._getDeviceId = device.getDeviceId;

fh.getCloudURL = function(){
  return cloud.getCloudHostUrl();
};

fh.getFHParams = function(){
  return fhparams.buildFHParams();
};

//events
fh.addListener = addListener;
fh.on = addListener;
fh.once = once;
var methods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners", "emit"];
for(var i=0;i<methods.length;i++){
  fh[methods[i]] = events[methods[i]];
}

//keep backward compatibility
fh.on(constants.INIT_EVENT, function(err, host){
  if(err){
    fh.cloud_props = {};
    fh.app_props = {};
  } else {
    fh.cloud_props = {hosts: {url: host.host}};
    fh.app_props = appProps.getAppProps();
  }
});

//for test
fh.reset = cloud.reset;
//we should really stop polluting global name space. Ideally we should ask browserify to use "$fh" when umd-fy the module. However, "$" is not allowed as the standard module name.
//So, we assign $fh to the window name space directly here. (otherwise, we have to fork the grunt browserify plugin, then fork browerify and the dependent umd module, really not worthing the effort).
window.$fh = fh;
module.exports = fh;






},{"./modules/ajax":78,"./modules/api_act":79,"./modules/api_auth":80,"./modules/api_cloud":81,"./modules/api_hash":82,"./modules/api_mbaas":83,"./modules/api_sec":84,"./modules/appProps":85,"./modules/constants":87,"./modules/device":89,"./modules/events":90,"./modules/fhparams":91,"./modules/logger":97,"./modules/sync-cli":105,"./modules/waitForCloud":107}],77:[function(require,module,exports){
var XDomainRequestWrapper = function(xdr){
  this.xdr = xdr;
  this.isWrapper = true;
  this.readyState = 0;
  this.onreadystatechange = null;
  this.status = 0;
  this.statusText = "";
  this.responseText = "";
  var self = this;
  this.xdr.onload = function(){
      self.readyState = 4;
      self.status = 200;
      self.statusText = "";
      self.responseText = self.xdr.responseText;
      if(self.onreadystatechange){
          self.onreadystatechange();
      }
  };
  this.xdr.onerror = function(){
      if(self.onerror){
          self.onerror();
      }
      self.readyState = 4;
      self.status = 0;
      self.statusText = "";
      if(self.onreadystatechange){
          self.onreadystatechange();
      }
  };
  this.xdr.ontimeout = function(){
      self.readyState = 4;
      self.status = 408;
      self.statusText = "timeout";
      if(self.onreadystatechange){
          self.onreadystatechange();
      }
  };
};

XDomainRequestWrapper.prototype.open = function(method, url, asyn){
  this.xdr.open(method, url);
};

XDomainRequestWrapper.prototype.send = function(data){
  this.xdr.send(data);
};

XDomainRequestWrapper.prototype.abort = function(){
  this.xdr.abort();
};

XDomainRequestWrapper.prototype.setRequestHeader = function(n, v){
  //not supported by xdr
  //Good doc on limitations of XDomainRequest http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  //XDomainRequest doesn't allow setting custom request headers. But it is the only available option to do CORS requests in IE8 & 9. In IE10, they finally start to use standard XMLHttpRequest.
  //To support FH auth tokens in IE8&9, we have to find a different way of doing it.
};

XDomainRequestWrapper.prototype.getResponseHeader = function(n){
  //not supported by xdr
};

module.exports = XDomainRequestWrapper;

},{}],78:[function(require,module,exports){
//a shameless copy from https://github.com/ForbesLindesay/ajax/blob/master/index.js. 
//it has the same methods and config options as jQuery/zeptojs but very light weight. see http://api.jquery.com/jQuery.ajax/
//a few small changes are made for supporting IE 8 and other features:
//1. use getXhr function to replace the default XMLHttpRequest implementation for supporting IE8
//2. Integrate with events emitter. So to subscribe ajax events, you can do $fh.on("ajaxStart", handler). See http://api.jquery.com/Ajax_Events/ for full list of events
//3. allow passing xhr factory method through options: e.g. $fh.ajax({xhr: function(){/*own implementation of xhr*/}}); 
//4. Use fh_timeout value as the default timeout
//5. an extra option called "tryJSONP" to allow try the same call with JSONP if normal CORS failed - should only be used internally
//6. for jsonp, allow to specify the callback query param name using the "jsonp" option

var eventsHandler = require("./events");
var XDomainRequestWrapper = require("./XDomainRequestWrapper");
var consts = require("./constants");
var logger = require("./logger");

var type
try {
  type = require('type-of')
} catch (ex) {
  //hide from browserify
  var r = require
  type = r('type')
}

var jsonpID = 0,
  document = window.document,
  key,
  name,
  rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
  scriptTypeRE = /^(?:text|application)\/javascript/i,
  xmlTypeRE = /^(?:text|application)\/xml/i,
  jsonType = 'application/json',
  htmlType = 'text/html',
  blankRE = /^\s*$/;

var ajax = module.exports = function (options) {
  var settings = extend({}, options || {})
  for (key in ajax.settings)
    if (settings[key] === undefined) settings[key] = ajax.settings[key]

  ajaxStart(settings)

  if (!settings.crossDomain) settings.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(settings.url) &&
    RegExp.$2 != window.location.host

  var dataType = settings.dataType,
    hasPlaceholder = /=\?/.test(settings.url)
    if (dataType == 'jsonp' || hasPlaceholder) {
      if (!hasPlaceholder) {
        settings.url = appendQuery(settings.url, (settings.jsonp? settings.jsonp: '_callback') + '=?');
      }
      return ajax.JSONP(settings)
    }

  if (!settings.url) settings.url = window.location.toString()
  serializeData(settings)

  var mime = settings.accepts[dataType],
    baseHeaders = {},
    protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
    xhr = settings.xhr(settings.crossDomain),
    abortTimeout

  if (!settings.crossDomain) baseHeaders['X-Requested-With'] = 'XMLHttpRequest'
  if (mime) {
    baseHeaders['Accept'] = mime
    if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]
    xhr.overrideMimeType && xhr.overrideMimeType(mime)
  }
  if (settings.contentType || (settings.data && !settings.formdata && settings.type.toUpperCase() != 'GET'))
    baseHeaders['Content-Type'] = (settings.contentType || 'application/x-www-form-urlencoded')
  settings.headers = extend(baseHeaders, settings.headers || {})

  xhr.onreadystatechange = function () {
    if (xhr.readyState == 4) {
      clearTimeout(abortTimeout)
      var result, error = false
      if(settings.tryJSONP){
        //check if the request has fail. In some cases, we may want to try jsonp as well. Again, FH only...
        if(xhr.status === 0 && settings.crossDomain && !xhr.isTimeout &&  protocol != 'file:'){
          logger.debug("retry ajax call with jsonp")
          settings.type = "GET";
          settings.dataType = "jsonp";
          settings.data = "_jsonpdata=" + settings.data;
          return ajax(settings);
        }
      }
      if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {
        dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'))
        result = xhr.responseText
        logger.debug("ajax response :: status = " + xhr.status + " :: body = " + result)

        try {
          if (dataType == 'script')(1, eval)(result)
          else if (dataType == 'xml') result = xhr.responseXML
          else if (dataType == 'json') result = blankRE.test(result) ? null : JSON.parse(result)
        } catch (e) {
          error = e
        }

        if (error) {
          logger.debug("ajax error", error);
          ajaxError(error, 'parsererror', xhr, settings)
        }
        else ajaxSuccess(result, xhr, settings)
      } else {
        ajaxError(null, 'error', xhr, settings)
      }
    }
  }

  var async = 'async' in settings ? settings.async : true
  logger.debug("ajax call settings", settings)
  xhr.open(settings.type, settings.url, async)

  for (name in settings.headers) xhr.setRequestHeader(name, settings.headers[name])

  if (ajaxBeforeSend(xhr, settings) === false) {
    logger.debug("ajax call is aborted due to ajaxBeforeSend")
    xhr.abort()
    return false
  }

  if (settings.timeout > 0) abortTimeout = setTimeout(function () {
    logger.debug("ajax call timed out")
    xhr.onreadystatechange = empty
    xhr.abort()
    xhr.isTimeout = true
    ajaxError(null, 'timeout', xhr, settings)
  }, settings.timeout)

  // avoid sending empty string (#319)
  xhr.send(settings.data ? settings.data : null)
  return xhr
}


// trigger a custom event and return true
function triggerAndReturn(context, eventName, data) {
  eventsHandler.emit(eventName, data);
  return true;
}

// trigger an Ajax "global" event
function triggerGlobal(settings, context, eventName, data) {
  if (settings.global) return triggerAndReturn(context || document, eventName, data)
}

// Number of active Ajax requests
ajax.active = 0

function ajaxStart(settings) {
  if (settings.global && ajax.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')
}

function ajaxStop(settings) {
  if (settings.global && !(--ajax.active)) triggerGlobal(settings, null, 'ajaxStop')
}

// triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
function ajaxBeforeSend(xhr, settings) {
  var context = settings.context
  if (settings.beforeSend.call(context, xhr, settings) === false)
    return false

  triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])
}

function ajaxSuccess(data, xhr, settings) {
  var context = settings.context,
    status = 'success'
  settings.success.call(context, data, status, xhr)
  triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])
  ajaxComplete(status, xhr, settings)
}
// type: "timeout", "error", "abort", "parsererror"
function ajaxError(error, type, xhr, settings) {
  var context = settings.context
  settings.error.call(context, xhr, type, error)
  triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error])
  ajaxComplete(type, xhr, settings)
}
// status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
function ajaxComplete(status, xhr, settings) {
  var context = settings.context
  settings.complete.call(context, xhr, status)
  triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])
  ajaxStop(settings)
}

// Empty function, used as default callback
function empty() {}

ajax.JSONP = function (options) {
  if (!('type' in options)) return ajax(options)

  var callbackName = 'jsonp' + (++jsonpID),
    script = document.createElement('script'),
    abort = function () {
      //todo: remove script
      //$(script).remove()
      if (callbackName in window) window[callbackName] = empty
      ajaxComplete('abort', xhr, options)
    },
    xhr = {
      abort: abort
    }, abortTimeout,
    head = document.getElementsByTagName("head")[0] || document.documentElement

  if (options.error) script.onerror = function () {
    xhr.abort()
    options.error()
  }

  window[callbackName] = function (data) {
    clearTimeout(abortTimeout)
    //todo: remove script
    //$(script).remove()
    delete window[callbackName]
    ajaxSuccess(data, xhr, options)
  }

  serializeData(options)
  script.src = options.url.replace(/=\?/, '=' + callbackName)

  // Use insertBefore instead of appendChild to circumvent an IE6 bug.
  // This arises when a base node is used (see jQuery bugs #2709 and #4378).
  head.insertBefore(script, head.firstChild);

  if (options.timeout > 0) abortTimeout = setTimeout(function () {
    xhr.abort()
    ajaxComplete('timeout', xhr, options)
  }, options.timeout)

  return xhr
}

function isIE(){
  var ie = false;
  if(navigator.userAgent && navigator.userAgent.indexOf("MSIE") >=0 ){
    ie = true;
  }
  return ie;
}

function getXhr(crossDomain){
  var xhr = null;
  //always use XMLHttpRequest if available
  if(window.XMLHttpRequest){
    xhr = new XMLHttpRequest();
  }
  //for IE8
  if(isIE() && (crossDomain === true) && typeof window.XDomainRequest !== "undefined"){
    xhr = new XDomainRequestWrapper(new XDomainRequest());
  }
  return xhr;
}

ajax.settings = {
  // Default type of request
  type: 'GET',
  // Callback that is executed before request
  beforeSend: empty,
  // Callback that is executed if the request succeeds
  success: empty,
  // Callback that is executed the the server drops error
  error: empty,
  // Callback that is executed on request complete (both: error and success)
  complete: empty,
  // The context for the callbacks
  context: null,
  // Whether to trigger "global" Ajax events
  global: true,
  // Transport
  xhr: getXhr,
  // MIME types mapping
  accepts: {
    script: 'text/javascript, application/javascript',
    json: jsonType,
    xml: 'application/xml, text/xml',
    html: htmlType,
    text: 'text/plain'
  },
  // Whether the request is to another domain
  crossDomain: false,
  // Default timeout
  timeout: consts.fh_timeout
}

function mimeToDataType(mime) {
  return mime && (mime == htmlType ? 'html' :
    mime == jsonType ? 'json' :
    scriptTypeRE.test(mime) ? 'script' :
    xmlTypeRE.test(mime) && 'xml') || 'text'
}

function appendQuery(url, query) {
  return (url + '&' + query).replace(/[&?]{1,2}/, '?')
}

// serialize payload and append it to the URL for GET requests
function serializeData(options) {
  if (type(options.data) === 'object') {
    if(typeof options.data.append === "function"){
      //we are dealing with FormData, do not serialize
      options.formdata = true;
    } else {
      options.data = param(options.data)
    }
  }
  if (options.data && (!options.type || options.type.toUpperCase() == 'GET'))
    options.url = appendQuery(options.url, options.data)
}

ajax.get = function (url, success) {
  return ajax({
    url: url,
    success: success
  })
}

ajax.post = function (url, data, success, dataType) {
  if (type(data) === 'function') dataType = dataType || success, success = data, data = null
  return ajax({
    type: 'POST',
    url: url,
    data: data,
    success: success,
    dataType: dataType
  })
}

ajax.getJSON = function (url, success) {
  return ajax({
    url: url,
    success: success,
    dataType: 'json'
  })
}

var escape = encodeURIComponent;

function serialize(params, obj, traditional, scope) {
  var array = type(obj) === 'array';
  for (var key in obj) {
    var value = obj[key];

    if (scope) key = traditional ? scope : scope + '[' + (array ? '' : key) + ']'
    // handle data in serializeArray() format
    if (!scope && array) params.add(value.name, value.value)
    // recurse into nested objects
    else if (traditional ? (type(value) === 'array') : (type(value) === 'object'))
      serialize(params, value, traditional, key)
    else params.add(key, value)
  }
}

function param(obj, traditional) {
  var params = []
  params.add = function (k, v) {
    this.push(escape(k) + '=' + escape(v))
  }
  serialize(params, obj, traditional)
  return params.join('&').replace('%20', '+')
}

function extend(target) {
  var slice = Array.prototype.slice;
  slice.call(arguments, 1).forEach(function (source) {
    for (key in source)
      if (source[key] !== undefined)
        target[key] = source[key]
  })
  return target
}
},{"./XDomainRequestWrapper":77,"./constants":87,"./events":90,"./logger":97,"type-of":51}],79:[function(require,module,exports){
var logger =require("./logger");
var cloud = require("./waitForCloud");
var fhparams = require("./fhparams");
var ajax = require("./ajax");
var JSON = require("JSON");
var handleError = require("./handleError");

function doActCall(opts, success, fail){
  var cloud_host = cloud.getCloudHost();
  var url = cloud_host.getActUrl(opts.act);
  var params = opts.req || {};
  params = fhparams.addFHParams(params);
  return ajax({
    "url": url,
    "tryJSONP": true,
    "type": "POST",
    "dataType": "json",
    "data": JSON.stringify(params),
    "contentType": "application/json",
    "timeout": opts.timeout,
    "success": success,
    "error": function(req, statusText, error){
      return handleError(fail, req, statusText, error);
    }
  })
}

module.exports = function(opts, success, fail){
  logger.debug("act is called");
  if(!fail){
    fail = function(msg, error){
      logger.debug(msg + ":" + JSON.stringify(error));
    };
  }

  if(!opts.act){
    return fail('act_no_action', {});
  }

  cloud.ready(function(err, cloudHost){
    logger.debug("Calling fhact now");
    if(err){
      return fail(err.message, err);
    } else {
      doActCall(opts, success, fail);
    }
  })
}
},{"./ajax":78,"./fhparams":91,"./handleError":92,"./logger":97,"./waitForCloud":107,"JSON":3}],80:[function(require,module,exports){
var logger =require("./logger");
var cloud = require("./waitForCloud");
var fhparams = require("./fhparams");
var ajax = require("./ajax");
var JSON = require("JSON");
var handleError = require("./handleError");
var device = require("./device");
var constants = require("./constants");
var checkAuth = require("./checkAuth");
var appProps = require("./appProps");

module.exports = function(opts, success, fail){
  if(!fail){
    fail = function(msg, error){
      logger.debug(msg + ":" + JSON.stringify(error));
    };
  }
  if (!opts.policyId) {
    return fail('auth_no_policyId', {});
  }
  if (!opts.clientToken) {
    return fail('auth_no_clientToken', {});
  }

  cloud.ready(function(err, data){
    if(err){
      return fail(err.message, err);
    } else {
      var req = {};
      req.policyId = opts.policyId;
      req.clientToken = opts.clientToken;
      if (opts.endRedirectUrl) {
        req.endRedirectUrl = opts.endRedirectUrl;
        if (opts.authCallback) {
          req.endRedirectUrl += (/\?/.test(req.endRedirectUrl) ? "&" : "?") + "_fhAuthCallback=" + opts.authCallback;
        }
      }
      req.params = {};
      if (opts.params) {
        req.params = opts.params;
      }
      var endurl = opts.endRedirectUrl || "status=complete";
      req.device = device.getDeviceId();
      var app_props = appProps.getAppProps();
      var path = app_props.host + constants.boxprefix + "admin/authpolicy/auth";
      req = fhparams.addFHParams(req);

      ajax({
        "url": path,
        "type": "POST",
        "tryJSONP": true,
        "data": JSON.stringify(req),
        "dataType": "json",
        "contentType": "application/json",
        "timeout" : opts.timeout || app_props.timeout || constants.fh_timeout,
        success: function(res) {
          checkAuth.handleAuthResponse(endurl, res, success, fail);
        },
        error: function(req, statusText, error) {
          handleError(fail, req, statusText, error);
        }
      });
    }
  });
}
},{"./ajax":78,"./appProps":85,"./checkAuth":86,"./constants":87,"./device":89,"./fhparams":91,"./handleError":92,"./logger":97,"./waitForCloud":107,"JSON":3}],81:[function(require,module,exports){
var logger =require("./logger");
var cloud = require("./waitForCloud");
var fhparams = require("./fhparams");
var ajax = require("./ajax");
var JSON = require("JSON");
var handleError = require("./handleError");

function doCloudCall(opts, success, fail){
  var cloud_host = cloud.getCloudHost();
  var url = cloud_host.getCloudUrl(opts.path);
  var params = opts.data || {};
  params = fhparams.addFHParams(params);
  return ajax({
    "url": url,
    "type": opts.method || "POST",
    "dataType": opts.dataType || "json",
    "data": JSON.stringify(params),
    "contentType": opts.contentType || "application/json",
    "timeout": opts.timeout,
    "success": success,
    "error": function(req, statusText, error){
      return handleError(fail, req, statusText, error);
    }
  })
}

module.exports = function(opts, success, fail){
  logger.debug("cloud is called");
  if(!fail){
    fail = function(msg, error){
      logger.debug(msg + ":" + JSON.stringify(error));
    };
  }

  cloud.ready(function(err, cloudHost){
    logger.debug("Calling fhact now");
    if(err){
      return fail(err.message, err);
    } else {
      doCloudCall(opts, success, fail);
    }
  })
}
},{"./ajax":78,"./fhparams":91,"./handleError":92,"./logger":97,"./waitForCloud":107,"JSON":3}],82:[function(require,module,exports){
var hashImpl = require("./security/hash");

module.exports = function(p, s, f){
  var params = {};
  if(typeof p.algorithm === "undefined"){
    p.algorithm = "MD5";
  }
  params.act = "hash";
  params.params = p;
  hashImpl(params, s, f);
};
},{"./security/hash":103}],83:[function(require,module,exports){
var logger =require("./logger");
var cloud = require("./waitForCloud");
var fhparams = require("./fhparams");
var ajax = require("./ajax");
var JSON = require("JSON");
var handleError = require("./handleError");
var consts = require("./constants");


module.exports = function(opts, success, fail){
  logger.debug("mbaas is called.");
  if(!fail){
    fail = function(msg, error){
      console.debug(msg + ":" + JSON.stringify(error));
    };
  }

  var mbaas = opts.service;
  var params = opts.params;

  cloud.ready(function(err, cloudHost){
    logger.debug("Calling mbaas now");
    if(err){
      return fail(err.message, err);
    } else {
      var cloud_host = cloud.getCloudHost();
      var url = cloud_host.getMBAASUrl(mbaas);
      params = fhparams.addFHParams(params);
      return ajax({
        "url": url,
        "tryJSONP": true,
        "type": "POST",
        "dataType": "json",
        "data": JSON.stringify(params),
        "contentType": "application/json",
        "timeout": opts.timeout || consts.fh_timeout,
        "success": success,
        "error": function(req, statusText, error){
          return handleError(fail, req, statusText, error);
        }
      });
    }
  });
} 

},{"./ajax":78,"./constants":87,"./fhparams":91,"./handleError":92,"./logger":97,"./waitForCloud":107,"JSON":3}],84:[function(require,module,exports){
var keygen = require("./security/aes-keygen");
var aes = require("./security/aes-node");
var rsa = require("./security/rsa-node");
var hash = require("./security/hash");

module.exports = function(p, s, f){
  if (!p.act) {
    f('bad_act', {}, p);
    return;
  }
  if (!p.params) {
    f('no_params', {}, p);
    return;
  }
  if (!p.params.algorithm) {
    f('no_params_algorithm', {}, p);
    return;
  }
  p.params.algorithm = p.params.algorithm.toLowerCase();
  if(p.act === "hash"){
    return hash(p, s, f);
  } else if(p.act === "encrypt"){
    if(p.params.algorithm === "aes"){
      return aes.encrypt(p, s, f);
    } else if(p.params.algorithm === "rsa"){
      return rsa.encrypt(p, s, f);
    } else {
      return f('encrypt_bad_algorithm:' + p.params.algorithm, {}, p);
    }
  } else if(p.act === "decrypt"){
    if(p.params.algorithm === "aes"){
      return aes.decrypt(p, s, f);
    } else {
      return f('decrypt_bad_algorithm:' + p.params.algorithm, {}, p);
    }
  } else if(p.act === "keygen"){
    if(p.params.algorithm === "aes"){
      return keygen(p, s, f);
    } else {
      return f('keygen_bad_algorithm:' + p.params.algorithm, {}, p);
    }
  }
}
},{"./security/aes-keygen":101,"./security/aes-node":102,"./security/hash":103,"./security/rsa-node":104}],85:[function(require,module,exports){
var consts = require("./constants");
var ajax = require("./ajax");
var logger = require("./logger");
var qs = require("./queryMap");

var app_props = null;

var load = function(cb) {
  var doc_url = document.location.href;
  var url_params = qs(doc_url);
  var local = (typeof url_params.url !== 'undefined');

  // For local environments, no init needed
  if (local) {
    app_props = {};
    app_props.local = true;
    app_props.host = url_params.url;
    app_props.appid = "000000000000000000000000";
    app_props.appkey = "0000000000000000000000000000000000000000";
    app_props.projectid = "000000000000000000000000";
    app_props.connectiontag = "0.0.1";
    app_props.loglevel = url_params.loglevel;
    return cb(null, app_props);
  }

  var config_url = url_params.fhconfig || consts.config_js;
  ajax({
    url: config_url,
    dataType: "json",
    success: function(data) {
      logger.debug("fhconfig = " + JSON.stringify(data));
      //when load the config file on device, because file:// protocol is used, it will never call fail call back. The success callback will be called but the data value will be null.
      if (null === data) {
        return cb(new Error("app_config_missing"));
      } else {
        app_props = data;

        cb(null, app_props);
      }
    },
    error: function(req, statusText, error) {
      //fh v2 only
      if(window.fh_app_props){
        return cb(null, window.fh_app_props);
      }
      logger.error(consts.config_js + " Not Found");
      cb(new Error("app_config_missing"));
    }
  });
};

var setAppProps = function(props) {
  app_props = props;
};

var getAppProps = function() {
  return app_props;
};

module.exports = {
  load: load,
  getAppProps: getAppProps,
  setAppProps: setAppProps
};
},{"./ajax":78,"./constants":87,"./logger":97,"./queryMap":99}],86:[function(require,module,exports){
var logger = require("./logger");
var queryMap = require("./queryMap");
var JSON = require("JSON");
var fhparams = require("./fhparams");

var checkAuth = function(url) {
  if (/\_fhAuthCallback/.test(url)) {
    var qmap = queryMap(url);
    if (qmap) {
      var fhCallback = qmap["_fhAuthCallback"];
      if (fhCallback) {
        if (qmap['result'] && qmap['result'] === 'success') {
          var sucRes = {'sessionToken': qmap['fh_auth_session'], 'authResponse' : JSON.parse(decodeURIComponent(decodeURIComponent(qmap['authResponse'])))};
          fhparams.setAuthSessionToken(qmap['fh_auth_session']);
          window[fhCallback](null, sucRes);
        } else {
          window[fhCallback]({'message':qmap['message']});
        }
      }
    }
  }
};

var handleAuthResponse = function(endurl, res, success, fail){
  if(res.status && res.status === "ok"){

    var onComplete = function(res){
      if(res.sessionToken){
        fhparams.setAuthSessionToken(res.sessionToken);
      }
      success(res);
    };
    //for OAuth, a url will be returned which means the user should be directed to that url to authenticate.
    //we try to use the ChildBrower plugin if it can be found. Otherwise send the url to the success function to allow developer to handle it.
    if(res.url){
      var inappBrowserWindow = null;
      var locationChange = function(new_url){
        if(new_url.indexOf(endurl) > -1){
          if(inappBrowserWindow){
            inappBrowserWindow.close();
          }
          var qmap = queryMap(new_url);
          if(qmap) {
            if(qmap['result'] && qmap['result'] === 'success'){
              var sucRes = {'sessionToken': qmap['fh_auth_session'], 'authResponse' : JSON.parse(decodeURIComponent(decodeURIComponent(qmap['authResponse'])))};
              onComplete(sucRes);
            } else {
              if(fail){
                fail("auth_failed", {'message':qmap['message']});
              }
            }
          } else {
            if(fail){
                fail("auth_failed", {'message':qmap['message']});
            }
          }
        }
      };
      if(window.PhoneGap || window.cordova){
        if(window.plugins && window.plugins.childBrowser){
          //found childbrowser plugin,add the event listener and load it
          //we need to know when the OAuth process is finished by checking for the presence of endurl. If the endurl is found, it means the authentication finished and we should find if it's successful.
          if(typeof window.plugins.childBrowser.showWebPage === "function"){
            window.plugins.childBrowser.onLocationChange = locationChange;
            window.plugins.childBrowser.showWebPage(res.url);
            inappBrowserWindow = window.plugins.childBrowser;
          }
        } else {
          try {
            inappBrowserWindow = window.open(res.url, "_blank", 'location=yes');
            inappBrowserWindow.addEventListener("loadstart", function(ev){
              locationChange(ev.url);
            });
          } catch(e){
            logger.info("InAppBrowser plugin is not intalled.");
            onComplete(res);
          }
        }
      } else {
       document.location.href = res.url;
      }
    } else {
      onComplete(res);
    }
  } else {
    if(fail){
      fail("auth_failed", res);
    }
  }
};

//This is mainly for using $fh.auth inside browsers. If the authentication method is OAuth, at the end of the process, the user will be re-directed to
//a url that we specified for checking if the auth is successful. So we always check the url to see if we are on the re-directed page.
if (window.addEventListener) {
  window.addEventListener('load', function(){
    checkAuth(window.location.href);
  }, false); //W3C
} else {
  window.attachEvent('onload', function(){
    checkAuth(window.location.href);
  }); //IE
}

module.exports = {
  "handleAuthResponse": handleAuthResponse
};

},{"./fhparams":91,"./logger":97,"./queryMap":99,"JSON":3}],87:[function(require,module,exports){
module.exports = {
  "fh_timeout": 20000,
  "boxprefix": "/box/srv/1.1/",
  "sdk_version": "BUILD_VERSION",
  "config_js": "fhconfig.json",
  "INIT_EVENT": "fhinit"
};
},{}],88:[function(require,module,exports){
module.exports = {
  readCookieValue  : function (cookie_name) {
    var name_str = cookie_name + "=";
    var cookies = document.cookie.split(";");
    for (var i = 0; i < cookies.length; i++) {
      var c = cookies[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1, c.length);
      }
      if (c.indexOf(name_str) === 0) {
        return c.substring(name_str.length, c.length);
      }
    }
    return null;
  },

  createCookie : function (cookie_name, cookie_value) {
    var date = new Date();
    date.setTime(date.getTime() + 36500 * 24 * 60 * 60 * 1000); //100 years
    var expires = "; expires=" + date.toGMTString();
    document.cookie = cookie_name + "=" + cookie_value + expires + "; path = /";
  }
};

},{}],89:[function(require,module,exports){
var cookies = require("./cookies");
var uuidModule = require("./uuid");
var logger = require("./logger");

module.exports = {
  //try to get the unique device identifier
  "getDeviceId": function(){
    //check for cordova/phonegap first
    if(typeof window.fhdevice !== "undefined" && typeof window.fhdevice.uuid !== "undefined"){
      return window.fhdevice.uuid;
    } else if(typeof window.device !== "undefined" && typeof window.device.uuid !== "undefined"){
      return window.device.uuid;
    }  else if(typeof navigator.device !== "undefined" && typeof navigator.device.uuid !== "undefined"){
      return navigator.device.uuid;
    } else {
      var _mock_uuid_cookie_name = "mock_uuid";
      var uuid = cookies.readCookieValue(_mock_uuid_cookie_name);
      if(null == uuid){
          uuid = uuidModule.createUUID();
          cookies.createCookie(_mock_uuid_cookie_name, uuid);
      }
      return uuid;
    }
  },

  //this is for fixing analytics issues when upgrading from io6 to ios7. Probably can be deprecated now
  "getCuidMap": function(){
    if(typeof window.fhdevice !== "undefined" && typeof window.fhdevice.cuidMap !== "undefined"){
      return window.fhdevice.cuidMap;
    } else if(typeof window.device !== "undefined" && typeof window.device.cuidMap !== "undefined"){
      return window.device.cuidMap;
    }  else if(typeof navigator.device !== "undefined" && typeof navigator.device.cuidMap !== "undefined"){
      return navigator.device.cuidMap;
    }

    return null;
  },

  "getDestination": function(){
    var destination = null;
    var platformsToTest = require("./platformsMap");


    var userAgent = navigator.userAgent;

    var dest_override = document.location.search.split("fh_destination_code=");
    if (dest_override.length > 1) {
     destination = dest_override[1];
    } else if (typeof window.fh_destination_code !== 'undefined') {
      destination = window.fh_destination_code;
    } else {
      platformsToTest.forEach(function(testDestination){
        testDestination.test.forEach(function(destinationTest){
          if(userAgent.indexOf(destinationTest) > -1){
            destination = testDestination.destination;
          }
        });
      });
    }

    if(destination == null){ //No user agents were found, set to default web
      destination = "web";
    }

    logger.debug("destination = " + destination);

    return destination;
  }
}

},{"./cookies":88,"./logger":97,"./platformsMap":98,"./uuid":106}],90:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;

var emitter = new EventEmitter();
emitter.setMaxListeners(0);

module.exports = emitter;
},{"events":43}],91:[function(require,module,exports){
var device = require("./device");
var sdkversion = require("./sdkversion");
var appProps = require("./appProps");
var logger = require("./logger");

var defaultParams = null;
var authSessionToken = null;
//TODO: review these options, we probably only needs all of them for init calls, but we shouldn't need all of them for act calls
var buildFHParams = function(){
  if(defaultParams){
    return defaultParams;
  }
  var fhparams = {};
  fhparams.cuid = device.getDeviceId();
  fhparams.cuidMap = device.getCuidMap();
  fhparams.destination = device.getDestination();
  
  if(window.device || navigator.device){
    fhparams.device = window.device || navigator.device;
  }

  //backward compatible
  if (typeof window.fh_app_version !== 'undefined'){
    fhparams.app_version = fh_app_version;
  }
  if (typeof window.fh_project_version !== 'undefined'){
    fhparams.project_version = fh_project_version;
  }
  if (typeof window.fh_project_app_version !== 'undefined'){
    fhparams.project_app_version = fh_project_app_version;
  }
  fhparams.sdk_version = sdkversion();
  if(authSessionToken){
    fhparams.sessionToken = authSessionToken;
  }

  var app_props = appProps.getAppProps();
  if(app_props){
    fhparams.appid = app_props.appid;
    fhparams.appkey = app_props.appkey;
    fhparams.projectid = app_props.projectid;
    fhparams.analyticsTag =  app_props.analyticsTag;
    fhparams.connectiontag = app_props.connectiontag;
    if(app_props.init){
      fhparams.init = typeof(app_props.init) === "string" ? JSON.parse(app_props.init) : app_props.init;
    }
  }
  
  defaultParams = fhparams;
  logger.debug("fhparams = ", defaultParams);
  return fhparams;
}

var addFHParams = function(params){
  var params = params || {};
  params.__fh = buildFHParams();
  return params;
}

var setAuthSessionToken = function(sessionToken){
  authSessionToken = sessionToken;
}

module.exports = {
  "buildFHParams": buildFHParams,
  "addFHParams": addFHParams,
  "setAuthSessionToken":setAuthSessionToken
}

},{"./appProps":85,"./device":89,"./logger":97,"./sdkversion":100}],92:[function(require,module,exports){
var JSON = require("JSON");

module.exports = function(fail, req, resStatus, error){
  var errraw;
  var statusCode = 0;
  if(req){
    try{
      statusCode = req.status;
      var res = JSON.parse(req.responseText);
      errraw = res.error || res.msg;
      if (errraw instanceof Array) {
        errraw = errraw.join('\n');
      }
    } catch(e){
      errraw = req.responseText;
    }
  }
  if(fail){
    fail(errraw, {
      status: statusCode,
      message: resStatus,
      error: error
    });
  }
};

},{"JSON":3}],93:[function(require,module,exports){
var constants = require("./constants");
var appProps = require("./appProps");

function removeEndSlash(input){
  var ret = input;
  if(ret.charAt(ret.length - 1) === "/"){
    ret = ret.substring(0, ret.length-1);
  }
  return ret;
}

function removeStartSlash(input){
  var ret = input;
  if(ret.length > 1 && ret.charAt(0) === "/"){
    ret = ret.substring(1, ret.length);
  }
  return ret;
}

function CloudHost(cloud_props){
  this.cloud_props = cloud_props;
  this.cloud_host = undefined;
  this.isLegacy = false;
}

CloudHost.prototype.getHost = function(appType){
  if(this.cloud_host){
    return this.cloud_host;
  } else {
    var url;
    var app_type;
    if(this.cloud_props && this.cloud_props.hosts){
      url = this.cloud_props.hosts.url;

      if (typeof url === 'undefined') {
        // resolve url the old way i.e. depending on
        // -burnt in app mode
        // -returned dev or live url
        // -returned dev or live type (node or fh(rhino or proxying))
        var cloud_host = this.cloud_props.hosts.releaseCloudUrl;
        app_type = this.cloud_props.hosts.releaseCloudType;

        if(typeof appType !== "undefined" && appType.indexOf("dev") > -1){
          cloud_host = this.cloud_props.hosts.debugCloudUrl;
          app_type = this.cloud_props.hosts.debugCloudType;
        }
        url = cloud_host;
      }
    }
    url = removeEndSlash(url);
    this.cloud_host = url;
    if(app_type === "fh"){
      this.isLegacy = true;
    }
    return url;
  }
}

CloudHost.prototype.getActUrl = function(act){
  var app_props = appProps.getAppProps() || {};
  if(typeof this.cloud_host === "undefined"){
    this.getHost(app_props.mode);
  }
  if(this.isLegacy){
    return this.cloud_host + constants.boxprefix + "act/" + this.cloud_props.domain + "/" + app_props.appid + "/" + act + "/" + app_props.appid;
  } else {
    return this.cloud_host + "/cloud/" + act;
  }
}

CloudHost.prototype.getMBAASUrl = function(service){
  var app_props = appProps.getAppProps() || {};
  if(typeof this.cloud_host === "undefined"){
    this.getHost(app_props.mode);
  }
  return this.cloud_host + "/mbaas/" + service;
}

CloudHost.prototype.getCloudUrl = function(path){
  var app_props = appProps.getAppProps() || {};
  if(typeof this.cloud_host === "undefined"){
    this.getHost(app_props.mode);
  }
  return this.cloud_host + "/" + removeStartSlash(path);
}



module.exports = CloudHost;
},{"./appProps":85,"./constants":87}],94:[function(require,module,exports){
var loadScript = require("./loadScript");
var Lawnchair = require('../../libs/generated/lawnchair');
var lawnchairext = require('./lawnchair-ext');
var consts = require("./constants");
var fhparams = require("./fhparams");
var ajax = require("./ajax");
var handleError = require("./handleError");
var logger = require("./logger");
var JSON = require("JSON");
var hashFunc = require("./security/hash");
var appProps = require("./appProps");

var init = function(cb) {
  appProps.load(function(err, data) {
    if (err) return cb(err);
    return loadCloudProps(data, cb);
  });
}

var loadCloudProps = function(app_props, callback) {
  if(app_props.loglevel){
    logger.setLevel(app_props.loglevel);
  }
  // If local - shortcircuit the init - just return the host
  if (app_props.local) {
    var res = {
      "domain": "local",
      "firstTime": false,
      "hosts": {
        "debugCloudType": "node",
        "debugCloudUrl": app_props.host,
        "releaseCloudType": "node",
        "releaseCloudUrl": app_props.host,
        "type": "cloud_nodejs",
        "url": app_props.host
      },
      "init": {
        "trackId": "000000000000000000000000"
      },
      "status": "ok"
    };

    return callback(null, {
      cloud: res
    });
  }


  //now we have app props, add the fileStorageAdapter
  lawnchairext.addAdapter(app_props, hashFunc);
  //dom adapter doens't work on windows phone, so don't specify the adapter if the dom one failed
  //we specify the order of lawnchair adapters to use, lawnchair will find the right one to use, to keep backward compatibility, keep the order
  //as dom, webkit-sqlite, localFileStorage, window-name
  var lcConf = {
    name: "fh_init_storage",
    adapter: ["dom", "webkit-sqlite", "localFileStorage", "window-name"],
    fail: function(msg, err) {
      var error_message = 'read/save from/to local storage failed  msg:' + msg + ' err:' + err;
      return fail(error_message, {});
    }
  };

  var storage = null;
  try {
    storage = new Lawnchair(lcConf, function() {});
  } catch (e) {
    //when dom adapter failed, Lawnchair throws an error
    //shoudn't go in here anymore
    lcConf.adapter = undefined;
    storage = new Lawnchair(lcConf, function() {});
  }

  var path = app_props.host + consts.boxprefix + "app/init";

  storage.get('fh_init', function(storage_res) {
    var savedHost = null;
    if (storage_res && storage_res.value !== null && typeof(storage_res.value) !== "undefined" && storage_res !== "") {
      storage_res = typeof(storage_res) === "string" ? JSON.parse(storage_res) : storage_res;
      storage_res.value = typeof(storage_res.value) === "string" ? JSON.parse(storage_res.value) : storage_res.value;
      if (storage_res.value.init) {
        app_props.init = storage_res.value.init;
      } else {
        //keep it backward compatible.
        app_props.init = typeof(storage_res.value) === "string" ? JSON.parse(storage_res.value) : storage_res.value;
      }
      if (storage_res.value.hosts) {
        savedHost = storage_res.value;
      }
    }
    var data = fhparams.buildFHParams();

    ajax({
      "url": path,
      "type": "POST",
      "tryJSONP": true,
      "dataType": "json",
      "contentType": "application/json",
      "data": JSON.stringify(data),
      "timeout": app_props.timeout || consts.fh_timeout,
      "success": function(initRes) {
        storage.save({
          key: "fh_init",
          value: initRes
        }, function() {});
        if (callback) {
          callback(null, {
            cloud: initRes
          });
        }
      },
      "error": function(req, statusText, error) {
        //use the cached host if we have a copy
        if (savedHost) {
          if (callback) {
            callback(null, {
              cloud: savedHost
            });
          }
        } else {
          handleError(function(msg, err) {
            if (callback) {
              callback({
                error: err,
                message: msg
              });
            }
          }, req, statusText, error);
        }
      }
    });
  });
};

module.exports = {
  "init": init,
  "loadCloudProps": loadCloudProps
}
},{"../../libs/generated/lawnchair":2,"./ajax":78,"./appProps":85,"./constants":87,"./fhparams":91,"./handleError":92,"./lawnchair-ext":95,"./loadScript":96,"./logger":97,"./security/hash":103,"JSON":3}],95:[function(require,module,exports){
var Lawnchair = require('../../libs/generated/lawnchair');

var fileStorageAdapter = function (app_props, hashFunc) {
  // private methods

  function doLog(mess){
    if(console){
      console.log(mess);
    }
  }

  var fail = function (e, i) {
    if(console) console.log('error in file system adapter !', e, i);
    else throw e;
  };


  function filenameForKey(key, cb) {
    key = app_props.appid + key;

    hashFunc({
      algorithm: "MD5",
      text: key
    }, function(result) {
      var filename = result.hashvalue + '.txt';
      if (typeof navigator.externalstorage !== "undefined") {
        navigator.externalstorage.enable(function handleSuccess(res){
          var path = filename;
          if(res.path ) {
            path = res.path;
            if(!path.match(/\/$/)) {
              path += '/';
            }
            path += filename;
          }
          filename = path;
          return cb(filename);
        },function handleError(err){
          return cb(filename);
        })
      } else {
        doLog('filenameForKey key=' + key+ ' , Filename: ' + filename);
        return cb(filename);
      }
    });
  }

  return {

    valid: function () { return !!(window.requestFileSystem) },

    init : function (options, callback){
      //calls the parent function fn and applies this scope
      if(options && 'function' === typeof options.fail ) fail = options.fail;
      if (callback) this.fn(this.name, callback).call(this, this);
    },

    keys: function (callback){
      throw "Currently not supported";
    },

    save : function (obj, callback){
      var key = obj.key;
      var value = obj.val||obj.value;
      filenameForKey(key, function(hash) {
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {

          fileSystem.root.getFile(hash, {
            create: true
          }, function gotFileEntry(fileEntry) {
            fileEntry.createWriter(function gotFileWriter(writer) {
              writer.onwrite = function() {
                return callback({
                  key: key,
                  val: value
                });
              };
              writer.write(value);
            }, function() {
              fail('[save] Failed to create file writer');
            });
          }, function() {
            fail('[save] Failed to getFile');
          });
        }, function() {
          fail('[save] Failed to requestFileSystem');
        });
      });
    },

    batch : function (records, callback){
      throw "Currently not supported";
    },

    get : function (key, callback){
      filenameForKey(key, function(hash) {
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {
          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {
            fileEntry.file(function gotFile(file) {
              var reader = new FileReader();
              reader.onloadend = function (evt) {
                var text = evt.target.result;
                // Check for URLencoded
                // PG 2.2 bug in readAsText()
                try {
                  text = decodeURIComponent(text);
                } catch (e) {
                  // Swallow exception if not URLencoded
                  // Just use the result
                }
                return callback({
                  key: key,
                  val: text
                });
              };
              reader.readAsText(file);
            }, function() {
              fail('[load] Failed to getFile');
            });
          }, function() {
            // Success callback on key load failure
            callback({
              key: key,
              val: null
            });
          });
        }, function() {
          fail('[load] Failed to get fileSystem');
        });
      });
    },

    exists : function (key, callback){
      filenameForKey(key,function (hash){
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {
          fileSystem.root.getFile(hash, {},
            function gotFileEntry(fileEntry) {
              return callback(true);
            }, function (err){
              return callback(false);
            });
        });
      });
    },

    all : function (callback){
      throw "Currently not supported";
    },

    remove : function (key, callback){
      filenameForKey(key, function(hash) {

        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {
          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {

            fileEntry.remove(function() {
              return callback({
                key: key,
                val: null
              });
            }, function() {
              fail('[remove] Failed to remove file');
            });
          }, function() {
            fail('[remove] Failed to getFile');
          });
        }, function() {
          fail('[remove] Failed to get fileSystem');
        });
      });
    },

    nuke : function (callback){
      throw "Currently not supported";
    }


  };
}

var addAdapter = function(app_props, hashFunc){
  Lawnchair.adapter('localFileStorage', fileStorageAdapter(app_props, hashFunc));
}

module.exports = {
  addAdapter: addAdapter
}
},{"../../libs/generated/lawnchair":2}],96:[function(require,module,exports){
module.exports = function (url, callback) {
  var script;
  var head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;
  script = document.createElement("script");
  script.async = "async";
  script.src = url;
  script.type = "text/javascript";
  script.onload = script.onreadystatechange = function () {
    if (!script.readyState || /loaded|complete/.test(script.readyState)) {
      script.onload = script.onreadystatechange = null;
      if (head && script.parentNode) {
        head.removeChild(script);
      }
      script = undefined;
      if (callback && typeof callback === "function") {
        callback();
      }
    }
  };
  head.insertBefore(script, head.firstChild);
};

},{}],97:[function(require,module,exports){
var console = require('console');
var log = require('loglevel');

log.setLevel('info');

/**
 * APIs:
 * see https://github.com/pimterry/loglevel.
 * In short, you can use:
 * log.setLevel(loglevel) - default to info
 * log.enableAll() - enable all log messages
 * log.disableAll() - disable all log messages
 *
 * log.trace(msg)
 * log.debug(msg)
 * log.info(msg)
 * log.warn(msg)
 * log.error(msg)
 *
 * Available levels: { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3, "ERROR": 4, "SILENT": 5}
 * Use either string or integer value
 */
module.exports = log;
},{"console":42,"loglevel":48}],98:[function(require,module,exports){
module.exports = [
  {
    "destination" :"ipad",
    "test": ["iPad"]
  },
  {
    "destination" :"iphone",
    "test": ["iPhone"]
  },
  {
    "destination" :"android",
    "test": ["Android"]
  },
  {
    "destination" :"blackberry",
    "test": ["BlackBerry", "BB10", "RIM Tablet OS"]//Blackberry 10 does not contain "Blackberry"
  },
  {
    "destination" :"windowsphone",
    "test": ["Windows Phone 8"]
  },
  {
    "destination" :"windowsphone7",
    "test": ["Windows Phone OS 7"]
  }
];

},{}],99:[function(require,module,exports){
module.exports = function(url) {
  var qmap = {};
  var i = url.split("?");
  if (i.length === 2) {
    var queryString = i[1];
    var pairs = queryString.split("&");
    qmap = {};
    for (var p = 0; p < pairs.length; p++) {
      var q = pairs[p];
      var qp = q.split("=");
      qmap[qp[0]] = qp[1];
    }
  }
  return qmap;
};
},{}],100:[function(require,module,exports){
var constants = require("./constants");

module.exports = function() {
  var type = "FH_JS_SDK";
  if (typeof window.fh_destination_code !== 'undefined') {
    type = "FH_HYBRID_SDK";
  } else if(window.PhoneGap || window.cordova) {
    type = "FH_PHONEGAP_SDK";
  }
  return type + "/" + constants.sdk_version;
};

},{"./constants":87}],101:[function(require,module,exports){
var rsa = require("../../../libs/rsa");
var SecureRandom = rsa.SecureRandom;
var byte2Hex = rsa.byte2Hex;

var generateRandomKey = function(keysize){
  var r = new SecureRandom();
  var key = new Array(keysize);
  r.nextBytes(key);
  var result = "";
  for(var i=0;i<key.length;i++){
    result += byte2Hex(key[i]);
  }
  return result;
};

var aes_keygen = function(p, s, f){
  if (!p.params.keysize) {
    f('no_params_keysize', {}, p);
    return;
  }
  if (p.params.algorithm.toLowerCase() !== "aes") {
    f('keygen_bad_algorithm', {}, p);
    return;
  }
  var keysize = parseInt(p.params.keysize, 10);
  //keysize is in bit, need to convert to bytes to generate random key
  //but the legacy code has a bug, it doesn't do the convert, so if the keysize is less than 100, don't convert
  if(keysize > 100){
    keysize = keysize/8;
  }
  if(typeof SecureRandom === "undefined"){
    return f("security library is not loaded.");
  }
  return s({
    'algorithm': 'AES',
    'secretkey': generateRandomKey(keysize),
    'iv': generateRandomKey(keysize)
  });
}

module.exports = aes_keygen;
},{"../../../libs/rsa":4}],102:[function(require,module,exports){
var CryptoJS = require("../../../libs/generated/crypto");

var encrypt = function(p, s, f){
  var fields = ['key', 'plaintext', 'iv'];
  if(p.params.algorithm.toLowerCase() !== "aes"){
    return f('encrypt_bad_algorithm', {}, p);
  }
  for (var i = 0; i < fields; i++) {
    var field = fields[i];
    if (!p.params[field]) {
      return f('no_params_' + field, {}, p);
    }
  }
  var encrypted = CryptoJS.AES.encrypt(p.params.plaintext, CryptoJS.enc.Hex.parse(p.params.key), {iv: CryptoJS.enc.Hex.parse(p.params.iv)});
  cipher_text = CryptoJS.enc.Hex.stringify(encrypted.ciphertext);
  return s({ciphertext: cipher_text});
}

var decrypt = function(p, s, f){
  var fields = ['key', 'ciphertext', 'iv'];
  if(p.params.algorithm.toLowerCase() !== "aes"){
    return f('decrypt_bad_algorithm', {}, p);
  }
  for (var i = 0; i < fields; i++) {
    var field = fields[i];
    if (!p.params[field]) {
      return f('no_params_' + field, {}, p);
    }
  }
  var data = CryptoJS.enc.Hex.parse(p.params.ciphertext);
  var encodeData = CryptoJS.enc.Base64.stringify(data);
  var decrypted = CryptoJS.AES.decrypt(encodeData, CryptoJS.enc.Hex.parse(p.params.key), {iv: CryptoJS.enc.Hex.parse(p.params.iv)});
  plain_text = decrypted.toString(CryptoJS.enc.Utf8);
  return s({plaintext:plain_text});
}

module.exports = {
  encrypt: encrypt,
  decrypt: decrypt
}
},{"../../../libs/generated/crypto":1}],103:[function(require,module,exports){
var CryptoJS = require("../../../libs/generated/crypto");


var hash = function(p, s, f){
  if (!p.params.text) {
    f('hash_no_text', {}, p);
    return;
  }
  var hashValue;
  if (p.params.algorithm.toLowerCase() === "md5") {
    hashValue = CryptoJS.MD5(p.params.text).toString(CryptoJS.enc.Hex);
  } else if(p.params.algorithm.toLowerCase() === "sha1"){
    hashValue = CryptoJS.SHA1(p.params.text).toString(CryptoJS.enc.Hex);
  } else if(p.params.algorithm.toLowerCase() === "sha256"){
    hashValue = CryptoJS.SHA256(p.params.text).toString(CryptoJS.enc.Hex);
  } else if(p.params.algorithm.toLowerCase() === "sha512"){
    hashValue = CryptoJS.SHA512(p.params.text).toString(CryptoJS.enc.Hex);
  } else {
    return f("hash_unsupported_algorithm: " + p.params.algorithm);
  }
  return s({"hashvalue": hashValue});
}

module.exports = hash;
},{"../../../libs/generated/crypto":1}],104:[function(require,module,exports){
var rsa = require("../../../libs/rsa");
var RSAKey = rsa.RSAKey;

var encrypt = function(p, s, f){
  var fields = ['modulu', 'plaintext'];
  if(p.params.algorithm.toLowerCase() !== "rsa"){
    return f('encrypt_bad_algorithm', {}, p);
  }
  for (var i = 0; i < fields; i++) {
    var field = fields[i];
    if (!p.params[field]) {
      return f('no_params_' + field, {}, p);
    }
  }
  var key = new RSAKey();
  key.setPublic(p.params.modulu, "10001");
  var ori_text = p.params.plaintext;
  cipher_text = key.encrypt(ori_text);
  return s({ciphertext:cipher_text});
}

module.exports = {
  encrypt: encrypt
}
},{"../../../libs/rsa":4}],105:[function(require,module,exports){
var JSON = require("JSON");
var actAPI = require("./api_act");
var cloudAPI = require("./api_cloud");
var CryptoJS = require("../../libs/generated/crypto");
var Lawnchair = require('../../libs/generated/lawnchair');

var self = {

  // CONFIG
  defaults: {
    "sync_frequency": 10,
    // How often to synchronise data with the cloud in seconds.
    "auto_sync_local_updates": true,
    // Should local chages be syned to the cloud immediately, or should they wait for the next sync interval
    "notify_client_storage_failed": true,
    // Should a notification event be triggered when loading/saving to client storage fails
    "notify_sync_started": true,
    // Should a notification event be triggered when a sync cycle with the server has been started
    "notify_sync_complete": true,
    // Should a notification event be triggered when a sync cycle with the server has been completed
    "notify_offline_update": true,
    // Should a notification event be triggered when an attempt was made to update a record while offline
    "notify_collision_detected": true,
    // Should a notification event be triggered when an update failed due to data collision
    "notify_remote_update_failed": true,
    // Should a notification event be triggered when an update failed for a reason other than data collision
    "notify_local_update_applied": true,
    // Should a notification event be triggered when an update was applied to the local data store
    "notify_remote_update_applied": true,
    // Should a notification event be triggered when an update was applied to the remote data store
    "notify_delta_received": true,
    // Should a notification event be triggered when a delta was received from the remote data store for the dataset 
    "notify_record_delta_received": true,
    // Should a notification event be triggered when a delta was received from the remote data store for a record
    "notify_sync_failed": true,
    // Should a notification event be triggered when the sync loop failed to complete
    "do_console_log": false,
    // Should log statements be written to console.log
    "crashed_count_wait" : 10,
    // How many syncs should we check for updates on crashed in flight updates before we give up searching
    "resend_crashed_updates" : true,
    // If we have reached the crashed_count_wait limit, should we re-try sending the crashed in flight pending record
    "sync_active" : true,
    // Is the background sync with the cloud currently active
    "storage_strategy" : "html5-filesystem",
    // Storage strategy to use for Lawnchair - supported strategies are 'html5-filesystem' and 'dom'
    "file_system_quota" : 50 * 1024 * 1204
    // Amount of space to request from the HTML5 filesystem API when running in browser
  },

  notifications: {
    "CLIENT_STORAGE_FAILED": "client_storage_failed",
    // loading/saving to client storage failed
    "SYNC_STARTED": "sync_started",
    // A sync cycle with the server has been started
    "SYNC_COMPLETE": "sync_complete",
    // A sync cycle with the server has been completed
    "OFFLINE_UPDATE": "offline_update",
    // An attempt was made to update a record while offline
    "COLLISION_DETECTED": "collision_detected",
    //Update Failed due to data collision
    "REMOTE_UPDATE_FAILED": "remote_update_failed",
    // Update Failed for a reason other than data collision
    "REMOTE_UPDATE_APPLIED": "remote_update_applied",
    // An update was applied to the remote data store
    "LOCAL_UPDATE_APPLIED": "local_update_applied",
    // An update was applied to the local data store
    "DELTA_RECEIVED": "delta_received",
    // A delta was received from the remote data store for the dataset 
    "RECORD_DELTA_RECEIVED": "record_delta_received",
    // A delta was received from the remote data store for the record 
    "SYNC_FAILED": "sync_failed"
    // Sync loop failed to complete
  },

  datasets: {},

  // Initialise config to default values;
  config: undefined,

  notify_callback: undefined,

  hasCustomSync : undefined,

  // PUBLIC FUNCTION IMPLEMENTATIONS
  init: function(options) {
    self.consoleLog('sync - init called');

    self.config = JSON.parse(JSON.stringify(self.defaults));
    for (var i in options) {
      self.config[i] = options[i];
    }

    self.datasetMonitor();
  },

  notify: function(callback) {
    self.notify_callback = callback;
  },

  manage: function(dataset_id, options, query_params, meta_data, cb) {
    self.consoleLog('manage - START');

    var options = options || {};

    var doManage = function(dataset) {
      self.consoleLog('doManage dataset :: initialised = ' + dataset.initialised + " :: " + dataset_id + ' :: ' + JSON.stringify(options));

      var datasetConfig = self.setOptions(options);

      dataset.query_params = query_params || dataset.query_params || {};
      dataset.meta_data = meta_data || dataset.meta_data || {};
      dataset.config = datasetConfig;
      dataset.syncRunning = false;
      dataset.syncPending = true;
      dataset.initialised = true;
      dataset.meta = {};

      self.saveDataSet(dataset_id, function() {

        if( cb ) {
          cb();
        }
      });
    };

    // Check if the dataset is already loaded
    self.getDataSet(dataset_id, function(dataset) {
      self.consoleLog('manage - dataset already loaded');
      doManage(dataset);
    }, function(err) {
      self.consoleLog('manage - dataset not loaded... trying to load');

      // Not already loaded, try to load from local storage
      self.loadDataSet(dataset_id, function(dataset) {
          self.consoleLog('manage - dataset loaded from local storage');

          // Loading from local storage worked

          // Fire the local update event to indicate that dataset was loaded from local storage
          self.doNotify(dataset_id, null, self.notifications.LOCAL_UPDATE_APPLIED, "load");

          // Put the dataet under the management of the sync service
          doManage(dataset);
        },
        function(err) {
          // No dataset in memory or local storage - create a new one and put it in memory
          self.consoleLog('manage - Creating new dataset for id ' + dataset_id);
          var dataset = {};
          dataset.data = {};
          dataset.pending = {};
          self.datasets[dataset_id] = dataset;
          doManage(dataset);
        });
    });
  },

  setOptions: function(options) {
    // Make sure config is initialised
    if( ! self.config ) {
      self.config = JSON.parse(JSON.stringify(self.defaults));
    }

    var datasetConfig = JSON.parse(JSON.stringify(self.config));
    var optionsIn = JSON.parse(JSON.stringify(options));
    for (var k in optionsIn) {
      datasetConfig[k] = optionsIn[k];
    }

    return datasetConfig;
  },

  list: function(dataset_id, success, failure) {
    self.getDataSet(dataset_id, function(dataset) {
      if (dataset && dataset.data) {
        // Return a copy of the dataset so updates will not automatically make it back into the dataset
        var res = JSON.parse(JSON.stringify(dataset.data));
        success(res);
      } else {
        if(failure) failure('no_data');
      }
    }, function(code, msg) {
      if(failure) failure(code, msg);
    });
  },

  create: function(dataset_id, data, success, failure) {
    self.addPendingObj(dataset_id, null, data, "create", success, failure);
  },

  read: function(dataset_id, uid, success, failure) {
      self.getDataSet(dataset_id, function(dataset) {
      var rec = dataset.data[uid];
      if (!rec) {
        failure("unknown_uid");
      } else {
        // Return a copy of the record so updates will not automatically make it back into the dataset
        var res = JSON.parse(JSON.stringify(rec));
        success(res);
      }
    }, function(code, msg) {
      if(failure) failure(code, msg);
    });
  },

  update: function(dataset_id, uid, data, success, failure) {
    self.addPendingObj(dataset_id, uid, data, "update", success, failure);
  },

  'delete': function(dataset_id, uid, success, failure) {
    self.addPendingObj(dataset_id, uid, null, "delete", success, failure);
  },

  getPending: function(dataset_id, cb) {
    self.getDataSet(dataset_id, function(dataset) {
      var res;
      if( dataset ) {
        res = dataset.pending;
      }
      cb(res);
    }, function(err, datatset_id) {
        self.consoleLog(err);
    });
  },

  clearPending: function(dataset_id, cb) {
    self.getDataSet(dataset_id, function(dataset) {
      dataset.pending = {};
      self.saveDataSet(dataset_id, cb);
    });
  },

  listCollisions : function(dataset_id, success, failure){
    self.getDataSet(dataset_id, function(dataset) {
      self.doCloudCall({
        "dataset_id": dataset_id,
        "req": {
          "fn": "listCollisions",
          "meta_data" : dataset.meta_data
        }
      }, success, failure);
    }, failure);
  },

  removeCollision: function(dataset_id, colissionHash, success, failure) {
    self.getDataSet(dataset_id, function(dataset) {
      self.doCloudCall({
        "dataset_id" : dataset_id,
        "req": {
          "fn": "removeCollision",
          "hash": colissionHash,
          meta_data: dataset.meta_data
        }
      }, success, failure);
    });
  },


  // PRIVATE FUNCTIONS
  isOnline: function(callback) {
    var online = true;

    // first, check if navigator.online is available
    if(typeof navigator.onLine !== "undefined"){
      online = navigator.onLine;
    }

    // second, check if Phonegap is available and has online info
    if(online){
      //use phonegap to determin if the network is available
      if(typeof navigator.network !== "undefined" && typeof navigator.network.connection !== "undefined"){
        var networkType = navigator.network.connection.type;
        if(networkType === "none" || networkType === null) {
          online = false;
        }
      }
    }

    return callback(online);
  },

  doNotify: function(dataset_id, uid, code, message) {

    if( self.notify_callback ) {
      if ( self.config['notify_' + code] ) {
        var notification = {
          "dataset_id" : dataset_id,
          "uid" : uid,
          "code" : code,
          "message" : message
        };
        // make sure user doesn't block
        setTimeout(function () {
          self.notify_callback(notification);
        }, 0);
      }
    }
  },

  getDataSet: function(dataset_id, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      success(dataset);
    } else {
      failure('unknown_dataset ' + dataset_id, dataset_id);
    }
  },

  getQueryParams: function(dataset_id, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      success(dataset.query_params);
    } else {
      failure('unknown_dataset ' + dataset_id, dataset_id);
    }
  },

  setQueryParams: function(dataset_id, queryParams, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      dataset.query_params = queryParams;
      self.saveDataSet(dataset_id);
      if( success ) {
        success(dataset.query_params);
      }
    } else {
      if ( failure ) {
        failure('unknown_dataset ' + dataset_id, dataset_id);
      }
    }
  },

  getMetaData: function(dataset_id, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      success(dataset.meta_data);
    } else {
      failure('unknown_dataset ' + dataset_id, dataset_id);
    }
  },

  setMetaData: function(dataset_id, metaData, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      dataset.meta_data = metaData;
      self.saveDataSet(dataset_id);
      if( success ) {
        success(dataset.meta_data);
      }
    } else {
      if( failure ) {
        failure('unknown_dataset ' + dataset_id, dataset_id);
      }
    }
  },

  getConfig: function(dataset_id, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      success(dataset.config);
    } else {
      failure('unknown_dataset ' + dataset_id, dataset_id);
    }
  },

  setConfig: function(dataset_id, config, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      var fullConfig = self.setOptions(config);
      dataset.config = fullConfig;
      self.saveDataSet(dataset_id);
      if( success ) {
        success(dataset.config);
      }
    } else {
      if( failure ) {
        failure('unknown_dataset ' + dataset_id, dataset_id);
      }
    }
  },

  stopSync: function(dataset_id, success, failure) {
    self.setConfig(dataset_id, {"sync_active" : false}, function() {
      if( success ) {
        success();
      }
    }, failure);
  },

  startSync: function(dataset_id, success, failure) {
    self.setConfig(dataset_id, {"sync_active" : true}, function() {
      if( success ) {
        success();
      }
    }, failure);
  },

  doSync: function(dataset_id, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      dataset.syncPending = true;
      self.saveDataSet(dataset_id);
      if( success ) {
        success();
      }
    } else {
      if( failure ) {
        failure('unknown_dataset ' + dataset_id, dataset_id);
      }
    }
  },

  forceSync: function(dataset_id, success, failure) {
    var dataset = self.datasets[dataset_id];

    if (dataset) {
      dataset.syncForced = true;
      self.saveDataSet(dataset_id);
      if( success ) {
        success();
      }
    } else {
      if( failure ) {
        failure('unknown_dataset ' + dataset_id, dataset_id);
      }
    }
  },

  sortObject : function(object) {
    if (typeof object !== "object" || object === null) {
      return object;
    }

    var result = [];

    Object.keys(object).sort().forEach(function(key) {
      result.push({
        key: key,
        value: self.sortObject(object[key])
      });
    });

    return result;
  },

  sortedStringify : function(obj) {

    var str = '';

    try {
      str = JSON.stringify(self.sortObject(obj));
    } catch (e) {
      console.error('Error stringifying sorted object:' + e);
    }

    return str;
  },

  generateHash: function(object) {
    var hash = CryptoJS.SHA1(self.sortedStringify(object));
    return hash.toString();
  },

  addPendingObj: function(dataset_id, uid, data, action, success, failure) {
    self.isOnline(function (online) {
      if (!online) {
        self.doNotify(dataset_id, uid, self.notifications.OFFLINE_UPDATE, action);
      }
    });

    function storePendingObject(obj) {
      obj.hash = self.generateHash(obj);

      self.getDataSet(dataset_id, function(dataset) {

        dataset.pending[obj.hash] = obj;

        self.updateDatasetFromLocal(dataset, obj);

        if(self.config.auto_sync_local_updates) {
          dataset.syncPending = true;
        }
        self.saveDataSet(dataset_id);
        self.doNotify(dataset_id, uid, self.notifications.LOCAL_UPDATE_APPLIED, action);

        success(obj);
      }, function(code, msg) {
        if(failure) failure(code, msg);
      });
    }

    var pendingObj = {};
    pendingObj.inFlight = false;
    pendingObj.action = action;
    pendingObj.post = JSON.parse(JSON.stringify(data));
    pendingObj.postHash = self.generateHash(pendingObj.post);
    pendingObj.timestamp = new Date().getTime();
    if( "create" === action ) {
      pendingObj.uid = pendingObj.postHash;
      storePendingObject(pendingObj);
    } else {
      self.read(dataset_id, uid, function(rec) {
        pendingObj.uid = uid;
        pendingObj.pre = rec.data;
        pendingObj.preHash = self.generateHash(rec.data);
        storePendingObject(pendingObj);
      }, function(code, msg) {
        failure(code, msg);
      });
    }
  },

  syncLoop: function(dataset_id) {
    self.getDataSet(dataset_id, function(dataSet) {
    
      // The sync loop is currently active
      dataSet.syncPending = false;
      dataSet.syncRunning = true;
      dataSet.syncLoopStart = new Date().getTime();
      self.doNotify(dataset_id, null, self.notifications.SYNC_STARTED, null);

      self.isOnline(function(online) {
        if (!online) {
          self.syncComplete(dataset_id, "offline", self.notifications.SYNC_FAILED);
        } else {
          self.checkHasCustomSync(dataset_id, function() {

            var syncLoopParams = {};
            syncLoopParams.fn = 'sync';
            syncLoopParams.dataset_id = dataset_id;
            syncLoopParams.query_params = dataSet.query_params;
            syncLoopParams.config = dataSet.config;
            syncLoopParams.meta_data = dataSet.meta_data;
            //var datasetHash = self.generateLocalDatasetHash(dataSet);
            syncLoopParams.dataset_hash = dataSet.hash;
            syncLoopParams.acknowledgements = dataSet.acknowledgements || [];

            var pending = dataSet.pending;
            var pendingArray = [];
            for(var i in pending ) {
              // Mark the pending records we are about to submit as inflight and add them to the array for submission
              // Don't re-add previous inFlight pending records who whave crashed - i.e. who's current state is unknown
              // Don't add delayed records
              if( !pending[i].inFlight && !pending[i].crashed && !pending[i].delayed) {
                pending[i].inFlight = true;
                pending[i].inFlightDate = new Date().getTime();
                pendingArray.push(pending[i]);
              }
            }
            syncLoopParams.pending = pendingArray;

            if( pendingArray.length > 0 ) {
              self.consoleLog('Starting sync loop - global hash = ' + dataSet.hash + ' :: params = ' + JSON.stringify(syncLoopParams, null, 2));
            }
            try {
              self.doCloudCall({
                'dataset_id': dataset_id,
                'req': syncLoopParams
              }, function(res) {
                var rec;

                function processUpdates(updates, notification, acknowledgements) {
                  if( updates ) {
                    for (var up in updates) {
                      rec = updates[up];
                      acknowledgements.push(rec);
                      if( dataSet.pending[up] && dataSet.pending[up].inFlight && !dataSet.pending[up].crashed ) {
                        delete dataSet.pending[up];
                        self.doNotify(dataset_id, rec.uid, notification, rec);
                      }
                    }
                  }
                }

                // Check to see if any new pending records need to be updated to reflect the current state of play.
                self.updatePendingFromNewData(dataset_id, dataSet, res);

                // Check to see if any previously crashed inflight records can now be resolved
                self.updateCrashedInFlightFromNewData(dataset_id, dataSet, res);

                //Check to see if any delayed pending records can now be set to ready
                self.updateDelayedFromNewData(dataset_id, dataSet, res);

                // Update the new dataset with details of any inflight updates which we have not received a response on
                self.updateNewDataFromInFlight(dataset_id, dataSet, res);

                // Update the new dataset with details of any pending updates
                self.updateNewDataFromPending(dataset_id, dataSet, res);



                if (res.records) {
                  // Full Dataset returned
                  dataSet.data = res.records;
                  dataSet.hash = res.hash;

                  self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'full dataset');
                }

                if (res.updates) {
                  var acknowledgements = [];
                  processUpdates(res.updates.applied, self.notifications.REMOTE_UPDATE_APPLIED, acknowledgements);
                  processUpdates(res.updates.failed, self.notifications.REMOTE_UPDATE_FAILED, acknowledgements);
                  processUpdates(res.updates.collisions, self.notifications.COLLISION_DETECTED, acknowledgements);
                  dataSet.acknowledgements = acknowledgements;
                }

                if (!res.records && res.hash && res.hash !== dataSet.hash) {
                  self.consoleLog("Local dataset stale - syncing records :: local hash= " + dataSet.hash + " - remoteHash=" + res.hash);
                  // Different hash value returned - Sync individual records
                  self.syncRecords(dataset_id);
                } else {
                  self.consoleLog("Local dataset up to date");
                  self.syncComplete(dataset_id,  "online", self.notifications.SYNC_COMPLETE);
                }
              }, function(msg, err) {
                // The AJAX call failed to complete succesfully, so the state of the current pending updates is unknown
                // Mark them as "crashed". The next time a syncLoop completets successfully, we will review the crashed
                // records to see if we can determine their current state.
                self.markInFlightAsCrashed(dataSet);
                self.consoleLog("syncLoop failed : msg=" + msg + " :: err = " + err);
                self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);
              });
            }
            catch (e) {
              self.consoleLog('Error performing sync - ' + e);
              self.syncComplete(dataset_id, e, self.notifications.SYNC_FAILED);
            }
          });
        }
      });
    });
  },

  syncRecords: function(dataset_id) {

    self.getDataSet(dataset_id, function(dataSet) {

      var localDataSet = dataSet.data || {};

      var clientRecs = {};
      for (var i in localDataSet) {
        var uid = i;
        var hash = localDataSet[i].hash;
        clientRecs[uid] = hash;
      }

      var syncRecParams = {};

      syncRecParams.fn = 'syncRecords';
      syncRecParams.dataset_id = dataset_id;
      syncRecParams.query_params = dataSet.query_params;
      syncRecParams.clientRecs = clientRecs;

      self.consoleLog("syncRecParams :: " + JSON.stringify(syncRecParams));

      self.doCloudCall({
        'dataset_id': dataset_id,
        'req': syncRecParams
      }, function(res) {
        var i;

        if (res.create) {
          for (i in res.create) {
            localDataSet[i] = {"hash" : res.create[i].hash, "data" : res.create[i].data};
            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, "create");
          }
        }
        if (res.update) {
          for (i in res.update) {
            localDataSet[i].hash = res.update[i].hash;
            localDataSet[i].data = res.update[i].data;
            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, "update");
          }
        }
        if (res['delete']) {
          for (i in res['delete']) {
            delete localDataSet[i];
            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, "delete");
          }
        }

        self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'partial dataset');

        dataSet.data = localDataSet;
        if(res.hash) {
          dataSet.hash = res.hash;
        }
        self.syncComplete(dataset_id, "online", self.notifications.SYNC_COMPLETE);
      }, function(msg, err) {
        self.consoleLog("syncRecords failed : msg=" + msg + " :: err=" + err);
        self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);
      });
    });
  },

  syncComplete: function(dataset_id, status, notification) {

    self.getDataSet(dataset_id, function(dataset) {
      dataset.syncRunning = false;
      dataset.syncLoopEnd = new Date().getTime();
      self.saveDataSet(dataset_id);
      self.doNotify(dataset_id, dataset.hash, notification, status);
    });
  },

  checkDatasets: function() {
    for( var dataset_id in self.datasets ) {
      if( self.datasets.hasOwnProperty(dataset_id) ) {
        var dataset = self.datasets[dataset_id];

        if( !dataset.syncRunning && (dataset.config.sync_active || dataset.syncForced)) {
          // Check to see if it is time for the sync loop to run again
          var lastSyncStart = dataset.syncLoopStart;
          var lastSyncCmp = dataset.syncLoopEnd;
          if( lastSyncStart == null ) {
            self.consoleLog(dataset_id +' - Performing initial sync');
            // Dataset has never been synced before - do initial sync
            dataset.syncPending = true;
          } else if (lastSyncCmp != null) {
            var timeSinceLastSync = new Date().getTime() - lastSyncCmp;
            var syncFrequency = dataset.config.sync_frequency * 1000;
            if( timeSinceLastSync > syncFrequency ) {
              // Time between sync loops has passed - do another sync
              dataset.syncPending = true;
            }
          } 

          if( dataset.syncForced ) {
            dataset.syncPending = true;
          }

          if( dataset.syncPending ) {
            // Reset syncForced in case it was what caused the sync cycle to run.
            dataset.syncForced = false;

            // If the dataset requres syncing, run the sync loop. This may be because the sync interval has passed
            // or because the sync_frequency has been changed or because a change was made to the dataset and the
            // immediate_sync flag set to true
            self.syncLoop(dataset_id);
          }
        }
      }
    }
  },

  checkHasCustomSync : function(dataset_id, cb) {
    if(self.hasCustomSync != null) {
      return cb();
    }
    self.consoleLog('starting check has custom sync');

    actAPI({
      'act' : dataset_id,
      'req': {
        'fn': 'sync'
      }
    }, function(res) {
      //if the custom sync is defined in the cloud, this call should success.
      //if failed, we think this the custom sync is not defined
      self.consoleLog('checkHasCustomSync - success - ', res);
      self.hasCustomSync = true;
      return cb();
    }, function(msg,err) {
      self.consoleLog('checkHasCustomSync - failure - ', err);
      if(err.status && err.status === 500){
        //if we receive 500, it could be that there is an error occured due to missing parameters or similar,
        //but the endpoint is defined.
        self.consoleLog('checkHasCustomSync - failed with 500, endpoint does exists');
        self.hasCustomSync = true;
      } else {
        self.hasCustomSync = false;
      }
      return cb();
    });
  },

  doCloudCall: function(params, success, failure) {
    if( self.hasCustomSync ) {
      actAPI({
        'act' : params.dataset_id,
        'req' : params.req
      }, function(res) {
        success(res);
      }, function(msg, err) {
        failure(msg, err);
      });      
    } else {
      cloudAPI({
        'path' : '/mbaas/sync/' + params.dataset_id,
        'method' : 'post',
        'data' : params.req
      }, function(res) {
        success(res);
      }, function(msg, err) {
        failure(msg, err);
      })
    }
  },

  datasetMonitor: function() {
    self.checkDatasets();

    // Re-execute datasetMonitor every 500ms so we keep invoking checkDatasets();
    setTimeout(function() {
      self.datasetMonitor();
    }, 500);
  },

  saveDataSet: function (dataset_id, cb) {
    var onFail =  function(msg, err) {
      // save failed
      var errMsg = 'save to local storage failed  msg:' + msg + ' err:' + err;
      self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);
      self.consoleLog(errMsg);
    };
    self.getDataSet(dataset_id, function(dataset) {
      // save dataset to local storage
      Lawnchair({fail:onFail, adapter: self.config.storage_strategy, size:self.config.file_system_quota}, function (){
        this.save({key:"dataset_" + dataset_id, val:dataset}, function(){
          //save success
          if(cb) return cb();
        });
      });
    });
  },

  loadDataSet: function (dataset_id, success, failure) {
    // load dataset from local storage
    var onFail = function(msg, err) {
      // load failed
      var errMsg = 'load from local storage failed  msg:' + msg;
      self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);
      self.consoleLog(errMsg);
    };

        Lawnchair({fail:onFail, adapter: self.config.storage_strategy, size:self.config.file_system_quota},function (){       this.get( "dataset_" + dataset_id, function (data){
         if (data && data.val !== null) {
            var dataset = data.val;
            if(typeof dataset === "string"){
              dataset = JSON.parse(dataset);
            }
            // Datasets should not be auto initialised when loaded - the mange function should be called for each dataset
            // the user wants sync
            dataset.initialised = false;
            self.datasets[dataset_id] = dataset; // TODO: do we need to handle binary data?
            self.consoleLog('load from local storage success for dataset_id :' + dataset_id);
            if(success) return success(dataset);
          } else {
            // no data yet, probably first time. failure calback should handle this
            if(failure) return failure();
          }
       });
    });
  },


  updateDatasetFromLocal: function(dataset, pendingRec) {
    var pending = dataset.pending;
    var previousPendingUid;
    var previousPending;

    var uid = pendingRec.uid;
    self.consoleLog('updating local dataset for uid ' + uid + ' - action = ' + pendingRec.action);

    dataset.meta[uid] = dataset.meta[uid] || {};

    // Creating a new record
    if( pendingRec.action === "create" ) {
      if( dataset.data[uid] ) {
        self.consoleLog('dataset already exists for uid in create :: ' + JSON.stringify(dataset.data[uid]));

        // We are trying to do a create using a uid which already exists
        if (dataset.meta[uid].fromPending) {
          // We are trying to create on top of an existing pending record
          // Remove the previous pending record and use this one instead
          previousPendingUid = dataset.meta[uid].pendingUid;
          delete pending[previousPendingUid];
        }
      }
      dataset.data[uid] = {};
    }

    if( pendingRec.action === "update" ) {
      if( dataset.data[uid] ) {
        if (dataset.meta[uid].fromPending) {
          self.consoleLog('updating an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));
          // We are trying to update an existing pending record
          previousPendingUid = dataset.meta[uid].pendingUid;
          dataset.meta[uid].previousPendingUid = previousPendingUid;
          previousPending = pending[previousPendingUid];
          if(previousPending) {
            if(!previousPending.inFlight){
              self.consoleLog('existing pre-flight pending record = ' + JSON.stringify(previousPending));
              // We are trying to perform an update on an existing pending record
              // modify the original record to have the latest value and delete the pending update
              previousPending.post = pendingRec.post;
              previousPending.postHash = pendingRec.postHash;
              delete pending[pendingRec.hash];
              // Update the pending record to have the hash of the previous record as this is what is now being
              // maintained in the pending array & is what we want in the meta record
              pendingRec.hash = previousPendingUid;
            } else {
              //we are performing changes to a pending record which is inFlight. Until the status of this pending record is resolved,
              //we should not submit this pending record to the cloud. Mark it as delayed.
              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));
              pendingRec.delayed = true;
              pendingRec.waiting = previousPending.hash;
            }
          }
        }
      }
    }

    if( pendingRec.action === "delete" ) {
      if( dataset.data[uid] ) {
        if (dataset.meta[uid].fromPending) {
          self.consoleLog('Deleting an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));
          // We are trying to delete an existing pending record
          previousPendingUid = dataset.meta[uid].pendingUid;
          dataset.meta[uid].previousPendingUid = previousPendingUid;
          previousPending = pending[previousPendingUid];
          if( previousPending ) {
            if(!previousPending.inFlight){
              self.consoleLog('existing pending record = ' + JSON.stringify(previousPending));
              if( previousPending.action === "create" ) {
                // We are trying to perform a delete on an existing pending create
                // These cancel each other out so remove them both
                delete pending[pendingRec.hash];
                delete pending[previousPendingUid];
              }
              if( previousPending.action === "update" ) {
                // We are trying to perform a delete on an existing pending update
                // Use the pre value from the pending update for the delete and
                // get rid of the pending update
                pendingRec.pre = previousPending.pre;
                pendingRec.preHash = previousPending.preHash;
                pendingRec.inFlight = false;
                delete pending[previousPendingUid];
              }
            } else {
              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));
              pendingRec.delayed = true;
              pendingRec.waiting = previousPending.hash;
            }
          }
        }
        delete dataset.data[uid];
      }
    }

    if( dataset.data[uid] ) {
      dataset.data[uid].data = pendingRec.post;
      dataset.data[uid].hash = pendingRec.postHash;
      dataset.meta[uid].fromPending = true;
      dataset.meta[uid].pendingUid = pendingRec.hash;
    }
  },

  updatePendingFromNewData: function(dataset_id, dataset, newData) {
    var pending = dataset.pending;
    var newRec;

    if( pending && newData.records) {
      for( var pendingHash in pending ) {
        if( pending.hasOwnProperty(pendingHash) ) {
          var pendingRec = pending[pendingHash];

          dataset.meta[pendingRec.uid] = dataset.meta[pendingRec.uid] || {};

          if( pendingRec.inFlight === false ) {
            // Pending record that has not been submitted
            self.consoleLog('updatePendingFromNewData - Found Non inFlight record -> action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);
            if( pendingRec.action === "update" || pendingRec.action === "delete") {
              // Update the pre value of pending record to reflect the latest data returned from sync.
              // This will prevent a collision being reported when the pending record is sent.
              newRec = newData.records[pendingRec.uid];
              if( newRec ) {
                self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record ' + pendingRec.uid);
                pendingRec.pre = newRec.data;
                pendingRec.preHash = newRec.hash;
              }
              else {
                // The update/delete may be for a newly created record in which case the uid will have changed.
                var previousPendingUid = dataset.meta[pendingRec.uid].previousPendingUid;
                var previousPending = pending[previousPendingUid];
                if( previousPending ) {
                  if( newData && newData.updates &&  newData.updates.applied && newData.updates.applied[previousPending.hash] ) {
                    // There is an update in from a previous pending action
                    var newUid = newData.updates.applied[previousPending.hash].uid;
                    newRec = newData.records[newUid];
                    if( newRec ) {
                      self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record which was previously a create ' + pendingRec.uid + ' ==> ' + newUid);
                      pendingRec.pre = newRec.data;
                      pendingRec.preHash = newRec.hash;
                      pendingRec.uid = newUid;
                    }
                  }
                }
              }
            }

            if( pendingRec.action === "create" ) {
              if( newData && newData.updates &&  newData.updates.applied && newData.updates.applied[pendingHash] ) {
                self.consoleLog('updatePendingFromNewData - Found an update for a pending create ' + JSON.stringify(newData.updates.applied[pendingHash]));
                newRec = newData.records[newData.updates.applied[pendingHash].uid];
                if( newRec ) {
                  self.consoleLog('updatePendingFromNewData - Changing pending create to an update based on new record  ' + JSON.stringify(newRec));

                  // Set up the pending create as an update
                  pendingRec.action = "update";
                  pendingRec.pre = newRec.data;
                  pendingRec.preHash = newRec.hash;
                  pendingRec.uid = newData.updates.applied[pendingHash].uid;
                }
              }
            }
          }
        }
      }
    }
  },

  updateNewDataFromInFlight: function(dataset_id, dataset, newData) {
    var pending = dataset.pending;

    if( pending && newData.records) {
      for( var pendingHash in pending ) {
        if( pending.hasOwnProperty(pendingHash) ) {
          var pendingRec = pending[pendingHash];

          if( pendingRec.inFlight ) {
            var updateReceivedForPending = (newData && newData.updates &&  newData.updates.hashes && newData.updates.hashes[pendingHash]) ? true : false;

            self.consoleLog('updateNewDataFromInFlight - Found inflight pending Record - action = ' + pendingRec.action + ' :: hash = ' + pendingHash + ' :: updateReceivedForPending=' + updateReceivedForPending);

            if( ! updateReceivedForPending ) {
              var newRec = newData.records[pendingRec.uid];

              if( pendingRec.action === "update" && newRec) {
                // Modify the new Record to have the updates from the pending record so the local dataset is consistent
                newRec.data = pendingRec.post;
                newRec.hash = pendingRec.postHash;
              }
              else if( pendingRec.action === "delete" && newRec) {
                // Remove the record from the new dataset so the local dataset is consistent
                delete newData.records[pendingRec.uid];
              }
              else if( pendingRec.action === "create" ) {
                // Add the pending create into the new dataset so it is not lost from the UI
                self.consoleLog('updateNewDataFromInFlight - re adding pending create to incomming dataset');
                var newPendingCreate = {
                  data: pendingRec.post,
                  hash: pendingRec.postHash
                };
                newData.records[pendingRec.uid] = newPendingCreate;
              }
            }
          }
        }
      }
    }
  },

  updateNewDataFromPending: function(dataset_id, dataset, newData) {
    var pending = dataset.pending;

    if( pending && newData.records) {
      for( var pendingHash in pending ) {
        if( pending.hasOwnProperty(pendingHash) ) {
          var pendingRec = pending[pendingHash];

          if( pendingRec.inFlight === false ) {
            self.consoleLog('updateNewDataFromPending - Found Non inFlight record -> action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);
            var newRec = newData.records[pendingRec.uid];
            if( pendingRec.action === "update" && newRec) {
              // Modify the new Record to have the updates from the pending record so the local dataset is consistent
              newRec.data = pendingRec.post;
              newRec.hash = pendingRec.postHash;
            }
            else if( pendingRec.action === "delete" && newRec) {
              // Remove the record from the new dataset so the local dataset is consistent
              delete newData.records[pendingRec.uid];
            }
            else if( pendingRec.action === "create" ) {
              // Add the pending create into the new dataset so it is not lost from the UI
              self.consoleLog('updateNewDataFromPending - re adding pending create to incomming dataset');
              var newPendingCreate = {
                data: pendingRec.post,
                hash: pendingRec.postHash
              };
              newData.records[pendingRec.uid] = newPendingCreate;
            }
          }
        }
      }
    }
  },

  updateCrashedInFlightFromNewData: function(dataset_id, dataset, newData) {
    var updateNotifications = {
      applied: self.notifications.REMOTE_UPDATE_APPLIED,
      failed: self.notifications.REMOTE_UPDATE_FAILED,
      collisions: self.notifications.COLLISION_DETECTED
    };

    var pending = dataset.pending;
    var resolvedCrashes = {};
    var pendingHash;
    var pendingRec;


    if( pending ) {
      for( pendingHash in pending ) {
        if( pending.hasOwnProperty(pendingHash) ) {
          pendingRec = pending[pendingHash];

          if( pendingRec.inFlight && pendingRec.crashed) {
            self.consoleLog('updateCrashedInFlightFromNewData - Found crashed inFlight pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash );
            if( newData && newData.updates && newData.updates.hashes) {

              // Check if the updates received contain any info about the crashed in flight update
              var crashedUpdate = newData.updates.hashes[pendingHash];
              if( crashedUpdate ) {
                // We have found an update on one of our in flight crashed records

                resolvedCrashes[crashedUpdate.uid] = crashedUpdate;

                self.consoleLog('updateCrashedInFlightFromNewData - Resolving status for crashed inflight pending record ' + JSON.stringify(crashedUpdate));

                if( crashedUpdate.type === 'failed' ) {
                  // Crashed update failed - revert local dataset
                  if( crashedUpdate.action === 'create' ) {
                    self.consoleLog('updateCrashedInFlightFromNewData - Deleting failed create from dataset');
                    delete dataset.data[crashedUpdate.uid];
                  }
                  else if ( crashedUpdate.action === 'update' || crashedUpdate.action === 'delete' ) {
                    self.consoleLog('updateCrashedInFlightFromNewData - Reverting failed ' + crashedUpdate.action + ' in dataset');
                    dataset.data[crashedUpdate.uid] = {
                      data : pendingRec.pre,
                      hash : pendingRec.preHash
                    };
                  }
                }

                delete pending[pendingHash];
                self.doNotify(dataset_id, crashedUpdate.uid, updateNotifications[crashedUpdate.type], crashedUpdate);
              }
              else {
                // No word on our crashed update - increment a counter to reflect another sync that did not give us
                // any update on our crashed record.
                if( pendingRec.crashedCount ) {
                  pendingRec.crashedCount++;
                }
                else {
                  pendingRec.crashedCount = 1;
                }
              }
            }
            else {
              // No word on our crashed update - increment a counter to reflect another sync that did not give us
              // any update on our crashed record.
              if( pendingRec.crashedCount ) {
                pendingRec.crashedCount++;
              }
              else {
                pendingRec.crashedCount = 1;
              }
            }
          }
        }
      }

      for( pendingHash in pending ) {
        if( pending.hasOwnProperty(pendingHash) ) {
          pendingRec = pending[pendingHash];

          if( pendingRec.inFlight && pendingRec.crashed) {
            if( pendingRec.crashedCount > dataset.config.crashed_count_wait ) {
              self.consoleLog('updateCrashedInFlightFromNewData - Crashed inflight pending record has reached crashed_count_wait limit : ' + JSON.stringify(pendingRec));
              if( dataset.config.resend_crashed_updates ) {
                self.consoleLog('updateCrashedInFlightFromNewData - Retryig crashed inflight pending record');
                pendingRec.crashed = false;
                pendingRec.inFlight = false;
              }
              else {
                self.consoleLog('updateCrashedInFlightFromNewData - Deleting crashed inflight pending record');
                delete pending[pendingHash];
              }
            }
          }
          else if (!pendingRec.inFlight && pendingRec.crashed ) {
            self.consoleLog('updateCrashedInFlightFromNewData - Trying to resolve issues with crashed non in flight record - uid = ' + pendingRec.uid);
            // Stalled pending record because a previous pending update on the same record crashed
            var crashedRef = resolvedCrashes[pendingRec.uid];
            if( crashedRef ) {
              self.consoleLog('updateCrashedInFlightFromNewData - Found a stalled pending record backed up behind a resolved crash uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash);
              pendingRec.crashed = false;
            }
          }
        }
      }
    }
  },

  updateDelayedFromNewData: function(dataset_id, dataset, newData){
    var pending = dataset.pending;
    var pendingHash;
    var pendingRec;
    if(pending){
      for( pendingHash in pending ){
        if( pending.hasOwnProperty(pendingHash) ){
          pendingRec = pending[pendingHash];
          if( pendingRec.delayed && pendingRec.waiting ){
            self.consoleLog('updateDelayedFromNewData - Found delayed pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash + ' :: waiting=' + pendingRec.waiting);
            if( newData && newData.updates && newData.updates.hashes ){
              var waitingRec = newData.updates.hashes[pendingRec.waiting];
              if(waitingRec){
                self.consoleLog('updateDelayedFromNewData - Waiting pending record is resolved rec=' + JSON.stringify(waitingRec));
                pendingRec.delayed = false;
                pendingRec.waiting = undefined;
              }
            }
          }
        }
      }
    }
  },


  markInFlightAsCrashed : function(dataset) {
    var pending = dataset.pending;
    var pendingHash;
    var pendingRec;

    if( pending ) {
      var crashedRecords = {};
      for( pendingHash in pending ) {
        if( pending.hasOwnProperty(pendingHash) ) {
          pendingRec = pending[pendingHash];

          if( pendingRec.inFlight ) {
            self.consoleLog('Marking in flight pending record as crashed : ' + pendingHash);
            pendingRec.crashed = true;
            crashedRecords[pendingRec.uid] = pendingRec;
          }
        }
      }

      // Check for any pending updates that would be modifying a crashed record. These can not go out until the
      // status of the crashed record is determined
      for( pendingHash in pending ) {
        if( pending.hasOwnProperty(pendingHash) ) {
          pendingRec = pending[pendingHash];

          if( ! pendingRec.inFlight && ! pendingRec.delayed ) {
            var crashedRef = crashedRecords[pendingRec.uid];
            if( crashedRef ) {
              pendingRec.crashed = true;
            }
          }
        }
      }
    }
  },

  consoleLog: function(msg) {
    if( self.config.do_console_log ) {
      console.log(msg);
    }
  }
};

(function() {
  self.config = self.defaults;
  //Initialse the sync service with default config
  //self.init({});
})();

module.exports = {
  init: self.init,
  manage: self.manage,
  notify: self.notify,
  doList: self.list,
  doCreate: self.create,
  doRead: self.read,
  doUpdate: self.update,
  doDelete: self['delete'],
  listCollisions: self.listCollisions,
  removeCollision: self.removeCollision,
  getPending : self.getPending,
  clearPending : self.clearPending,
  getDataset : self.getDataSet,
  getQueryParams: self.getQueryParams,
  setQueryParams: self.setQueryParams,
  getMetaData: self.getMetaData,
  setMetaData: self.setMetaData,
  getConfig: self.getConfig,
  setConfig: self.setConfig,
  startSync: self.startSync,
  stopSync: self.stopSync,
  doSync: self.doSync,
  forceSync: self.forceSync,
  generateHash: self.generateHash
};
},{"../../libs/generated/crypto":1,"../../libs/generated/lawnchair":2,"./api_act":79,"./api_cloud":81,"JSON":3}],106:[function(require,module,exports){
module.exports = {
  createUUID : function () {
    //from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
    //based on RFC 4122, section 4.4 (Algorithms for creating UUID from truely random pr pseudo-random number)
    var s = [];
    var hexDigitals = "0123456789ABCDEF";
    for (var i = 0; i < 32; i++) {
      s[i] = hexDigitals.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[12] = "4";
    s[16] = hexDigitals.substr((s[16] & 0x3) | 0x8, 1);
    var uuid = s.join("");
    return uuid;
  }
};

},{}],107:[function(require,module,exports){
var initializer = require("./initializer");
var events = require("./events");
var CloudHost = require("./hosts");
var constants = require("./constants");
var logger = require("./logger");


//the cloud configurations
var cloud_host;

var is_initialising = false;
var is_cloud_ready = false;
var init_error = null;


var ready = function(cb){
  if(is_cloud_ready){
    return cb(null, {host: getCloudHostUrl()});
  } else {
    events.once(constants.INIT_EVENT, function(err, host){
      return cb(err, host);
    });
    if(!is_initialising){
      is_initialising = true;
      initializer.init(function(err, initRes){
        is_initialising = false;
        if(err){
          init_error = err;
          return events.emit(constants.INIT_EVENT, err);
        } else {
          init_error = null;
          is_cloud_ready = true;
          cloud_host = new CloudHost(initRes.cloud);
          return events.emit(constants.INIT_EVENT, null, {host: getCloudHostUrl()});
        }
      });
    }
  }
}

var getCloudHost = function(){
  return cloud_host;
}

var getCloudHostUrl = function(){
  if(typeof cloud_host !== "undefined"){
    var appProps = require("./appProps").getAppProps();
    return cloud_host.getHost(appProps.mode);
  } else {
    return undefined;
  }
}

var isReady = function(){
  return is_cloud_ready;
}

var getInitError = function(){
  return init_error;
}

//for test
var reset = function(){
  is_cloud_ready = false;
  is_initialising = false;
  cloud_host = undefined;
  init_error = undefined;
  ready(function(){
    
  });
}

ready(function(error, host){
  if(error){
    if(error.message !== "app_config_missing"){
      logger.error("Failed to initialise fh.");
    } else {
      logger.info("No fh config file");
    }
  } else {
    logger.info("fh cloud is ready");
  }
});

module.exports = {
  ready: ready,
  isReady: isReady,
  getCloudHost: getCloudHost,
  getCloudHostUrl: getCloudHostUrl,
  getInitError: getInitError,
  reset: reset
}
},{"./appProps":85,"./constants":87,"./events":90,"./hosts":93,"./initializer":94,"./logger":97}],108:[function(require,module,exports){
require("../tests/test_ajax.js");
require("../tests/test_sec.js");
require("../tests/test_cloud_related.js");
require("../tests/test_legacy_act.js");
require("../tests/test_sync_offline.js");
require("../tests/test_sync_online.js");


},{"../tests/test_ajax.js":109,"../tests/test_cloud_related.js":110,"../tests/test_legacy_act.js":111,"../tests/test_sec.js":112,"../tests/test_sync_offline.js":113,"../tests/test_sync_online.js":114}],109:[function(require,module,exports){
var chai = require('chai');
var expect = chai.expect;
var sinonChai = require('sinon-chai');
chai.use(sinonChai);

var process = require("process");
if(document && document.location){
  if(document.location.href.indexOf("coverage=1") > -1){
    process.env.LIB_COV = 1;
  }
}

var ajax = process.env.LIB_COV? require("../../src-cov/modules/ajax") : require("../../src/modules/ajax");
var events = process.env.LIB_COV? require("../../src-cov/modules/events") : require("../../src/modules/events");


describe("test ajax module", function(){

    var server;

    beforeEach(function () { server = sinon.fakeServer.create(); });
    afterEach(function () { server.restore(); });

    it("should call the success callback", function(){
      var success = sinon.spy();
      var fail = sinon.spy();

      ajax.active = 0;

      var ajaxStart = sinon.spy();
      var ajaxSend = sinon.spy();
      var ajaxSuccess = sinon.spy();
      var ajaxComplete = sinon.spy();

      events.on("ajaxStart", ajaxStart);
      events.on("ajaxSend", ajaxSend);
      events.on("ajaxSuccess", ajaxSuccess);
      events.on("ajaxComplete", ajaxComplete);

      server.respondWith('GET', /test_ok/, [200, {"Content-Type": "application/json"}, JSON.stringify({"result": "ok"})]);
      
      ajax({
        url: "test_ok",
        method: "GET",
        dataType: "json",
        nojsonp: true,
        success: success,
        error: fail
      });

      server.respond();

      expect(success).to.have.been.called;
      expect(success).to.have.been.calledOnce;

      expect(ajaxStart).to.have.been.calledOnce;
      expect(ajaxSend).to.have.been.calledOnce;
      expect(ajaxSuccess).to.have.been.calledOnce;
      expect(ajaxComplete).to.have.been.calledOnce;
      
    });

    it("should call the error callback", function(){
      var success = sinon.spy();
      var fail = sinon.spy();

      ajax.active = 0;

      var ajaxStart = sinon.spy();
      var ajaxSend = sinon.spy();
      var ajaxError = sinon.spy();
      var ajaxComplete = sinon.spy();

      events.on("ajaxStart", ajaxStart);
      events.on("ajaxSend", ajaxSend);
      events.on("ajaxError", ajaxError);
      events.on("ajaxComplete", ajaxComplete);

      server.respondWith('GET', /test_error/, [404, {"Content-Type": "application/json"}, "NOT FOUND"]);

      ajax({
        url: "test_error",
        method: "GET",
        dataType: "json",
        nojsonp: true,
        success: success,
        error: fail
      });

      server.respond();

      expect(fail).to.have.been.called;
      expect(fail).to.have.been.calledOnce;

      expect(ajaxStart).to.have.been.calledOnce;
      expect(ajaxSend).to.have.been.calledOnce;
      expect(ajaxError).to.have.been.calledOnce;
      expect(ajaxComplete).to.have.been.calledOnce;

    });
  });


},{"../../src-cov/modules/ajax":54,"../../src-cov/modules/events":61,"../../src/modules/ajax":78,"../../src/modules/events":90,"chai":5,"process":49,"sinon-chai":50}],110:[function(require,module,exports){
var chai = require('chai');
var expect = chai.expect;
var sinonChai = require('sinon-chai');

var process = require("process");
if(document && document.location){
  if(document.location.href.indexOf("coverage=1") > -1){
    process.env.LIB_COV = 1;
  }
}

var ajax = process.env.LIB_COV? require("../../src-cov/modules/ajax") : require("../../src/modules/ajax");
var qs = process.env.LIB_COV? require("../../src-cov/modules/queryMap"): require("../../src/modules/queryMap");


chai.use(sinonChai);

var fhconfig = {
  "host": "http://localhost:8100",
  "appid" : "testappid",
  "appkey" : "testappkey",
  "projectid" : "testprojectid",
  "connectiontag" : "testconnectiontag"
}

var apphost = {
  domain: "testing",
  firstTime: false,
  hosts: {
    "url": "http://localhost:8101"
  },
  init: {
    "trackId": "testtrackid"
  }
}

var expectedUrl = "http://localhost:8101";
if(document && document.location){
  var doc_url = document.location.href;
  var url_params = qs(doc_url);
  var local = (typeof url_params.url !== 'undefined');
  if(local){
    expectedUrl = url_params.url;
  }
}


var buildFakeRes = function(data){
  return [200, {"Content-Type": "text/script"}, JSON.stringify(data)]; //we deliberately set the wrong content type here to make sure the response does get converted to JSON
}

var initFakeServer = function(server){
   server.respondWith('GET', /fhconfig.json/, buildFakeRes(fhconfig));

   server.respondWith('POST', /init/, buildFakeRes(apphost));
}

describe("test all cloud related", function(){

  var server;

  beforeEach(function () { server = sinon.fakeServer.create(); });
  afterEach(function () { server.restore(); });

  describe("test auto initialisation", function(){
    it("should emit fhinit events", function(){

      var callback = sinon.spy();
      var cb2 = sinon.spy();

      initFakeServer(server);
      var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");
      //at this point, $fh is already initialised (and failed), it will not emit another fhinit event 
      //until another call to any $fh cloud APIs, so for testing, call reset which will force it to re-intialise again.
      $fh.reset();

      $fh.on('fhinit', callback);
      $fh.on('fhinit', cb2);

      server.respond();
      server.respond();
      //host url is overridden by the url in the request
      expect(callback).to.have.been.called;
      expect(callback).to.have.been.calledOnce;
      expect(callback).to.have.been.calledWith(null, {host: expectedUrl});

      expect(cb2).to.have.been.called;
      expect(cb2).to.have.been.calledOnce;

      var hostUrl = $fh.getCloudURL();
      expect(hostUrl).to.equal(expectedUrl);

      
      expect($fh).to.have.property("cloud_props");
      expect($fh.cloud_props).to.have.property("hosts");
      expect($fh.cloud_props.hosts).to.have.property("url");
      expect($fh.cloud_props.hosts.url).to.equal(expectedUrl);

      expect($fh).to.have.property("app_props");
    });
  });

  describe("test act/cloud call", function(){
    it("act call should success", function(){
      var success = sinon.spy();
      var fail = sinon.spy();

      initFakeServer(server);

      var data = {echo: 'hi'};

      server.respondWith('POST', /cloud\/echo/, buildFakeRes(data));

      var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");
      $fh.reset();

      $fh.act({}, success, fail);

      expect(fail).to.have.been.calledOnce;

      var fail2 = sinon.spy();

      $fh.act({act: 'echo', req: {}}, success, fail2);

      server.respond();
      server.respond();
      server.respond();

      expect(success).to.have.been.calledOnce;
      expect(success).to.have.been.calledWith(data);

      expect(fail2).to.have.not.been.called;
    });

    it("should work with cloud call", function(){
      var success = sinon.spy();
      var fail = sinon.spy();

      initFakeServer(server);

      var data = {echo: 'hi'};

      server.respondWith('POST', /test\/echo/, buildFakeRes(data));

      var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");
      $fh.reset();

      $fh.cloud({
        path: 'test/echo',
        method: 'POST'
      }, success, fail);

      server.respond();
      server.respond();
      server.respond();

      expect(success).to.have.been.calledOnce;
      expect(success).to.have.been.calledWith(data);
      expect(fail).to.have.not.been.called;
    });
  });

  describe("test auth call", function(){
    it("auth call should work", function(){
      initFakeServer(server);
      server.respondWith('POST', /authpolicy/, buildFakeRes({status: "ok"}));

      var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");
      $fh.reset();

      var success = sinon.spy();
      var fail = sinon.spy();
      $fh.auth({}, success, fail);
      expect(fail).to.have.been.calledOnce;

      fail = sinon.spy();
      $fh.auth({policyId: 'testpolicy', clientToken: 'testtoken', transport: ajax}, success, fail);

      server.respond();
      server.respond();
      server.respond();

      expect(success).to.have.been.calledOnce;
      expect(fail).to.have.not.been.called;
    });
  });

  describe("test mbaas call", function(){
    it("mbaas call should call", function(){
      initFakeServer(server);
      server.respondWith('POST', /mbaas\/forms/, buildFakeRes({"status": "ok"}));

      var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");
      $fh.reset();

      var success = sinon.spy();
      var fail = sinon.spy();

      $fh.mbaas({service: "forms"}, success, fail);

      server.respond();
      server.respond();
      server.respond();

      expect(success).to.have.been.calledOnce;
      expect(fail).to.have.not.been.called;
      expect(success).to.have.been.calledWith({"status": "ok"});

    });
  });
});
},{"../../src-cov/feedhenry":"f312fA","../../src-cov/modules/ajax":54,"../../src-cov/modules/queryMap":70,"../../src/feedhenry":76,"../../src/modules/ajax":78,"../../src/modules/queryMap":99,"chai":5,"process":49,"sinon-chai":50}],111:[function(require,module,exports){
var chai = require('chai');
var expect = chai.expect;
var sinonChai = require('sinon-chai');
chai.use(sinonChai);

var process = require("process");
if(document && document.location){
  if(document.location.href.indexOf("coverage=1") > -1){
    process.env.LIB_COV = 1;
  }
}

var qs = process.env.LIB_COV? require("../../src-cov/modules/queryMap"): require("../../src/modules/queryMap");

var fhconfig = {
  "host": "http://localhost:8100",
  "appid" : "testappid",
  "appkey" : "testappkey",
  "mode": "dev"
}

var legacyAppHost = {
  domain: "testing",
  firstTime: false,
  hosts: {
    "releaseCloudUrl": "http://localhost:8102",
    "releaseCloudType": "fh",
    "debugCloudUrl": "http://localhost:8103",
    "debugCloudType": "fh"
  },
  init: {
    "trackId": "testtrackid"
  }
}

var expectedUrl = "http://localhost:8103";
if(document && document.location){
  var doc_url = document.location.href;
  var url_params = qs(doc_url);
  var local = (typeof url_params.url !== 'undefined');
  if(local){
    expectedUrl = url_params.url;
  }
}

var buildFakeRes = function(data){
  return [200, {"Content-Type": "application/json"}, JSON.stringify(data)];
}

var initFakeServer = function(server){
   server.respondWith('GET', /fhconfig.json/, buildFakeRes(fhconfig));

   server.respondWith('POST', /init/, buildFakeRes(legacyAppHost));
}

describe("test legacy app props/app init", function(){
  var server;

  beforeEach(function () { server = sinon.fakeServer.create(); });
  afterEach(function () { server.restore(); });

  describe("test legacy app init", function(){
    it("$fh.init should initialise the app", function(){
      var callback = sinon.spy();

      initFakeServer(server);
      var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");

      $fh.reset();

      $fh.init({}, callback);
      server.respond();
      server.respond();

      expect(callback).to.have.been.called;
      expect(callback).to.have.been.calledOnce;
      expect(callback).to.have.been.calledWith(expectedUrl);

      var hostUrl = $fh.getCloudURL();
      expect(hostUrl).to.equal(expectedUrl);
    });
  });

  describe("test auto initialisation", function(){
    it("should emit fhinit events", function(){

      var callback = sinon.spy();

      initFakeServer(server);
      var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");
      
      $fh.reset();

      $fh.on('fhinit', callback);

      server.respond();
      server.respond();

      expect(callback).to.have.been.called;
      expect(callback).to.have.been.calledOnce;
      expect(callback).to.have.been.calledWith(null, {host: expectedUrl});

      var hostUrl = $fh.getCloudURL();
      expect(hostUrl).to.equal(expectedUrl);

    });
  });
});
},{"../../src-cov/feedhenry":"f312fA","../../src-cov/modules/queryMap":70,"../../src/feedhenry":76,"../../src/modules/queryMap":99,"chai":5,"process":49,"sinon-chai":50}],112:[function(require,module,exports){
var chai = require('chai');
var expect = chai.expect;
var sinonChai = require('sinon-chai');
chai.use(sinonChai);

var process = require("process");
if(document && document.location){
  if(document.location.href.indexOf("coverage=1") > -1){
    process.env.LIB_COV = 1;
  }
}

var $fh = process.env.LIB_COV? require("../../src-cov/feedhenry") : require("../../src/feedhenry");

describe("test security APIs", function(){
  it("AES keygen", function(){
    var fail = sinon.spy();

    $fh.sec({act:'keygen', params:{algorithm:'AES', keysize: 128}}, function(keys){
      expect(keys).to.have.property("secretkey");
      expect(keys).to.have.property("iv");
      expect(keys.secretkey.length).to.equal(128/8*2);
      expect(keys.iv.length).to.equal(128/8*2);
    }, fail);

    expect(fail).to.have.not.been.called;
  });

  it("AES encrypt/decrypt", function(){
    var sk = '75174B7CD709B84F35053B1855107EC6';
    var iv = '92587F0EF7AEDE613CD20725B5499649';
    var plaintext = '2be464fe54ccefa2c9bdc7231275a995';
    var ciphertext = '4fb2a388dabb4f11e71711c9279c5c496aed4f1d75e4115300fb30ff19ec323f9770be1945532377bb99d50bcee29667';

    $fh.sec({act:'encrypt', params:{key: sk, iv: iv, plaintext:plaintext, algorithm:'AES'}}, function(result){
      expect(ciphertext).to.equal(result.ciphertext);
    });

    $fh.sec({act:'decrypt', params:{key: sk, iv: iv, ciphertext:ciphertext, algorithm:'AES'}}, function(result){
      expect(plaintext).to.equal(result.plaintext);
    });
  });

  it("RSA encrypt", function(){
    var modulu = "a5261939975948bb7a58dffe5ff54e65f0498f9175f5a09288810b8975871e99\naf3b5dd94057b0fc07535f5f97444504fa35169d461d0d30cf0192e307727c06\n5168c788771c561a9400fb49175e9e6aa4e23fe11af69e9412dd23b0cb6684c4\nc2429bce139e848ab26d0829073351f4acd36074eafd036a5eb83359d2a698d3";
    var plaintext = "This is test";
    $fh.sec({act:'encrypt', params:{algorithm:'RSA', modulu: modulu, plaintext:plaintext}}, function(result){
      var pri = "8e9912f6d3645894e8d38cb58c0db81ff516cf4c7e5a14c7f1eddb1459d2cded\n4d8d293fc97aee6aefb861859c8b6a3d1dfe710463e1f9ddc72048c09751971c\n4a580aa51eb523357a3cc48d31cfad1d4a165066ed92d4748fb6571211da5cb1\n4bc11b6e2df7c1a559e6d5ac1cd5c94703a22891464fba23d0d965086277a161";
      var p = "d090ce58a92c75233a6486cb0a9209bf3583b64f540c76f5294bb97d285eed33\naec220bde14b2417951178ac152ceab6da7090905b478195498b352048f15e7d";
      var q = "cab575dc652bb66df15a0359609d51d1db184750c00c6698b90ef3465c996551\n03edbf0d54c56aec0ce3c4d22592338092a126a0cc49f65a4a30d222b411e58f";
      var dmp1 = "1a24bca8e273df2f0e47c199bbf678604e7df7215480c77c8db39f49b000ce2c\nf7500038acfff5433b7d582a01f1826e6f4d42e1c57f5e1fef7b12aabc59fd25";
      var dmq1 = "3d06982efbbe47339e1f6d36b1216b8a741d410b0c662f54f7118b27b9a4ec9d\n914337eb39841d8666f3034408cf94f5b62f11c402fc994fe15a05493150d9fd";
      var coeff = "3a3e731acd8960b7ff9eb81a7ff93bd1cfa74cbd56987db58b4594fb09c09084\ndb1734c8143f98b602b981aaa9243ca28deb69b5b280ee8dcee0fd2625e53250";
      expect(result).to.have.property("ciphertext");
    });
  });

  it("hash", function(){
    var hash_plain_text = "This is to test hash";
    var expected_md5_hash = "ee1d3042dc4d6cc9995665b667f1d45b";
    var expected_sha1_hash = "0f6671c91c659e162815bef002b36a90ba961306";
    var expected_sha256_hash = "77593f2fe4df58d6d11f9b31dcc6e7f55ec63d42ad87ea0df6a94b81b9307941";
    var expected_sha512_hash = "79d598a87aca45e51bd6c644976c20d6f7bb1cc32d635b350b24b2cd16a025e41d30df2a8696916e896c9a98e2b4bc62c05922c7e340c57e14e5d623af77e5b6";

    $fh.hash({algorithm:'md5', text: hash_plain_text}, function(result){
      expect(expected_md5_hash).to.equal(result.hashvalue);
    });

    $fh.hash({algorithm:'sha1', text: hash_plain_text}, function(result){
      expect(expected_sha1_hash).to.equal(result.hashvalue);
    });

    $fh.hash({algorithm:'sha256', text: hash_plain_text}, function(result){
      expect(expected_sha256_hash).to.equal(result.hashvalue);
    });

    $fh.hash({algorithm:'sha512', text: hash_plain_text}, function(result){
      expect(expected_sha512_hash).to.equal(result.hashvalue);
    });
  });
})
},{"../../src-cov/feedhenry":"f312fA","../../src/feedhenry":76,"chai":5,"process":49,"sinon-chai":50}],113:[function(require,module,exports){
var process = require("process");
if(document && document.location){
  if(document.location.href.indexOf("coverage=1") > -1){
    process.env.LIB_COV = 1;
  }
}
var syncClient = process.env.LIB_COV? require("../../src-cov/modules/sync-cli") : require("../../src/modules/sync-cli");
var chai = require('chai');
var expect = chai.expect;
var sinonChai = require('sinon-chai');
var _ = require("underscore");

chai.use(sinonChai);

//work around phantomjs's issue: https://github.com/ariya/phantomjs/issues/10647
var fakeNavigator = {};
for (var i in navigator) { 
    fakeNavigator[i] = navigator[i];
}
fakeNavigator.onLine = true;
navigator = fakeNavigator;

syncClient.init({
  do_console_log: true,
  sync_frequency: 1,
  sync_active: false,
  storage_strategy: ['memory'],
  crashed_count_wait: 0
});

describe("test sync framework offline", function(){
  this.timeout(5000);
  var dataSetId = "testDataset";
  before(function(done){
    syncClient.manage(dataSetId, null, null, null, done);
  });

  beforeEach(function(){

  });

  afterEach(function(done){
    syncClient.notify(undefined);
    syncClient.stopSync(dataSetId, done, done);
  });

  it("sync.manage", function(done){
    var opts = {"file_system_quota": 1*1024*1024, crashed_count_wait: 5};
    var qp = {"query":"test"};
    var meta_data = {"user": "test"};
    syncClient.manage(dataSetId, opts, qp, meta_data, function(){
      syncClient.getDataset(dataSetId, function(dataset){
        expect(dataset.config.file_system_quota).to.equal(1*1024*1024);
        expect(dataset.config.crashed_count_wait).to.equal(5);
        expect(dataset.config.do_console_log).to.equal(true);
        expect(dataset.query_params).equal(qp);
        expect(dataset.meta_data).equal(meta_data);

        expect(dataset.meta).to.be.empty;
        done();
      });
    });
  });

  it("sync.setConfig/getConfig", function(done){
    var opts = {"file_system_quota": 10*1024*1024, crashed_count_wait: 10};
    var fail = sinon.spy();
    syncClient.setConfig(dataSetId, opts, function(conf){
      expect(fail).to.have.not.been.called;

      syncClient.getConfig(dataSetId, function(config){
        expect(conf.file_system_quota).to.equal(10*1024*1024);
        expect(conf.crashed_count_wait).to.equal(10);

        expect(conf.do_console_log).to.equal(true);
        done();
      });
    }, fail);
  });

  it("sync.getQueryParams/setQueryParams", function(done){
    var qp = {"q":"t"};
    var fail = sinon.spy();

    syncClient.setQueryParams(dataSetId, qp, function(){
      expect(fail).have.not.been.called;

      syncClient.getQueryParams(dataSetId, function(query){
        expect(query).equal(qp);
        done();
      });

    }, fail);
  });

  it("sync.getMetaData/setMetaData", function(done){
    var mdata = {meta:"test"};

    var fail = sinon.spy();
    syncClient.setMetaData(dataSetId, mdata, function(){
      expect(fail).have.not.been.called;
      syncClient.getMetaData(dataSetId, function(meta){
        expect(meta).equal(mdata);
        done();
      });
    }, fail);
  });



  it("sync.notify", function(done){
    var startCallback = sinon.spy();
    var failCallback = sinon.spy();
    var compCallback = sinon.spy();


    syncClient.notify(function(e){
      switch(e.code){
        case "sync_started":
          startCallback(e.code);
          break;
        case "sync_failed":
          failCallback(e.code);
          break;
        case "sync_complete":
          compCallback();
          break;
        default:
          break;
      }
    });

    syncClient.startSync(dataSetId, function(){

      setTimeout(function(){
        expect(startCallback).to.have.been.called;
        expect(failCallback).to.have.been.called;
        expect(failCallback).to.have.been.calledWith('sync_failed');

        expect(compCallback).to.have.not.been.called;

        syncClient.stopSync(dataSetId, function(){
          done();
        });

      }, 600);

    });
  });

  var uid;

  it("sync.doCreate", function(done){
    var success = sinon.spy();
    var fail = sinon.spy();

    var updateCB = sinon.spy();

    var data = {"name": "item1"};
    var hash = syncClient.generateHash(data);
    uid = hash;

    syncClient.notify(function(e){
      switch(e.code){
        case 'local_update_applied':
          updateCB(e.dataset_id, e.uid, e.code, e.message);
          break;
        default:
          break;
      }
    })

    syncClient.doCreate(dataSetId, data, function(){

      expect(fail).to.have.not.been.called;
      //now the new data should be in the dataset as well as the pending set
      var getFail = sinon.spy();
      syncClient.getDataset(dataSetId, function(dataset){
        expect(getFail).to.have.not.been.called;

        //the current dataset should have the new data entry
        expect(dataset.data).to.have.keys(hash);
        expect(JSON.stringify(dataset.data[hash].data)).to.equal(JSON.stringify(data));

        //the new data entry should be added to the pending data
        expect(_.size(dataset.pending)).to.equal(1);
        var pendingObj = _.values(dataset.pending)[0];
        console.log(pendingObj);
        expect(pendingObj.action).to.equal("create");
        expect(pendingObj.inFlight).to.be.false;
        expect(pendingObj.uid).to.equal(hash);
        expect(JSON.stringify(pendingObj.post)).to.equal(JSON.stringify(data));
        expect(pendingObj.postHash).to.equal(hash);
        expect(pendingObj.pre).to.be.undefined;

        var meta = dataset.meta[hash];
        expect(meta.fromPending).to.be.true;
        expect(meta.pendingUid).to.equal(pendingObj.hash);

        //the notification function is called inside a setTimeout wrapper, so need to wait another 1ms to make sure
        //the notification does get invoked.
        setTimeout(function(){
          expect(updateCB).to.have.been.called;
          expect(updateCB).to.have.been.calledWith(dataSetId, null, "local_update_applied", "create");
          done();
        }, 1);
        
      }, getFail);

    }, fail);

  });


  it("sync.doUpdate", function(done){
    var success = sinon.spy();
    var fail = sinon.spy();

    var updateCB = sinon.spy();

    var data = {"name": "item1_updated"};
    var hash = syncClient.generateHash(data);

    syncClient.notify(function(e){
      switch(e.code){
        case 'local_update_applied':
          updateCB(e.dataset_id, e.uid, e.code, e.message);
          break;
        default:
          break;
      }
    });

    syncClient.doUpdate(dataSetId, uid, data, function(){
      expect(fail).to.have.not.been.called;

      var getFail = sinon.spy();

      syncClient.getDataset(dataSetId, function(dataset){
        expect(getFail).to.have.not.been.called;

        //now the dataset should have the updated data
        expect(JSON.stringify(dataset.data[uid].data)).to.equal(JSON.stringify(data));

        //check pending records, since we are updating a pending data record,
        //there should still only one pending data entry
        expect(_.size(dataset.pending)).to.equal(1);
        var pendingObj = _.values(dataset.pending)[0];

        console.log(pendingObj);
        //it should still be "create" action
        expect(pendingObj.action).to.equal("create");
        expect(pendingObj.inFlight).to.be.false;
        expect(pendingObj.uid).to.equal(uid);
        expect(JSON.stringify(pendingObj.post)).to.equal(JSON.stringify(data));
        expect(pendingObj.postHash).to.equal(hash);
        expect(pendingObj.pre).to.be.undefined;

        //the notification function is called inside a setTimeout wrapper, so need to wait another 1ms to make sure
        //the notification does get invoked.
        setTimeout(function(){
          expect(updateCB).to.have.been.called;
          expect(updateCB).to.have.been.calledWith(dataSetId, uid, "local_update_applied", "update");
          syncClient.notify(undefined);
          done();
        }, 1);

      }, getFail);

    }, fail);
  });

  it("sync.doList success", function(done){ 
    var fail = sinon.spy();

    syncClient.doList(dataSetId, function(data){
      expect(fail).to.have.not.been.called;

      expect(_.size(data)).to.equal(1);
      expect(data[uid].data.name).to.equal("item1_updated");
      done();
    }, fail);

  });

  it("sync.doList fail", function(done){
    var success = sinon.spy();

    syncClient.doList("invalidDataSet", success, function(err){
      expect(err).to.equal("unknown_dataset invalidDataSet");
      done();
    });
  });

  it("sync.doRead success", function(done){
    var fail = sinon.spy();

    syncClient.doRead(dataSetId, uid, function(data){
      expect(fail).to.have.not.been.called;
      expect(data.data.name).equal("item1_updated");
      done();
    }, fail);
  });

  it("sync.doRead fail", function(done){
    var success = sinon.spy();

    syncClient.doRead(dataSetId, "invalidid", success, function(err){
      expect(success).to.have.not.been.called;
      expect(err).to.equal("unknown_uid");
      done();
    });
  });

  it("sync.getPending", function(done){
    var fail = sinon.spy();

    syncClient.getPending(dataSetId, function(pending){
      expect(fail).have.not.been.called;
      expect(_.size(pending)).to.equal(1);
      done();
    }, fail);
  });

  it("sync.stopSync/startSync", function(done){

    var cb1 = sinon.spy();
    var cb2 = sinon.spy();

    syncClient.stopSync(dataSetId);

    syncClient.notify(function(e){
      console.log(e);
      switch(e.code){
        case "sync_started":
          cb1(e.code);
          break;
        case "sync_failed":
          cb2(e.code);
          break;
        default:
          break;
      }
    });

    setTimeout(function(){
      //a syncLoop should already be run, but since we stopped sync,
      //none of the notifications should be fired
      expect(cb1).not.have.been.called;
      expect(cb2).not.have.been.called;

      //start sync
      syncClient.startSync(dataSetId, function(){
        setTimeout(function(){
          expect(cb1).have.been.calledOnce;
          expect(cb2).have.been.calledOnce;

          done();
        }, 1001);
      });
      
    }, 1001);
  });

  it("sync.doDelete", function(done){
    var fail = sinon.spy();

    syncClient.doDelete(dataSetId, uid, function(dataset){
      expect(fail).to.have.not.been.called;

      //the data should be gone now
      expect(_.size(dataset.data)).to.equal(0);
      //the pending data should be gone as well
      expect(_.size(dataset.pending)).to.equal(0);
      done();
    }, fail);
  });

  it("sync.doSync", function(done){

    var cb1 = sinon.spy();
    var cb2 = sinon.spy();


    syncClient.notify(function(e){
      console.log(e);
      switch(e.code){
        case "sync_started":
          cb1(e.code);
          break;
        case "sync_failed":
          cb2(e.code);
          break;
        default:
          break;
      }
    });

    //start sync
    syncClient.startSync(dataSetId, function(){
      syncClient.doSync(dataSetId, function(){
        //once doSync is called, a sync loop should happen in next 500ms
        //no matter what the value of sync freqency
        setTimeout(function(){
          expect(cb1).have.been.calledOnce;
          expect(cb2).have.been.calledOnce;

          done();
        }, 501);
      });
    });
  });

  it("sync.forceSync", function(done){
    var cb1 = sinon.spy();
    var cb2 = sinon.spy();


    syncClient.notify(function(e){
      console.log(e);
      switch(e.code){
        case "sync_started":
          cb1(e.code);
          break;
        case "sync_failed":
          cb2(e.code);
          break;
        default:
          break;
      }
    });

    //sync is stopped, but if forceSync is called, a sync loop will still happen
    syncClient.forceSync(dataSetId, function(){
      //once doSync is called, a sync loop should happen in next 500ms
      //no matter what the value of sync freqency
      setTimeout(function(){
        expect(cb1).have.been.calledOnce;
        expect(cb2).have.been.calledOnce;

        done();
      }, 501);
    });
  });
});
},{"../../src-cov/modules/sync-cli":73,"../../src/modules/sync-cli":105,"chai":5,"process":49,"sinon-chai":50,"underscore":52}],114:[function(require,module,exports){
var process = require("process");
if(document && document.location){
  if(document.location.href.indexOf("coverage=1") > -1){
    process.env.LIB_COV = 1;
  }
}

var syncClient = process.env.LIB_COV? require("../../src-cov/modules/sync-cli") : require("../../src/modules/sync-cli");
var chai = require('chai');
var expect = chai.expect;
var sinonChai = require('sinon-chai');
var _ = require("underscore");

chai.use(sinonChai);

//work around phantomjs's issue: https://github.com/ariya/phantomjs/issues/10647
var fakeNavigator = {};
for (var i in navigator) { 
    fakeNavigator[i] = navigator[i];
}
fakeNavigator.onLine = true;
navigator = fakeNavigator;

var dataSetId = "myShoppingList";
var onSync = function(cb){
  syncClient.forceSync(dataSetId, function(){
    setTimeout(function(){
      cb();
    }, 501);
  });
}

syncClient.init({
  do_console_log: true,
  sync_frequency: 1,
  sync_active: false,
  storage_strategy: ['memory'],
  crashed_count_wait: 0
});

describe("test sync framework online with fake XMLHttpRequest", function(){
  this.timeout(10000);
  var header = { "Content-Type": "application/json" };
  var xhr, requests;
  before(function(done){
    syncClient.manage(dataSetId, {"sync_active": false}, {}, {}, done);
  });

  beforeEach(function(done){
    xhr = sinon.useFakeXMLHttpRequest();
    requests = [];

    xhr.onCreate = function(req){
      console.log("Got sync request", req);
      requests.push(req);
    }

    syncClient.clearPending(dataSetId, function(){
      done(); 
    });
  });

  afterEach(function(done){
    xhr.restore();
    syncClient.notify(undefined);
    syncClient.stopSync(dataSetId, done, done);
  });

  it("load initial dataset from remote", function(done){
    //since we want to check what requests have been sent and their data,
    //we turn off sync and use forceSync to control sync loop
    onSync(function(){
      //verify there is one request is in the queue
      expect(requests.length).to.equal(1);

      var reqObj = requests[0];
      expect(reqObj.url).to.have.string("/mbaas/sync/" + dataSetId);
      expect(reqObj.method.toLowerCase()).to.equal("post");
      var reqBody = JSON.parse(reqObj.requestBody);
      expect(reqBody.fn).to.equal("sync");
      expect(reqBody.pending).is.empty;

      //return hash
      var mockHash = "97d170e1550eee4afc0af065b78cda302a97674c";
      reqObj.respond(200, header, JSON.stringify({
        "hash": mockHash,
        "records": {},
        "updates": {}
      }));

      //server turned empty dataset, then the client dataset should be empty as well
      syncClient.getDataset(dataSetId, function(dataset){
        expect(dataset.data).is.empty;
        expect(dataset.hash).to.equal(mockHash);
        done();
      });
    });
  });

  it("try create a new record", function(done){

    var record = {"name":"item1", "created": 1396537178817};

    onSync(function(){
      expect(requests.length).to.equal(1);
      var reqObj = requests[0];
      var reqBody = JSON.parse(reqObj.requestBody);
      var mockHash = "97d170e1550eee4afc0af065b78cda302a97674c";
      expect(reqBody.dataset_hash).to.equal(mockHash);

      reqObj.respond(200, header, JSON.stringify({
        "updates": {}
      }));

      //server turned empty dataset, then the client dataset should be empty as well
      syncClient.getDataset(dataSetId, function(dataset){
        expect(dataset.data).is.empty;
        expect(dataset.hash).to.equal(mockHash);

        //now add a new record
        
        var fail = sinon.spy();
        syncClient.doCreate(dataSetId, record, function(){
          //try to create the same record multiple times will generate the same hash, 
          //which will only create one pending request
          syncClient.doCreate(dataSetId, record, function(){
            expect(fail).to.have.not.been.called;
            //force sync and check the request params
            onSync(function(){
              checkUpdateRequest();
            });
          });

        }, fail);
      });
    });

    var checkUpdateRequest = function(){
      expect(requests.length).to.equal(2);
      var reqObj = requests[1];
      var reqBody = JSON.parse(reqObj.requestBody);
      expect(reqBody.pending.length).to.equal(1);

      var pendingObj = reqBody.pending[0];
      expect(pendingObj.inFlight).to.be.true;
      expect(pendingObj.action).to.equal("create");
      expect(JSON.stringify(pendingObj.post)).to.equal(JSON.stringify(record));

      var pendingHash = pendingObj.hash;

      var mockRes = {
        "hash": "424e4dff5aa27c2fb7bf0fc74d39b94dae4572eb",
        "updates": {
            "hashes": {
            },
            "applied": {
            }
        }
      }

      mockRes.updates.hashes[pendingHash] = {
        "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
        "type": "applied",
        "action": "create",
        "hash": "22870dd40b175292b3e60d63240d57b4b8b5a623",
        "uid": "533d775a8e8159d9c6000001",
        "msg": "''"
      }

      mockRes.updates.applied[pendingHash] = {
        "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
        "type": "applied",
        "action": "create",
        "hash": "22870dd40b175292b3e60d63240d57b4b8b5a623",
        "uid": "533d775a8e8159d9c6000001",
        "msg": "''"
      }

      reqObj.respond(200, header, JSON.stringify(mockRes));
      //the sync client should try to syncRecords immediately
      
      expect(requests.length).to.equal(3);
      var reqObj1 = requests[2];
      var reqBody1 = JSON.parse(reqObj1.requestBody);

      expect(reqObj1.url).to.have.string("/mbaas/sync/" + dataSetId);
      expect(reqBody1.fn).to.equal("syncRecords");
      expect(_.size(reqBody1.clientRecs)).to.equal(1); //there is one record in the client

      var mockRes1 = {
        "create": {
            "533d775a8e8159d9c6000001": {
                "data": {
                    "name": "item1",
                    "created": 1396537178817
                },
                "hash": "9cd301d6d51d038249dd7cfaf3ac88e4f76dfeb2"
            }
        },
        "update": {},
        "delete": {
            "9cd301d6d51d038249dd7cfaf3ac88e4f76dfeb2": {}
        },
        "hash": "424e4dff5aa27c2fb7bf0fc74d39b94dae4572eb"
      }

      reqObj1.respond(200, header, JSON.stringify(mockRes1));
      //verify local dataset contains the same data as server
      syncClient.getDataset(dataSetId, function(dataset){
        expect(_.size(dataset.data)).to.equal(1);
        console.log(dataset);
        expect(_.keys(dataset.data)[0]).to.equal("533d775a8e8159d9c6000001");
        expect(_.values(dataset.data)[0].hash).to.equal("9cd301d6d51d038249dd7cfaf3ac88e4f76dfeb2");
        expect(JSON.stringify(_.values(dataset.data)[0].data)).to.equal(JSON.stringify(record));
        expect(dataset.hash).to.equal("424e4dff5aa27c2fb7bf0fc74d39b94dae4572eb");
        done();
      });
      
    }
  });

  it("try to update an existing record ", function(done){
    var pre = {"name":"item1", "created": 1396537178817};
    var record = { "name": "item1_updat_failed", "created": 1396537178817};
    var update = { "name": "item1_updated", "created": 1396537178817};
    var uid = "533d775a8e8159d9c6000001";
    syncClient.doUpdate(dataSetId, uid, record, function(){

      onSync(function(){
        expect(requests.length).to.equal(1);
        var reqObj = requests[0];
        var reqBody = JSON.parse(reqObj.requestBody);
        expect(reqBody.pending.length).to.equal(1);

        var pendingObj = reqBody.pending[0];
        expect(pendingObj.inFlight).to.be.true;
        expect(pendingObj.action).to.equal("update");
        expect(JSON.stringify((pendingObj.pre))).to.equal(JSON.stringify((pre)));
        expect(JSON.stringify(pendingObj.post)).to.equal(JSON.stringify(record));

        //pretend to be offline or bad network
        reqObj.respond(0, null, null);
        //verify the data is marked with crashed
        syncClient.getDataset(dataSetId, function(dataset){
          expect(dataset.data[uid].data.name).to.equal("item1_updat_failed");
          console.log(dataset.pending);
          expect(_.size(dataset.pending)).to.equal(1);
          expect(_.values(dataset.pending)[0].crashed).to.be.true;

          //now update an already crashed record:
          syncClient.doUpdate(dataSetId, uid, update, function(){
            syncClient.getDataset(dataSetId, function(dataset){
              //at this point, there should be 2 pending objects
              expect(_.size(dataset.pending)).to.equal(2);

              var delayed = _.findWhere(dataset.pending, {delayed: true});
              var crashed = _.findWhere(dataset.pending, {crashed: true});
              expect(delayed).not.null;

              onSync(function(){
                expect(requests.length).to.equal(2);
                var reqObj1 = requests[1];
                var reqBody1 = JSON.parse(reqObj1.requestBody);
                expect(reqBody1.pending.length).to.equal(0); //one is crashed and the other is delayed

                reqObj1.respond(200, header, JSON.stringify({hash: dataset.hash})); //increase the crash count

                expect(crashed.crashedCount).to.equal(1);

                onSync(function(){

                  //do another sync, this time the crash data should be sent again
                  //as the crashCount is greater than the threshold
                  expect(requests.length).to.equal(3);
                  var reqObj2 = requests[2];
                  var reqBody2 = JSON.parse(reqObj2.requestBody);
                  expect(reqBody2.pending.length).to.equal(1);
                  var pendingHash = reqBody2.pending[0].hash;
                  var predata = reqBody2.pending[0].pre;
                  var prehash = reqBody2.pending[0].preHash;


                  var mockRes = {
                    "hash": "424e4dff5aa27c2fb7bf0fc74d39b94dae4572eb",
                    "updates": {
                      "hashes": {
                      },
                      "collisions": {
                      }
                    }, 
                    "records": {

                    }
                  }

                   mockRes.updates.hashes[pendingHash] = mockRes.updates.collisions[pendingHash] = {
                    "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
                    "type": "collision",
                    "action": "update",
                    "hash": pendingHash,
                    "uid": "533d775a8e8159d9c6000001",
                    "msg": "''"
                  }
                  
                  mockRes.records[uid] = {
                    data: predata,
                    hash: prehash
                  }


                  reqObj2.respond(200, header, JSON.stringify(mockRes));

                  expect(_.size(dataset.pending)).to.equal(1);

                  expect(_.values(dataset.pending)[0].pre.name).to.equal("item1");

                  onSync(function(){
                    expect(requests.length).to.equal(4);
                    var reqObj3 = requests[3];
                    var reqBody3 = JSON.parse(reqObj3.requestBody);

                    expect(reqBody3.pending.length).to.equal(1);
                    var pendingHash = reqBody3.pending[0].hash;
                    var predata = reqBody3.pending[0].pre;
                    var prehash = reqBody3.pending[0].preHash;

                    var mockRes = {
                      "hash": "932b0b7e6862d4634dc6f418da717c78c1a1d742",
                      "updates": {
                        "hashes": {
                        },
                        "applied": {
                        }
                      }
                    }

                     mockRes.updates.hashes[pendingHash] = mockRes.updates.applied[pendingHash] = {
                      "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
                      "type": "applied",
                      "action": "update",
                      "hash": pendingHash,
                      "uid": "533d775a8e8159d9c6000001",
                      "msg": "''"
                    }

                    reqObj3.respond(200, header, JSON.stringify(mockRes));

                    //should start syncRecords
                    expect(requests.length).to.equal(5);

                    var reqObj4 = requests[4];
                    var mockRes1 = {
                        "create": {},
                        "update": {},
                        "delete": {},
                        "hash": "932b0b7e6862d4634dc6f418da717c78c1a1d742"
                    }
                    reqObj4.respond(200, header, JSON.stringify(mockRes1));

                    expect(dataset.hash).to.equal("932b0b7e6862d4634dc6f418da717c78c1a1d742");
                    expect(_.size(dataset.pending)).to.equal(0);
                    expect(dataset.data[uid].data.name).to.equal("item1_updated");

                    done();
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  it("test create & delete", function(done){
    var record = {name:"item3"};
    syncClient.doCreate(dataSetId, record, function(res){
      syncClient.getDataset(dataSetId, function(dataset){
        expect(_.size(dataset.pending)).to.equal(1);
        var uid = res.uid;
        syncClient.doDelete(dataSetId, uid, function(res){
          expect(_.size(dataset.pending)).to.equal(0);
          done();
        });
      });
    });
  });

  it("test remote data change", function(done){
    onSync(function(){
      expect(requests.length).to.equal(1);

      var reqObj = requests[0];
      var reqBody = JSON.parse(reqObj.requestBody);

      expect(reqBody.pending.length).to.equal(0);

      var mockRes = {
        hash : "21daec303c7d93b7d806823eaaaab6b82f036097"
      }

      reqObj.respond(200, header, JSON.stringify(mockRes));

      expect(requests.length).to.equal(2);

      var reqObj1 = requests[1];
      var reqBody1 = JSON.parse(reqObj1.requestBody);
      expect(_.size(reqBody1.clientRecs)).to.equal(1);

      var mockRes1 = {
        hash : "21daec303c7d93b7d806823eaaaab6b82f036097",
        create: {
          "533d77a38e8159d9c6000003": {
            "data": {
                "name": "item2",
                "created": 1396537250692
            },
            "hash": "9f37f46126a1c18ff3b13de06d8fc6a8f4fd1167"
          }
        }
      }

      reqObj1.respond(200, header, JSON.stringify(mockRes1));

      syncClient.getDataset(dataSetId, function(dataset){
        expect(_.size(dataset.data)).to.equal(2);
        expect(dataset.data['533d77a38e8159d9c6000003'].data.name).to.equal("item2");
        done();
      });
    });
  });

  it("test delete existing data", function(done){
    var uid = "533d77a38e8159d9c6000003";
    var record = {name:"item_updated_again"};
    syncClient.doUpdate(dataSetId, uid, record, function(){
      syncClient.getDataset(dataSetId, function(dataset){
        expect(_.size(dataset.pending)).to.equal(1);

        syncClient.doDelete(dataSetId, uid, function(){

          expect(_.size(dataset.pending)).to.equal(1);
          expect(_.values(dataset.pending)[0].pre.name).to.equal("item2");

          onSync(function(){
            expect(requests.length).to.equal(1);

            var reqObj = requests[0];
            var reqBody = JSON.parse(reqObj.requestBody);

            expect(reqBody.pending.length).to.equal(1);
            expect(reqBody.pending[0].uid).to.equal(uid);

            var pendingHash = reqBody.pending[0].hash;

            var mockRes = {
                "hash": "f9f17defccf22d9bf1d0fb73e1f6af6b67c266e8",
                "updates": {
                  "hashes": {},
                  "applied": {}
                }
            }

            mockRes.updates.hashes[pendingHash] = mockRes.updates.applied[pendingHash] = {
              "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
              "type": "applied",
              "action": "delete",
              "hash": pendingHash,
              "uid": "533d77a38e8159d9c6000003",
              "msg": "''"
            }

            reqObj.respond(200, header, JSON.stringify(mockRes));

            expect(requests.length).to.equal(2);
            
            var reqObj1 = requests[1];
            var reqBody1 = JSON.parse(reqObj1.requestBody);
            expect(reqBody1.fn).to.equal("syncRecords");

            expect(_.size(reqBody1.clientRecs)).to.equal(1);

            var mockRes1 = {
              "create": {},
              "update": {},
              "delete": {},
              "hash": "f9f17defccf22d9bf1d0fb73e1f6af6b67c266e8"
            }

            reqObj1.respond(200, header, JSON.stringify(mockRes1));

            syncClient.getDataset(dataSetId, function(dataset){
              expect(dataset.hash).to.equal("f9f17defccf22d9bf1d0fb73e1f6af6b67c266e8");
              expect(_.size(dataset.data)).to.equal(1);
              expect(_.size(dataset.pending)).to.equal(0);
              done();
            });
          });
        });
      });
    });
  });

  it("test update pending data", function(done){
    var record = {name:"item4"};
    var updated = {name:"item4_updated"};
    syncClient.doCreate(dataSetId, record, function(res){
      onSync(function(){
        expect(requests.length).to.equal(1);
        var reqObj = requests[0];
        var reqBody = JSON.parse(reqObj.requestBody);

        var pendingObj = reqBody.pending[0];
        var pendingHash = pendingObj.hash;

        //at this point, the new record should be inflight, try to update it
        syncClient.doUpdate(dataSetId, res.uid, updated, function(){
          //then got response for the update
          var mockRes = {
            "hash": "424e4dff5aa27c2fb7bf0fc74d39b944823234832",
            "updates": {
                "hashes": {
                },
                "applied": {
                }
            },
            records: {
              "533d775a8e8159d9c6000005": {
                "data": {
                  "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
                  "type": "applied",
                  "action": "create",
                  "hash": pendingHash,
                  "uid": "533d775a8e8159d9c6000005",
                  "msg": "''"
                },
                "hash": pendingHash
              }
            }
          }

          mockRes.updates.hashes[pendingHash] = {
            "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
            "type": "applied",
            "action": "create",
            "hash": pendingHash,
            "uid": "533d775a8e8159d9c6000005",
            "msg": "''"
          }

          mockRes.updates.applied[pendingHash] = {
            "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
            "type": "applied",
            "action": "create",
            "hash": pendingHash,
            "uid": "533d775a8e8159d9c6000005",
            "msg": "''"
          }

          reqObj.respond(200, header, JSON.stringify(mockRes));

          syncClient.getDataset(dataSetId, function(dataset){
            var pending = dataset.pending;
            expect(_.size(pending)).to.equal(1);
            var pendingObj = _.values(pending)[0];
            expect(pendingObj.preHash).to.equal(pendingHash);
            expect(pendingObj.uid).to.equal("533d775a8e8159d9c6000005");
            done();
          });
        });
      });
    });
  });

  it("test create pending data", function(done){
    var record = {name:"item5"};
    onSync(function(){
      var reqObj = requests[0];
      var reqBody = JSON.parse(reqObj.requestBody);

      syncClient.doCreate(dataSetId, record, function(res){
        //at this point, there is one pending create, 
        syncClient.getDataset(dataSetId, function(dataset){
          var pendings = dataset.pending;
          console.log("pending", pendings);
          var pendingObj = _.values(pendings)[0];
          expect(pendingObj.action).to.equal("create");
          var pendingHash = pendingObj.hash;
          var mockRes = {
            "updates": {
                "hashes": {
                },
                "applied": {
                }
            },
            records: {
              "533d775a8e8159d9c6000006": {
                "data": {
                  "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
                  "type": "applied",
                  "action": "create",
                  "hash": pendingHash,
                  "uid": "533d775a8e8159d9c6000006",
                  "msg": "''"
                },
                "hash": pendingHash
              }
            }
          }

          mockRes.updates.hashes[pendingHash] = {
            "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
            "type": "applied",
            "action": "create",
            "hash": pendingHash,
            "uid": "533d775a8e8159d9c6000006",
            "msg": "''"
          }

          mockRes.updates.applied[pendingHash] = {
            "cuid": "9F3930FE2A434E0BA0AD6F5A40C77CD7",
            "type": "applied",
            "action": "create",
            "hash": pendingHash,
            "uid": "533d775a8e8159d9c6000006",
            "msg": "''"
          }

          reqObj.respond(200, header, JSON.stringify(mockRes));

          expect(pendingObj.action).to.equal("update");

          done();

        });
      });
    });
  });

  // it("test updateNewDataFromInFlight", function(done){
  //   var record = {name:"item6"};
  //   syncClient.doCreate(dataSetId, record, function(res){
  //     onSync(function(){
  //       var reqObj = requests[0];
  //       var reqBody = JSON.parse(reqObj.requestBody);
  //       var pendingObj = reqBody.pending[0];
  //       var mockRes = {
  //         records : {

  //         }
  //       }

  //       reqObj.respond(200, header, JSON.stringify(mockRes));

  //       syncClient.getDataset(dataSetId, function(dataset){
  //         expect(dataset.data[pendingObj.uid].data.name).to.equal("item6");
  //         done();
  //       });
  //     });
  //   });
  // });

  it("test updateNewDataFromInFlight create/update", function(done){
    var record = {name:"item7"};
    syncClient.doCreate(dataSetId, record, function(res){
      onSync(function(){
        var reqObj = requests[0];
        var reqBody = JSON.parse(reqObj.requestBody);
        var pendingObj = reqBody.pending[0];
        var mockRes = {
          records : {

          }
        }

        reqObj.respond(200, header, JSON.stringify(mockRes));
        
        syncClient.getDataset(dataSetId, function(dataset){
          expect(dataset.data[pendingObj.uid].data.name).to.equal("item7");
          
          syncClient.clearPending(dataSetId, function(){
            syncClient.doUpdate(dataSetId, res.uid, {name:"item8"}, function(){
              onSync(function(){
                var reqObj1 = requests[1];
                var reqBody1 = JSON.parse(reqObj1.requestBody);
                var pendingObj1 = reqBody1.pending[0];
                
                var mockRes1 = {
                  records : {

                  }
                }
                mockRes1.records[pendingObj1.uid] = {
                   data: {
                     name: "item9"
                   },
                   hash: "424e4dff5aa27c2fb7bf0fc74d39b944823asdfhfj"
                }
                reqObj1.respond(200, header, JSON.stringify(mockRes1));

                expect(dataset.data[pendingObj1.uid].data.name).to.equal("item8");

                syncClient.clearPending(dataSetId, function(){
                  syncClient.doDelete(dataSetId, res.uid, function(){
                    onSync(function(){
                      var reqObj2 = requests[2];
                      var reqBody2 = JSON.parse(reqObj2.requestBody);
                      var pendingObj2 = reqBody2.pending[0];
                      
                      var mockRes2 = {
                        records : {

                        }
                      }
                      mockRes2.records[pendingObj2.uid] = {
                         data: {
                           name: "item10"
                         },
                         hash: "424e4dff5aa27c2fb7bf0fc74d39b94482adfesfef"
                      }
                      reqObj2.respond(200, header, JSON.stringify(mockRes1));

                      done();
                    });
                  });
                });

              });
            });
          });
        });
      });
    });
  });

});
},{"../../src-cov/modules/sync-cli":73,"../../src/modules/sync-cli":105,"chai":5,"process":49,"sinon-chai":50,"underscore":52}]},{},[108])
//# sourceMappingURL=data:application/json;base64,
